*DECK MAIN
      OVERLAY(MARK4,0,0)
      PROGRAM MAIN (INPUT=129,OUTPUT,PUNCH=129,TAPE5=INPUT,TAPE6=OUTPUT,-
     1  TAPE7=PUNCH,TAPE1=129,TAPE2=129,TAPE3=129,TAPE4=129,TAPE8=129,  -
     2  TAPE9=129,TAPE10=129,TAPE11=129,TAPE12=129,TAPE13=129,          -
     3  TAPE14=129)
C***********************************************************************
C*****                                                             *****
C** SUPERSONIC-HYPERSONIC ARBITRARY-BODY AERODYNAMIC COMPUTER PROGRAM **
C*****                       CDC/IBM 360 MODEL                     *****
C***********************************************************************
C
C     THIS IS THE MARK IV MOD 2 VERSION OF THE SUPERSONIC-HYPERSONIC
C     ARBITRARY-BODY FORCE ANALYSIS PROGRAM.  THE BASIC PROGRAM
C     WAS DEVELOPED AT THE DOUGLAS AIRCRAFT COMPANY, AIRCRAFT
C     DIVISION UNDER SPONSORSHIP OF THE AIR FORCE FLIGHT DYNAMICS LAB.
C
C******** THIS PROGRAM WAS WRITTEN BY A. E. GENTRY AND D. N. SMYTH *****
C***********************************************************************
C
C
C
C***** EXECUTIVE MAIN PROGRAM *****
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON INDEX4(3000),INDEX9( 500),INDX10(2000)
      DIMENSION  IPG(20),TITLE(15)
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER      PAGE,ERROR
C     EXTERNAL EROR
C     DEFINE FILE 4 (20000,25,U,ITAG4)
C     DEFINE FILE 9  (500,41,U,ITAG9)
C     DEFINE FILE 10(2000,25,U,ITAG10)
      CALL OPENMS (4,INDEX4,3001,0)
      CALL OPENMS (9,INDEX9,501,0)
      CALL OPENMS (10,INDX10,2001,0)
      ERROR = 0
      PAGE = 1
      TAPEIN = 5
      TAPEOT = 6
      TAPEA = 3
      TAPEB = 2
      TAPEC = 11
      TAPED = 14
      TAPEE = 12
      TAPEF = 13
      TAPEG = 7
      TAPEH = 15
      REWIND TAPEA
      REWIND TAPEB
      REWIND TAPEC
      REWIND TAPEE
      REWIND TAPEF
      REWIND 8
C
C **********************************************************************
C ***** READ EXECUTIVE FLAG CARD
      READ (TAPEIN,10) IEROR,INMONT
   10  FORMAT (2I1)
C     IF (IEROR .EQ. 0) CALL ERRSET (207,256,256,2,EROR,301)
C     CALL ERRSET (208,256,-1,1,1)
      IF (INMONT .EQ. 0) CALL MONITR
C
C ***** READ SYSTEM CONTROL CARD TO SELECT PROGRAMS TO BE USED AND ORDER
C ***** OF USE. A MAXIMUM OF 20 OPTIONS MAY BE USED.  THIS VERSION OF
C ***** THE PROGRAM WILL ALLOW ONLY OPTIONS  1, 2, 3, 4
C***********************************************************************
C
      READ (TAPEIN,20) IPG,CASE
   20 FORMAT (20I1,41X,A2)
      WRITE (6,30)
   30 FORMAT (1H1,////,/1H ,39H***SUPERSONIC-HYPERSONIC ARBITRARY-BODY  -
     1 50H AERODYNAMIC COMPUTER PROGRAM SYSTEM ************* ,///,1H ,  -
     2 10X,46HPROGRAM OPTIONS ARE IN THE FOLLOWING ORDER....   ,/1H  )
      IF (IPG(1) .EQ. 0) GO TO 220
C
C
      DO 80 I=1,20
      IF (IPG(I) .EQ. 0) GO TO 90
      IF (IPG(I) .GT. 5) GO TO 240
      IF (IPG(I) .EQ. 1) WRITE (TAPEOT,40) I
   40  FORMAT (1H0,15X,I2,30H  GEOMETRY PROGRAM  (OPTION 1) )
      IF (IPG(I) .EQ. 2) WRITE (TAPEOT,50) I
   50  FORMAT (1H0,15X,I2,33H  AERODYNAMIC PROGRAM  (OPTION 2)   )
      IF (IPG(I) .EQ. 3) WRITE (TAPEOT,60) I
   60  FORMAT (1H0,15X,I2,30H  GRAPHICS PROGRAM  (OPTION 3)   )
      IF (IPG(I) .EQ. 4) WRITE (TAPEOT,70) I
   70  FORMAT (1H0,15X,I2,31H  AUXILIARY PROGRAMS (OPTION 4)   )
C     IF (IPG(I) .EQ. 5) WRITE (TAPEOT,75) I
C  75  FORMAT (1H0,15X,I2,31H  WAVE DRAG PROGRAM  (OPTION 5)  )
   80 CONTINUE
   90 I = 0
C
  100 I = I + 1
      IF (IPG(I) .EQ. 0) GO TO 260
C
      IPROG = IPG(I)
      GO TO (110,120,130,140,145),IPROG
C 110 CALL GEOM
  110 CALL OVERLAY (5HMARK4,1,0,6HRECALL)
      GO TO 150
C
C 120 CALL AERO
  120 CALL OVERLAY (5HMARK4,2,0,6HRECALL)
      GO TO 150
C
C 130 CALL GRAPH
  130 CALL OVERLAY (5HMARK4,3,0,6HRECALL)
      GO TO 150
C
C 140 CALL AUXILI
  140 CALL OVERLAY (5HMARK4,4,0,6HRECALL)
      GO TO 150
C
  145 CONTINUE
C 145 CALL WVDRAG  ***WAVE DRAG NOT AVAILABLE OUTSIDE DOUGLAS***
  145 CALL OVERLAY (5HMARK4,5,0,6HRECALL)
C
  150 IF (ERROR .NE. 0) GO TO 200
      WRITE (TAPEOT,160)
  160 FORMAT (1H1,//////,1H0,40H******** MAIN PROGRAM NOW HAS CONTROL OF-
     1 16H SYSTEM ******** )
      IF (ERROR .EQ. 0) GO TO 100
      IF (ERROR .EQ. 2) GO TO 200
C
C
      WRITE (TAPEOT,170) I, ERROR
  170 FORMAT (1H0,36H*****AN ERROR HAS OCCURRED IN PHASE ,I3,           -
     1 61H AND WAS DETECTED AFTER RETURN TO THE MAIN EXECUTIVE ROUTINE.,-
     2 9H  ERROR =,I2)
C
  200 WRITE (TAPEOT,210)
  210 FORMAT (1H ,//,1H ,40H******** FATAL ERROR *** PROGRAM STOPPED )
      GO TO 280
C
C
C
  220 WRITE (TAPEOT,230)
  230 FORMAT (1H ,//,1H ,38H***** FIRST PHASE OPTION IS ZERO *****      -
     1 21H**** FATAL ERROR **** )
      GO TO 280
C
  240 WRITE (TAPEOT,250)
  250 FORMAT (1H ,//,1H ,42H***** PROGRAM OPTION IS GREATER THAN 5 ***  -
     1 22H***** FATAL ERROR ****  )
      GO TO 280
C
  260 WRITE (TAPEOT,270)
  270 FORMAT (1H ,//,1H ,44H***** PROGRAM HAS REACHED NORMAL TERMINATION-
     1  7H ******  )
  280 STOP
      END
*DECK MONI
      SUBROUTINE MONITR
C
C  THIS ROUTINE IS USED TO TRANSFER THE INPUT DATA TO A SCRATCH UNIT
C
C
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER  ERROR,PAGE,CASE
      DIMENSION  CARD(20),TITLE(15)
      DATA BLANK/4H    /
      CASE = 0
      DO 5 I=1,15
    5 TITLE(I) = BLANK
C
   10 CALL HEADER
      WRITE (TAPEOT,20)
   20 FORMAT (1H0,50HSUPERSONIC-HYPERSONIC ARBITRARY-BODY PROGRAM INPUT,-
     1  5H DATA ,/1H )
      WRITE (TAPEOT,25)
   25 FORMAT (1H ,49H0        1         2         3         4         , -
     1 31H5         6         7         8,/1H ,20H12345678901234567890, -
     2 60H123456789012345678901234567890123456789012345678901234567890/)
      I = 10
C
C  30 READ (TAPEIN,40,END=60) CARD
   30 READ (TAPEIN,40) CARD
      IF (EOF(5)) 60,41
   40  FORMAT (20A4)
   41 WRITE (1,40) CARD
      WRITE (TAPEOT,50) CARD
   50  FORMAT (1H ,20A4)
      I = I + 1
      IF (I .EQ. 51) GO TO 10
      GO TO 30
C
   60 REWIND 1
      TAPEIN = 1
      RETURN
      END
*DECK HEAD
      SUBROUTINE HEADER
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      INTEGER  PAGE, ERROR, CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      DIMENSION  TITLE(15)
C
C  PRINT OUT HEADER AT TOP OF EACH PAGE OF OUTPUT
      WRITE (TAPEOT,10) CASE,PAGE,TITLE
   10 FORMAT (1H1,46HSUPERSONIC/HYPERSONIC ARBITRARY-BODY PROGRAM, ,    -
     1 13HMARK IV MOD 2,/,1H0,6HCASE  ,2X,I2,85X,5HPAGE ,I4,/1H0,14A4,  -
     2  1A3)
C
C  STEP PAGE NUMBER BY ONE
      PAGE = PAGE + 1
C
      RETURN
      END
*DECK EROR
C     SUBROUTINE EROR
C
C *********************************************************************
C  THIS ROUTINE IS USED TO CAUSE AN ABEND DUMP FOR SYSTEM ERRORS
C  AS DIRECTED BY THE FIRST DATA CARD.
C *********************************************************************
C
C     DIMENSION A(2)
C
C   SET A PARAMETER THAT WILL USUALLY CAUSE AN ABEND
C      I = 100000
C      A(I) = 0.0
C     IF (I .GT. 1) STOP
C
C     RETURN
C     END
*DECK ARSI
      FUNCTION ARSIN(X)
C  THIS ROUTINE IS REQUIRED BECAUSE OF DIFFERENCES BETWEEN CDC AND IBM
C  FORTRAN.
      ARSIN = ASIN(X)
      RETURN
      END
*DECK ARCO
      FUNCTION ARCOS(X)
C  THIS ROUTINE IS REQUIRED BECAUSE OF DIFFERENCES BETWEEN CDC AND IBM
C  FORTRAN.
      ARCOS = ACOS(X)
      RETURN
      END
*DECK GEOM
      OVERLAY (MARK4,1,0)
      PROGRAM GEOM
C     SUBROUTINE GEOM
C
C **** THIS ROUTINE CONTROLS THE EXECUTION OF THE GEOMETRY GENERATION
C **** ROUTINES
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /GFLAG/IOUT,ISTAT3,IORIN,COMPIN
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /TAGS/ITAG4,ITAG9,ITAG10
C
      DIMENSION  XA(250),XB(250),YA(250),YB(250),ZA(250),ZB(250),       -
     1 XI(4),ETA(4),XIN(4),YIN(4),ZIN(4),TITLE(15),XPA(4),YPA(4),ZPA(4)
      DIMENSION CONFIG(15),IGEOM(10),E(25),EO(25),EP(25)
      DIMENSION ELEM(25),PANEL(100),IORN(100),SYMFCT(100),IFA(100)
C
      REAL  NX,NY,NZ,LEFCT
      LOGICAL  RFLAG, AFLAG, BFLAG
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER  STAT, STATT, PAGE, CASE, TYPE, ERROR, PRINTS, SYMFCT, SEQ
C
C
      ISTAT3 = 0
C
C  READ GEOMETRY CONTROL CARD
      READ (TAPEIN,10) IOUT,IREW,PRINTS,IQUAD,I3MAX,NEW,NPMAX,CONFIG
   10  FORMAT (1I2,5I1,1I2,15A4)
C  INITIALIZE ELEMENT DATA STORAGE UNIT IF REQUIRED
      DO 13 I=1,25
      E (I) = 0.0
      EP(I) = 0.0
   13  EO(I) = 0.0
      IF (NEW .EQ. 1) GO TO 15
      IG4 = 1
C     WRITE (4'IG4) CONFIG
      CALL WRITMS (4,CONFIG,15,IG4)
      IF (NPMAX .EQ. 0) NPMAX = 50
C  NREM IS THE NUMBER OF RECORDS PER ELEMENT
      NREM = 3
      NEXT = (NPMAX+1)*5
      NP = 0
      E(1) = NEXT
      E(2) = NP
      E(3) = NPMAX
      E(4) = NREM
      GO TO 19
   15 IG4 = 1
C     READ (4'IG4) CONFIG
      CALL READMS (4,CONFIG,15,IG4)
      IG4 = 2
C     READ (4'IG4) E
      CALL READMS (4,E,25,IG4)
      NEXT = E(1)
      NP   = E(2)
      NPMAX= E(3)
      NREM = E(4)
   19 CONTINUE
C
C  CHECK IF QUADRILATERALS ONLY ARE TO BE CALCULATED
      IF (IQUAD .EQ. 1) GO TO 110
      IF (IREW.EQ.0 .AND. IOUT.NE.5 .AND. IOUT.NE.1) REWIND IOUT
C  READ COMPONENT IDENTIFICATION CARD
   20 ISTAT3 = ISTAT3 + 1
      READ (TAPEIN,30) PANEL(ISTAT3),LAST,IORN(ISTAT3),IGEOM,           -
     1    SYMFCT(ISTAT3),IFA(ISTAT3),NADJ1,NADJ2,NADJ3,NADJ4
   30  FORMAT (A4,2I1,10I1,2I1,4I2)
      IORIEN = IORN(ISTAT3)
      COMPIN = PANEL(ISTAT3)
C
C
C ****************************
C  READ OR GENERATE ELEMENTS FOR EACH VEHICLE COMPONENT
      DO 90 I=1,10
       IF (IGEOM(I) .EQ. 0) GO TO 100
      IG = IGEOM(I)
      GO TO (40,50,60,70), IG
C  40 CALL IELE
   40 CALL OVERLAY (5HMARK4,1,1,6HRECALL)
      GO TO 80
C
C  50 CALL ELLIP
   50 CALL OVERLAY (5HMARK4,1,2,6HRECALL)
      GO TO 80
C  60 CALL CUBIC
   60 CALL OVERLAY (5HMARK4,1,3,6HRECALL)
      GO TO 80
C  70 CALL AIRCFT
   70 CALL OVERLAY (5HMARK4,1,4,6HRECALL)
C
   80 IF (ERROR .NE. 0) GO TO 420
   90 CONTINUE
C
  100 IF (LAST .EQ. 0) GO TO 20
C  THE GENERATION OF ALL ELEMENT DATA IS COMPLETED
      I3MAX = ISTAT3
C
  110 IF (IQUAD .EQ. 2) GO TO 420
      IF (IOUT .NE.5 .AND. IOUT .NE.1)  REWIND IOUT
      IG4 = I3MAX + 1
C
C
C****************************
C  ELEMENT DATA WILL NOW BE CONVERTED TO QUADRILATERALS
C     SET UP STARTING CONSTANTS
      ISTAT3 = 0
  120 CONTINUE
      ISTAT3 = ISTAT3 + 1
      IF (ISTAT3 .LE. NPMAX) GO TO 125
      WRITE (TAPEOT,122)
  122  FORMAT (1H0,46H**NUMBER OF PANELS EXCEEDS NPMAX**PROGRAM STOP  )
      STOP
  125 IFACT  = IFA(ISTAT3)
      IORIEN = IORN(ISTAT3)
C
       N = -1
      NN = -1
       KLCT = 0
       NPRT = 10
       L = 0
       IGT = 0
       AREAT = 0.0
       VOL = 0.0
C  READ SCALE FACTOR CARD IF REQUIRED
      IF (IFACT .EQ. 1) READ (TAPEIN,130) XSC,YSC,ZSC,DELX,DELY,DELZ
  130  FORMAT (6F10.0)
      IA = 0
      IB = 0
      IF (IORIEN .EQ. 2) IB = 1
      IF (IORIEN .EQ. 3) IA = 1
      IF (IORIEN .GT. 1) IORIEN = 1
      IF (IGTYPE .GT. 0) IGT = 1
C
C     READ IN ALL SURFACE DATA
      READ (IOUT,140) X,Y,Z,STAT,XX,YY,ZZ,STATT,CASE,SECT,TYPE,SEQ
  140 FORMAT(3F10.4,I1,3F10.4,I1,2X,I2,1A4,I2,4X,I4)
      STAT =IABS(STAT)
      STATT =IABS(STATT)
      IF (TYPE.NE.3) GO TO 430
      IF(STAT.EQ.2.OR.STATT.EQ.2)                                       -
     1      SECTS = SECT
       RFLAG = .FALSE.
       GO TO 180
  150 IF (RFLAG) GO TO 160
       RFLAG = .TRUE.
       X = XX
       Y = YY
       Z = ZZ
       STAT = STATT
       GO TO 170
  160 RFLAG = .FALSE.
      READ (IOUT,140) X,Y,Z,STAT,XX,YY,ZZ,STATT,CASE,SECT,TYPE,SEQ
      STAT =IABS(STAT)
      STATT =IABS(STATT)
      IF (TYPE.NE.3) GO TO 430
      IF(STAT.EQ.2.OR.STATT.EQ.2)                                       -
     1      SECTS = SECT
  170 IF (STAT .EQ. 0 .OR. STAT .EQ. 3) GO TO 260
      IF (STAT .EQ. 2) GO TO 270
      IF (.NOT. AFLAG) GO TO 270
       MC = M
  180 M = 1
       IF (STAT .EQ. 2) GO TO 240
       IF (.NOT. BFLAG) GO TO 220
  190 DO 200 J =1,MC
        XA(J) = XB(J)
        YA(J) = YB(J)
  200   ZA(J) = ZB(J)
  210 XB(1) = X
      YB(1) = Y
      ZB(1) = Z
      GO TO 150
  220 IF (AFLAG) GO TO 230
       BFLAG = .TRUE.
       GO TO 190
  230 AFLAG = .FALSE.
       GO TO 210
  240 AFLAG = .TRUE.
       BFLAG = .FALSE.
       N = N+1
      NN = NN + 1
  250 XA(M) = X
      YA(M) = Y
      ZA(M) = Z
      GO TO 150
  260 M = M + 1
      IF (AFLAG) GO TO 250
       XB(M) = X
       YB(M) = Y
       ZB(M) = Z
      IF (STAT .NE. 3) GO TO 150
  270 MMIN = MIN0 (M,MC) - 1
       NN2 = 1
       MC = M
      N = N + 1
      NN = NN + 1
       KLCT = KLCT + 1
       JJ = 0
C
C  BEGIN COMPUTATION OF SURFACE ELEMENT CHARACTERISTICS
      DO 390 I= 1,MMIN
      IIA = I + IA
      IIB = I + IB
      IF (IFACT.EQ.1) GO TO 280
        XIN(1) = XA(IIA )
        XIN(2) = XA(IIA +1)
        XIN(3) = XB(IIB +1)
        XIN(4) = XB(IIB )
        YIN(1) = YA(IIA )
        YIN(2) = YA(IIA +1)
        YIN(3) = YB(IIB +1)
        YIN(4) = YB(IIB )
        ZIN(1) = ZA(IIA )
        ZIN(2) = ZA(IIA +1)
        ZIN(3) = ZB(IIB +1)
        ZIN(4) = ZB(IIB )
      GO TO 290
C
  280   XIN(1) = XA(IIA )   * XSC + DELX
        XIN(2) = XA(IIA +1) * XSC + DELX
        XIN(3) = XB(IIB +1) * XSC + DELX
        XIN(4) = XB(IIB )   * XSC + DELX
        YIN(1) = YA(IIA )   * YSC + DELY
        YIN(2) = YA(IIA +1) * YSC + DELY
        YIN(3) = YB(IIB +1) * YSC + DELY
        YIN(4) = YB(IIB )   * YSC + DELY
        ZIN(1) = ZA(IIA )   * ZSC + DELZ
        ZIN(2) = ZA(IIA +1) * ZSC + DELZ
        ZIN(3) = ZB(IIB +1) * ZSC + DELZ
        ZIN(4) = ZB(IIB )   * ZSC + DELZ
C  FORM DIAGONAL VECTORS
  290  T1X = XIN(3) - XIN(1)
       T2X = XIN(4) - XIN(2)
       T1Y = YIN(3) - YIN(1)
       T2Y = YIN(4) - YIN(2)
       T1Z = ZIN(3) - ZIN(1)
       T2Z = ZIN(4) - ZIN(2)
C
C  FORM CROSS PRODUCT  N=T2 X T1
       NX = T2Y*T1Z - T1Y*T2Z
       NY = T1X*T2Z - T2X*T1Z
       NZ = T2X*T1Y - T1X*T2Y
       VN = SQRT ( NX*NX + NY*NY + NZ*NZ )
      IF (VN .EQ. 0.0) GO TO 300
C
C  FORM UNIT NORMAL VECTOR
       NX = NX / VN
       NY = NY / VN
       NZ = NZ / VN
C
C  COMPUTE AVERAGE POINT
  300 AVX = 0.25 * (XIN(1) + XIN(2) + XIN(3) +  XIN(4) )
       AVY = 0.25 * (YIN(1) + YIN(2) + YIN(3) + YIN(4) )
       AVZ = 0.25 * (ZIN(1) + ZIN(2) + ZIN(3) + ZIN(4) )
C
C  COMPUTE PROJECTION DISTANCE
       D = NX*(AVX - XIN(1)) + NY*(AVY - YIN(1)) + NZ*(AVZ-ZIN(1))
       PD = ABS(D)
C
       T = SQRT (T1X*T1X + T1Y*T1Y + T1Z*T1Z)
      IF (T .EQ. 0.0) GO TO 310
      T1X = T1X / T
       T1Y = T1Y / T
       T1Z = T1Z / T
C
  310 T2X = NY*T1Z - NZ*T1Y
       T2Y = NZ*T1X - NX*T1Z
       T2Z = NX*T1Y - NY*T1X
C
C  COMPUTE COORDINATES OF CORNER POINTS IN REFERENCE COORD. SYSTEM
      DO 320 J = 1,4
       XPA(J) = XIN(J) + NX*D
       YPA(J) = YIN(J) + NY*D
       ZPA(J) = ZIN(J) + NZ*D
       D = - D
       XDIF = XPA(J) - AVX
       YDIF = YPA(J) - AVY
       ZDIF = ZPA(J) - AVZ
C
C  TRANSFORM CORNER POINTS TO ELEMENT COORDINATE SYSTEM (XI,ETA) WITH
C   AVERAGE POINT AS ORIGIN
       XI(J) = T1X*XDIF + T1Y*YDIF + T1Z*ZDIF
  320  ETA(J)= T2X*XDIF + T2Y*YDIF + T2Z*ZDIF
      ETACK = ETA(2) - ETA(4)
      IF (ETACK .NE.0.0) GO TO 330
       XI0 = 0.0
       GO TO 340
C
C  COMPUTE CENTROID
  330 XI0 = .333333333 * (XI(4) * (ETA(1)-ETA(2)) + XI(2)               -
     1      * (ETA(4)-ETA(1))) / (ETA(2)-ETA(4))
  340 ETA0 = -.333333333 * ETA(1)
C
C  OBTAIN CORNER POINTS IN SYSTEM WITH CENTROID AS ORIGIN
       DO 350 J = 1,4
        XI(J) = XI(J) - XI0
  350   ETA(J) = ETA(J) - ETA0
C
C  TRANSFORM CENTROID TO REFERENCE COORDINATE SYSTEM
       XCENT = AVX + T1X*XI0 + T2X*ETA0
       YCENT = AVY + T1Y*XI0 + T2Y*ETA0
       ZCENT = AVZ + T1Z*XI0 + T2Z*ETA0
C
C  CONSTANTS FOR USE IN COMPUTING AREA OF ELEMENT
       XI3M1 = XI(3) - XI(1)
       ETA2M4 = ETA(2) - ETA(4)
C
C  COMPUTE AREA AND VOLUME OF ELEMENTS
       AREA = 0.5 * XI3M1 * ETA2M4
      AREAT = AREAT + AREA
       DELVOL = AREA * NY * YCENT
      VOL = VOL + DELVOL
      L = L + 1
      II = I
      IF (PRINTS.EQ.0) GO TO 380
C
C
C  PRINT RESULTS OF CALCULATIONS TO DETERMINE ELEMENT CHARACTERISTICS
      IF (NPRT .GE.9)  GO TO 360
       NPRT = NPRT + 1
      IF  (I .EQ. 1) GO TO 370
      WRITE (TAPEOT,450) I,XIN,NX,XCENT,AREA,L,YIN,NY,YCENT,DELVOL,     -
     1     ZIN,NZ,ZCENT,VOL
      GO TO 380
  360 NPRT = 0
      CALL HEADER
      WRITE (TAPEOT,480)
  370 WRITE (TAPEOT,460) N,I,XIN,NX,XCENT,AREA,L,YIN,NY,YCENT,DELVOL,   -
     1ZIN,NZ,ZCENT,VOL
C
C  SET UP DATA TO BE SAVED AND USED IN FORCE CALCULATIONS
  380 ELEM(1) = L
      ELEM(2) = N
      ELEM(3) = I
      ELEM(4) = NX
      ELEM(5) = NY
      ELEM(6) = NZ
      ELEM(7) = XCENT
      ELEM(8) = YCENT
      ELEM(9) = ZCENT
      ELEM(10) = AREA
      ELEM(11) = XIN(1)
      ELEM(12) = XIN(2)
      ELEM(13) = XIN(3)
      ELEM(14) = XIN(4)
      ELEM(15) = YIN(1)
      ELEM(16) = YIN(2)
      ELEM(17) = YIN(3)
      ELEM(18) = YIN(4)
      ELEM(19) = ZIN(1)
      ELEM(20) = ZIN(2)
      ELEM(21) = ZIN(3)
      ELEM(22) = ZIN(4)
      ELEM(23) = 0.0
      ELEM(24) = 0.0
      ELEM(25) = 0.0
C  SAVE ELEMENT DATA ON GEOMETRY SAVE UNIT
      IG4 = NEXT
C     WRITE (4'IG4) ELEM
      CALL WRITMS (4,ELEM,25,IG4)
      IF (L .EQ. 1) ISTART = IG4
      IF (NREM .EQ. 1) GO TO 385
      NREMM = NREM - 1
      DO 384 J=1,NREMM
      IG4 = IG4 + 1
C 384 WRITE (4'IG4) EO
  384 CALL WRITMS (4,EO,25,IG4)
  385 NEXT = NEXT + NREM
  390 CONTINUE
C
C  CHECK TO IDENTIFY END OF INPUT ELEMENTS
  400 IF (STAT .LT.2) GO TO 410
       NPRT = NPRT + 1
      WRITE (TAPEOT,470) SECTS,AREAT,L,VOL
      NN = NN - 1
      N  = - 1
C  TEST FOR END OF CASE
  410 IF (STAT .NE. 3) GO TO 180
C
C  RECORD TABLE OF CONTENTS DATA ON GEOMETRY SAVE UNIT
      EP(1) = ISTAT3
      EP(2) = PANEL(ISTAT3)
      EP(3) = ISTART
      EP(4) = L
      EP(5) = IORN(ISTAT3)
      EP(6) = SYMFCT(ISTAT3)
      EP(7) = N
      EP(8) = I
      EP(9) = NADJ1
      EP(10)= NADJ2
      EP(11)= NADJ3
      EP(12)= NADJ4
      NP = NP + 1
      IG4 = NP*5
C     WRITE (4'IG4) EP
      CALL WRITMS (4,EP,25,IG4)
      IG4 = IG4 + 1
C     WRITE (4'IG4) EO
      CALL WRITMS (4,EO,25,IG4)
      IG4 = IG4 + 1
C     WRITE (4'IG4) EO
C     CALL WRITMS (4,EO,25,IG4)
      IG4 = IG4 + 1
C     WRITE (4'IG4) EO
      CALL WRITMS (4,EO,25,IG4)
      IG4 = IG4 + 1
C     WRITE (4'IG4) EO
      CALL WRITMS (4,EO,25,IG4)
C     IF (ISTAT3 .GT. NP) NP = ISTAT3
      IF (ISTAT3 .LT. I3MAX) GO TO 120
      E(1) = NEXT
      E(2) = NP
      IG4 = 2
C     WRITE (4'IG4) E
      CALL WRITMS (4,E,25,IG4)
      EO(1) = NEXT
      IG4 = 3
C     WRITE (4'IG4) EO
      CALL WRITMS (4,EO,25,IG4)
  420 GO TO 490
C
C  ERROR CHECK ON READING CARDS
  430 WRITE (TAPEOT,440)
C
  440 FORMAT (1H0,50H***** SURFACE DATA ROUTINE HAS ATTEMPTED TO READ A -
     142H NON SURFACE CARD - CHECK YOUR CARDS *****  )
      ERROR = 1
      GO TO 490
C
  450 FORMAT (1H0,7X, I4, 1P4E14.5,0PF10.6,1P2E14.5,I6,2(/12X,4E14.5,   -
     1 0PF10.6,1P2E14.5)  )
C
  460 FORMAT (1H0,3X, 2I4,1P4E14.5,0PF10.6,1P2E14.5,I6,2(/12X,4E14.5,   -
     1 0PF10.6,1P2E14.5)  )
C
  470 FORMAT (1H0, 8HSECTION=1A4,  33H   TOTAL AREA OF INPUT ELEMENTS = -
     1 F12.3,6X26HTOTAL NUMBER OF ELEMENTS = I5/1H ,12X,                -
     2 33H TOTAL VOLUME OF INPUT ELEMENTS =F12.3,/1H0,3(20X,            -
     3 9H*********))
C
  480 FORMAT (1H0,28H  INPUT SURFACE ELEMENT DATA/1H0,6X1HN3X1HM7X1HX,  -
     1 3(13X,1HX),11X2HNX9X5HXCENT9X4HAREA8X1HL ,/1H ,5X, 4(13X,1HY),   -
     2 11X2HNY9X5HYCENT ,7X,7HDELTA V,/1H ,5X,4(13X,1HZ),11X2HNZ,       -
     3 9X,5HZCENT ,7X,6HVOLUME,/1H  )
C
C 490 RETURN
  490 CONTINUE
      END
*DECK PUNC
      SUBROUTINE PUNCH (X1,Y1,Z1,NSTAT1,X2,Y2,Z2,NSTAT3,SECT,TYPE,      -
     1     LINE,SEQ,LAST,IPRINT,NREC)
C
C  THIS SUBROUTINE PREPARES VEHICLE GEOMETRY DATA IN THE PROPER FORM
C   FOR USE BY SDATA ROUTINE
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /GFLAG/IOUT,ISTAT3,IORIN,COMPIN
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      DIMENSION  TITLE(15),SECT(1)
C
      INTEGER  PAGE,SEQ,ERROR,CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      NSTAT2 = NSTAT3
C
C  CHECK IF THIS IS THE LAST POINT OF THE ENTIRE VEHICLE
      IF (NSTAT3.EQ.3 .AND. LAST.EQ.1) NSTAT2 = 0
      IF (IPRINT .EQ. 0) GO TO 40
C
      IF  (LINE .LT. 50 )  GO TO 20
C
C  WRITE PAGE HEADER FOR STANDARD OUTPUT TAPE
      WRITE (TAPEOT,10) CASE,(TITLE(L),L=1,12),PAGE
   10 FORMAT (1H1,5X,36HANALYTICALLY GENERATED ELEMENT DATA ,/          -
     1   1H0,6H  CASE,3X,I2,17X,12A4,17X,5HPAGE ,I4,/                   -
     2  1H0,5X1HX9X1HY9X1HZ4X1HS5X1HX9X1HY8X1HZ5X1HS10H CASE SECT,      -
     3  6X3HSEQ )
C
      PAGE = PAGE + 1
      LINE = 5
C
C  WRITE GEOMETRY CARDS ON STANDARD OUTPUT TAPE
   20 WRITE (TAPEOT,30) X1,Y1,Z1,NSTAT1,X2,Y2,Z2,NSTAT2,CASE,SECT,      -
     1      TYPE,SEQ
   30 FORMAT (1H0,3F10.4,I1,3F10.4,I1,2XI2,A4,1XI1,4HAERO,I4 )
C
      LINE = LINE + 2
C
C  WRITE GEOMETRY DATA ON GEOMETRY TAPE
   40 WRITE (IOUT,50)   X1,Y1,Z1,NSTAT1,X2,Y2,Z2,NSTAT2,CASE,SECT,      -
     1      TYPE,SEQ
   50 FORMAT(3F10.4,I1,3F10.4,I1,2XI2,A4,1XI1,4HAERO,I4 )
C
      NREC = NREC + 1
      SEQ = SEQ + 1
C
      RETURN
      END
*DECK IELE
      OVERLAY (MARK4,1,1)
      PROGRAM IELE
C     SUBROUTINE IELE
C
C  THIS ROUTINE IS USED TO TRANSFER ELEMENT DATA (TYPE 3 CARDS) FROM
C  AN INPUT UNIT TO THE ELEMENT DATA SAVE UNIT
C
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /GFLAG/IOUT,ISTAT3,IORIN,COMPIN
      DIMENSION  TITLE(15),XYZ1(3),XYZ2(3)
      INTEGER  STAT,STATT,TYPE,CASE,ERROR,PAGE,SEQ
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      IS3 = 0
C
C  READ ELEMENT CONTROL CARD
      READ (TAPEIN,10) I3MAX,IN,IREW,I3
   10  FORMAT (2I2,2I1)
      IF (IN .EQ. 0) IN = TAPEIN
      IF (IN.NE.5 .AND. IREW.EQ.1) REWIND IN
C
      WRITE (TAPEOT,20) IN,IOUT,I3MAX
   20 FORMAT (1H0,44HTYPE 3 CARDS ARE BEING TRANSFERED FROM UNIT ,I2,   -
     1  9H TO UNIT ,I2,5X,6HI3MAX=,I4)
C
      IF (I3MAX .EQ. 0) I3MAX = 1
C
   30 READ (IN,40) XYZ1,STAT,XYZ2,STATT,CASE,SECT,TYPE,SEQ
   40 FORMAT (3F10.4,I1,3F10.4,I1,2X,I2,1A4,I2,4X,I4)
      IF (STAT .LE. 0) STAT = 0
      IF (STATT .LE. 0) STATT = 0
C
      IF (STAT.NE.3 .AND.STATT.NE.3) GO TO 50
      IS3 = IS3 + 1
      IF (IS3.EQ.I3MAX .AND. I3.EQ.0) GO TO 60
      IF (STAT.EQ.3) STAT = 0
      IF (STATT.EQ.3) STATT = 0
C
   50 WRITE (IOUT,40)  XYZ1,STAT,XYZ2,STATT,CASE,SECT,TYPE,SEQ
      IF (IS3 .EQ. I3MAX) GO TO 70
      GO TO 30
C
   60 WRITE (IOUT,40)  XYZ1,STAT,XYZ2,STATT,CASE,SECT,TYPE,SEQ
C
C
C  70 RETURN
   70 CONTINUE
      END
*DECK ELLI
      OVERLAY (MARK4,1,2)
      PROGRAM ELLIP
C     SUBROUTINE ELLIP
C     THIS SUBROUTINE PREPARES THE REQUIRED SURFACE ELEMENTS FOR
C     CIRCULAR OR ELLIPTICAL ARC SECTIONS.  EACH CROSS-SECTION
C     IS CONSIDERED SEPARATELY. DUMMY POINTS ARE COMPUTED SO THAT EACH
C     SECTION IS FORCED TO HAVE AN EVEN NUMBER OF POINTS AND SO THAT
C     POINTS IN A ROW ARE CORRECTLY MATCHED WITH POINTS IN AN ADJACENT
C     ROW WHEN THESE ROWS CONTAIN AN UNEQUAL NUMBER OF POINTS.
C
C  THE PARAMETER DISCON WHICH IS SPECIFIED BY THE PROGRAMMER IS VALUED
C     DEPENDING ON HOW THE POINTS ARE TO BE MATCHED
C          DISCON= 1  ALL THETAO AND THETAL ARE THE SAME. DELTHE MUST
C                     DIVIDE THE ANGULAR INCREMENT THETAL - THETAO
C                     EVENLY.
C                = 2  ALL THETAL ARE EQUAL BUT THETAO VARIES
C                = 3  ALL THETAO ARE EQUAL BUT THETAL VARIES
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      DIMENSION TITLE(15),AX(100),THETOX(100),THETLX(100),DELTHX(100),  -
     1   NN(100),SECT(1),DELZX(100),DELYX(100),AA(100),BB(100)
      INTEGER  STAT,STATT,STATD,STATC,ERROR
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER  STATA, STATB,PAGE,SEQ,TYPE,CASE,DISCON
      RADD(BBI,AAI,THP) = SQRT(BBI*BBI*COS(THP)*COS(THP) +              -
     1                         AAI*AAI*SIN(THP)*SIN(THP) )
      WRITE (TAPEOT,10)
   10 FORMAT (1H1,/////,1H0,33HELLIPTICAL GEOMETRY DATA IS BEING        -
     1 21H GENERATED **********  )
C     SET COUNTERS
      TYPE = 3
      NREC = 0
C  READ IN TITLE CARD
   20 READ (TAPEIN,30) (TITLE(L),L=1,12),DISCON,IPRINT,CASE,SECT,ITYPE
   30 FORMAT (12A4,11X,2I1,3XI2,1A4,I2)
      IF (ITYPE .NE. 4) GO TO 470
      LINE = 100
      SEQ  = 1
C  READ IN ALL DATA CARDS FOR THE SECTION
      REWIND TAPEB
      I = 1
   40 READ (TAPEIN,50) X,THETO,THETL,NN(I),A,B,DELZ,DELY,LAST,ITYPE
   50 FORMAT (F10.0,2F6.0,I3,2F10.0,2F7.0,I1,10XI2)
      IF (ITYPE .NE. 5) GO TO 470
      DELTH = (THETL-THETO)/FLOAT(NN(I))
      THETO  = THETO /57.2957795
      THETL  = THETL /57.2957795
      DELTH  = DELTH /57.2957795
      AX(I) = X
      THETOX(I) = THETO
      THETLX(I) = THETL
      DELTHX(I) = DELTH
      AA(I) = A
      BB(I) = B
      DELYX(I) = DELY
      DELZX(I) = DELZ
      IF (LAST .EQ. 0)  GO TO 60
      N = I
      GO TO 70
   60 I = I + 1
      GO TO 40
   70 I = 1
      M = 0
   80 IF (I .GT. N)  GO TO 110
C
      IF (NN(I)-M)100,100,90
   90 M =NN(I)
  100 I = I + 1
      GO TO 80
C
  110 GO TO (120,180,270), DISCON
C
  120 M = M + 1
C
      DO 170 I=1,N
C
      DO 160 J=1,M
C
      XA = AX(I)
      THETA = THETOX(I) + (FLOAT(J-1)) * DELTHX(I)
      THETAP = ABS(THETA - 1.570796)
      RAD = RADD(BB(I),AA(I),THETAP)
      IF (RAD .NE. 0.0)  RAD = AA(I)*BB(I) / RAD
      YA = RAD * SIN(THETA)
      ZA =-RAD * COS(THETA)
      YA = YA + DELYX(I)
      ZA = ZA + DELZX(I)
C
      IF (J .EQ. 1) GO TO 130
      STATA = 0
      GO TO 150
C
  130 IF (I .EQ. 1) GO TO 140
      STATA = 1
      GO TO 150
C
  140 STATA = 2
  150 WRITE (TAPEB) XA,YA,ZA,STATA
  160 CONTINUE
  170 CONTINUE
C
      GO TO 360
C
C
  180 DO 260 I=1,N
C
      LIM = M+1-NN(I)
C
      DO 220 J=1,LIM
      XA = AX(I)
      THETA = THETOX(I)
      THETAP = ABS(THETA - 1.570796)
      RAD = RADD(BB(I),AA(I),THETAP)
      IF (RAD .NE. 0.0)  RAD = AA(I)*BB(I) / RAD
      YA = RAD * SIN(THETA)
      ZA =-RAD * COS(THETA)
      YA = YA + DELYX(I)
      ZA = ZA + DELZX(I)
      IF ( J .EQ. 1)  GO TO 190
      STATA = 0
      GO TO 210
C
  190 IF (I .EQ. 1)  GO TO 200
      STATA = 1
      GO TO 210
C
  200 STATA = 2
  210 WRITE (TAPEB) XA,YA,ZA,STATA
C
  220 CONTINUE
      K=0
      LIM = LIM +1
      NM =M + 2
      DO 250  J = LIM,NM
      XA = AX(I)
      THETA = THETLX(I)-(FLOAT(NN(I)-K))*DELTHX(I)
      THETAP = ABS(THETA - 1.570796)
      RAD = RADD(BB(I),AA(I),THETAP)
      IF (RAD .NE. 0.0)  RAD = AA(I)*BB(I) / RAD
      YA = RAD * SIN(THETA)
      ZA =-RAD * COS(THETA)
      YA = YA + DELYX(I)
      ZA = ZA + DELZX(I)
C
      IF (J.EQ. 1)  GO TO 230
      STATA = 0
      GO TO 240
C
  230 STATA = 1
C
  240 WRITE (TAPEB) XA,YA,ZA,STATA
      K = K + 1
  250 CONTINUE
C
  260 CONTINUE
      M = M + 2
      GO TO 360
C
  270 M = M +2
      DO 350 I = 1,N
      NM =NN(I) +1
C
      DO 310 J = 1,NM
      XA = AX(I)
      THETA = THETOX(I) + (FLOAT(J-1))*DELTHX(I)
      THETAP = ABS(THETA - 1.570796)
      RAD = RADD(BB(I),AA(I),THETAP)
      IF (RAD .NE. 0.0)  RAD = AA(I)*BB(I) / RAD
      YA = RAD * SIN(THETA)
      ZA =-RAD * COS(THETA)
      YA = YA + DELYX(I)
      ZA = ZA + DELZX(I)
      IF (J.EQ.1) GO TO 280
      STATA = 0
      GO TO 300
C
  280 IF (I.EQ.1) GO TO 290
      STATA = 1
      GO TO 300
C
  290 STATA = 2
  300 WRITE (TAPEB) XA,YA,ZA,STATA
C
  310 CONTINUE
      NM =NM+1
C
      DO 340  J = NM,M
      XA = AX(I)
      THETA = THETLX(I)
      THETAP = ABS(THETA - 1.570796)
      RAD = RADD(BB(I),AA(I),THETAP)
      IF (RAD .NE. 0.0)  RAD = AA(I)*BB(I) / RAD
      YA = RAD * SIN(THETA)
      ZA =-RAD * COS(THETA)
      YA = YA + DELYX(I)
      ZA = ZA + DELZX(I)
      IF (J.EQ.1) GO TO 320
      STATA = 0
      GO TO 330
C
  320 STATA = 1
  330 WRITE (TAPEB) XA,YA,ZA,STATA
C
  340 CONTINUE
C
  350 CONTINUE
C
C
  360 STATA = 3
      IF (LAST.EQ.0 .OR. LAST.EQ.2) STATA = 4
C
      BACKSPACE TAPEB
      READ (TAPEB) XA,YA,ZA,STAT
      BACKSPACE TAPEB
      WRITE (TAPEB) XA,YA,ZA,STATA
C
      REWIND TAPEB
      K = 1
C
  370 READ (TAPEB) X,Y,Z,STAT
C
      IF ( STAT .GT. 2)     GO TO 410
      READ (TAPEB) XX,YY,ZZ,STATT
C
      IF ( STATT .GT. 2)    GO TO 390
C
  380 CALL PUNCH (X,Y,Z,STAT,XX,YY,ZZ,STATT,SECT,TYPE,LINE,SEQ,         -
     1  LAST,IPRINT,NREC)
C
      GO TO (370,20,450), K
C
C
  390  IF (STATT.EQ. 3) GO TO 400
      STATT = 0
      K = 2
      GO TO 380
C
  400 K = 3
      GO TO 380
C
C
  410 XB = X
      YB = Y
      ZB = Z
      STATB = STAT
      GO TO 430
  420 BACKSPACE TAPEB
  430 BACKSPACE TAPEB
      READ (TAPEB) XA,YA,ZA,STATA
      IF (STATA.EQ.1 .OR. STATA.EQ.2) GO TO 440
      GO TO 420
  440 STATC = 0
      CALL PUNCH (XB,YB,ZB,STATC,XA,YA,ZA,STATA,SECT,TYPE,LINE,SEQ,     -
     1     LAST,IPRINT,NREC)
      STATD = 0
      IF (STAT .EQ. 3)  STATD = 3
      READ (TAPEB) XC,YC,ZC,STATT
      READ (TAPEB) XD,YD,ZD,STATT
      CALL PUNCH (XC,YC,ZC,STATC,XD,YD,ZD,STATD,SECT,TYPE,LINE,SEQ,     -
     1     LAST,IPRINT,NREC)

      IF (STAT .NE. 3)  GO TO 20
C
C
  450 CONTINUE
  460 GO TO 480
  470 ERROR = 1
C 480 RETURN
  480 CONTINUE
      END
*DECK CUBI
      OVERLAY (MARK4,1,3)
      PROGRAM CUBIC
C     SUBROUTINE CUBIC
C THIS SUBPROGRAM CALCULATES THE QUADRILATERAL DATA FOR A SURFACE GIVEN
C BY THE COONS MIT SURFACE FIT TECHNIQUE.
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      DIMENSION XA(20),XB(20),YA(20),YB(20),ZA(20),ZB(20),XB1(4,20),YB1(-
     14,20),ZB1(4,20),NPTS(4),D(4,9),TITLE(15),SECT(1)
      REAL L21,L31,L32,L1,M1,N1,L2,M2,N2,LN,MN,NN
      INTEGER STAT,STATT,TYPE,SEQ,CASE,PAGE,ERROR
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      WRITE (TAPEOT,10)
   10 FORMAT (1H1,///////,1H0,33HPARAMETRIC CUBIC GEOMETRY DATA IS      -
     1    24H BEING GENERATED *******  )
C
      TYPE=3
      SEQ=1
      LINE=100
      NREC=0
C
C *******READ IN BOUNDARY CURVE DATA
C     SET UP STARTING CONSTANTS
C
   20 CONTINUE
      N=-1
      L=0
   30 II=1
      ITRUE=0
      IFALSE=1
      READ (TAPEIN,40) (TITLE(K),K=1,12),NOU,NOW,LAST,ISOVR,IPRINT,CASE,-
     1     SECT,ITYPE
   40 FORMAT (12A4,1X,I3,1X,I3,3X,3I1,2XI2,1A4,I2)
      IF (ITYPE .NE. 6) GO TO 580
C
C     READ IN BOUNDARY CURVE DATA
C
   50 CONTINUE
      READ (TAPEIN,60) X,Y,Z,ISTAT,XX,YY,ZZ,ISTATT,ITYPE
   60 FORMAT(3F10.4,I1,3F10.4,I1,8XI2)
      IF (ITYPE .NE. 7) GO TO 580
      IRFLAG=IFALSE
      GO TO 150
   70 IF(IRFLAG)80,90,80
   80 IRFLAG=ITRUE
      X=XX
      Y=YY
      Z=ZZ
      ISTAT=ISTATT
      GO TO 100
   90 IRFLAG=IFALSE
      READ (TAPEIN,60) X,Y,Z,ISTAT,XX,YY,ZZ,ISTATT,ITYPE
      IF (ITYPE .NE. 7) GO TO 580
  100 IF(ISTAT)110,250,110
  110 IF(ISTAT-3)120,250,120
  120 IF(ISTAT-2)130,270,130
  130 IF(IAFLAG-1)140,270,140
  140 MC=M
  150 M=1
      IF(ISTAT-2)160,230,160
  160 IF(IBFLAG-1)170,200,170
  170 DO 180 J=1,MC
      XA(J)=XB(J)
      YA(J)=YB(J)
  180 ZA(J)=ZB(J)
  190 XB(1)=X
      YB(1)=Y
      ZB(1)=Z
      GO TO 70
  200 IF(IAFLAG)210,220,210
  210 IBFLAG=0
      GO TO 170
  220 IAFLAG=1
      GO TO 190
  230 IAFLAG=0
      IBFLAG=1
      N=N+1
  240 XA(M)=X
      YA(M)=Y
      ZA(M)=Z
      GO TO 70
  250 M=M+1
      IF(IAFLAG)260,240,260
  260 XB(M)=X
      YB(M)=Y
      ZB(M)=Z
      IF(ISTAT-3)70,270,70
  270 ML=MC
      MC=M
  280 N=N+1
C
C  SET UP BOUNDARY CURVE COORDINATE ARRAYS
  290 CONTINUE
      IF(II-1)300,300,320
  300 DO 310 I=1,ML
      XB1(II,I)=XA(I)
      YB1(II,I)=YA(I)
  310 ZB1(II,I)=ZA(I)
      NPTS(II)=ML
  320 II=II+1
      DO 330 I=1,MC
      XB1(II,I)=XB(I)
      YB1(II,I)=YB(I)
  330 ZB1(II,I)=ZB(I)
      NPTS(II)=MC
      IF(II-4)150,340,340
  340 CONTINUE
      IF(ISTAT-3)30,350,350
  350 CONTINUE
C
C
C *******CALCULATE BOUNDARY CURVE CONSTANTS
C  CALCULATE ARC LENGTH S ON BOUNDARY
      NB=1
  360 S=0.0
      K=NPTS(NB)-2
      DO 370 I=2,K
  3700S=S+SQRT((XB1(NB,I+1)-XB1(NB,I))**2+(YB1(NB,I+1)-YB1(NB,I))**2+(ZB-
     11(NB,I+1)-ZB1(NB,I))**2)
C  CALCULATE TANGENT VECTORS AT THE START OF THE BOUNDARY
      IFLAG1=0
      J1=1
      J2=2
      J3=3
  380 X2X1=XB1(NB,J2)-XB1(NB,J1)
      X3X1=XB1(NB,J3)-XB1(NB,J1)
      X3X2=XB1(NB,J3)-XB1(NB,J2)
      Y2Y1=YB1(NB,J2)-YB1(NB,J1)
      Y3Y1=YB1(NB,J3)-YB1(NB,J1)
      Y3Y2=YB1(NB,J3)-YB1(NB,J2)
      Z2Z1=ZB1(NB,J2)-ZB1(NB,J1)
      Z3Z1=ZB1(NB,J3)-ZB1(NB,J1)
      Z3Z2=ZB1(NB,J3)-ZB1(NB,J2)
      L21=SQRT(X2X1*X2X1+Y2Y1*Y2Y1+Z2Z1*Z2Z1)
      L31=SQRT(X3X1*X3X1+Y3Y1*Y3Y1+Z3Z1*Z3Z1)
      L32=SQRT(X3X2*X3X2+Y3Y2*Y3Y2+Z3Z2*Z3Z2)
      L1=X3X1/L31
      M1=Y3Y1/L31
      N1=Z3Z1/L31
      L2=X2X1/L21
      M2=Y2Y1/L21
      N2=Z2Z1/L21
      LN=-(N1*(L1*N2-L2*N1)+M1*(L1*M2-L2*M1))
      MN=-(N1*(M1*N2-M2*N1)+L1*(L1*M2-L2*M1))
      NN=M1*(M1*N2-M2*N1)+L1*(L1*N2-L2*N1)
      COSEP1=(X2X1*X3X1+Y2Y1*Y3Y1+Z2Z1*Z3Z1)/(L21*L31)
      IF(COSEP1-0.999999)400,400,390
  390 EPS1=0.0
      GO TO 430
  400 IF(COSEP1+0.999999)410,420,420
  410 EPS1=0.0
      GO TO 430
  420 EPS1=ARCOS(COSEP1)
  430 COSEP2=(X3X2*X3X1+Y3Y2*Y3Y1+Z3Z2*Z3Z1)/(L32*L31)
      IF(COSEP2-0.999999)450,450,440
  440 EPS2=0.0
      GO TO 480
  450 IF(COSEP2+0.999999)460,470,470
  460 EPS2=0.0
      GO TO 480
  470 EPS2=ARCOS(COSEP2)
  480 DELTA=EPS1+EPS2
      TX=L1*COS(DELTA)+LN*SIN(DELTA)
      TY=M1*COS(DELTA)+MN*SIN(DELTA)
      TZ=N1*COS(DELTA)+MN*SIN(DELTA)
C
C  CALCULATE END POINT DERIVATIVES
      IF(IFLAG1)490,490,500
  490 X1VOO=TX*S
      Y1VOO=TY*S
      Z1VOO=TZ*S
      J1=NPTS(NB)-2
      J2=NPTS(NB)-1
      J3=NPTS(NB)
      IFLAG1=1
      GO TO 380
  500 X1VO1=TX*S
      Y1VO1=TY*S
      Z1VO1=TZ*S
C
C
C *********CALCULATE CONSTANTS FOR BOUNDARY CURVE
      D(NB,1)=2.0*(XB1(NB,2)-XB1(NB,J2))+X1VOO+X1VO1
      D(NB,2)=3.0*(XB1(NB,J2)-XB1(NB,2))-2.0*X1VOO-X1VO1
      D(NB,3)=X1VOO
      D(NB,4)=2.0*(YB1(NB,2)-YB1(NB,J2))+Y1VOO+Y1VO1
      D(NB,5)=3.0*(YB1(NB,J2)-YB1(NB,2))-2.0*Y1VOO-Y1VO1
      D(NB,6)=Y1VOO
      D(NB,7)=2.0*(ZB1(NB,2)-ZB1(NB,J2))+Z1VOO+Z1VO1
      D(NB,8)=3.0*(ZB1(NB,J2)-ZB1(NB,2))-2.0*Z1VOO-Z1VO1
      D(NB,9)=Z1VOO
      NB=NB+1
      IF(NB-4)360,360,510
C
C *********CALCULATE PATCH DATA
  510 NOW=NOW/2*2+1
      DELU=1.0/FLOAT(NOU)
      DELW=1.0/FLOAT(NOW)
      NOU=NOU+1
      NOW=NOW+1
      STATT=0
      U=0.0
C
      DO 560 I=1,NOU
      STAT=1
      INU=0
      W=0.0
C
      DO 550 K=1,NOW
C
C
      W3=W**3
      W2=W**2
      U3=U**3
      U2=U**2
C  CALCULATE BLENDING FUNCTIONS
      F1U=3.0*U2-2.0*U3
      FOU=1.0-3.0*U2+2.0*U3
      F1W=3.0*W2-2.0*W3
      FOW=1.0-3.0*W2+2.0*W3
C
C  CALCULATE POINTS ON BOUNDARY CURVES
      XOW=D(1,1)*W3+D(1,2)*W2+D(1,3)*W+XB1(1,2)
      YOW=D(1,4)*W3+D(1,5)*W2+D(1,6)*W+YB1(1,2)
      ZOW=D(1,7)*W3+D(1,8)*W2+D(1,9)*W+ZB1(1,2)
      X1W=D(2,1)*W3+D(2,2)*W2+D(2,3)*W+XB1(2,2)
      Y1W=D(2,4)*W3+D(2,5)*W2+D(2,6)*W+YB1(2,2)
      Z1W=D(2,7)*W3+D(2,8)*W2+D(2,9)*W+ZB1(2,2)
      XUO=D(3,1)*U3+D(3,2)*U2+D(3,3)*U+XB1(3,2)
      YUO=D(3,4)*U3+D(3,5)*U2+D(3,6)*U+YB1(3,2)
      ZUO=D(3,7)*U3+D(3,8)*U2+D(3,9)*U+ZB1(3,2)
      XU1=D(4,1)*U3+D(4,2)*U2+D(4,3)*U+XB1(4,2)
      YU1=D(4,4)*U3+D(4,5)*U2+D(4,6)*U+YB1(4,2)
      ZU1=D(4,7)*U3+D(4,8)*U2+D(4,9)*U+ZB1(4,2)
      NPT1=NPTS(1)-1
      NPT2=NPTS(2)-1
C
C  CALCULATE POSITION OF A POINT ON THE SURFACE
     0XS = XOW*FOU+X1W*F1U+XUO*FOW+XU1*F1W-XB1(1,2)*FOU*FOW-XB1(1,NPT1)*-
     1  FOU*F1W-XB1(2,2)*F1U*FOW-XB1(2,NPT2)*F1U*F1W
     0YS = YOW*FOU+Y1W*F1U+YUO*FOW+YU1*F1W-YB1(1,2)*FOU*FOW-YB1(1,NPT1)*-
     1  FOU*F1W-YB1(2,2)*F1U*FOW-YB1(2,NPT2)*F1U*F1W
     0ZS = ZOW*FOU+Z1W*F1U+ZUO*FOW+ZU1*F1W-ZB1(1,2)*FOU*FOW-ZB1(1,NPT1)*-
     1  FOU*F1W-ZB1(2,2)*F1U*FOW-ZB1(2,NPT2)*F1U*F1W
C
      IF(INU-1)520,530,530
  520 XXS = XS
      YYS = YS
      ZZS = ZS
      INU=1
      GO TO 540
  530 IF (I.EQ.NOU .AND. K.EQ.NOW .AND. LAST.EQ.1) STATT = 3
      IF (I.EQ.NOU .AND. K.EQ.NOW .AND. LAST.EQ.3) STATT = 3
      IF (I.EQ.NOU .AND. K.EQ.NOW .AND. LAST.EQ.4) STATT = 3
      IF (I.EQ.1 .AND. K.EQ.2 .AND. ISOVR.EQ.0) STAT = 2
      CALL PUNCH (XXS,YYS,ZZS,STAT,XS,YS,ZS,STATT,SECT,TYPE,LINE,SEQ,   -
     1    LAST,IPRINT,NREC)
      INU=0
      STAT=0
  540 W=W+DELW
  550 CONTINUE
      U=U+DELU
  560 CONTINUE
C
      IF (STATT .NE. 3) GO TO 20
  570 GO TO 590
  580 ERROR = 1
C 590 RETURN
  590 CONTINUE
      END
*DECK AIRC
      OVERLAY (MARK4,1,4)
      PROGRAM AIRCFT
C     SUBROUTINE AIRCFT
C
C ********************************************************************
C *******MAIN PROGRAM FOR AIRCRAFT TYPE VEHICLE GEOMETRY GENERATION
C *******OPTION.  THIS OPTION MAY ALSO BE USED TO CONVERT GEOMETRY
C *******DATA FOR THE NASA (HARRIS) WAVE DRAG PROGRAM TO ELEMENT
C *******DATA FORMAT FOR USE BY THE HYPERSONIC ARBITRARY-BODY
C *******PROGRAM OR BY THE ARBITRARY-BODY GRAPHICS PROGRAMS.
C ********************************************************************
C
C       *** THIS PROGRAM WRITTEN BY A.E. GENTRY AND D.N. SMYTH ***
C           DOUGLAS AERO RESEARCH GROUP, LONG BEACH
C
C   NOTE- THE INPUT DATA MUST BE EXACTLY AS REQUIRED FOR THE
C         CONFIGURATION DATA FOR THE HARRIS PROGRAM (INCLUDING
C         THE IDENTIFICATION CARD).  MULTIPLE CONFIGURATIONS
C         CAN BE STACKED ONE BEHIND THE OTHER.
C
C
      DIMENSION                                                         -
     1    XAF(30),WAFORG(20,4),TZORD(20,30),WAFORD(20,30),              -
     2    NRADX(4),NFORX(4),XFUS(4,30),ZFUS(4,30),FUSARD(4,30),         -
     3         YFUSY(4,30,30),ZFUSZ(4,30,30),                           -
     4    PODORG(9,6),XPOD(9,30),PODR(9,30),IOR(9),IEL(9),NEL(9),       -
     5    FINORG(6,2,4),XFIN(6,10),FINORD(6,10),                        -
     6    CANORG(2,2,4),XCAN(2,10),CANORD(2,10),CANOR1(2,10),           -
     7    XOC(30),AFORG(20,7),AFCAM(20,30),AFORD(20,30),                -
     8    CARD(21),SURF2(6),SURF3(2)
C
      COMMON /ACFT/IPRINT,ITAPE,ITYPE,PI,DX,CASE
C
      COMMON /ARFOIL/ NAF,NAFORD,NCAM,NACA,ITIP,IROOT,                  -
     1                XOC,AFORG,AFCAM,AFORD,SURFID                      -
     2               ,ISURF,IFLAP,NHNGE
C
      COMMON /FUSD/J2,J6,NFUS,NRADX,NFORX,XFUS,ZFUS,YFUSY,ZFUSZ,FUSARD
C
      COMMON /NACELD/NP,NPODOR,PODORG,XPOD,PODR,IOR,IEL,NEL
C
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /GFLAG/IOUT,ISTAT,IORIEN,COMPIN
C
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER CASE
C
      DATA TYCH/2H99/
      DATA SURF1/4HWING/,                                               -
     1     SURF2(1),SURF2(2),SURF2(3),SURF2(4),SURF2(5),SURF2(6)/       -
     2     4HFIN1,4HFIN2,4HFIN3,4HFIN4,4HFIN5,4HFIN6/,                  -
     3     SURF3(1),SURF3(2)/4HCAN1,4HCAN2/
      IPRINT = 1
C
      ITAPE = IOUT
      ITYPE  = 3
      PI = 3.1415927
C
C
C**PROGRAM OPERATION STARTS HERE----
C
C  READ IDENTIFICATION CARD, CONTROL CARD, AND REFERENCE AREA
C  CARD (IF REQUIRED)
   10 READ (TAPEIN,20) (CARD(I),I=1,17),ISTAT3,IHARIS, CASE,            -
     1                     (CARD(I), I=19,21)
   20 FORMAT (9A3,8A4,I1,2XI1,1XI2,4XA2,2A4)
      IF (CARD(19) .EQ. TYCH) GO TO 780
C  CHECK FOR NASA-HARRIS INPUT COORDINATES.
      DX = 1.0
      IF (IHARIS .EQ. 1) DX = -1.0
C
      WRITE (TAPEOT,30) (CARD(I),I=1,17), CASE
   30 FORMAT (1H1,48H*** OUTPUT GEOMETRY DATA FROM AIRCRAFT GEOMETRY ,  -
     111HOPTION ****,/1H0,5X,13HCONFIGURATION,5X,9A3,8A4,6X,5HCASE ,I2, -
     2 //,6X,1HX,9X,1HY,9X,1HZ,4X,1HS,5X,1HX,9X,1HY,9X,1HZ,4X,1HS,/1H0)
      READ (TAPEIN,40) J0,J1,J2,J3,J4,J5,J6,J7,NWAF,NWAFOR,NFUS,        -
     1     (NRADX(I),NFORX(I),I=1,4),NP,NPODOR,NF,NFINOR,NCAN,NCANOR
   40 FORMAT (7I3,I1,I2,16I3,8X)
      IF (J0 .EQ. 1) READ (TAPEIN,50) REFA
   50 FORMAT (F7.2,73X)
C
C***CONTROL FLAG CARD DATA CHECK
      IF(IABS(J1) .NE. 1) GO TO 60
      I = 9
      IF (NWAF .LT. 2 .OR. NWAF .GT. 20)  GO TO 750
      I = 10
      IF (NWAFOR .LT. 3 .OR. NWAFOR .GT. 30)  GO TO 750
   60 IF(IABS(J2) .NE. 1) GO TO 80
      I = 11
      IF (NFUS .LT. 1 .OR. NFUS .GT. 4) GO TO 750
      DO 70 J = 1,NFUS
      I = I + 1
      IF (NRADX(J) .LT. 3 .OR. NRADX(J) .GT. 30) GO TO 750
      I = I + 1
      IF (NFORX(J) .LT. 2 .OR. NFORX(J) .GT. 30) GO TO 750
   70 CONTINUE
   80 IF (J3 .NE. 1) GO TO 90
      I = 20
      IF (NP .LT. 1 .OR. NP .GT. 9) GO TO 750
      I = 21
      IF (NPODOR .LT. 2 .OR. NPODOR .GT. 30) GO TO 750
   90 IF (J4 .NE. 1) GO TO 100
      I = 22
      IF (NF .LT. 1 .OR. NF .GT. 6) GO TO 750
      I = 23
      IF (NFINOR .LT. 3 .OR. NFINOR .GT. 10) GO TO 750
  100 IF (J5 .NE. 1) GO TO 110
      I = 24
      IF (NCAN .LT. 1 .OR. NCAN .GT. 2) GO TO 750
      I = 25
      N = IABS(NCANOR)
      IF (N .LT. 3 .OR. N .GT. 10) GO TO 750
  110 CONTINUE
C
C***END OF CONTROL FLAG DATA CHECK
C
C
C
C**WING**
C********
      IF (J1.EQ.0 .OR. J1.EQ.2) GO TO 260
C     READ PERCENT-CHORD LOCATIONS
      READ (TAPEIN,120) (XAF(I),I=1,NWAFOR)
  120 FORMAT (10F7.0,10X)
C    READ LOCATION OF CHORD LEADING EDGES AND LENGTH
      DO 140 I=1,NWAF
      READ (TAPEIN,130) (WAFORG(I,J),J=1,4)
  130 FORMAT (4F7.0,52X)
  140 CONTINUE
C    READ IN CAMBER LINE DATA
      NCAM = 0
      IF (J1 .EQ.-1) GO TO 170
      NCAM = 1
      DO 160 J=1,NWAF
      READ (TAPEIN,150) (TZORD(J,I),I=1,NWAFOR)
  150 FORMAT (10F7.0,10X)
  160 CONTINUE
      GO TO 200
C    CAMBER IS NOT INPUT. ZERO OUT VALUES
  170 DO 190 J=1,NWAF
      DO 180 I=1,NWAFOR
       TZORD(J,I) = 0.0
  180  CONTINUE
  190  CONTINUE
C
C
C   READ IN AIRFOIL ORDINATE DATA
  200 DO 210 J=1,NWAF
      READ (TAPEIN,150) (WAFORD(J,I),I=1,NWAFOR)
  210 CONTINUE
C
C  INITIALIZE DATA FOR WING SURFACE GENERATION
      NAF = NWAF
      NAFORD = NWAFOR
      SURFID = SURF1
      DO 240 I = 1,NAF
      DO 220 J = 1,3
  220 AFORG(I,J) = WAFORG(I,J)
      AFORG(I,4) = AFORG(I,1) - WAFORG(I,4)*DX
      AFORG(I,5) = WAFORG(I,2)
      AFORG(I,6) = WAFORG(I,3)
      AFORG(I,7) = 0.0
C
      DO 230 K = 1,NAFORD
      AFCAM(I,K) = TZORD(I,K)*100./WAFORG(I,4)
  230 AFORD(I,K) = WAFORD(I,K)
  240 CONTINUE
      DO 250 K = 1,NAFORD
  250 XOC(K) = XAF(K)
C
      NACA = 0
      ITIP = 0
      IROOT = 0
      ISURF = 0
      IFLAP = 0
C
      CALL SURF
C
C
C**FUSELAGE**
C************
  260 IF (J2.EQ.0 .OR. J2.EQ.2) GO TO 360
C
C   START CYCLE ON FUSELAGE SEGMENTS (NFUS TIMES)
      DO 350 I=1,NFUS
C
      NFOX = NFORX(I)
      NRAX = NRADX(I)
C    READ X-VALUES OF FUSELAGE STATIONS FOR A SEGMENT
      READ (TAPEIN,270) (XFUS(I,J),J=1,NFOX)
  270 FORMAT (10F7.0,10X)
C
C    CHECK CIRCULAR AND CAMBER FLAGS
      IF (J2 .EQ. 1 .AND. J6 .NE. 2) GO TO 300
C
C    ZERO OUT CAMBER WHEN NOT REQUIRED
  280 DO 290 J=1,NFOX
  290 ZFUS(I,J) = 0.0
      IF (J2 .EQ. 1) GO TO 310
      IF (J2.EQ.-1 .AND. J6.NE.0) GO TO 330
      IF (J2.EQ.1  .AND. J6.EQ.1) GO TO 330
C
C    READ FUSELAGE CAMBER DATA
  300 READ (TAPEIN,270) (ZFUS(I,J),J=1,NFOX)
      IF (J2 .EQ. -1) GO TO 330
C
C    READ IN FUSELAGE CROSS-SECTION COORDINATES
  310 DO 320 J=1,NFOX
      READ (TAPEIN,270) (YFUSY(I,J,N),N=1,NRAX)
      READ (TAPEIN,270) (ZFUSZ(I,J,N),N=1,NRAX)
  320 CONTINUE
      GO TO 340
C
C    READ IN FUSELAGE AREAS WHEN CIRCULAR
  330 READ (TAPEIN,270) (FUSARD(I,J),J=1,NFOX)
C
C
  340 CONTINUE
C  END OF FUSELAGE SEGMENT DO-LOOP
  350 CONTINUE
C
C  CALL FUSELAGE SUBROUTINE
      CALL FUSE
C
      IFLAP = 0
C
C**POD**
C*******
  360 IF (J3.EQ.0 .OR. J3.EQ.2) GO TO 400
C
      DO 390 I=1,NP
C    READ POD ORIGIN DATA
      READ (TAPEIN,370) (PODORG(I,J),J=1,3)                             -
     1    ,IOR(I),(PODORG(I,J),J=4,6),IEL(I),NEL(I)
  370 FORMAT(3F7.0,3XI1,3X3F7.0,6XI1,5XI2)
C    READ X-ORDINATES FOR POD RADII
      READ (TAPEIN,380) (XPOD(I,J),J=1,NPODOR)
  380 FORMAT (10F7.0,10X)
C    READ POD-RADII DISTRIBUTION
      READ (TAPEIN,380) (PODR(I,J),J=1,NPODOR)
  390 CONTINUE
C
C  CALL POD SUBROUTINE
      CALL NACEL
C
      IFLAP = 0
C
C**FIN**
C*******
  400 IF (J4.EQ.0 .OR. J4.EQ.2) GO TO 490
C
      NAF = 2
      NAFORD = NFINOR
      NCAM = 0
      NACA = 0
      ITIP = 0
      IROOT = 0
      ISURF = 0
      IFLAP = 0
C    READ FIN DATA (NF FINS)
      DO 430 NN=1,NF
C
C    READ ORDINATE DATA AND LENGTH
      READ (TAPEIN,410) ((FINORG(NN,I,J),J=1,4),I=1,2)
  410 FORMAT (8F7.0,24X)
C    READ PERCENT-CHORD LOCATIONS
      READ (TAPEIN,420) (XFIN(NN,I),I=1,NFINOR)
  420 FORMAT (10F7.0,10X)
C    READ FIN AIRFOIL ORDINATES
      READ (TAPEIN,420) (FINORD(NN,I),I=1,NFINOR)
C
  430 CONTINUE
C
C  INITIALIZE DATA FOR FIN SURFACE GENERATION.
      DO 480 NN = 1,NF
      SURFID = SURF2(NN)
      DO 460  I = 1,NAF
      DO 440 J = 1,3
  440 AFORG(I,J) = FINORG(NN,I,J)
      AFORG(I,4) = AFORG(I,1) - FINORG(NN,I,4)*DX
      AFORG(I,5) = AFORG(I,2)
      AFORG(I,6) = AFORG(I,3)
      AFORG(I,7) = 90.0
C
      DO 450 K = 1,NAFORD
      AFCAM(I,K) = 0.0
  450 AFORD(I,K) = FINORD(NN,K)
  460 CONTINUE
      DO 470 K = 1,NAFORD
  470 XOC(K) = XFIN(NN,K)
C
C
      CALL SURF
  480 CONTINUE
C   END OF FIN DO LOOP
C
C
C**CANARD OR HORIZONTAL TAIL
C********
  490 IF (J5.EQ.0 .OR. J5.EQ.2) GO TO 600
C
      N = IABS(NCANOR)
      NAF = 2
      NAFORD = N
      NACA = 0
      ITIP = 0
      IROOT = 0
      ISURF = 0
      IFLAP = 0
C   READ IN ALL CANARD DATA (NCAN CANARDS)
      DO 540 NN = 1,NCAN
C     READ ORDINATE DATA AND LENGTH
      READ (TAPEIN,500) ((CANORG(NN,I,J),J=1,4),I=1,2)
  500 FORMAT (8F7.0,24X)
C     READ PERCENT-CHORD LOCATIONS
      READ (TAPEIN,510) (XCAN(NN,J),J=1,N)
  510 FORMAT (10F7.0,10X)
C    READ FIN AIRFOIL ORDINATES
      READ (TAPEIN,510) (CANORD(NN,J),J=1,N)
C
C    IF AIRFOIL IS NOT SYMMETRICAL READ LOWER ORDINATES
      NCAM = 0
      IF (NCANOR .GT. 0) GO TO 520
      NCAM = 1
      READ (TAPEIN,510) (CANOR1(NN,J),J=1,N)
      GO TO 540
C
C    SET LOWER SURFACE EQUAL TO UPPER FOR SYMMETRICAL
  520 DO 530 J=1,N
  530 CANOR1(NN,J) = CANORD(NN,J)
C
  540 CONTINUE
C
C  INITIALIZE DATA FOR CANARD SURFACE GENERATION.
      DO 590 NN = 1,NCAN
      SURFID = SURF3(NN)
      DO 570 I = 1,NAF
      DO 550 J = 1,3
  550 AFORG(I,J) = CANORG(NN,I,J)
      AFORG(I,4) = AFORG(I,1) - CANORG(NN,I,4)*DX
      AFORG(I,5) = AFORG(I,2)
      AFORG(I,6) = AFORG(I,3)
      AFORG(I,7) = 0.0
C
      DO 560 K = 1,NAFORD
      AFORD(I,K) = (CANORD(NN,K) + CANOR1(NN,K))*0.5
  560 AFCAM(I,K) = CANORD(NN,K) - AFORD(I,K)
  570 CONTINUE
      DO 580 K = 1,NAFORD
  580 XOC(K) = XCAN(NN,K)
C
C
      CALL SURF
  590 CONTINUE
C   END OF CANARD DO LOOP.
C
C
C**ARBITRARY AIRFOIL SURFACE
C********
  600 IF (J7 .NE. 1) GO TO 740
C
C READ CONTROL CARD
  610 READ (TAPEIN,620) ISURF,NAF,NAFORD,NCAM,NACA,ITIP,IROOT,ISIMC,    -
     1                  ISIMT,MORE,SURFID
C
  620 FORMAT (22XI3, 2(3XI2), 7(4XI1),2XA4,4X)
C
C***  CHECK SURFACE TYPE, ISURF =  +1(UPPER ONLY), -1(LOWER ONLY),
C
C                                  ABS .GT. 1,(WITH CONTROL SURFACE).
      IFLAP = 0
      NHNGE =IABS(ISURF)
      IF (NHNGE .LE. 1)  GO TO 630
C
C***  CONTROL SURFACE INPUT INDICATED.  CHECK IF CONSTRAINTS MET.
C     NAFORD MUST BE ODD AND NHNGE EVEN.  IF THESE CONDITIONS ARE
C     NOT SATISFIED, FLAP IS NEGLECTED.
C
      ISURF = ISURF/NHNGE
      IF ((NAFORD/2 + NAFORD/2) .NE. (NAFORD - 1)) GO TO 630
      IF ((NHNGE/2  + NHNGE/2) .NE. NHNGE)   GO TO 630
C
C***  CONSTRAINTS SATISFIED.
      IFLAP = 1
  630 CONTINUE
C READ CHORD LOCATIONS
      READ (TAPEIN,640) (XOC(J),J=1,NAFORD)
  640 FORMAT(10F7.0,10X)
C
C READ AIRFOIL SECTION ORIENTATION DATA
      DO 650 I = 1,NAF
      READ (TAPEIN,640) (AFORG(I,J),J=1,7)
  650 CONTINUE
C
C CHECK FOR CAMBER DATA
      IF (NCAM .NE. 1) GO TO 680
      IN = NAF
      IF (ISIMC .EQ. 1) IN = 1
      DO 660 I = 1,IN
  660 READ (TAPEIN,640) (AFCAM(I,J),J=1,NAFORD)
      IF (IN .EQ. NAF) GO TO 700
      DO 670 I = 2,NAF
      DO 670 J = 1,NAFORD
  670 AFCAM(I,J) = AFCAM(1,J)
      GO TO 700
C NO CAMBER DATA INPUT, SET TO ZERO.
  680 DO 690 I = 1,NAF
      DO 690 J = 1,NAFORD
  690 AFCAM(I,J) = 0.0
C
  700 CONTINUE
C
C READ IN THICKNESS DISTRIBUTION
      IN = NAF
      IF (ISIMT .EQ. 1) IN = 1
      DO 710 I = 1,IN
  710 READ (TAPEIN,640) (AFORD(I,J),J=1,NAFORD)
      IF (IN .EQ. NAF) GO TO 730
      DO 720 I = 2,NAF
      DO 720 J = 1,NAFORD
  720 AFORD(I,J) = AFORD(1,J)
C
  730 CALL SURF
C
C CHECK FOR STACKED DATA
      IF (MORE .EQ. 1) GO TO 610
C
C CHECK IF A DUMMY STATUS 3 ELEMENT WANTED.
  740 IF (IFLAP .EQ. 1)  GO TO 10
      IF (ISTAT3 .NE. 1) CALL STATS3
C
C***END OF ALL CONFIGURATION COMPONENTS (GO TO STARTING STATEMENT)
      GO TO 10
C
  750 WRITE (TAPEOT,760) I
  760 FORMAT(1H ,//,1H ,37H**** FATAL ERROR *** PROGRAM STOPPED.,       -
     1       ///5X,34HCONTROL FLAG CARD PARAMETER NUMBER,I3,4H IS ,     -
     2       28HOUTSIDE THE ALLOWABLE RANGE.)
C
C***AFTER END OF FILE ON INPUT - STOP
  770 STOP
C 780 RETURN
  780 CONTINUE
C
      END
*DECK SURF
      SUBROUTINE  SURF
C
C*****THIS SUBROUTINE DEFINES A GENERAL AIRFOIL SURFACE
C     IN THE BODY-AXIS COORDINATE SYSTEM.  THE SURFACE IS
C     GENERATED ACCORDING TO THE NUMBER OF AIRFOIL SECTIONS, NAF,
C     THE ORIENTATION OF THE CHORD LINE (YAW-PITCH-ROLL SEQUENCE),
C     THE MEAN LINE DISTRIBUTION, AND THE THICKNESS DISTRIBUTION.
C     THE SECTION COORDINATES MAY DEFINED AS AN NACA TYPE
C     (THICKNESS DISTRIBUTION NORMAL TO MEAN LINE) OR AS A
C     SHEARED TYPE (THICKNESS NORMAL TO THE CHORD LINE).
C
C     AN OPTION TO CALCULATE THE TIP-PLANE SURFACE OR THE ROOT-
C     PLANE SURFACE, OR BOTH, IS ALSO AVAILABLE.
C     ALL INPUT QUANTITIES ENTER THROUGH THE LABELED COMMON/ARFOIL/.
C
C     NAF     - THE NUMBER OF AIRFOIL SECTIONS
C     NAFORD  - THE NUMBER OF SECTION ORDINATES
C     NCAM    - =1, CAMBER DATA INPUT
C     NACA    - =1, NACA TYPE  SECTION
C     XOC     - ARRAY OF CHORD STATIONS, PERCENT CHORD
C     AFORG   - ARRAY OF CHORD ORIGIN AND ORIENTATION DATA
C     AFCAM   - ARRAY OF CAMBER DISTRIBUTION, PERCENT CHORD
C     AFORD   - ARRAY OF THICKNESS DISTRIBUTION, PERCENT CHORD
C     SURFID  - SURFACE IDENTIFICATION (CC'S 73-76 ON OUTPUT  CARDS)
C     ITIP    - = 1, CALCULATE TIP SURFACE.
C     IROOT   - = 1, CALCULATE ROOT SURFACE.
C*****
      DIMENSION XOC(30),AFORG(20,7),AFCAM(20,30),AFORD(20,30),          -
     1          X(2),Y(2),Z(2),CDELTA(30),SDELTA(30)
C
      COMMON /ACFT/ IPRINT,ITAPE,ITYPE,PI,DX,CASE
C
      COMMON /ARFOIL/ NAF,NAFORD,NCAM,NACA,ITIP,IROOT,                  -
     1                XOC,AFORG,AFCAM,AFORD,SURFID                      -
     2               ,ISURF,IFLAP,NHNGE
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      INTEGER STAT1,STAT2
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER CASE
C
C  DESCRIPTION OF COUNTERS AND CONTROLS
C     I IS THE AIRFOIL SECTION NUMBER
C         I = 1  IS THE ROOT
C         I = NAF IS THE TIP
C     J IS THE CHORDWISE STATION NUMBER
C         J = 1  IS THE LEADING EDGE
C         J = NAFORD IS THE TRAILING EDGE
C     K IS THE POINT COUNTER FOR TYPE 3 CARDS (TWO POINTS PER CARD).
C     IEND IS CONTROL FLAG FOR TIP OR ROOT SURFACE
C     INEXT IS  SECTION SEQUENCE INCREMENT
C         INEXT = +1 FOR UPPER SURFACE
C         INEXT = -1 FOR LOWER SURFACE
C     ISEQ IS COUNTER FOR OUTPUT DATA (CC'S 77-80)
C
C
C*****THE SURFACE IS FIRST TESTED FOR POSSIBLE SYMMETRY
C     ABOUT THE X-Z ORIGIN PLANE.  IF SO, THE SURFACE
C     SYMMETRY FLAG (ISYMM) IS SET TO +1 OR -1 AS PER SIGN OF PHI.
C     TO BE SYMMETRICAL THREE CONDITIONS MUST BE MET
C     1.  NO CAMBER DISTRIBUTION
C     2.  THE CHORD LINE IS IN THE X-Z ORIGIN PLANE
C     3.  THE ROLL ANGLE PHI IS + OR - 90.0 DEGREES
C     THE TEST IS MADE ON BOTH THE ROOT AND TIP SECTIONS
C
      I = 0
      ISEQ = 0
      IEND = 0
      ISYMM = 0
      IHNGE = 1000
      IF (ISURF .NE. 0) GO TO 230
      IF (NCAM .EQ. 1) GO TO 10
      IF (AFORG(1,2) .GT. 0.0001) GO TO 10
      IF (AFORG(NAF,2) .GT. 0.0001) GO TO 10
      IF (COS(AFORG(1,7)*PI/180.) .GT. 0.0001) GO TO 10
      IF (COS(AFORG(NAF,7)*PI/180.) .GT. 0.0001) GO TO 10
C
C     SURFACE IS SYMMETRICAL ABOUT X-Z ORIGIN PLANE.
      ISYMM =-1
C     CHECK IF PHI IS POSITIVE OR NEGATIVE.
      IF (AFORG(1,7) .LT. 0.0) GO TO 10
C
C     POSITIVE VERTICAL, DO LOWER SURFACE FIRST.
      ISYMM = 1
      I = NAF + 1
      GO TO 200
C
C
   10 CONTINUE
      INEXT = 1
      DZ = 1.0
      DETA = 1.0
C
   20 K = 0
      STAT1 = 2
      STAT2 = 0
   30 I = I + INEXT
      JP = 1
      IF (I .GT. NAF) GO TO 150
      IF (I .EQ. 0)   GO TO 150
C
C*****CALCULATE CHORD LENGTH C  AND AIRFOIL ORIENTATION,
C     SINE AND COSINE VALVES OF
C         YAW ANGLE   -  SPSI, CPSI
C         PITCH ANGLE -  STHETA, CTHETA
C         ROLL ANGLE  -  SPHI, CPHI
C
      DXX =-(AFORG(I,4) - AFORG(I,1))*DX
      DYY =  AFORG(I,2) - AFORG(I,5)
      DZZ =  AFORG(I,6) - AFORG(I,3)
      DS1 = DXX**2 + DYY**2
      DS2 = SQRT(DS1 + DZZ**2)
      DS1 = SQRT(DS1)
C
      SPSI = DYY/DS1
      CPSI = DXX/DS1
C
      STHETA = DZZ/DS2
      CTHETA = DS1/DS2
C
      SPHI = SIN(AFORG(I,7)*PI/180.)
      CPHI = COS(AFORG(I,7)*PI/180.)
C
      C = 0.01*DS2
C
C***  PRESET MEAN LINE SLOPES
      DO 40 J = 1,NAFORD
      CDELTA(J) = 1.0
   40 SDELTA(J) = 0.0
C
C***  CHECK IF CAMBER DATA INPUT
      IF (NCAM .NE. 1) GO TO 70
C
      IF (NACA .NE. 2)  GO TO 46
      IF (C .EQ. 0.0)   GO TO 46
      CI = 1.0/C
      DO 45 J = 1,NAFORD
   45 AFCAM(I,J) = AFCAM(I,J)*CI
   46 CONTINUE
C
C***  CHECK AIRFOIL SECTION TYPE
      IF (NACA .NE. 1) GO TO 70
C
C***  NACA TYPE, THICKNESS NORMAL TO MEAN LINE.
C     MUST FIRST CALCULATE SLOPE ALONG MEAN LINE.
C     USE NEWTONIAN SINGLE QUADRATIC
C
      J1 = 0
      DO 60 IP = 1,NAFORD
C
      IF (IP .EQ. 2 .OR. IP .EQ. NAFORD) GO TO 50
C
      J1 = J1 + 1
      J2 = J1 + 1
      J3 = J1 + 2
      X1 = XOC(J1)
      X2 = XOC(J2)
      X3 = XOC(J3)
      Y1 = AFCAM(I,J1)
      Y2 = AFCAM(I,J2)
      Y3 = AFCAM(I,J3)
C
   50 DYDX = (Y2-Y1)/(X2-X1) + (2.0*XOC(IP) - X2 - X1)*                 -
     1      ((Y3-Y2)/(X3-X2) - (Y2-Y1)/(X2-X1))/(X3-X1)
C
      CDELTA(IP) = 1.0/SQRT(1.0 + DYDX**2)
      SDELTA(IP) = DYDX*CDELTA(IP)
C
   60 CONTINUE
C
C
C***  BEGIN SURFACE CALCULATION
   70 J = 0
      IF (K .EQ. 1) GO TO 90
   80 K = 0
   90 J = J + 1
      IF (J .LE. NAFORD) GO TO 100
C
C***  SET DUMMY POINT AND WRITE DATA.
      K = 2
      X(K) = X(1)
      Y(K) = Y(1)
      Z(K) = Z(1)
      STAT2 = STAT1
      GO TO (110,260), JP
C
C***  CALCULATE COORDINATES
  100 K = K + 1
      XI = (XOC(J) - AFORD(I,J)*SDELTA(J)*DZ)*C
      ETA = (AFCAM(I,J) + DZ*AFORD(I,J)*CDELTA(J))*C
      X(K) = DX*AFORG(I,1) - XI*CTHETA*CPSI                             -
     1       + DETA*ETA*(STHETA*CPSI*CPHI + SPSI*SPHI)
      Y(K) = AFORG(I,2) - XI*CTHETA*SPSI                                -
     1       + DETA*ETA*(STHETA*SPSI*CPHI - CPSI*SPHI)
      Z(K) = AFORG(I,3) + XI*STHETA + DETA*ETA*CTHETA*CPHI
C
      IF (K .EQ. 1) GO TO 90
C
      GO TO (110,260), JP
C***  WRITE DATA
  110 ISEQ = ISEQ + 1
      WRITE(ITAPE,120) X(1),Y(1),Z(1),STAT1,                            -
     1                 X(2),Y(2),Z(2),STAT2,CASE,ITYPE,SURFID,ISEQ
C
  120 FORMAT(3F10.4,I1,3F10.4,I1,2XI2,5XI1,A4,I4)
C
      IF (IPRINT .EQ. 1)                                                -
     1WRITE (TAPEOT,130) X(1),Y(1),Z(1),STAT1,                          -
     2              X(2),Y(2),Z(2),STAT2, CASE,ITYPE,SURFID,ISEQ
C
  130 FORMAT(1H ,3F10.4,I1,3F10.4,I1,2XI2,5XI1,A4,I4)
C
C***  CHECK IF THIS IS TO HAVE A CONTROL SURFACE.
      IF ( J   .EQ. IHNGE) GO TO 250
C***  CHECK STATUS FLAGS
      IF (STAT1 .GT. 0) STAT1 = 0
      IF (STAT2 .GT. 0) STAT2 = 0
C
C***  CHECK FOR PROPER CYCLING
      IF (J .LT. NAFORD) GO TO 80
C
C
C***  HAVE COMPLETED AIRFOIL SECTION, SET STATUS AND GO TO NEXT ONE.
  140 STAT1 = 1
      GO TO 30
C
C***  HAVE COMPLETED SURFACE, CHECK WHICH ONE.
  150 CONTINUE
      IF (NACA .EQ. 2)  NACA = 0
      IF (IFLAP .EQ. 1) GO TO 270
      IF (INEXT .LT. 0) GO TO 160
C
C***  JUST COMPLETED UPPER SURFACE.
      IF (IEND .EQ. 1) GO TO 190
      IF (ITIP .EQ. 1) GO TO 180
      IF (ISYMM .EQ.  0) GO TO 200
C
C***  JUST COMPLETED LOWER SURFACE.
  160 IF (IEND - 1 )170,190,220
  170 IF (ITIP .EQ. 1) GO TO 180
      IF (IROOT .EQ. 1) GO TO 210
      RETURN
C
C
C
C***  TIP SURFACE
  180 STAT1 = 2
      STAT2 = 0
      IEND = 1
      INEXT = +1
      I = NAF
      IF (ISYMM .NE. 1) GO TO 70
      DETA = 0.0
      I = I -1
      GO TO 30
  190 DETA = 1.0
      IF (ISYMM .EQ. -1) DETA = 0.0
      IF (ISYMM .EQ. 0) DZ = -DZ
      ITIP = 0
      IEND = 0
      I = NAF
      J = 0
      GO TO 80
C
C
C***  LOWER SURFACE.
  200 INEXT = -1
      DZ = -1.0
      DETA = 1.0
      GO TO 20
C
C
C***  ROOT SURFACE
  210 STAT1 = 2
      IEND = 2
      INEXT = -1
      I = 1
      DETA = 1.0
      IF (ISYMM .EQ.  0) GO TO 70
      I = 2
      IF (ISYMM .EQ. 1) GO TO 30
      DETA = 0.0
      GO TO 30
  220 DETA = 1.0
      IF (ISYMM .EQ. 1) DETA = 0.0
      IF (ISYMM .EQ. 0) DZ = -DZ
      IROOT = 0
      IEND = 0
      I = 1
      J = 0
      GO TO 80
C
C
C
C
  230 ISYMM = -ISURF
C
C***  ONLY UPPER OR LOWER SURFACE, ZERO OUT TIP AND ROOT SECTIONS.
      ITIP = 0
      IROOT = 0
C
C***  CHECK IF THIS SURFACE TO HAVE A FLAP (OR CONTROL SURFACE).
      IF (IFLAP .EQ. 0)  GO TO 240
C
C***  CONTROL SURFACE.  SET HINGE LINE LOCATION.
      IHNGE = NHNGE
      REWIND TAPEB
  240 IF (ISYMM .LT. 0) GO TO 10
      I = NAF + 1
      GO TO 200
C
C
C
  250 J = J - 1
      JP = 2
      STAT1 = 1
      GO TO 80
C
C
  260 WRITE (TAPEB) X,Y,Z,STAT1,STAT2
      STAT1 = 0
      STAT2 = 0
      IF (J .LT. NAFORD) GO TO 80
C
C***  HAVE COMPLETED AIFOIL SECTION
      STAT1 = 1
      GO TO 30
C
C***  HAVE COMPLETED AIRFOIL. TRANSFER FLAP ELEMENTS FROM
C     UNIT 3  TO UNIT ITAPE. GIVE FIRST POINT STATUS 2
C     AND LAST POINT STATUS 3.
C
  270 CONTINUE
      REWIND TAPEB
      ITOTAL = NAF*(NAFORD + 1)/2
      READ (11) X,Y,Z,STAT1,STAT2
      STAT1 = 2
  280 ISEQ = ISEQ + 1
      IF (ISEQ .EQ. ITOTAL) STAT2 = 3
      WRITE (ITAPE,120) X(1),Y(1),Z(1),STAT1,                           -
     1                  X(2),Y(2),Z(2),STAT2,CASE,ITYPE,SURFID,ISEQ
C
      IF (IPRINT .EQ. 1)                                                -
     1WRITE (TAPEOT,130) X(1),Y(1),Z(1),STAT1,                          -
     2                  X(2),Y(2),Z(2),STAT2,CASE,ITYPE,SURFID,ISEQ
C
      IF (ISEQ .EQ. ITOTAL) RETURN
      READ (TAPEB) X,Y,Z,STAT1,STAT2
      GO TO 280
C
C
      END
*DECK NACE
      SUBROUTINE  NACEL
C
      DIMENSION  PODORG(9,6),XPOD(9,30),PODR(9,30),X(2),Y(2),Z(2),      -
     1           IOR(9),IEL(9),NEL(9)
C
      COMMON /ACFT/IPRINT,ITAPE,ITYPE,PI,DX,CASE
C
      COMMON /NACELD/NP,NPODOR,PODORG,XPOD,PODR,IOR,IEL,NEL
C
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER CASE
      INTEGER STAT1,STAT2
C
C I IS THE NACELLE OR POD NUMBER
C J IS NUMBER IDENTIFYING AXIAL LOCATION
C N IS THE POINT COUNTER ON THE SURFACE AT A GIVEN STATION
C
C
      I = 0
   10 I = I + 1
      IF (I .GT. NP)  GO TO 140
      ISEQ = 0
C
C SET COUNTERS AND CONTROLS
      STAT1 = 2
      STAT2 = 0
      J = 1
C
C SET POD ORIGIN QUANTITES
      XO = PODORG(I,1)
      YO = PODORG(I,2)
      ZO = PODORG(I,3)
C
C SET UP THE ROTATION ANGLES FOR POD ORIENTATION
      STHETA = 0.0
      CTHETA = 1.0
      SPSI = 0.0
      CPSI = 1.0
      IF (IOR(I) .NE. 1) GO TO 30
C
      DXX = (XO - PODORG(I,4))*DX
      DYY =  YO - PODORG(I,5)
      DZZ = -ZO + PODORG(I,6)
      DS1 = DXX**2 + DYY**2
      DS2 = SQRT(DS1 + DZZ**2)
      IF (DS1 .LT. 0.0001) GO TO 20
      DS1 = SQRT(DS1)
      CPSI = DXX/DS1
      SPSI = DYY/DS1
C
   20 CTHETA = DS1/DS2
      STHETA = DZZ/DS2
C
C CALCULATE ELEMENT SPACING, DPHI.
   30 NR = 12
      IF (IEL(I) .NE. 1) GO TO 40
      IF (NEL(I) .GT. 0 .AND. NEL(I) .LE. 36) NR = NEL(I)
   40 DPHI = PI/NR
C
C CHECK POD SYMMETRY WITH RESPECT TO X-Z ORIGIN PLANE.
      IF (ABS(YO) .GT. 1.E-5) GO TO 50
      IF (IOR(I) .NE. 1) GO TO 60
      IF (ABS(PODORG(I,5)) .LE. 1.E-5) GO TO 60
   50 NR = 2*NR
   60 NR = NR + 1
C
C NOTE. THE Y- AND Z-COORDINATES ARE DEFINED AS A FUNCTION
C       OF ANGLE PHI WHICH IS DEFINED TO BE -PI/2 AT THE
C       NEGATIVE Z-AXIS.  THIS DEFINITION ALLOWS THE SIGN
C      OF THE DELTA-Z INCREMENT TO BE AUTOMATICALLY ACCOUNTED FOR.
   70 N = 0
      PHI = -PI/2. -DPHI
C
   80 K = 0
   90 N = N + 1
      IF (N .LE. NR) GO TO 100
C
C SET DUMMY POINT.
      K = 2
      STAT2 = 0
      X(K) = X(1)
      Y(K) = Y(1)
      Z(K) = Z(1)
      GO TO 110
C
  100 K = K + 1
      PHI = PHI + DPHI
      YP = PODR(I,J)*COS(PHI)
      ZP = PODR(I,J)*SIN(PHI)
C
      X(K) = DX*XO - XPOD(I,J)*CTHETA*CPSI - YP*SPSI + ZP*STHETA*CPSI
C
      Y(K) = YO - XPOD(I,J)*CTHETA*SPSI + YP*CPSI + ZP*STHETA*SPSI
C
      Z(K) = ZO + XPOD(I,J)*STHETA + ZP*CTHETA
C
      IF (K .EQ. 1) GO TO 90
C
C WRITE DATA
  110 ISEQ = ISEQ + 1
      WRITE(ITAPE,120) X(1),Y(1),Z(1),STAT1,                            -
     1              X(2),Y(2),Z(2),STAT2,CASE,ITYPE,I,ISEQ
C
  120 FORMAT(3F10.4,I1,3F10.4,I1,2XI2,5XI1,'POD',I1,I4)
C
      IF (IPRINT .EQ. 1)                                                -
     1WRITE (TAPEOT,130) X(1),Y(1),Z(1),STAT1,                          -
     2              X(2),Y(2),Z(2),STAT2,CASE,ITYPE,I,ISEQ
C
  130 FORMAT(1H ,3F10.4,I1,3F10.4,I1,2XI2,5XI1,'POD',I1,I4)
C
C RESET STATUS FLAG
      IF (STAT1 .GT. 0) STAT1 = 0
C
C CHECK FOR PROPER CYCLING
      IF (N .LT.NR) GO TO 80
C
C HAVE COMPLETED AN AXIAL STATION.  CHECK FOR MORE
      J = J + 1
      IF (J .GT. NPODOR)  GO TO 10
C
C ONE OR MORE STATIONS LEFT.  SET STATUS FLAG AND CONTINUE
      STAT1 = 1
      GO TO 70
  140 RETURN
      END
*DECK FUSE
      SUBROUTINE  FUSE
C
      DIMENSION XFUS(4,30),NFORX(4),ZFUS(4,30),FUSARD(4,30),X(2),       -
     1          YFUSY(4,30,30),ZFUSZ(4,30,30),Y(2),Z(2),NRADX(4)
C
      COMMON /ACFT/IPRINT,ITAPE,ITYPE,PI,DX,CASE
C
      COMMON /FUSD/J2,J6,NFUS,NRADX,NFORX,XFUS,ZFUS,YFUSY,ZFUSZ,FUSARD
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      INTEGER STAT1,STAT2
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER CASE
C
C I IS THE FUSELAGE SEGMENT NUMBER
C J IS THE AXIAL STATION NUMBER
C N IS THE SURFACE POINT NUMBER
C
C THERE ARE TWO MAIN PARTS TO THIS ROUTINE
C     ONE SETS UP THE COORDS FOR AN ARBITRARY BODY
C     THE OTHER IS FOR A BODY OF REVOLUTION GIVEN THE AREA DISTRIBUTION.
C
      K = 0
      I = 0
C TEST FOR BODY TYPE
      IF (J2 .NE. 1)  GO TO 90
      IF (J6 .EQ. 1)  GO TO 90
C
C ARBITRARY BODY
   10 I = I + 1
      IF (I .GT. NFUS)  RETURN
      ISEQ = 0
      STAT1 = 2
      STAT2 = 0
      J = 0
   20 J = J + 1
      IF (J .GT. NFORX(I)) GO TO 10
      XO = XFUS(I,J)*DX
      N = 0
   30 K = 0
   40 N = N + 1
      IF (N .LE. NRADX(I)) GO TO 50
C
C SET UP DUMMY POINT.
      K = 2
      STAT1 = 0
      STAT2 = 0
      Y(K) = Y(1)
      Z(K) = Z(1)
      X(K) = X(1)
      GO TO 60
C
   50 K = K + 1
      Y(K) = YFUSY(I,J,N)
      Z(K) = ZFUSZ(I,J,N)
      X(K) = XO
      IF (K .EQ. 1) GO TO 40
C
C
C WRITE DATA
   60 ISEQ = ISEQ + 1
      WRITE(ITAPE,70) X(1),Y(1),Z(1),STAT1,                             -
     1                X(2),Y(2),Z(2),STAT2,CASE,ITYPE,I,ISEQ
C
   70 FORMAT(3F10.4,I1,3F10.4,I1,2XI2,5XI1,'FUS',I1,I4)
C
      IF (IPRINT .EQ. 1)                                                -
     1WRITE (TAPEOT,80) X(1),Y(1),Z(1),STAT1,                           -
     2               X(2),Y(2),Z(2),STAT2,CASE,ITYPE,I,ISEQ
C
   80 FORMAT(1H ,3F10.4,I1,3F10.4,I1,2XI2,5XI1,'FUS',I1,I4)
C
C
      IF (STAT1 .NE. 0) STAT1 = 0
      IF (STAT2 .NE. 0) STAT2 = 0
C CHECK FOR PROPER CYCLING
      IF (N .LT. NRADX(I))  GO TO 30
C
C HAVE COMPLETED AXIAL STATION. SET STATUS AND GO TO NEXT ONE.
      STAT1 = 1
      GO TO 20
C
C
C BODY OF REVOLUTION
   90 I = I + 1
      IF (I .GT. NFUS) RETURN
      STAT1 = 2
      STAT2 = 0
      ISEQ = 0
C
      DPHI = PI/(NRADX(I) -1)
      J = 0
  100 J = J + 1
      IF (J .GT. NFORX(I) ) GO TO 90
      XO=  XFUS(I,J)*DX
      N = 0
      PHI =  -PI/2. - DPHI
      R = SQRT(FUSARD(I,J)/PI)
  110 K = 0
  120 N = N + 1
      IF (N .LE. NRADX(I)) GO TO 130
C
C SET UP DUMMY POINT.
      K = 2
      STAT1 = 0
      STAT2 = 0
      Y(K) = Y(1)
      Z(K) = Z(1)
      X(K) = X(1)
      GO TO 140
C
  130 K = K + 1
      X(K) = XO
      PHI = PHI + DPHI
      Y(K) = R*COS(PHI)
      Z(K) = ZFUS(I,J) + R*SIN(PHI)
      IF (K .EQ. 1) GO TO 120
C
C
C WRITE DATA
  140 ISEQ = ISEQ + 1
      WRITE(ITAPE,70) X(1),Y(1),Z(1),STAT1,                             -
     1                X(2),Y(2),Z(2),STAT2,CASE,ITYPE,I,ISEQ
C
C
      IF (IPRINT .EQ. 1)                                                -
     1WRITE (TAPEOT,80) X(1),Y(1),Z(1),STAT1,                           -
     2               X(2),Y(2),Z(2),STAT2,CASE,ITYPE,I,ISEQ
C
      IF (STAT1 .GT. 0) STAT1 = 0
      IF (STAT2 .GT. 0) STAT2 = 0
C
C CHECK FOR PROPER CYCLING
      IF (N .LT. NRADX(I)) GO TO 110
C
C HAVE COMPLETED AXIAL STATION. SET STATUS AND CONTINUE.
      STAT1 = 1
      GO TO 100
C
      END
*DECK STAT
      SUBROUTINE STATS3
C
C  THIS ROUTINE PREPARES A DUMMY, ZERO-AREA ELEMENT TO PROVIDE THE
C  FINAL STATUS FLAG OF 3
C
C
      COMMON /ACFT/IPRINT,ITAPE,ITYPE,PI
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
C
      WRITE (ITAPE,10)
   10 FORMAT (51H    0.0       0.0       0.0   2    0.0       0.0   ,   -
     1 29H    0.00010         3        )
      WRITE (ITAPE,20)
   20 FORMAT (51H   -0.0001    0.0       0.0   1   -0.0001    0.0   ,   -
     1 29H    0.00013         3        )
      IF (IPRINT .EQ. 1) WRITE (TAPEOT,30)
      IF (IPRINT .EQ. 1) WRITE (TAPEOT,40)
   30 FORMAT(52H     0.0       0.0       0.0   2    0.0       0.0   ,   -
     1 29H    0.00010         3        )
   40 FORMAT(52H    -0.0001    0.0       0.0   1   -0.0001    0.0   ,   -
     1 29H    0.00013         3        )
C
      RETURN
      END
*DECK AERO
      OVERLAY (MARK4,2,0)
      PROGRAM AERO
C     SUBROUTINE AERO
C
C **** THIS ROUTINE CONTROLS THE AERODYNAMIC PROGRAM
C
C
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FSBS/FS,BS
      COMMON /TAGS/ITAG4,ITAG9,ITAG10
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /REF/SREF,MAC,SPAN,XCG,YCG,ZCG
      COMMON /ABDATA/NAB,ALPHA(20),BETA(20),ROL(20),CDELTA(20),QI(20),  -
     1               RI(20),PI(20)
      COMMON /INTERF/INT,ISHE(20),NSHE(100),I9,ISHEF,INF(20,22),        -
     1               DINF(20,6),LTOTAB(20)
      DIMENSION  TITLE(15),IPG(20),FS(8),BS(8),EO(25)
      INTEGER  ERROR,PAGE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL  MACH,MAC
C
      DATA GAS1,GAS2,GAS3,GAS4/4H  *A,4HIR* ,4H*HEL,4HIUM*/
C
C  READ AERO SYSTEM CONTROL CARD
      READ (TAPEIN,10) TITLE
   10  FORMAT (15A4)
      WRITE (TAPEOT,20) TITLE
   20  FORMAT (1H1,31H***** AERODYNAMIC PROGRAM *****,/1H0,15A4)
C
C  READ AERO FLAG CARD
      READ(TAPEIN,30) IPG,NTAPE,IREP
   30 FORMAT( 20I1,5X,I2,I1)
      IF (IREP.NE.0) GO TO 31
      IG4=3
C     READ (4'IG4) EO
      CALL READMS (4,EO,25,IG4)
      NEXT=EO(1)
      IG4=2
C     READ (4'IG4) EO
      CALL READMS (4,EO,25,IG4)
      EO(1)=NEXT
C     WRITE (4'IG4) EO
      CALL WRITMS (4,EO,25,IG4)
   31 CONTINUE
C
      DO 80 I=1,20
       IF (IPG(I) .EQ. 0) GO TO 90
       IF (IPG(I) .EQ. 1) WRITE (TAPEOT,40) I
   40 FORMAT (1H0,15X,I2,31H FLOW FIELD ANALYSIS (OPTION 1))
       IF (IPG(I) .EQ. 2) WRITE (TAPEOT,50) I
   50   FORMAT (1H0,15X,I2,31H SHIELDING ANALYSIS  (OPTION 2) )
       IF (IPG(I) .EQ. 3) WRITE (TAPEOT,60) I
   60   FORMAT (1H0,15X,I2,31H INVISCID PRESSURES  (OPTION 3) )
       IF (IPG(I) .EQ. 4) WRITE (TAPEOT,70) I
   70   FORMAT (1H0,15X,I2,31H VISCOUS FORCES      (OPTION 4) )
      IF (IPG(I) .EQ. 5) WRITE (TAPEOT,71) I
   71   FORMAT (1H0,15X,I2,31H SPECIAL ROUTINES    (OPTION 5) )
   80 CONTINUE
C
C  READ FLIGHT CONDITION CARD
   90 READ (TAPEIN,100) MACH,ALT,PSTAG,TSTAG,IGAS,NAB
  100  FORMAT (4F10.0,I1,I2)
C  READ REFERENCE DIMENSION CARD
      READ (TAPEIN,110) SREF,MAC,SPAN,XCG,YCG,ZCG
  110  FORMAT (6F10.0)
      DO 130 I=1,NAB
      READ (TAPEIN,120) ALPHA(I),BETA(I),ROL(I),CDELTA(I),QI(I),RI(I),  -
     1                  PI(I)
  120  FORMAT (7F10.0)
  130 CONTINUE
C
C  SET GAS  CONSTANTS
      IF (IGAS .EQ. 1) GO TO 140
C****AIR****
      GAM = 1.40
      GASCP = 6.00793E+3
      PRAN = 0.71
      AV1 = 225.0
      AV2 = 8.0382436E-10
      AV3 = 1.0
      GTYPE(1) = GAS1
      GTYPE(2) = GAS2
      GO TO 150
C
C****HELIUM****
  140 GAM = 5./3.
      GASCP = 3.1250E+4
      PRAN = 2./3.
      AV1 = 1.0E+5
      AV2 = 7.17884E-9
      AV3 = 0.647
      GTYPE(1) = GAS3
      GTYPE(2) = GAS4
C
  150  CONTINUE
C  DETERMINE FREE STREAM PROPERTIES
      IF (ALT .GE. -1000.0) GO TO 160
      PFS = PSTAG
      TFS = TSTAG
      GO TO 180
  160 CONTINUE
      IF (PSTAG .GT. 0.0) GO TO 170
C  USE U S 1962 ATMOSPHERE
      CALL ATMOS (ALT,TFS,PFS,AFS,RHOFS)
      GO TO 190
C  USE WIND TUNNEL CONDITIONS (GAMMA=GAM) EQ.44,43,29C,26 OF TR-1135
  170 PFS=PSTAG*(1.+(GAM-1.)*MACH*MACH/2.)**(-GAM/(GAM-1.))*2116.217
      TFS = (TSTAG + 459.6) / (1.0 + (GAM-1.0)*MACH*MACH/2.0)
  180 CONTINUE
      AFS = SQRT((GAM-1.)*GASCP*TFS)
      RHOFS = GAM*PFS/((GAM-1.0)*GASCP*TFS)
  190 IF(TFS.GE.AV1) VIS = 2.27E-8*TFS**1.5/(TFS + 198.6)
      IF(TFS.LT.AV1) VIS = AV2*TFS**AV3
      V = MACH * AFS
      RENO = RHOFS * V / VIS
C  INITIALIZE FREE STREAM DATA ARRAY
      FS(1) = RHOFS
      FS(2) = PFS
      FS(3) = TFS
      FS(4) = AFS
      FS(5) = VIS
      FS(6) = MACH
      FS(7) = MACH * FS(4)
      FS(8) = FS(1)*FS(7)/FS(5)
C
      J = 0
  200 J = J + 1
      IF (IPG(J) .EQ. 0) GO TO 260
      IPROG = IPG(J)
C
      GO TO (210,220,230,240,241,243), IPROG
C
C 210 CALL FLOW
  210 CALL OVERLAY (5HMARK4,2,1,6HRECALL)
       GO TO 250
C 220 CALL SHIELD
  220 CALL OVERLAY (5HMARK4,2,2,6HRECALL)
       GO TO 250
C 230 CALL PRES
  230 CALL OVERLAY (5HMARK4,2,3,6HRECALL)
       GO TO 250
C 240 CALL VISCUS
  240 CALL OVERLAY (5HMARK4,2,4,6HRECALL)
      GO TO 250
C 241 CALL SPEC
  241 CALL OVERLAY (5HMARK4,2,5,6HRECALL)
      GO TO 250
C
C 243 CALL STREAM
  243 CALL OVERLAY (5HMARK4,2,6,6HRECALL)
      GO TO 250
C
  250 IF (ERROR .EQ. 0) GO TO 200
      GO TO 280
  260 CONTINUE
C
      WRITE (TAPEOT,270)
  270  FORMAT (1H0,37H *** AERODYNAMIC ANALYSIS IS COMPLETE  )
C
C
C 280 RETURN
  280 CONTINUE
      END
*DECK COMP
      SUBROUTINE COMPR (ANGLE,MER,IPRINT,CPSTAG,ISDET,IFIRST,CP)
C
C  USING THE FREE STREAM MACH NUMBER AND THE EQUIVALENT WEDGE ANGLE,
C  THIS ROUTINE COMPUTES THE CONDITIONS BEHIND THE SHOCK
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FSBS/FS,BS
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      DIMENSION  FS(8),ANGLE(3),BS(8),R(3)
      DIMENSION  TITLE(15)
C
      INTEGER  CASE,PAGE,ERROR
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL        MACHSQ, MACHO, MACH1
      MER = 0
      G = GAM
      IF (ISDET .EQ. 1) GO TO 210
      IF (ABS(ANGLE(2)) .LT. 0.00001) GO TO 240
      IF (ANGLE(2) .GT. 55.0) GO TO 10
      IF (ABS(ANGLE(2)) .LE. 2.0) GO TO 260
C
C  SET UP CUBIC TO BE SOLVED FOR SIN**2 THETA (SHOCK ANGLE) - CONSTANTS
C  DEFINED IN EQUATION 150B OF TR 1135
      B = -(FS(6)**2+2.)/FS(6)**2 -G*SIN(ANGLE(2)/57.29578)**2
      C = (2.0*FS(6)**2 + 1.0)/FS(6)**4 +((G+1.)**2/4.+(G-1.)/FS(6)**2)*-
     1     SIN(ANGLE(2)/57.29578)**2
      D = -COS(ANGLE(2)/57.29578)**2 /FS(6)**4

C     CHECK FOR SHOCK DETACHMENT
      IF (((-B**2/9. + C/3.)**3 + ((B/3.)**3 - (B*C - 3.*D)/6.)**2)     -
     1       .GE. 0.0) GO TO 10

C     SHOCK NOT DETACHED, COMPUTE THREE REAL ROOTS

      Y      = B**2 - 3.*C
      Z      = (9.*B*C - 2.*B**3 - 27.*D)/(2.*Y**1.5)
      W      = ARCOS(Z)
      Z      = W/3.
      Y      = 2.*SQRT(Y)
      R(1)   = (Y*COS(Z) - B)/3.
      R(2)   = -(Y*COS(Z + 60./57.29578)  + B)/3.
      R(3)   = -(Y*COS(Z - 60./57.29578)  + B)/3.
      GO TO 20

C  CUBIC SOLUTION WAS NOT FOUND BECAUSE THE SHOCK HAS DETACHED. FLOW
C  PROPERTIES WILL BE CALCULATED BY THE METHOD OF KAUFMAN
   10 ETAC   = 1.0
      ISE = 0
      CALL NEWTPM (ANGLE,EMN,CP,ETAC,IPRINT,MER,CPSTAG,                 -
     1          ISE,IFIRST)
      IF (MER - 1)230,210,210
C
C  A SOLUTION TO THE CUBIC WAS FOUND. CHECK FOR DESIRED SOLUTION.
C  SMALLEST ROOT REQUIRES A DECREASE IN ENTROPY WHICH IS NOT ALLOWED.
C  LARGEST ROOT IS NOT ATTAINED IN PRACTICAL CASES. THEREFORE PICK
C  MIDDLE ANSWER.
   20 IF (R(1) - R(2))30,110,40
   30 K = 1
      GO TO 50
   40 K = 2
   50 IF (R(2) - R(3))60,120,70
   60 M = 1
      GO TO 80
   70 M = 2
   80 IF (K .EQ. M) GO TO 120
      IF (R(1) - R(3))90,130,100
   90 GO TO (130,110), K
  100 GO TO (110,130), K
  110 ANGLE(3) = R(1)
       GO TO 140
  120 ANGLE(3) = R(2)
       GO TO 140
  130 ANGLE(3) = R(3)
C
C  CHECK IF ANGLE IS NEGATIVE AND PRINT ERROR NOTE IF REQUIRED
  140 IF (ANGLE(3) .GE. 0.0) GO TO 170
      IF (IPRINT .NE. 1) GO TO 160
      WRITE (TAPEOT,150)
  150 FORMAT (1H0,39H NEGATIVE VALUE FOUND FOR SIN**2 THETA             -
     1  41HIN CUBIC. TO CONTINUE, IT IS SET TO ZERO.  )
  160 ANGLE(3) = 0.0
  170 IF (ANGLE(3) .LE. 1.0) GO TO 200
      IF (IPRINT .NE. 1) GO TO 190
      WRITE (TAPEOT,180)
  180 FORMAT (1H0,41H IN CUBIC, SIN**2 THETA GREATER THAN ONE.          -
     1 31H TO CONTINUE, IT IS SET TO ONE.  )
  190 ANGLE(3) = 1.0
C
C  CALCULATE CONDITIONS BEHIND THE SHOCK USING THE SELECTED SIN**2 THETA
  200 EMN   = FS(6)**2 * ANGLE(3)
C  DENSITY       EQ. 129 OF TR 1135
  210 IF (EMN .LT. 1.01) EMN = 1.01
      BS(1) = FS(1)*(G+1.)*EMN/((G-1.)*EMN + 2)
C  PRESSURE      EQ. 128
      BS(2) = FS(2)*(2.*G*EMN - (G-1.))/(G+1.)
C  TEMPERATURE   EQ. 130
      R(3) =  (2.*G*EMN -(G-1.))*(2.+(G-1.)*EMN)/((G+1.)**2*EMN)
      BS(3) = FS(3) * R(3)
C  SPEED OF SOUND
      BS(4) = FS(4) * SQRT(R(3))
C  VISCOSITY
      IF(BS(3).GE.AV1) BS(5) = 2.27E-8*BS(3)**1.5/(BS(3)+198.6)
      IF(BS(3).LT.AV1) BS(5) = AV2*BS(3)**AV3
C  MACH NUMBER   EQ. 132
      BS6SQ =(((G+1.)*FS(6))**2*EMN - 4.*(EMN-1.)*(G*EMN+1.))/          -
     1       ((2.*G*EMN - (G-1.))*(2. + (G-1.)*EMN))
      IF (BS6SQ .LT. 1.0) BS(6) = 1.01
      IF (BS6SQ .GE. 1.0) BS(6) = SQRT(BS6SQ)
C  VELOCITY
      BS(7) = BS(4) * BS(6)
C  REYNOLDS NUMBER PER FOOT
      BS(8) = BS(1) * BS(7)/BS(5)
      MER = 0
C  SHOCK ANGLE
      ANGLE(3) = SQRT(ANGLE(3))
      IF (ABS(ANGLE(3)) .GT. 1.0) ANGLE(3) = 1.0
      ANGLE(3) = ARSIN(ANGLE(3)) * 0.5729578E02
C
      CP = 4.*(EMN - 1.0)/((G+1.)*FS(6)**2)
C
  230 RETURN
C
C     ANGLE(2) IS ZERO, SET BS(I) = FS(I), CP = 0.0, AND EXIT

  240 DO 250 I= 1,8
  250 BS(I)  = FS(I)
      CP     = 0.0
      RETURN
C  USE WEAK OBLIQUE SHOCK RELATIONSHIP (LIEPMAN AND ROSHKO, P.92)
  260 ANGLE(3) = 1.0/FS(6)**2 + 0.5*(G+1.)/SQRT(FS(6)**2-1.0)*ANGLE(2)/ -
     1           57.295779
      GO TO 200
      END
*DECK EXPA
      SUBROUTINE EXPAND (ANGLE,MER,IPRINT,ISDET,CP)
C
C  GIVEN THE FREE STREAM CONDITIONS (FS) AND THE  TURNING  ANGLE IN
C  DEGREES (ANGLE(2)), THIS SUBROUTINE PERFORMS AN ISENTROPIC PRANDTL-
C  MEYER EXPANSION(ANGLE(2).GT.0.) OR COMPRESSION(ANGLE(2).LT.0.)
C
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FSBS/FS,BS
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      DIMENSION  FS(8),ANGLE(3),BS(8),A(2),C(2)
      DIMENSION  TITLE(15)
C
      INTEGER  CASE,PAGE,ERROR
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL  NU1, NU2, NU1D, NU2D
C
C  CHECK IF FREE STREAM MACH NO. .GE. 1.0
      IF (FS(6).GE.1.0) GO TO 10
C  INPUT MACH NO. SUBSONIC. FOR PROGRAM CONTINUITY SET = 1.0 AND GO ON
      EMSQ = 1.0
      GO TO 20
C
C  SQUARE FREE STREAM MACH NO.
   10 EMSQ = FS(6)**2
C   DEFINE GAMMA RATIO FUNCTION GR.
   20 G = GAM
      GR = SQRT((G+1.)/(G-1.))
C  CALCULATE PRANDTL-MEYER ANGLE FOR FREE STREAM CONDITIONS USING
C  EQUATION 171C OF TR 1135  (RADIANS)
      NU1 = GR*ATAN(SQRT (EMSQ-1.)/GR ) - ATAN(SQRT(EMSQ-1.))
C
C  CALCULATE PRANDTL-MEYER ANGLE AFTER THE EXPANSION (RADIANS)
      NU1D = NU1 * 57.295779
      NU2D = NU1D + ANGLE(2)
      NU2 = NU2D/57.295779
C
C  CHECK IF FLOW COMPRESSED TO SUBSONIC.
C
      IF (NU2D.GT.0.) GO TO 30
C  NU2D .LE. 0.0, RETURN SONIC CONDITIONS
C
      BS(6) = 1.0
      MER = 2
      GO TO 190
C
C  CHECK IF FLOW HAS EXPANDED TO AN INFINITE MACH NUMBER (TAKEN
C  AS 100. FOR ALL PRACTICAL PURPOSES).  IF SO, RETURN ZERO PRESSURE.
   30 IF (NU2D.LT.(0.97815*(GR-1.)*90.0)) GO TO 40
      MER = 2
      BS(6) = 100.0
      GO TO 190
C
C
C  START OF ITERATION TO FIND MACH NO. DOWNSTREAM
C  SET INITIAL CONDITIONS AND TOLERANCE
   40 I = 0
      A(2) = 0.0
      C(2) = 0.0
      EPS = 1.E-4
      JPATH = 1
C  JPATH CONTROLS THE LOGICAL PATH DURING THE ITERATION CYCLE.
C  CALCULATE APPROXIMATE DOWNSTREAM MACH NO.
      BS(6) = FS(6)*(1. + (NU2-NU1)*(1.+.5*(G-1.)*EMSQ)/SQRT(EMSQ-1.))
      IF (BS(6).GT.1.0) GO TO 50
      BS(6) = 1.01
C  SET ITERATION COUNTER AND CHECK FOR MAXIMUM
   50 I    = I + 1
C
C  CHECK NUMBER OF ITERATIONS COUNTER
   60 IF (I .LE. 20) GO TO 80
      WRITE (TAPEOT,70) I
   70 FORMAT (1H0,I4,42H ITERATIONS IN EXPANSION ROUTINE. THE LAST      -
     1 25H VALUE HAS BEEN ACCEPTED. )
      GO TO 190
C
   80 A(2) = BS(6)
C
      R =  (NU2     + ATAN(SQRT(BS(6)**2 - 1.0)))/GR
      R = TAN(R)
      BS(6) = SQRT(1.0 + (R*GR)**2)
C
      C(2) = BS(6)
C
C  CHECK IF FLOW ITERATION IS TO BE PRINTED OUT
      IF (IPRINT .NE. 1) GO TO 100
      WRITE (TAPEOT,90) A(2),C(2)
   90  FORMAT (1H ,17X3HMA=F8.4,4X3HMC=F8.4 )
C
C  CHECK IF ITERATION ACCURACY HAS BEEN REACHED
  100 DCA2 = C(2)-A(2)
      IF (ABS(DCA2/C(2)).LE.EPS) GO TO 190
C
      GO TO (110,150,160), JPATH
  110 JPATH = 2
C  STEP ASSUMED VALUE BY AN ARBITRARY INCREMENT
C  EXPERIENCE HAS SHOWN THAT ONE-12TH OF C(2) TO BE A GOOD VALUE.
  120 DA = C(2)/12.
  130 A(1) = A(2)
      C(1) = C(2)
      DCA1 = DCA2
      IF (DCA1.GT.0.0) GO TO 140
      BS(6)= C(1) - DA
C  MAKE SURE THAT 2ND GUESS IS NOT OUT OF RANGE.
      IF(BS(6).GT.1.0) GO TO 50
      BS(6)= (C(1)-1.0)/2. + 1.0
      GO TO 50
  140 BS(6)= C(1) + DA
      GO TO 50
  150 IF ((DCA2/DCA1).GT.0.0) GO TO 120
      JPATH = 3
  160 IF ((DCA2/DCA1).GT.0.0) GO TO 130
C  CALCULATE MACH NUMBER AFTER EXPANSION USING 2 PREVIOUS ESTIMATES
      IF ((C(2)-C(1)) .NE. 0.0) GO TO 170
      DADC = 0.0
      GO TO 180
  170 DADC = (A(2)-A(1))/(C(2)-C(1))
  180 BS(6) = (A(1)-C(1)*DADC)/(1.-DADC)
      A(1) = A(2)
      C(1) = C(2)
      DCA1 = DCA2
      DA = DA/2.
      GO TO 50
C
C
C  CALCULATE FINAL CHARACTERISTICS BEHIND EXPANSION FAN
  190  ONEOM = 1.0 / BS(6)
      ANGLE(3) = ARSIN(ONEOM)*57.295779
      Z = (2.0 + (G-1.)*EMSQ) / (2.0 + (G-1.)*BS(6)**2)
      BS(1) = FS(1) *Z**(1./(G-1.))
      BS(2) = FS(2) *Z**(G /(G-1.))
      BS(3) = FS(3) *Z
      BS(4) = FS(4) *SQRT(Z)
      IF(BS(3).GE.AV1) BS(5) = 2.27E-8*BS(3)**1.5/(BS(3)+198.6)
      IF(BS(3).LT.AV1) BS(5) = AV2*BS(3)**AV3
      BS(7) = BS(6) * BS(4)
      BS(8) = BS(1) * BS(7)/BS(5)
C
      CP =  (Z**(G/(G-1.))-1.0) / (0.5*G*EMSQ)

      RETURN
C
      END
*DECK CONE
      SUBROUTINE CONE (ANGLE,CP,ISDET)
C
C  THIS IS AN IMPROVED APPROXIMATE CONE FLOW SOLUTION
C  DEVELOPED BY D. N. SMYTH
C  SECOND ORDER THEORY USED FOR SMALL VALUES OF SIMILARITY PARAMETER
C  APPROXIMATE SOLUTION OF HAMMITT AND MURTHY FOR LARGE VALUES
C  MIDRANGE GIVEN BY SUITABLE TRANSITION FUNCTION
C
      COMMON /FSBS/FS,BS
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      DIMENSION ANGLE(3),FS(8),BS(8)
      DIMENSION  TITLE(15)
      REAL  MACH
      INTEGER  CASE,PAGE,ERROR
      DATA RC/.17453292E-1/
      G = GAM
      EM = FS(6)
      ANGLE(2) = ABS(ANGLE(1))
      DCR = ANGLE(2)*RC
C
C  TEST FOR ZERO CONE ANGLE
      IF (DCR .GT. 1.E-4)  GO TO 7
C  CONE ANGLE TOO SMALL.  SET PROPERTIES AND RETURN.
      CP = 0.0
      DO 6 I = 1,8
    6 BS(I) = FS(I)
      ANGLE(3) = ARSIN(1.0/EM)/RC
      RETURN
C
C
    7 CONTINUE
      SINDC = SIN(DCR)
      EMSIN = EM*SINDC
      EMSQ = EM**2
      KSOL = 2
C
C
C  CALCULATE UPPER TRANSITION POINT, EMSINF.
      EMSINF = 1.40
      IF (EM.GE.10.0) GO TO 8
      EMSINF = 0.325
      IF (EM.GT.1.5) EMSINF = 1.40 - 1.075*EXP((EM-1.5)*(-0.8))
    8 IF (EMSIN.LT.EMSINF) GO TO 20
      KSOL = 1
C
C  CALCULATE CONE SURFACE PROPERTIES USING METHOD OF
C  HAMMITT AND MURTHY.
    9 SINSQ = SINDC**2
      SIN2 = SIN(2.*DCR)
      H2 = (G-1.)*SINSQ + 2./EMSQ
      H1 = 2. - (G+5.)*SINSQ
      HX = H2*H1/SIN2**2
      IF (HX .GT. -1.0)  GO TO 12
C
C  FLOW DETACHED.  USE TAN-CONE EMPIRICAL
      CK = 2.*(G+1.)/(G+3.)*EMSIN
      DSR = (CK+EXP(-CK))/EM
      IF (DSR .GT. 1.0)  DSR = 1.0
      DSR = ARSIN(DSR)
      KSOL = 1
      GO TO 11
   12 CONTINUE
      IF (ABS(H1).LE.1.E-3) GO TO 10
      RAD = SQRT(1.0 + HX)
      DSR = DCR - SIN2*(1.0 - RAD)/H1
      GO TO 11
   10 DSR = DCR + 0.5*H2/SIN2*(1.0 - 0.25*HX*(1.0 - 0.5*HX))
   11 EMNSSQ = EMSQ*SIN(DSR)**2
      HS2 = (DSR - DCR)**2
      EMC = SQRT((EMSQ-EMNSSQ)*(1.0 + 2.0*HS2)/(1.0 + 0.5*(G - 1.0)*    -
     1          (EMNSSQ*(1.0 + 2.0*HS2) - 2.0*HS2*EMSQ)))
      ELIM = (G - 1.0)/(G + 1.0)
      PSP1 = 2.0*G/(G+1.0)*EMNSSQ - ELIM
      T1TS = (PSP1 + ELIM)/(1.0 + ELIM*PSP1)/PSP1
      TCT1 = (1.0 + (G-1.)*0.5*EMSQ)/(1.0 + (G-1.)*0.5*EMC**2)
      PCPS = (TCT1*T1TS)**(G/(G-1.))
      PCP1 = PCPS*PSP1
      CP   = 2.0*(PCP1 - 1.0)/(G*EMSQ)
      GO TO (40,31), KSOL
C
C
C  CALCULATE LOWER TRANSITION POINT, EMSINO.
   20 EMSINO = 0.2
      IF (EM.GT.3.0) EMSINO = 0.3
      IF (EMSIN.GT.EMSINO) GO TO 30
      KSOL = 1
C
C  CALCULATE CONE SURFACE PROPERTIES USING 2ND-ORDER THEORY.
   21 BETA = SQRT(EMSQ - 1.)
      TANDC = TAN(DCR)
      TANSQ = TANDC**2
      BETA2 = 5.0*EMSQ - 1.0
      AM = 3.25*EMSQ + 0.5 + (G+1.)*(EMSQ/BETA)**2
      PHI = 0.69314718 - ALOG(BETA) - ALOG(TANDC)
      CP  = TANSQ*(2.*PHI-1.0+TANSQ*(3.*(BETA*PHI)**2-BETA2*PHI + AM))
      IF (KSOL.EQ.2) GO TO 22
      DSR = ARSIN(1./EM)
      PCP1 = G*EMSQ*CP *0.5 + 1.0
      TCT1 = PCP1**((G-1.)/G)
      EMC = SQRT(2./(G-1.)*((1.0+(G-1.)*0.5*EMSQ)/TCT1 - 1.0))
      GO TO 40
   22 DCP2 = TANDC*(4.*(PHI - 1.0) + TANSQ*(6.*PHI*(2.*PHI-1.0)*        -
     1       BETA**2 - BETA2*(4.* PHI -1.0) + 4.*AM))/(EM*COS(DCR)**3)
      GO TO 32
C
C  CALCULATE CONE SURFACE PROPERTIES USING TRANSITION SOLUTION
C  (THAT IS, A COMBINATION OF BOTH 2ND-ORDER AND HAMMITT-MURTHY).
   30 DXF = EMSINF - EMSINO
      DX = EMSIN - EMSINO
      SINDC = EMSINF/EM
      DCR = ARSIN(SINDC)
      GO TO 9
   31 CPHM = CP
      DCR = ARSIN(EMSINO/EM)
      GO TO 21
   32 A = (CPHM - CP - DCP2*DXF)/DXF**2
      CP = CP + DX*(DCP2 + A*DX)
      PCP1 = 0.5*G*EMSQ*CP + 1.0
      EMNSF = EM*SIN(DSR)
      EMNS = (EMNSF - 1.)*(EMSIN/EMSINF)**2 + 1.0
      EMNSSQ = EMNS**2
      EMSSQ = ((G+1.)*EM*EMNS)**2 - 4.*(EMNSSQ-1.)*(G*EMNSSQ+1.)
      DSR = ARSIN(EMNS/EM)
      EMSSQ = EMSSQ/((2.*G*EMNSSQ-(G-1.))*((G-1.)*EMNSSQ+2.))
      PSPC = (2.*G*EMNSSQ - (G-1.))/(G+1.)/PCP1
      EMC = SQRT(((1.+0.5*(G-1.)*EMSSQ)*PSPC**((G-1.)/G) - 1.)*2/(G-1.))
      TCT1 = (1.+(G-1.)*0.5*EMSQ)/(1.+(G-1.)*0.5*EMC**2)
   40 CONTINUE
C
C  CALCULATE FLOW ARRAY BS
      ANGLE(3) = DSR/RC
      BS(1) = FS(1)*PCP1/TCT1
      BS(2) = FS(2)*PCP1
      BS(3) = FS(3)*TCT1
      BS(4) = FS(4)*SQRT(TCT1)
      IF (BS(3).GE.AV1) BS(5) = 2.27E-8*BS(3)**1.5/(BS(3)+198.6)
      IF (BS(3).LT.AV1) BS(5) = AV2*BS(3)**AV3
      BS(6) = EMC
      BS(7) = BS(6)*BS(4)
      BS(8) = BS(1)*BS(7)/BS(5)
C
C
      RETURN
      END
*DECK NEWT
      SUBROUTINE NEWTPM (ANGLE,EMN,CP,ETAC,IPRINT,MER,CPSTAG,           -
     1          ISE,IFIRST )
C
C  THIS SUBROUTINE CALCULATES THE SURFACE CONDITIONS USING THE BLUNT
C  BODY SHOCK-EXPANSION TECHNIQUE OF KAUFMAN, JOURNAL OF THE
C  ASTRONAUTICAL SCIENCES, VOL X, NO.2 SUMMER 1963.
C
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FSBS/FS,BS
      DIMENSION FS(8),BS(8),ANGLE(3)
      DIMENSION  TITLE(15)
      INTEGER  CASE,PAGE,ERROR
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      REAL MACHO, MACH, MSUBQ, MU, MACHSQ, M1, M2
C
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
C
      IF (CPSTAG .LE. 0.01) CPSTAG = 2.0
      IF (ETAC .LE. 0.01) ETAC = 1.0
      MER = 0
      IF (IFIRST .EQ. 1) GO TO 60
      IFIRST = 1
      MACHO = FS(6)
C
C
C  THE FOLLOWING SECTION PERFORMS AN ITERATION TO FIND THE MATCHING
C  POINT MACH NUMBER.
C
C  SET GAMMA
      G = GAM
      EMLOW = 0.91 + 0.3125*G
      EMUP = EMLOW + 0.40
      JJ= 0
      P2 = 0.0
      M2 = 0.0
C  SOLVE FOR PRESSURE RATIO  (1.0/ EQ. 100 OF TR 1135)
      PCAP= (2./((G+1.0)*MACHO*MACHO))**(G/(G-1.0))  *                  -
     1    ((2.*G*MACHO*MACHO-(G-1.0))/(G+1.0))**(1.0/(G-1.0))
C
C  ASSUME MSUBQ = EMLOW
      MSUBQ = EMLOW
C
C  CALCULATE  Q  (SEE KAUFMAN)
   10 Q =  (2.0/(2.0+ (G-1.0)*MSUBQ*MSUBQ))**(G/(G-1.0))
C
C  CALCULATE P SUB C  (EQ 9 OF KAUFMAN)
      PC = Q * (1.0 - (G*G*MSUBQ**4*Q)/ (4.0*(MSUBQ*MSUBQ-1.0)*(1.-Q)))
      CPQ = (2.0 / (G*MACHO*MACHO)) * (Q/PC - 1.0)
      IF (IPRINT .NE. 1) GO TO 30
      WRITE (TAPEOT,20) MSUBQ,PC,CPQ
   20 FORMAT (1H ,17X7HMSUBQ =F9.6,6H  PC =1PE11.4,7H  CPQ =E11.4 )
C
C  CHECK ITERATION ACCURACY
   30 IF (ABS(MSUBQ-M2) .LT. 0.0001) GO TO 50
C
C  SET UP ITERATION TERMS
      P1 = P2
      P2 = PC
      M1 = M2
      M2 = MSUBQ
C
C  STEP ITERATION COUNTER AND CHECK CYCLE
      JJ= JJ+ 1
      IF (JJ.GT. 1) GO TO 40
      MSUBQ = EMUP
       GO TO 10
   40 IF (JJ.GT.20) GO TO 50
C  ESTIMATE NEW M
      IF (ABS(P2-P1) .LT. 0.000001) GO TO 50
      MSUBQ = M1 + (PCAP-P1)*(M2-M1)/(P2-P1)
C  CHECK NEW ESTIMATE FOR M
      IF (MSUBQ .GT. EMUP) MSUBQ = EMUP
      IF (MSUBQ .LT. EMLOW) MSUBQ = EMLOW
      GO TO 10
C
C  CALCULATE MATCHING POINT IMPACT ANGLE
   50 IF ((Q-P) .LE. 0.0)  GO TO 100
      SDELTQ = SQRT((Q-PCAP)/(1.0-PCAP))
      DELTQ = ARSIN(SDELTQ) * 0.5729578E02
C
C  CALCULATE EXPANSION ANGLE FROM MATCHING POINT
   60 DLTMU = DELTQ - ANGLE(2)
C
C  CHECK IF FLOW WILL EXPAND AT LEAST TO MATCHING POINT
      IF (DLTMU .LT. 0.0) GO TO 100
C
C  DETERMINE MACH NUMBER ON SURFACE
      FS(6) = MSUBQ
      ANGLE(2) = DLTMU
C
      ISDET = 0
      CALL EXPAND (ANGLE,MER,IPRINT,ISDET,CP)
      FS(6) = MACHO
C  SET UP SURFACE MACH NUMBER
      MACH = BS(6)
C
C  CALCULATE SURFACE PRESSURE RATIO (EQ. 44 OF TR 1135)
      PPO = ETAC * (1.0 + (G-1.0)*MACH*MACH/2.0)**(-G/(G-1.0))
C
C  CALCULATE  P / P FREE STREAM
      PPFS = (1.0/PCAP)*PPO
C  CALCULATE PRESSURE COEFFICIENT ON SURFACE
      CP =  (2.0/(G*MACHO*MACHO))* (PPFS - 1.0)
      IF (IPRINT .NE. 1) GO TO 80
      WRITE (TAPEOT,70) MSUBQ,PCAP,Q,PPO,MACH,DELTQ,PC,DLTMU,PPFS,CP
   70 FORMAT (1H ,17X23HSHOCK-EXPANSION  M Q  =F7.5,8H  P CAP=1PE11.4,  -
     1  8H  Q    =E11.4,8H  P/PO =E11.4,7H  MACH=0PF7.3,/1H ,17X        -
     2 23HCALCULATIONS     DELTQ=F7.3,8H  P C  =1PE11.4, 8H  DLTMU=     -
     3  E11.4,8H  P/PFS=E11.4,5H  CP=0PF9.5 )
C  CHECK IF FLOW CONDITIONS ARE NEEDED
   80 IF (ISE .GT. 0) GO TO 110
C
C  CALCULATE FREE STREAM TOTAL TEMPERATURE (EQ. 43 OF TR 1135)
      TSUBT = FS(3)*(1.0 +  (G-1.0)*MACHO*MACHO/2.0)
C
C  CALCULATE TEMPERATURE AFTER EXPANSION (IN RANKINE)
      T  = TSUBT /  (1.0 + (G-1.0)*MACH*MACH / 2.0)
C
C  CALCULATE SURFACE PRESSURE
      P  = PPFS * FS(2)
C
C  CALCULATE DENSITY (EQ. 26 OF TR 1135)
      RHO = G*P/((G-1.)*GASCP*T)
C
C  CALCULATE LOCAL SPEED OF SOUND
      A =  SQRT(G*P/RHO)
C
C  CALCULATE LOCAL VELOCITY
      V = MACH * A
C
C  CALCULATE VISCOSITY
      IF(T.GE.AV1)      MU   = 2.27E-8*T**1.5/(T+198.6)
      IF(T.LT.AV1)      MU   = AV2*T**AV3
C
C  CALCULATE REYNOLDS NUMBER PER FOOT (EQ) B1 TR1135)
      RE  = RHO * V / MU
C
C  SET UP DATA FOR USE BACK IN OTHER SUBROUTINES
      BS(1) = RHO
      BS(2) = P
      BS(3) = T
      BS(4) = A
      BS(5) = MU
      BS(6) = MACH
      BS(7) = V
      BS(8) = RE
      IF (IPRINT .NE. 1) GO TO 110
      WRITE (TAPEOT,90) MACH,A,RE,P,TSUBT,V,T,RHO,MU
   90 FORMAT (1H ,34X6HMACH =F7.5,8H  A    =1PE11.4,8H  RE   =E11.4,    -
     1  8H  P    =E11.4,7H  TTOT=0PF7.1,/1H ,34X6HV    =F7.1,8H  T    = -
     2  1PE11.4,8H  RHO  =E11.4,8H  MU   =E11.4  )
C
C
      GO TO 110
C
C
C  FLOW HAS NOT REACHED THE MATCHING POINT. USE NEWTONIAN CALCULATIONS
C  AND SHOCK DETACHED METHOD SUGGESTED BY SMYTH.
  100 CP = CPSTAG * (SIN(ANGLE(2)/.572957795E+02))**2
C
C  CHECK IF FLOW CONDITIONS ARE NEEDED
      MER = 1
      IF (ISE .GT. 0) GO TO 110
C
C  CALCULATE FLOW DATA FOR DETACHED CONDITIONS
C  CALCULATE SQUARE OF MACH NUMBER NORMAL TO EFFECTIVE SHOCK
      MACHSQ=(MACHO*MACHO*CP-(4./(G+1.)))/(2.*(1.-(G-1.)/(G+1.)))
C  CALCULATE EFFECTIVE DENSITY RATIO
      EPSI = ((G-1.0)/(G+1.0))* (1.0 + 2.0/((G-1.0)*MACHSQ))
C  CALCULATE THE EFFECTIVE SHOCK ANGLE SQUARED
      ANGLE(3) = CP / (2.0*(1.0-EPSI))
C  CALCULATE NORMAL MACH SQUARED TIMES SQUARE OF SHOCK ANGLE
      EMN = MACHSQ * ANGLE(3)
C
  110 RETURN
C
      END
*DECK ATMO
      SUBROUTINE ATMOS (A3,A8,A4,A1,A6)

C     THIS ROUTINE CALCULATES ATMOSPHERIC PROPERTIES OF THE
C     US STANDARD ATMOSPHERE,1962,ASSUMING AN INVERSE SQUARE
C     GRAVITATIONAL FIELD. THIS ASSUMPTION YIELDS DATA THAT
C     AGREES WITH THE COESA DOCUMENT WITHIN 1 PER CENT AT
C     ALL ALTITUDES UP TO 700 KILOMETERS (2296588 FEET). THE
C     DATA IS ARRANGED IN THE ATMOSPHERE ARRAY, A, AS
C     FOLLOWS
C     A(1)  = CS, SPEED OF SOUND, FT/SEC
C     A(2)  = (1/CS)(DCS/DZ), SOUND DERIVATIVE, 1/FT
C     A(3)  = Z, GEOMETRIC ALTITUDE, FT (GIVEN)
C     A(4)  = P, PRESSURE, LB/FT2
C     A(5)  = DP/DZ, PRESSURE DERIVATIVE, LB/FT3
C     A(6)  = RHO, DENSITY, SLUGS/FT3
C     A(7)  = (1/RHO)(DRHO/DZ), DENSITY DERIVATIVE, 1/FT
C     A(8)  = T, TEMPERATURE, DEG RANKINE
C     A(9)  = DT/DZ, TEMPERATURE DERIVATIVE, DEG RANKINE/FT

C     VARIOUS CONSTANTS USED
C      EARTH RADIUS                = 20890855 FT
C      SPECIFIC HEAT RATIO FOR AIR = 1.4
C     SEA LEVEL VALUES
C      GRAVITATIONAL ACCELERATION  = 32.1740484 FT/SEC2
C      MOLECULAR WEIGHT            = 28.9644
C      G0*M0/R*                    = 0.018743418 DEG RANK/FT

      DIMENSION  A( 9),HG(10),ZM(14),WM(14),TM(23),PM(22)

C     SET ARRAYS AND CONSTANT VALUES
      DATA G0,WM0,R0,GMRS/32.1740484,28.9644,20890855.0,                -
     1     0.018743418/,HG/-16404.,0.0                                  -
     2     ,36089.,65617.,104987.,154199.,170604.,200131.,              -
     3     259186.,291160./,ZM/295276.,328084.,                         -
     4     360892.,393701.,492126.,524934.,557743.,623360.,             -
     5     754593.,984252.,1312336.,1640420.,1968504.,                  -
     6     2296588./,WM/28.9644,28.88,28.56,                            -
     7     28.07,26.92,26.66,26.4,25.85,24.7,22.66,19.94,               -
     8     17.94,16.84,16.17/

      DATA TM/577.17,518.67,389.97,389.97,411.57                        -
     1     ,487.17,487.17,454.77,325.17,325.17,379.17,469.17            -
     2     ,649.17,1729.17,1999.17,2179.17,2431.17,2791.17              -
     3     ,3295.17,3889.17,4357.17,4663.17,4861.17/,PM/                -
     4     3711.0839,2116.2165,472.67563,114.34314,                     -
     5     18.128355,2.3162178,1.2321972,3.8030279E-01,                 -
     6     2.1671352E-02,3.4313478E-03,6.2773411E-04,1.53490            -
     7     91E-04,5.2624212E-05,1.0561806E-05,7.7083076E-06,            -
     8     5.8267151E-06,3.5159854E-06,1.4520255E-06,3.92905            -
     9     63E-07,8.4030242E-08,2.2835256E-08,7.1875452E-09/

      A(3) = A3

C     CALCULATE G, Z, AND CHECK
   10 Z = A(3)
      G = G0*(R0/(R0+Z))**2
      IF (Z .GT. 295276.0) GO TO 50

C     TMS LINEAR WITH GEOPOTENTIAL. CALCULATE H AND SEARCH
      H      = R0*Z/(R0+Z)
      DO 20 I = 2,10
      J      = I - 1
      IF (HG(I) .GE. H) GO TO 30
   20 CONTINUE

C     CALCULATE TMS SLOPE,TMS, AND SET MOL WT STUFF
   30 ELH    = (TM(J+1) - TM(J))/(HG(J+1) - HG(J))
      TMS    = TM(J) +  ELH*(H - HG(J))
      ELZ    = ELH*G/G0
      DMDZ   = 0.0
      EM     = WM0

C     CHECK TMS SLOPE AND CALCULATE PRESSURE
      IF (ELH .EQ. 0.0) GO TO 40

C     NON - ZERO SLOPE PRESSURE EQUATION
      A(4) = PM(J)*(TM(J)/TMS)**(GMRS/ELH)
      GO TO 80

C     ZERO SLOPE PRESSURE EQUATION

   40 A(4) = PM(J)*EXP(GMRS*(HG(J)-H)/TMS)
      GO TO 80
C     TMS LINEAR WITH Z. SEARCH MATRIX
   50 DO 60 I = 2,14
      J      = I + 8
      K      = I - 1
      IF (ZM(I) .GE. Z) GO TO 70
   60 CONTINUE

C     CALCULATE TMS, SLOPE, AND STUFF
   70 ELZ  = (TM(J+1) - TM(J))/(ZM(K+1) - ZM(K))
      TMS  = TM(J) + ELZ*(Z - ZM(K))
      DMDZ = (WM(K+1) - WM(K))/(ZM(K+1) - ZM(K))
      EM   = WM(K) + DMDZ*(Z - ZM(K))
      ZLZ  = Z - TMS/ELZ

C     PRESSURE EQUATION FOR TMS LINEAR WITH Z
      A(4) = PM(J)*EXP(GMRS/ELZ*(R0/(R0+ZLZ))**2*((Z-ZM(K))*            -
     1       (R0+ZLZ)/(R0+Z)/(R0+ZM(K)) - ALOG(TMS*(R0+ZM(K)            -
     2       )/TM(J)/(R0+Z))))

C     CALCULATE SOUND SPEED AND DERIVATIVE
   80 A(1) = 49.022164*SQRT(TMS)
      A(2) = 0.5*ELZ/TMS

C     CALCULATE DENSITY, DERIVATIVE, AND PRESSURE DERIVATIVE
      A(6) = GMRS*A(4)/G0/TMS
      A(7) = - (A(6)*G/A(4) + ELZ/TMS)
      A(5) = - A(6)*G

C     CALCULATE TEMPERATURE, DERIVATIVE, AND LEAVE
      A(8) = EM*TMS/WM0
      A(9) = (EM*ELZ + TMS*DMDZ)/WM0
   90 A8 = A(8)
      A4 = A(4)
      A1 = A(1)
      A6 = A(6)
      RETURN
      END
*DECK SOLV
      SUBROUTINE  SOLVIT(A,ND,MD,KD,NI,MM,NO,NW,BB,NNB,NMB,NERR)
C
C
C           ****    ***/  *******  *****  *       ***/          *
C           *   *  *  /*     *     *      *      *  /*        ******
C     ****  ****   * / *     *     ***    *      * / *  ****     *  *
C           *      */  *     *     *      *      */  *           ***
C           *      /***      *     *      *****  /***            *  *
C
C             D I R E C T   M A T R I X   S O L U T I O N
C
C     WRITTEN BY J. L. HESS * PROGRAMMED BY T. M. RIDDELL
C
C  THIS VERSION MODIFIED TO DO  PIVOTAL SEARCH BY ROWS.
C  REFER TO PAGE 35 OF DAC-7000 FOR DESCRIPTION OF METHOD.
C  CODED BY  D. N. SMYTH
C
C
      DIMENSION  A ( KD ), IRC(500), ISC(500)
C  AA IS USED WHEN SOLUTIONS ARE WRITTEN ON TAPE NW.
C     DIMENSION  AA(500)
C BB IS USED WHEN SOLUTIONS ARE RETURNED THROUGH CALL STATEMENT.
      DIMENSION BB(NNB,NMB)
C
      LOGICAL  LAST
C
      NERR = 0
      N = ND
      M = MD
      KORE = KD
      NPM = N + M
      IF (MAX0(3 * NPM, M * N) .GT. KORE) STOP 1
      MT = MM
      REWIND MT
      NIN = NI
      REWIND NIN
      NOUT = NO
      REWIND NOUT
      MP1 = M + 1
      NN = N
      NEL = NPM
C
C  INITIALIZE INTERCHANGE COUNTERS
      DO  5  I = 1,N
      IRC(I) = 0
      ISC(I) = I
    5 CONTINUE
      IR = 0
      INT = 0
      NM1 = N - 1
C
C - - CALCULATE THE MAXIMUM NO. OF ROWS, 'K'
C
   10 K = (KORE - NEL) / NEL
C
C - - TEST TO SEE IF THE REST OF THE MATRIX WILL FIT IN CORE
C
      LAST = K .GE. NN
      IF (LAST) K = NN
      IF ((NN-K) .EQ. 1)  K = K - 1
      IRO = IR
C
C - - READ 'K' ROWS OF THE AUGMENTED 'A' MATRIX
C
   20 NT = 0
      DO 30 IB = 1, K
      NS = NT + 1
      NT = NT + NEL
   30 CALL  GETT(NIN, 1, NEL, A(NS), 1, AA2)
C
C - - CHECK TO SEE IF WE WERE UNLUCKY ENOUGH TO END UP WITH ONLY ONE ROW
C
      IF (K .EQ. 1) GO TO 90
C
C - - 'K' IS GREATER THAN '1' SO WE CAN START THE TRIANGULARIZATION
C
      NELP1 = NEL + 1
      NS = - NEL
      NELP2 = NELP1 + 1
C
C - - FORM THE 'TRAPEZOIDAL' ARRAY  (8)
C
      K1 = K
      IF (K .LT. NN)  K1 = K1 + 1
      DO 40 IB = 2,K1
      NP = NELP2 - IB
      NS = NS + NELP1
      NT = NS
C
C  SEARCH FOR PIVOTAL ELEMENT, AMAX
      IMR = 0
      AMAX = 0.0
      I = IR
      IR = IR + 1
      NN = NS + N - IR
      DO 35 I2 = NS,NN
      I = I + 1
      IF (ABS(A(I2)) .LT. ABS(AMAX))  GO TO 35
      AMAX = A(I2)
      IMA = I2
      IMR = I
   35 CONTINUE
C  SET INTERCHANGE COUNTERS AND INTERCHANGE ELEMENTS IN BASE ROW
      IF (IMR .EQ. 0)  GO TO 36
      IRC (IR) = IMR
      A(IMA) = A(NS)
      A(NS) = AMAX
C
      IS = ISC(IR)
      ISC(IR) = ISC(IMR)
      ISC(IMR) = IS
C
   36 CONTINUE
      IF (IB .GT. K)  GO TO 45
      DO 40 IO = IB, K
      NT = NT + NEL
      MN = NT
      NB = NS
C
C  INTERCHANGE ELEMENTS IN OBJECT ROW
      IMA = IMA + NEL
      AMAX = A(IMA)
      A(IMA) = A(NT)
      A(NT) = -AMAX/A(NS)
      DO 40 NF = 2, NP
      MN = MN + 1
      NB = NB + 1
   40 A(MN) = A(MN) + A(NT) * A(NB)
   45 CONTINUE
      IF (LAST) GO TO 90
C
C - - WRITE THE 'TRAPEZOIDAL' MATRIX ON TAPE
C
      NT = 0
      NP = NEL
      NS = - NEL
      DO 50 IO = 1, K
      NS = NS + NELP1
      NT = NT + NEL
      NN = NS + NP - 1
      CALL  SAVE(MT, 2, NP, NP, A(NS), 1, AA2)
   50 NP = NP - 1
      NP = NP - M
      NS = KORE - NEL + 1
C
C - - READ ANOTHER ROW
C
      DO 80 IO = 1, NP
      CALL  GETT(NIN, 1, NEL, A(NS), 1, AA2)
C
C - - MODIFY THIS ROW BY THE 'TRAPEZOIDAL' ARRAY
C
      IR = IRO
      NT = 1
      MN = NS
      DO 70 IB = 1, K
      NB = NT
      NF = MN + 1
      IR = IR + 1
      I2 = NS + IRC(IR) - 1 - IRO
      AMAX = A(I2)
      A(I2) = A(MN)
      A(MN) = -AMAX/A(NT)
      DO 60 NN = NF, KORE
      NB = NB + 1
   60 A(NN) = A(NN) + A(MN) * A(NB)
      MN = NF
   70 NT = NT + NELP1
C
C - - WRITE THE MODIFIED ROW ON TAPE
C
      NN1 = KORE - MN + 1
   80 CALL  SAVE(NOUT, 1, NN1, NN1, A(MN), 1, AA2)
      REWIND NOUT
      REWIND NIN
C
C - - SWITCH THE TAPES
C
      NT = NIN
      NIN = NOUT
      NOUT = NT
C
C - - RE-CALCULATE ROW LENGTH AND LOOP BACK
C
      NEL = NEL - K
      NN = NEL - M
      GO TO 10
C
C - - REWIND ALL TAPES
C
   90 REWIND MT
      REWIND NIN
      REWIND NOUT
C
C  HAVE K ROWS OF TRAPEZOIDAL ARRAY IN CORE.
C  PERFORM COLUMN INTERCHANGES ON PRECEEDING ROWS
C  DUE TO FOLLOWING ROWS
C
      IF (K .LT. 3)  GO TO 96
      NN = K - 2
      NS = -NEL
      DO 95 IB = 1,NN
      NS = NS + NELP1
      I1 = IB + IRO + 1
      DO 94 IR = I1,NM1
      IF (IRC(IR) .EQ. IR)  GO TO  94
      I2 = IRC(IR) - IRO
      IF (I2 .LE. 0)  GO TO 94
      I2 = I2 + NS - IB
      I3 = IR - IRO + NS - IB
      AMAX = A(I2)
      A(I2) = A(I3)
      A(I3) = AMAX
   94 CONTINUE
   95 CONTINUE
C
C - - CONDENSE THE MATRIX
C
   96 NN = NEL
      NL = NEL + 1
      IF (K .EQ. 1) GO TO 110
      NS = 1
      NT = NEL
      DO 100 IB = 2, K
      NS = NS + NELP1
      NT = NT + NEL
      DO 100 IO = NS, NT
      A(NL) = A(IO)
  100 NL = NL + 1
  110 N1 = KORE - K * M + 1
C
C - - THERE, NOW WE CAN START THE BACK-SOLUTION
C * * NOTE..THE FIRST AVAILABLE LOCATION FOR THE SOLUTIONS IS A(N1)
C
      NREM = N
      NEL = NPM
      LAST = K .EQ. N
      NPASS = 0
C
C - - SOLVE FOR THE ANSWERS CORRESPONDING TO 'K' ROWS
C
  120 KM1 = K - 1
      KP1 = K + 1
      NS = NL - MP1
      NPASS = NPASS + 1
      DO 150 MN = 1, M
      NF = NS + MN
      A(NF) = A(NF) / A(NS)
      NT = NS
      IF (KM1 .EQ. 0) GO  TO 150
      DO 140 IB = 1, KM1
      NF = NF - IB - M
      NT = NT - MP1 - IB
      SUM = 0.0
      NP = NF
      N2 = MP1 + IB
      DO 130 IO = 1, IB
      NN = NT + IO
      NP = NP + N2 - IO
  130 SUM = SUM + A(NN) * A(NP)
  140 A(NF) = (A(NF) - SUM) / A(NT)
  150 CONTINUE
C
C - - MOVE THE SOLUTIONS TO CONTIGUOUS LOCATIONS STARTING AT A(N1)
C
      N1 = KORE + 1
      DO 170 NN = 1, K
      DO 160 MN = 1, M
      NL = NL - 1
      N1 = N1 - 1
  160 A(N1) = A(NL)
  170 NL = NL - NN
C
C - - WRITE THE SOLUTIONS ON TAPE
C
      WRITE (NIN) K
      NS = N1 - 1
      DO 180 MN = 1, M
      NT = NS + MN
  180 WRITE (NIN ) (A(IO), IO = NT, KORE, M)
C
C - - TEST IF THIS IS THE LAST PASS
C
      IF (LAST) GO TO 260
C
C - - WE MUST NOW MODIFY THE TRIANGULAR MATRIX TO REFLECT THE EFFECT OF
C     THE SOLUTIONS OBTAINED SO FAR  (EQ 21)
C * * NOTE..LOCATIONS A(1) TO A(N1-1) ARE NOW FREE TO USE
C
C - - CALCULATE THE NEXT VALUES OF 'NEL' AND 'NREM'
C
      NELOLD = NEL
      KOLD = K
      NEL = NEL - K
      NREM = NREM - K
C
C$$$$ CALCULATE NEW K.  B AND C (REAL) WILL ALWAYS BE INTEGERS.
C     K WILL BE CALCULATED REAL AND TRUNCATED - - GOOD.
C
      B = 1 + 2*M
      C = 2*(KOLD*(M+1) - KORE)
      K = (-B + SQRT(B**2 - 4*C))/2.0
      NROW = NREM - K + 1
      IF (K .LT. NREM) GO TO 190
      LAST = .TRUE.
      NROW = 1
      K = NREM
  190 NS = 1
      NT = NELOLD + 1
      NR2 = N - 1
C
C - - READ IN THE ROWS TO BE MODIFIED
C
C
      DO 250 IB = 1, NREM
      NT = NT - 1
      IF (IB .LE. NROW) GO TO 200
      NS = NS + NN
      NT = NT + NN
  200 NN = NT - NS + 1
      CALL  GETT(MT, 2, NN, A(NS), 1, AA2)
C
C  THE FIRST TIME THE TRAPEZOIDAL ARRAY IS READ BACK,
C  THE COLUMN ORDER IS MADE CONSISTENT -
C  THAT IS, THE COLUMN INTER CHANGES OF FOLLOWING
C  ROWS ARE MADE
C
      IF (INT .NE. 0)  GO TO 205
      NR1 = IB + 1
      DO 204 IR = NR1,NR2
      IF (IRC(IR) .EQ. IR)  GO TO 204
      I2 = IRC(IR) + NS - IB
      I3 = IR - IB + NS
      AMAX = A(I2)
      A(I2) = A(I3)
      A(I3) = AMAX
  204 CONTINUE
  205 CONTINUE
      NP = N1 - 1
      NF = NT - M - KM1
      NN = NN - KOLD
      DO 220 MN = 1,M
      N2 = NF
      NA = NP + MN
      NB = NA
      SUM = 0.0
      DO 210 IO = 1, KOLD
      SUM = SUM + A(N2) * A(NA)
      N2 = N2 + 1
  210 NA = NA + M
      N2 = N2 + MN - 1
  220 A(N2) = A(N2) - SUM
C
C - - WRITE THE MODIFIED ROW ON TAPE OR CONDENSE THE ROW
C
      NL = NT - M + 1
      IF (IB .GE. NROW) GO TO 230
      NF = NL - KP1
      NN1 = NF - NS + 1
      NN2 = NT - NL + 1
      CALL  SAVE(NOUT, 4, NN, NN1, A(NS), NN2, A(NL))
      GO TO 250
  230 NF = NL - KOLD
      DO 240 MN = NL, NT
      A(NF) = A(MN)
  240 NF = NF + 1
  250 CONTINUE
      INT = 1
      REWIND MT
      REWIND NOUT
C
C - - SWITCH THE TAPES
C
      NT = MT
      MT = NOUT
      NOUT = NT
C
C - - LOOP BACK THRU THE SOLUTION
C
      NL = NF
      GO TO 120
C
C - - START TO WRAP IT UP
C
  260 REWIND NIN
      N2 = N
C
C * * NOTE.. AT THIS POINT ALL LOCATIONS A(1) THRU A(KORE) ARE FREE
C
      DO 280 IB = 1, NPASS
      READ (NIN) K
      N1 = N2 - K + 1
      NS = N1
      NT = N2
C
C - - READ IN THE SOLUTIONS
C
      DO 270 IO = 1, M
      NM = NT - NS + 1
      CALL  GETT(NIN, 1,NM, A(NS), 1, AA2)
      NT = NT + N
  270 NS = NS + N
  280 N2 = N1 - 1
C
C - - WRITE THE SOLUTIONS ON TAPE
C
      NT = 0
      DO 290 IO = 1, M
      NS = NT + 1
      NT = NT + N
C  ALL N*M SOLVTIONS ARE IN CORE.  CORRECT ORDER
C  DUE TO INTERCHANGES MADE DURING SOLUTION.
C
      DO 289 I = 1,N
      I1 = ISC(I)
      I2 = NS + I - 1
C     AA(I1) = A(I2)
      BB(I1,IO)= A(I2)
  289 CONTINUE
C     CALL SAVE(NW, 1, N, N, AA(1), 1, AA2)
  290 CONTINUE
C
      RETURN
      END
*DECK GETT
      SUBROUTINE GETT(IU, IT, N1, A1, N2, A2)
C
      DIMENSION  A1(N1), A2(N2)
C
      GO TO (10,20,30,40), IT
C
C  READ A1
   10 READ(IU) A1
      RETURN
C
C  READ N1 AND A1
   20 READ(IU) N1, A1
      RETURN
C
C  READ A1 AND A2
   30 READ(IU) A1, A2
      RETURN
C
C  READ IDUM AND A1
   40 READ(IU) IDUM, A1
      RETURN
      END
*DECK SAVE
      SUBROUTINE  SAVE(IU, IT, N, N1, A1, N2, A2)
C
      DIMENSION  A1(N1), A2(N2)
C
      GO TO (10,20,30,40), IT
C
C  WRITE A1
   10 WRITE(IU) A1
      RETURN
C
C  WRITE N AND A1
   20 WRITE(IU)  N, A1
      RETURN
C
C  WRITE A1 AND A2
   30 WRITE(IU) A1, A2
      RETURN
C
C  WRITE N, A1, AND A2
   40 WRITE(IU) N, A1, A2
      RETURN
      END
*DECK ROWF
      SUBROUTINE  ROWFM1(N, M, XI, YI, FI, XKD, NX, MX, LS, IF1)
C
C  CALCULATES XKD ARRAY IN AUGMENTED FORM, ROW BY ROW.
C
C  LS = 0,  SURFACE SPLINE  X + Y VARIABLE
C  LS = 1,  LINEAR SPLINE  X CONSTANT
C  LS = 2,  LINEAR SPLINE  Y CONSTANT
C
C
      DIMENSION  XI(1), YI(1), XKD(1), FI(NX,MX)
      REWIND IF1
      N3 = N + 3
      N3M = N3 + M
C
      XKD(1) = 0.0
      XKD(2) = 0.0
      XKD(3) = 0.0
C
C  FIRST ROW
      DO 10 J = 4,N3
   10 XKD(J) = 1.0
C
C  AUGMENT BY RHS
      J = N3
      DO 20 I = 1,M
      J = J + 1
   20 XKD(J) = 0.0
C
      WRITE(IF1)   (XKD(J), J = 1,N3M)
C
C
C  CHECK FOR LINEAR SPLINE X CONSTANT
      IF (LS .NE. 1)  GO TO 25
C
C  LINEAR SPLINE X CONSTANT
      XKD(2) = 1.0
   25 JX = 0
      DO 30 J = 4,N3
      JX = JX + 1
   30 XKD(J) = XI(JX)
C
      WRITE(IF1)  (XKD(J), J = 1,N3M)
C
C  THIRD ROW
      XKD(2) = 0.0
C  CHECK FOR LINEAR SPLINE Y CONSTANT
   35 IF (LS .NE. 2)  GO TO 37
      XKD(3) = 1.0
   37 JX = 0
      DO 40 J = 4,N3
      JX = JX + 1
   40 XKD(J) = YI(JX)
C
      WRITE(IF1)  (XKD(J), J = 1,N3M)
C
C  FOURTH THROUGH N3 ROWS
      DO 100 I = 1,N
      XKD (1) = 1.0
      XKD(2) = XI(I)
      XKD(3) = YI(I)
      J3 = 3
      DO 80  J = 1,N
      J3 = J3 + 1
      AIJ = 0.0
      TR1 = 0.0
      TR2 = 0.0
      IF (I .EQ. J)  GO TO 70
      IF (XI(I) .EQ. XI (J))  GO TO 50
      TR1 = (XI(I) - XI(J))**2
   50 IF (YI(I) .EQ. YI(J))  GO TO 60
      TR2 = (YI(I) - YI(J))**2
   60 RAIJ = TR1 + TR2
      IF (RAIJ .EQ. 0)  GO TO 70
      AIJ = RAIJ*ALOG(RAIJ)
   70 XKD(J3) = AIJ
   80 CONTINUE
C
C  AUGMENT THE ROW
      DO 90 J = 1,M
      J3 = J3 + 1
   90 XKD(J3) = +FI(I,J)
C
      WRITE(IF1)  (XKD(J), J = 1,N3M)
C
  100 CONTINUE
C
C
      RETURN
      END
*DECK FLOW
      OVERLAY (MARK4,2,1)
      PROGRAM FLOW
C     SUBROUTINE FLOW
C
C  THIS IS THE EXECUTIVE CONTROL PROGRAM FOR THE FLOW FIELD ANALYSIS
C  ROUTINES
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /TAGS/ITAG4,ITAG9,ITAG10
      COMMON /FFIELD/TITLEM(10),TITLES(10),TITLEA(10),TITLER(10),       -
     1        IMTAB(9),IDTYP(5),LOSET(5),LOAB(20),LORG(20),L,           -
     2        DINF(6),IRW,LCNEXT,IREG,MACH,NAB,ALPHA,BETA,NREG,         -
     3        NSREG,ITFLAG
      COMMON /FLIGHT/EACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /FSBS/FS(8),BS(8)
C
      DIMENSION TITLE(15),E(12),E2(13),E3(17)
C
      REAL MACH
      INTEGER ERROR,PAGE
      INTEGER TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,        -
     1        TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
C
      WRITE (TAPEOT,5)
    5  FORMAT (1H1,23H** FLOW-FIELD OPTION **  )
C
C  MASTER DIRECTORY INFORMATION
C
      READ (TAPEIN,10) MFLAG,TITLEM
  10  FORMAT (1I1,19X,10A4)
C
C  CHECK UNIT STATUS.  MFLAG = 0 SET UP COMPLETE NEW UNIT, MFLAG = 1
C  USE OLD UNIT POINTERS.
      IG10 = 1
      IF (MFLAG .NE. 0) GO TO 30
C
C  INITIALIZE MASTER DIRECTORY TABLE ARRAYS, ETC.
C   MASTER DIRECTORY NAME
      CALL WRITMS (10,TITLEM,10,IG10)
C     WRITE (10'IG10) TITLEM
      DO 20 I=1,9
  20  IMTAB(I) = 0
      IMTAB(1) = 0
      IMTAB(2) = 4
      IMTAB(5) = 4
      LCNEXT = 4
      LOSET(1) = 4
      GO TO 33
C
C
C  OLD DATA UNIT. READ POINTERS FROM MASTER DIRECTORY TABLE (IMTAB)
   30 CONTINUE
      CALL READMS(10, TITLEM, 10, IG10)
C     READ(10'IG10)  TITLEM
      IG10 = 2
      CALL READMS (10,IMTAB,9,IG10)
C     READ (10'IG10) IMTAB
      LCNEXT = IMTAB(2)
C
  33  DO 35 I=1,5
  35  LOSET(I) = IMTAB(I+4)
      NDSET = IMTAB(1)
C
C
C  SET DIRECTORY
C
C  IMPUT LAST SET FLAG (LASTS), NEW SET FLAG (NEWS), DATA SET NUMBER
C  (NSET), MACH NUMBER, SET TITLE (TITLES)
  40  READ (TAPEIN,50) LASTS,NEWS,NSET,MACH,TITLES
  50  FORMAT (2I1,1X,I1,F6.0,10X,10A4)
C
C  CHECK DATA SET STATUS.
      IF (NEWS .NE. 0) GO TO 70
C
      DO 60 I=1,20
  60  LOAB(I) = 0
      NDSET = 1
      IMTAB(5) = LCNEXT
      LOSET(1) = LCNEXT
      LCNEXT = LCNEXT + 3
      GO TO 90
C
C  READ POINTERS OF EXISTING SET TO GET TO LOWER DIRECTORY TABLES.
  70  IF (NEWS .NE. 1) GO TO 80
      IG10 = IMTAB(NSET+4)
      CALL READMS (10,E,12,IG10)
C     READ (10'IG10) E
      DO 71 I=1,10
   71 TITLES(I) = E(I)
      MACH = E(11)
      NAB = E(12)
      IG10 = IG10 + 1
      CALL READMS (10,LOAB,20,IG10)
C     READ (10'IG10) LOAB
      GO TO 90
C
C  ADD NEW SET TABLE DATA TO OLD
  80  NDSET = NDSET + 1
      DO 81 I=1,20
  81  LOAB(I) = 0
      LOSET(NSET) = LCNEXT
      IMTAB(NSET+4) = LCNEXT
      LCNEXT = LCNEXT + 3
C
C
C  INPUT LAST ALPHA-BETA FLAG (LASTAB), NEW ALPHA-BETA SET FLAG
C  (NEWAB), ALPHA-BETA SET NUMBER (IAB), ALPHA-BETA VALUES,
C  ALPHA-BETA SET TITLE (TITLEA).
  90  READ (TAPEIN,100) LASTAB,NEWAB,IAB,ALPHA,BETA,TITLEA
 100  FORMAT (2I1,I2,2F6.0,4X,10A4)
C
C  CHECK ALPHA-BETA SET STATUS
      IF (NEWAB .GT. 0) GO TO 120
C
C  INITIALIZE ALPHA-BETA DIRECTORY
      DO 110 I=1,20
 110  LORG(I) = 0
C
      NAB = 1
      LOAB(IAB) = LCNEXT
      LCNEXT = LCNEXT + 3
      GO TO 140
C
C
C  READ POINTERS OF EXISTING ALPHA-BETA DIRECTORY
 120  IF (NEWAB .NE. 1) GO TO 130
      IG10 = LOAB(IAB)
      CALL READMS (10,E2,13,IG10)
C     READ (10'IG10) E2
      DO 121 I=1,10
  121 TITLEA(I) = E2(I)
      ALPHA = E2(11)
      BETA = E2(12)
      NREG = E2(13)
      IG10 = IG10 + 1
      CALL READMS (10,LORG,20,IG10)
C     READ (10'IG10) LORG
      GO TO 140
C
C
C  ADD NEW ALPHA-BETA DIRECTORY
 130  NAB = NAB + 1
      DO 131 I=1,20
 131  LORG(I) = 0
      LOAB(IAB) = LCNEXT
      LCNEXT = LCNEXT + 3
C
  140 DO 141 I=1,5
  141 IDTYP(I) = 0
C
C  INPUT LAST REGION GROUP FLAG (LASTR),NEW REGION SET FLAG
C  (NEWR), REGION SET NUMBER (IREG), DATA TYPE FLAGS (IDTYP),
C  REGION TITLE (TITLER).
      READ (TAPEIN,150) LASTR,NEWR,IREG,IDTYP(1),ISORCE,IRW,TITLER
  150  FORMAT (2I1,I2,3I1,13X,10A4)
C  CHECK REGION SET STATUS
      IF (NEWR .NE. 0) GO TO 170
C
C  INITIALIZE FLOW FIELD DATA
      NREG = 1
      NSREG = 0
      ITFLAG = 0
      IG10 = LCNEXT
      DO 161 I=1,10
  161 E3(I) = TITLER(I)
      DO 162 I=1,5
  162 E3(I+10) = IDTYP(I)
      E3(16) = NSREG
      E3(17) = ITFLAG
      CALL WRITMS (10,E3,17,IG10)
C     WRITE (10'IG10) E3
      LORG(IREG) = IG10
      LCNEXT = IG10 + 5
      GO TO 190
C
C  READ POINTERS OF EXISTING FLOW FIELD DATA SET
 170  IF (NEWR .NE. 1) GO TO 180
      IG10 = LORG(IREG)
      CALL READMS (10,E3,17,IG10)
C     READ (10'IG10) E3
      DO 171 I=1,10
  171 TITLER(I) = E3(I)
      DO 172 I=1,5
  172 IDTYP(I) = E3(I+10)
      NSREG = E3(16)
      ITFLAG = E3(17)
      GO TO 190
C
C  ADD NEW FLOW FIELD TABLE ITEM
  180 NSREG = 0
      ITFLAG = 0
      IG10 = LCNEXT
      DO 182 I=1,10
  182 E3(I) = TITLER(I)
      DO 183 I=1,5
  183 E3(I+10) = IDTYP(I)
      E3(16) = NSREG
      E3(17) = ITFLAG
      CALL WRITMS (10,E3,17,IG10)
C     WRITE (10'IG10) E3
      NREG = NREG + 1
      LORG(IREG) = IG10
      LCNEXT = IG10 + 5
C
C
 190  CONTINUE
C  SELECT TYPE OF DATA TO BE READ IN OR GENERATED
C    IDTYP(1)  = 1 (FLOW FIELD),     =2 (SURFACE DATA),
C              = 3 (STREAMLINES),    =4 (SHOCK SHAPE)
      IF (IDTYP(1).GT.0 .AND. IDTYP(1).LE.4) GO TO 200
      WRITE (TAPEOT,202) IDTYP(1)
  202  FORMAT (1H0,18H**IDTYP(1) INPUT =,I5,17H IS OUT OF RANGE. ,      -
     1   14H PROGRAM STOP.  )
      STOP
C
  200 ITAB = IDTYP(1)
      GO TO (210,220,210,240), ITAB
C  FLOW FIELD DATA
  210 IF (ISORCE.GT.0 .AND. ISORCE.LE.4) GO TO 212
      WRITE (TAPEOT,211) ISORCE
  211  FORMAT (1H0,16H**ISORCE INPUT =,I5,17H IS OUT OF RANGE. ,        -
     1   14H PROGRAM STOP.  )
      STOP
  212 ITAB = ISORCE
      GO TO (213,214,215,216), ITAB
C
C  HAND INPUT DATA
  213 CALL FFINPT
      GO TO 600
C
C  SHOCK-EXPANSION GENERATED DATA
  214 CALL FFBODY
      GO TO 600
C
C  FUTURE ADDITION
  215 CALL FFAIRF
      GO TO 600
C
C  SIMPLE FLOW FIELDS
  216 CALL FFSPEC
      GO TO 600
C
C  SURFACE VELOCITY VECTOR DATA
  220 CALL FFSURF
      GO TO 600
C
C
C  SHOCK SHAPE DATA (NOT ACTIVE NOW)
  240 CONTINUE
      GO TO 600
C
C
  600 CONTINUE
C
      IF (IRW .NE. 0) GO TO 612
C  COMPLETE FLOW FIELD DATA TABLE
      IG10 = LORG(IREG)
      DO 601 I=1,10
  601 E3(I) = TITLER(I)
      DO 602 I=1,5
  602 E3(I+10) = IDTYP(I)
      E3(16) = NSREG
      E3(17) = ITFLAG
      CALL WRITMS (10,E3,17,IG10)
C     WRITE (10'IG10) E3
      WRITE (TAPEOT,610) TITLER,IDTYP,NSREG,ITFLAG
 610  FORMAT (1H0,5X,10H** TITLER=,10A4,5X,6HIDTYP=,5I2,3X,6HNSREG=,    -
     1 I3,3X,7HITFLAG=,I3)
C
C  CHECK FOR LAST REGION
 612  IF (LASTR .EQ. 0) GO TO 140
      IF (IRW .NE. 0) GO TO 622
C
C  COMPLETE REGION DIRECTORY
      IG10 = LOAB(IAB)
      DO 613 I=1,10
  613 E2(I) = TITLEA(I)
      E2(11) = ALPHA
      E2(12) = BETA
      E2(13) = NREG
      CALL WRITMS (10,E2,13,IG10)
C     WRITE (10'IG10) E2
      WRITE (TAPEOT,620) TITLEA,ALPHA,BETA,NREG,LORG
 620  FORMAT (1H ,10H** TITLEA=,10A4,7H ALPHA=,F6.3,6H BETA=,F6.3,      -
     1  8H NGROUP=,I4,/1H ,8H** LORG=,20I4)
      IG10 = IG10 + 1
      CALL WRITMS (10,LORG,20,IG10)
C     WRITE (10'IG10) LORG
C
C
C
C  CHECK FOR LAST ALPHA-BETA
 622  IF (LASTAB .EQ. 0) GO TO 90
      IF (IRW .NE. 0) GO TO 632
C
C  COMPLETE SET DIRECTORY
      IG10 = LOSET(NSET)
      DO 623 I=1,10
  623 E(I) = TITLES(I)
      E(11) = MACH
      E(12) = NAB
      CALL WRITMS (10,E,12,IG10)
C     WRITE (10'IG10) E
      WRITE (TAPEOT,630) TITLES,MACH,NAB,LOAB
 630  FORMAT (1H ,10H** TITLES=,10A4,6H MACH=,F6.3,5H NAB=,I4,/1H ,     -
     1  8H** LOAB=,20I4)
      IG10 = IG10 + 1
      CALL WRITMS (10,LOAB,20,IG10)
C     WRITE (10'IG10) LOAB
C
C  CHECK FOR LAST MASTER SET
 632  IF (LASTS .EQ. 0) GO TO 40
      IF (IRW .NE. 0) GO TO 650
      IMTAB(1) = NDSET
      IMTAB(2) = LCNEXT
      IG10 = 2
      CALL WRITMS (10,IMTAB,9,IG10)
C     WRITE (10'IG10) IMTAB
      WRITE (TAPEOT,640) IMTAB
 640  FORMAT (1H ,8H**IMTAB=,9I4)
C
C
C650  RETURN
  650 CONTINUE
      END
*DECK MERI
      SUBROUTINE  MERID
C
C  GENERALIZED CUTTING PLANE OF MERIDIAN TYPE
C  -- THAT IS, CUTTING PLANE IS PARALLEL TO AXIS
C
C
C
      COMMON /EXEC/ CASE,  TITLE(15), PAGE, ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1              TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      DIMENSION  ELEM(25), XN(4), YN(4), ZN(4), YP(4), ZP(4), PHI(37),  -
     1    A(4), MP(4), NPI(10), MPI(10), NINT(40), XREC(6), XP(4),      -
     2    XI(10,2), YI(10,2), ZI(10,2), RI(10,2), XA(10,2),             -
     3    COMPID(10), NT(10), NI(10)                                    -
     4    ,YPA(40), E(25), EP(25), IPANL(10)
C
      INTEGER ERROR,PAGE,NREC(40,50),SYMFCT
      INTEGER  TAPEIN,TAPEOT,TAPE,TAPEB,TAPEC,TAPEE,TAPEF,              -
     1              TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL  LR
C
      EQUIVALENCE (ELEM(11), XN(1)), (ELEM(15), YN(1)),                 -
     1            (ELEM(19), ZN(1))
      DATA PI,RC/3.14159265,1.74532925E-2/
C
C
C
C
C  READ IN PANEL ID AND CUTTING PLANE CONTROL CARD
      READ (TAPEIN,7) IPANL,NPL,INPHI,ISYM
    7  FORMAT (10I2,I2,2I1)
      IPRNT = 1
      IPRINT = 1
      REWIND TAPEB
      REWIND TAPEC
C
C
C  READ IN CUTTING PLANE ORIGIN AND ORIENTATION
C
C
      READ (TAPEIN,30) XPO,YPO,ZPO,PSIO,THEO,PHIO
   30 FORMAT(6F10.0)
C  CONSTANTS RELATING TO CUTTING PLANE AXIS
      SINPS = SIN(RC*PSIO)
      COSPS = COS(RC*PSIO)
      COST  = COS(RC*THEO)
      SINT  = SIN(RC*THEO)
      STSPS = SINPS*SINT
      STCPS = COSPS*SINT
      CTCPS = COST*COSPS
      CTSPS = COST*SINPS
C
C
      IF (NPL .GT. 36)  NPL = 36
      IF (INPHI .LT. 2)  GO TO 130
C
C  PARALLEL CUTTING PLANES.  READ IN CONSTANT PHI VALUE.
      READ (TAPEIN,50) PHICD
   50 FORMAT(F10.6)
      PHI(1) = RC*PHICD
      TANP = TAN(PHI(1))
C
      IF (INPHI .EQ. 3)  GO TO 90
C  EQUAL SPACING,  READ IN END VALUES.
      READ (TAPEIN,60) (XN(I),YN(I),ZN(I),I=1,2)
   60 FORMAT(3F10.0)
C
C  FOR EQUAL SPACING, MUST HAVE AT LEAST TWO PLANES
      IF (NPL .LT. 2)  NPL = 2
C
C  PROJECT INTO VIEWING PLANE AND FIND AXIS LOCATIONS.
      DO 70 N = 1,2
      XX = XN(N) - XPO
      YY = YN(N) - YPO
      ZZ = ZN(N) - ZPO
C
      YP(N) = -XX*SINPS + YY*COSPS
      ZP(N) =  XX*STCPS + YY*STSPS + ZZ*COST
   70 YPA(N) = YP(N) + ZP(N)*TANP
      DYPA = (YPA(2) - YPA(1))/(NPL - 1)
C
      NINT(1) = 0
      NPL1 = NPL
      DO 80 N = 2,NPL1
      PHI(N) = PHI(1)
      NINT(N) = 0
   80 YPA(N) = YPA(N-1) + DYPA
      GO TO 110
C
C
C  VARIABLE PLANE SPACING.  READ IN POSITIONS,
C  PROJECT INTO VIEWING PLANE AND FIND AXIS LOCATIONS.
   90 NPL1 = NPL
      DO 100 N = 1,NPL
      READ (TAPEIN,60) XN(1),YN(1),ZN(1)
      XX = XN(1) - XPO
      YY = YN(1) - YPO
      ZZ = ZN(1) - ZPO
      YP(1) = -XX*SINPS + YY*COSPS
      ZP(1) =  XX*STCPS + YY*STSPS + ZZ*COST
      YPA(N) = YP(1) + ZP(1)*TANP
      PHI(N) = PHI(1)
      NINT(N) = 0
  100 CONTINUE
  110 IF (IPRNT .EQ. 1)                                                 -
     1WRITE (TAPEOT,120) NPL,PHICD,(YPA(N),N=1,NPL)
  120 FORMAT(1H1, I3, 32H PARALLEL CUTTING PLANES  PHI = , F10.6/       -
     1    1H0, (6F20.6))
      GO TO 180
C
C
C
  130 CONTINUE
      IF (INPHI .EQ. 0)  GO TO 160
      READ (TAPEIN,140) (PHI(I),I=1,NPL)
  140 FORMAT(6F10.6)
      DPHI = PHIO*RC
      DO 150 I = 1,NPL
      NINT(I) = 0
      YPA(I) = 0.0
  150 PHI(I) = PHI(I)*RC + DPHI
      NPL1 = NPL
      GO TO 180
  160 CONTINUE
      NPL1 = NPL + 1
      DPHI = 360./(NPL)  *RC
      PHI(1) = PHIO*RC
      NINT(1) = 0
      YPA(1) = 0.0
      DO 170 I = 2,NPL1
      NINT(I) = 0
      YPA(I) = 0.0
  170 PHI(I) = PHI(I-1) + DPHI
C
      PHI(NPL1) = PHI(1)
  180 MPTOT = 0
      DO  190  I = 1,10
  190 NT(I) = 0
C
C  RETRIEVE ELEMENT DATA FROM STORAGE
      IG4 = 2
C     READ (4'IG4) E
      CALL READMS (4,E,25,IG4)
      NPE  = E(2)
      NREM = E(4)
C
C
C  START OF PANEL CYCLE
      DO 675 JJ=1,10
      NT(JJ) = MPTOT + 1
      IF (IPANL(JJ) .EQ. 0) GO TO 680
      IF (IPANL(JJ) .GT. NPE) GO TO 900
      IG4 = IPANL(JJ)*5
C     READ (4'IG4) EP
      CALL READMS (4,EP,25,IG4)
      COMID = EP(2)
      ISTART = EP(3)
      LL = EP(4)
      SYMFCT = EP(6)
      COMPID(JJ) = COMID
      ISTART = ISTART - NREM
C
C  START OF ELEMENT DO LOOP
      DO 670 J=1,LL
      IG4 = ISTART + NREM*J
C     READ (4'IG4) ELEM
      CALL READMS (4,ELEM,25,IG4)
      JE = J
C
C  PROJECT FOUR CORNER POINTS INTO T2,T3 PLANE
C    (IN COORDS RELATIVE TO CUTTING PLANE AXIS).
C  FIRST CHECK IF DUMMY, ZERO AREA ELEMENT - IF SO, SKIP OVER.
      IF (ELEM(10) .LE. 1.0E-5)  GO TO 670
C
C  ALWAYS PROJECT LINES 2-3 AND 3-4
      NII= 2
      NR = 2
      NF = 4
      ICOL = ELEM(2) + 0.01
      IROW = ELEM(3) + 0.01
C  CHECK IF NEW ROW
      IF (IROW .NE. 1)  GO TO 250
      NR = 1
      NF = 1
C  CHECK IF NEW COLUMN
  250 IF (ICOL .NE. 1)  GO TO 260
      NII= 1
      NR = 1
  260 CONTINUE
C
C  PRESET NPI ARRAY
      DO 270 K = 1,10
  270 NPI(K) = 0
C
      IO = 0
      DO 360  N =NR,4
      XX = XN(N) - XPO
      YY = YN(N) - YPO
      ZZ = ZN(N) - ZPO
C
      XP(N) =  XX*CTCPS + YY*CTSPS - ZZ*SINT
      YP(N) = -XX*SINPS + YY*COSPS
      ZP(N) =  XX*STCPS + YY*STSPS + ZZ*COST
C
      MP(N) = 0
      IF (INPHI .GT. 1)  GO TO 290
      IF ((ZP(N).EQ.0.0) .AND. (YP(N).EQ.0.0))  GO TO 350
      IF (JE .GT. LL)  GO TO 280
      IF ((ZP(N).LT.0.0) .AND. (YP(N).EQ.0.0))  GO TO 360
  280 CONTINUE
C
      A(N) = ATAN2(+YP(N),-ZP(N))
      IF (A(N) .LE. 0.0)  A(N) = 2.*PI + A(N)
      IF (INPHI .NE. 0)  GO TO 320
      MP(N) = A(N)/DPHI + 1
      GO TO 360
C
C  MP CALULATIONS FOR PARALLEL PLANES
  290 CONTINUE
      A(N) = YP(N) + ZP(N)*TANP
      IF (INPHI .EQ. 3)  GO TO 300
      PM = (A(N) - YPA(1))/DYPA
      IF (PM .LE. 0.0)  GO TO 360
      MP(N) = PM + 1
      IF (MP(N) .GT. NPL)  MP(N) = NPL
      GO TO 360
C
  300 CONTINUE
      DO 310 K = 1,NPL1
      IP = K
      IF (YPA(K) .GT. A(N))  GO TO 340
  310 CONTINUE
      MP(N) = IP
      GO TO 360
C
C
  320 DO 330 K = 1,NPL1
      IP = K
      IF (PHI(K) .GT. A(N))  GO TO 340
  330 CONTINUE
      IF (JE .GT. LL)  GO TO 360
      IP = IP + 1
  340 MP(N) = IP - 1
      GO TO 360
  350 IO = IO + 1
  360 CONTINUE
C
C  CHECK FOR CONTINUITY IN ANGLE (REFLECTED SYMMETRIC ELEMENTS ONLY).
      IF (JE .LE. LL)  GO TO 380
      DO 370 N = NR,4
      IF (MP(N) .EQ. 1)  MP(N) = NPL1
  370 CONTINUE
  380 CONTINUE
C
C  CHECK FOR ORIGIN POINTS (ASSUMED IN PAIRS)
      IF (IO .EQ. 0)  GO TO 420
      N1 = 1
      N2 = 2
      N3 = 3
      N4 = 4
  390 IF (MP(N1) .NE. 0)  GO TO 410
      IF (MP(N2) .EQ. 0)  GO TO 400
C
      MP(N1) = MP(N2)
      MP(N4) = MP(N3)
      GO TO 420
C
  400 MP(N1) = MP(N4)
      MP(N2) = MP(N3)
      GO TO 420
C
  410 NN = N1
      N1 = N2
      N2 = N3
      N3 = N4
      N4 = NN
      IF (N4 .NE. 4)  GO TO 390
C
  420 CONTINUE
C
C
C  TEST FOR INTERSECTIONS AND FIND THEM IF INDICATED
      MPIN = 1
      NUMP = 1
      ICT  = +1
      MPMAX = 0
      IP1 = NII
C
  430 IP2 = IP1 + 1
      IF (IP2 .GT. 4)  IP2 = 1
C
      IF (MP(IP2) - MP(IP1))460,440,450
C
C  CHECK FOR LAST CORNER POINT
  440 IF (IP2 .EQ.NF)  GO TO 600
C
C  GO TO NEXT CORNER POINT
      IP1 = IP2
      GO TO 430
C
C
C  INTERSECTION OF NMP = MP(IP1) + 1  WITH LINE SEGMENT
  450 NMP = MP(IP1) + 1
      IMP = +1
      GO TO 470
C
C
C  INTERSECTION OF NMP = MP(IP1)  WITH LINE SEGMENT
  460 NMP = MP(IP1)
      IMP = -1
C
C
C  CHECK FOR FIRST INTERSECTION
  470 IF (MPMAX .EQ. 0)  GO TO 540
C
C  PREVIOUS INTERSECTIONS.  CHECK FOR 'TURNING CORNER
C    AND COMING BACK'.
      IF (IMP)480,480,500
C
  480 IF (MP(IP1) - MP(IP1-1))530,490,520
C
  490 IF (MP(IP1-1) - MP(IP1-2))530,520,520
C
  500 IF (MP(IP1) - MP(IP1-1))520,510,530
C
  510 IF (MP(IP1-1) - MP(IP1-2))520,520,530
C
C  YES, REVERSING DIRECTION
  520 ICT = -1
      GO TO 550
C
  530 NUMP = NUMP + ICT
      IF (ICT .GT. 0)  GO TO 540
C
C
C  CHECK FOR INITIAL CUTTING PLANE
      IF (NUMP .GE. MPIN)  GO TO 550
C
C  HAVE COME BACK ACROSS INITIAL PLANE
C  CHANGE SIGN OF ICT AND INCREASE MPMAX
      ICT = +1
      NUMP = MPMAX + 1
      MPIN = NUMP
C
  540 IF (NUMP .GT. MPMAX)  MPMAX = NUMP
C
C
C  CALCULATE INTERSECTION
  550 NPI(NUMP) = NPI(NUMP) + 1
      NP = NPI(NUMP)
      MPI(NUMP) = NMP
      DY = YP(IP2) - YP(IP1)
      DZ = ZP(IP2) - ZP(IP1)
      CSP = COS(PI-PHI(NMP))
      SNP = SIN(PI-PHI(NMP))
C
      LR = 0.0
      RI(NUMP, NP) = 0.0
      DYDZ = DY**2 + DZ**2
      IF (DYDZ .LE. 1.0E-6)  GO TO 560
      DYP = YP(IP1) - YPA(NMP)
      DZP = ZP(IP1)
      RIMAG       = (DZP*DY  -  DYP*DZ)/(CSP*DY - SNP*DZ)
      IF (INPHI .LT. 2)  RIMAG = ABS(RIMAG)
      RI(NUMP,NP) = RIMAG
      YPI = SNP*RI(NUMP,NP) + YPA(NMP)
      ZPI = CSP*RI(NUMP,NP)
      LR = SQRT(((YPI-YP(IP1))**2 + (ZPI-ZP(IP1))**2)/DYDZ)
      RI(NUMP,NP) =  ABS(RIMAG)
C
  560 CONTINUE
      XA(NUMP,NP) = XP(IP1) + (XP(IP2) - XP(IP1))*LR
      XI(NUMP,NP) = XN(IP1) + (XN(IP2) - XN(IP1))*LR
      YI(NUMP,NP) = YN(IP1) + (YN(IP2) - YN(IP1))*LR
      ZI(NUMP,NP) = ZN(IP1) + (ZN(IP2) - ZN(IP1))*LR
      NINT(NMP) = NINT(NMP) + 1
      RJ = JE
      WRITE (TAPEB) RJ,XI(NUMP,NP),YI(NUMP,NP),ZI(NUMP,NP),RI(NUMP,NP)  -
     1    , XA(NUMP,NP)
      MPTOT = MPTOT + 1
      NREC(NMP, NINT(NMP)) = MPTOT
C
C
C  CONTINUE TO NEXT INTERSECTION
  570 NMP = NMP + IMP
      IF (IMP)580,580,590
  580 IF (MP(IP2) - NMP)530,440,440
  590 IF (MP(IP2) - NMP)440,530,530
C
C
C  ALL INTERSECTIONS FOUND ON CURRENT ELEMENT.  SAVE THE RESULTS.
  600 CONTINUE
      IF (MPMAX .EQ. 0)  GO TO 650
C
      IF (IPRINT .EQ. 0)  GO TO 650

      WRITE (TAPEOT,610)
  610 FORMAT(1H0, 4H  ID, T14, 3HNO., T24, 2HMP, T45,1HX, T65, 1HY,     -
     1    T85, 1HZ, T105, 1HR, T125, 1HA/)
C
      DO 620 K = 1,MPMAX
      NPIK = NPI(K)
  620 WRITE (TAPEOT,630)COMPID(JJ),JE,MPI(K),                           -
     1       (XI(K,IP), YI(K,IP), ZI(K,IP), RI(K,IP),                   -
     2   XA(K,IP), IP = 1,NPIK)
  630 FORMAT(1H , 1XA4, 6XI3, 7XI3, 4X,   5F20.6/1H , 28X5F20.6)
C
C
C  RIGHT OUT ELEMENT CORNER POINTS
      WRITE (TAPEOT,640) (I, XN(I), YN(I), ZN(I), I=1,4)
  640 FORMAT(1H ,    21XI3, 4X, 3F20.6)
C
C
C  CHECK FOR SYMMETRY
  650 IF (SYMFCT .NE. 0)  GO TO 670
      IF (ISYM .EQ. 0)  GO TO 670
      IF (JE .GT. LL)  GO TO 670
      DO 660 N = NR,4
  660 YN(N) = -YN(N)
      JE = LL + J
      GO TO 260
C
C
  670 CONTINUE
  675 CONTINUE
C

C  END OF PANEL DO LOOP
C
C  ARRANGE INTERSECTIONS AS PER MERIDIAN
C  FIRST CHECK IF ANY INTERSECTIONS FOUND
  680 IF (MPTOT .GT. 0)  GO TO 700
      WRITE (TAPEOT,690)
  690 FORMAT(1H0,41HNO INTERSECTIONS FOUND FOR CONFIGURATION ,          -
     1         /1H0,  16HCASE TERMINATED.)
      STOP
C
  700 CONTINUE
      NF = NINT(1)
      IF (INPHI .EQ. 0)  NINT(1) = NINT(NPL1)
      WRITE (TAPEC)        COMPID, JJ, NT, NPL, MPTOT,                  -
     1    PSIO, THEO, PHIO,  XPO, YPO, ZPO, INPHI,                      -
     2    (PHI(I), I=1,NPL), (NINT(I), I=1,NPL),(YPA(I),I=1,NPL)
      NINT(1) = NF
      DO 830 I = 1,NPL
      II = I
  710 NF = NINT(II)
      IF (NF .EQ. 0)  GO TO 820
      K = 0
      K1 = 0
      K2 = 1
      K3 = 0
      REWIND TAPEB
C
C  ZERO OUT COMPONENT COUNTERS
      DO 720 L = 1,JJ
  720 NI(L) = 0
C
      DO 810 J = 1,NF
      NN = NREC(II,J)
  730 K = K + 1
C     READ (TAPEB,END=830) XREC
      READ (TAPEB) XREC
      IF (EOF(TAPEB)) 830,731
  731 IF (K.NE. NN) GO TO 730
      IF (K3 .EQ. 1)  GO TO 780
C
C  CHECK ON COMPONENT
  740 K1 = K1 + 1
      IF (K1 .GT. JJ)  GO TO 810
      NI(K1) = 0
      NT1 = NT(K1)
      IF (NT1 .LE. 0)  GO TO 740
C
  750 K2 = K2 + 1
      IF (K2 .EQ. K1)  GO TO 750
      IF (K2 .LE. JJ)  GO TO 760
      NT2 = MPTOT + 1
      GO TO 770
  760 NT2 = NT(K2)
      IF (NT2 .EQ. 0)  GO TO 750
  770 K3 = 0
C
C  TEST IF RECORD WITHIN RANGE
  780 IF ((NN.GE.NT1).AND.(NN.LT.NT2))  GO TO 790
C
C  NOT IN RANGE - GO TO NEXT COMPONENT
      GO TO 740
C
  790 IF (K3 .EQ. 1)  GO TO 800
      NI(K1) = J
      K3 = 1
C
  800 WRITE (TAPEC) K1, XREC
  810 CONTINUE
C
C  ALL ELEMENTS IN CURRENT MERIDIAN STORED.
C  SAVE COMPONENTS COUNTERS
      WRITE (TAPEC) (NI(L),L=1,JJ)
C
  820 IF (II .NE. 1)  GO TO 830
      IF (INPHI .GT. 1)  GO TO 830
      IF (NF .NE. 0)  GO TO 830
      II = NPL1
      GO TO 710
  830 CONTINUE
C
      RETURN
C
  900 WRITE (TAPEOT,910)
  910  FORMAT (1H ,43H**PANEL NUMBER IS GREATER THAN THE MAXIMUM ,      -
     1 34H STORED ON UNIT 10 ** PROGRAM STOP )
      STOP
      END
*DECK NCON
      SUBROUTINE NCONE(DCRI,EM,G, DSR, EMC, PCP1)
C
C  THIS IS AN IMPROVED APPROXIMATE CONE FLOW SOLUTION
C  DEVELOPED BY D. N. SMYTH
C  SECOND ORDER THEORY USED FOR SMALL VALUES OF SIMILARITY PARAMETER
C  APPROXIMATE SOLUTION OF HAMMITT AND MURTHY FOR LARGE VALUES
C  MIDRANGE GIVEN BY SUITABLE TRANSITION FUNCTION
C
      DCR = DCRI
      ISDET = 0
      RC =  .17453292E-1
      SINDC = SIN(DCR)
      EMSIN = EM*SINDC
      EMSQ = EM**2
      KSOL = 2
C
C
C  CALCULATE UPPER TRANSITION POINT, EMSINF.
      EMSINF = 1.40
      IF (EM.GE.10.0) GO TO 8
      EMSINF = 0.325
      IF (EM.GT.1.5) EMSINF = 1.40 - 1.075*EXP((EM-1.5)*(-0.8))
    8 IF (EMSIN.LT.EMSINF) GO TO 20
      KSOL = 1
C
C  CALCULATE CONE SURFACE PROPERTIES USING METHOD OF
C  HAMMITT AND MURTHY.
    9 SINSQ = SINDC**2
      SIN2 = SIN(2.*DCR)
      H2 = (G-1.)*SINSQ + 2./EMSQ
      H1 = 2. - (G+5.)*SINSQ
      HX = H2*H1/SIN2**2
      IF (ABS(H1).LE.1.E-3) GO TO 10
      RAD = SQRT(1.0 + HX)
      DSR = DCR - SIN2*(1.0 - RAD)/H1
      GO TO 11
   10 DSR = DCR + 0.5*H2/SIN2*(1.0 - 0.25*HX*(1.0 - 0.5*HX))
   11 EMNSSQ = EMSQ*SIN(DSR)**2
      HS2 = (DSR - DCR)**2
      EMC = SQRT((EMSQ-EMNSSQ)*(1.0 + 2.0*HS2)/(1.0 + 0.5*(G - 1.0)*    -
     1          (EMNSSQ*(1.0 + 2.0*HS2) - 2.0*HS2*EMSQ)))
      ELIM = (G - 1.0)/(G + 1.0)
      PSP1 = 2.0*G/(G+1.0)*EMNSSQ - ELIM
      T1TS = (PSP1 + ELIM)/(1.0 + ELIM*PSP1)/PSP1
      TCT1 = (1.0 + (G-1.)*0.5*EMSQ)/(1.0 + (G-1.)*0.5*EMC**2)
      PCPS = (TCT1*T1TS)**(G/(G-1.))
      PCP1 = PCPS*PSP1
      CP   = 2.0*(PCP1 - 1.0)/(G*EMSQ)
      GO TO (40,31), KSOL
C
C
C  CALCULATE LOWER TRANSITION POINT, EMSINO.
   20 EMSINO = 0.2
      IF (EM.GT.3.0) EMSINO = 0.3
      IF (EMSIN.GT.EMSINO) GO TO 30
      KSOL = 1
C
C  CALCULATE CONE SURFACE PROPERTIES USING 2ND-ORDER THEORY.
   21 BETA = SQRT(EMSQ - 1.)
      TANDC = TAN(DCR)
      TANSQ = TANDC**2
      BETA2 = 5.0*EMSQ - 1.0
      AM = 3.25*EMSQ + 0.5 + (G+1.)*(EMSQ/BETA)**2
      PHI = 0.69314718 - ALOG(BETA) - ALOG(TANDC)
      CP  = TANSQ*(2.*PHI-1.0+TANSQ*(3.*(BETA*PHI)**2-BETA2*PHI + AM))
      IF (KSOL.EQ.2) GO TO 22
      IF (ISDET.EQ.2) RETURN
      DSR = ARSIN(1./EM)
      PCP1 = G*EMSQ*CP *0.5 + 1.0
      TCT1 = PCP1**((G-1.)/G)
      EMC = SQRT(2./(G-1.)*((1.0+(G-1.)*0.5*EMSQ)/TCT1 - 1.0))
      GO TO 40
   22 DCP2 = TANDC*(4.*(PHI - 1.0) + TANSQ*(6.*PHI*(2.*PHI-1.0)*        -
     1       BETA**2 - BETA2*(4.* PHI -1.0) + 4.*AM))/(EM*COS(DCR)**3)
      GO TO 32
C
C  CALCULATE CONE SURFACE PROPERTIES USING TRANSITION SOLUTION
C  (THAT IS, A COMBINATION OF BOTH 2ND-ORDER AND HAMMITT-MURTHY).
   30 DXF = EMSINF - EMSINO
      DX = EMSIN - EMSINO
      SINDC = EMSINF/EM
      DCR = ARSIN(SINDC)
      GO TO 9
   31 CPHM = CP
      DCR = ARSIN(EMSINO/EM)
      GO TO 21
   32 A = (CPHM - CP - DCP2*DXF)/DXF**2
      CP = CP + DX*(DCP2 + A*DX)
      IF (ISDET.EQ.2) RETURN
      PCP1 = 0.5*G*EMSQ*CP + 1.0
      EMNSF = EM*SIN(DSR)
      EMNS = (EMNSF - 1.)*(EMSIN/EMSINF)**2 + 1.0
      EMNSSQ = EMNS**2
      EMSSQ = ((G+1.)*EM*EMNS)**2 - 4.*(EMNSSQ-1.)*(G*EMNSSQ+1.)
      DSR = ARSIN(EMNS/EM)
      EMSSQ = EMSSQ/((2.*G*EMNSSQ-(G-1.))*((G-1.)*EMNSSQ+2.))
      PSPC = (2.*G*EMNSSQ - (G-1.))/(G+1.)/PCP1
      EMC = SQRT(((1.+0.5*(G-1.)*EMSSQ)*PSPC**((G-1.)/G) - 1.)*2/(G-1.))
      TCT1 = (1.+(G-1.)*0.5*EMSQ)/(1.+(G-1.)*0.5*EMC**2)
   40 CONTINUE
      RETURN
      END
*DECK CONE2
      SUBROUTINE  CONEA(DCR,EM,G,ALF,PHI,ALFP,EMP,DSR,EMSURF,PSURF,IT)
C  CIRCULAR CONE AT ANGLE OF ATTACK.
C  BASED ON ARC CP #792 AND EXTENDED BY D.N. SMYTH.
C
      DIMENSION FS(8), BS(8), ANGLE(3)
      DIMENSION AA(6), A(18)
C
      COMMON/FSBS/ FS,BS
C
      DATA A/ -0.07657, 1.4775, 0.064669,                               -
     2         0.42339, 0.13241,0.035871,                               -
     3        -0.002083,-.075797,-.01923,                               -
     4         0.29898, -.10011,0.29589,                                -
     5        -0.99727, -.41751,0.068791,                               -
     6        -.039442, 0.10422,0.063801/
C
      GM1 = G - 1.0
      GP1 = G + 1.0
      PMIN = 0.3
      CPCONE = 0.0
      CPSTAG = 0.0
      CPX = 0.0
      DPSK = 0.0
      COSA = COS(ALF)
      SINA = SIN(ALF)
      COSP = COS(PHI)
      SINP = SIN(PHI)
      EM2 = EM**2
      CPMIN = (PMIN - 1.0)/(0.5*G*EM2)
C
      IF (DCR .LT. 0.0)  GO TO 35
      IF (DCR .LT. 1.E-4)  GO TO 5
      IF (DCR .LT. 0.0872665)  GO TO 4
      IF (IT .EQ. 1)  GO TO 4
C
C  JONES' METHOD (AIAA JL., FEB. 1972, PP234-236).
      EM2I = 1.0/EM2
      COS2P = COS(2.*PHI)
      T = SIN(2.9*DCR)*TAN(DCR)
      AC = ALF/DCR
      EMA = EM
      CALL NCONE(DCR,EM,G,DSC,EMS,PCONE)
      CPCONE = (PCONE - 1.0)/(0.5*G*EM2)
C
      DO  3 I = 1,6
      J = 3*(I-1) + 1
    3 AA(I) = A(J) + A(J+1)*COSP + A(J+2)*COS2P
C
      CPX = (AA(1)*T + AA(2)*T*EM2I + AA(3)*EM2I)*AC                    -
     1    + (AA(4)*T + AA(5)*T*EM2I + AA(6)*EM2I)*AC**2
      GO TO 40
C
C
C
C  AXIAL FLOW COMPONENT
    4 EMA = EM*COSA
      CALL NCONE(DCR,EMA, G, DSC, EMS, PCONE)
      CPCONE = (PCONE - 1.0)/(0.5*G*EM2)
    5 IF (ALF .LT. 1.E-4)  GO TO 40
C
C  NORMAL FLOW COMPONENT
      EMC2 = EM2*(SINA)**2
      IF (EMC2 - 1.0)  10, 10, 20
C  SUBSONIC NORMAL COMPONENT
   10 PSTAG = (1.0 + 0.5*GM1*EMC2)**(G/GM1)
      GO TO 30
C  SUPERSONIC NORMAL COMPONENT
   20 PSTAG = (0.5*GP1*EMC2)**(G/GM1)*(GP1/(2.*G*EMC2-GM1))**(1./GM1)
   30 CPSTAG = (PSTAG - 1.0)/(0.5*G*EM2)*COSP*ABS(COSP)
C
      IF (CPSTAG .LT. CPMIN)  CPSTAG = CPMIN
      IF (DCR .LT. 1.E-4)  GO TO 40
C  CROSS PRODUCT TERM - EMPIRICAL FIT FROM CP #792.
      SCD = SIN(DCR)*COS(DCR)
      X = 0.5*3.1415927/(SCD*SQRT(EM2-1.0))
      BK = 1.95 + 0.07*COS(X)
      CPX = 2.0*BK*SCD*COSP*SINA*COSA
      GO TO 40
C
C  CONE FLOW IS DETACHED OR UNDEFINED (DCR .LT. 0.0)
C  USE IMPACT METHODS
C
C  FIRST GET IMPACT ANGLE (IN MERIDIAN PLANE)
   35 CONTINUE
      DELI = ALFP + DCR
      IF (DELI .GT. 0.0)  GO TO 36
C
C  EXPANSION FLOW
      ANGLE(2) = ABS(DELI)*57.29577951
      FS(6) = EMP
      IPRINT = 0
      ISDET = 2
      CALL EXPAND(ANGLE,MER,IPRINT,ISDET,CP)
      EMSURF = BS(6)
      EM2 = EMP**2
      PSURF = 0.5*G*EM2*CP + 1.0
      IF (PSURF .LT. PMIN)  PSURF = PMIN
      GO TO 50
C
C  COMPRESSION FLOW,  USE TANGENT-CONE EMPIRICAL
   36 CK = 2.*GP1/(G+3.)*EMP*SIN(DELI)
      EMNS = (CK + EXP(-CK))**2
      CP = (8.*GP1*EMNS/((3.+5.)*EMNS + 2.))*SIN(DELI)**2
      PSURF = 0.5*G*EM2*CP + 1.0
      IF (PSURF .LT. PMIN)  PSURF = PMIN
      PCONE = PSURF
      DPSK = PCONE - (2.*G*EMNS - GM1)/GP1
      GO TO 50
C
C  COMBINED SURFACE PRESSURE
   40 PSURF = 0.5*G*EM2*(CPCONE + CPSTAG + CPX) + 1.0
C
C  LIMIT MINIMUM PSURF
      IF (PSURF .LT. PMIN)  PSURF = PMIN
C
C  SHOCK ANGLE DSR, RELATIVE TO AXIS
C
C  USE IMPACT METHODS TO OBTAIN DPSK
C  (ADJUST TO ALPHA = ZERO RESULTS)
C
      DELI = DCR
      IS = 1
      FDP = 1.0
      EMC = EMA
      GO TO 46
C
C  CALCULATE VALUE FROM NCONE
   45 CONTINUE
      EMNS = (EMA*SIN(DSC))**2
      PS = (2.*G*EMNS - GM1)/GP1
      FDP = PS/P2
      EMC = EMP
C
C  NOW CALCULATE VALUE AT ACTUAL IMPACT ANGLE
      DELI = ALFP + DCR
      DPSK = 0.0
      IF (DELI .LE. 0.0)  GO TO 50
      IS = 2
   46 EMD = EMC*SIN(DELI)
      CK =  2.*GP1/(G+3.)*EMD
      EMNS = (CK + EXP(-CK))**2
      P2 = (2.*G*EMNS - GM1)/GP1
      GO TO (45,47), IS
   47 DPSK = PSURF - P2*FDP
   50 IF (DPSK .LT. 0.0)  DPSK = 0.0
      PSHK = PSURF - DPSK
      IF (PSHK .LT. 1.0)  PSHK = 1.0
C  SURFACE MACH NUMBER
      EMSURF = SQRT((EM2*(GP1*PSHK+GM1) - 2.*GP1*GM1)                   -
     1        /(PSHK*(GM1*PSHK + GP1)))
C
      EM2 = EMP**2
      DSR =            (GP1*PSHK + GM1)/(2.*G*EM2)
      IF (DSR .GT. 1.0)  DSR = 1.0
      IF (DSR .LT. 0.0)  DSR = 1.0/EM2
      DSR = ARSIN(SQRT(DSR))
      DSR = DSR - ALFP
C
C
      RETURN
      END
*DECK MOUT
      SUBROUTINE  MOUT
      COMMON /EXEC/ CASE,TITLE(15), PAGE, ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1              TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      DIMENSION PHI(40), NINT(40), COMPID(10), NI(10), NE(10),          -
     1    RJ(50), X(50), Y(50), Z(50), R(50), A(50), YPA(40), AX(50),   -
     2    J(50), JX(50), IOR(10), ID(50), DORD(4)
      INTEGER  TAPEIN,TAPEOT,TAPE,TAPEB,TAPEC,TAPEE,TAPEF,              -
     1              TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER PAGE, ERROR
      DATA RC/1.74532925E-2/
      DATA DORD/1HA, 1HX, 1HY, 1HZ/
C
      IOV = 0
      IOG = -1
      COMPB = 1
      IPRINT = 1
      DO 9 I=1,10
    9  IOR(I) = 0
C
      DO 20 I = 1,40
      PHI(I) = 0.0
      YPA(I) = 0.0
   20 CONTINUE
      REWIND TAPEC
      REWIND TAPEB
C
C  IOR(I) - FLAG TO ORDER INDIVIDUAL COMPONENT (RANDOM)
C  IOG  -   FLAG TO ORDER COMPONENTS BY GROUPS
C  COMPB - BASE COMPONENT (OTHERS ADDED TO THIS ONE)
C
C  POINTS FOR A PARTICULAR MERIDIAN ARE BROUGHT INTO CORE
C  INDIVIDUAL COMPONENTS ARE THEN ORDERED (IF REQUIRED, NON-ZERO IOR)
C  NEXT, GROUPS ARE ORDERD (IF REQUIRED, NON-ZERO, POSITIVE IOG)
C  NOTE, A NEGATIVE IOG WILL CAUSE RANDOM ORDERING OF THE WHOLE SET.
C
      READ(TAPEC)       COMPID, NC, NE, NPL, MPTOT,                     -
     1    PSIO, THEO, PHIO, XPO, YPO, ZPO, ITYP1,                       -
     2    (PHI(I), I=1,NPL),  (NINT(I), I=1,NPL),(YPA(I),I=1,NPL)
C
C
      WRITE(TAPEB)  COMPID, NC, NE, NPL, MPTOT,                         -
     1    PSIO, THEO, PHIO, XPO, YPO, ZPO, ITYP1,                       -
     2    (PHI(I),I=1,NPL), (YPA(I),I=1,NPL)
C
C
      IF (IPRINT .EQ. 1)                                                -
     1WRITE (TAPEOT,30) NPL,MPTOT,                                      -
     2  PHIO, PSIO, THEO, XPO, YPO, ZPO
   30 FORMAT(1H1, T10,15HCONFIGURATION  ,     T40,                      -
     1 17HNUMBER OF CUTS = , I2, T80,15HTOTAL POINTS = , I4/1H0,        -
     2  7HPHIO = , F11.6, 5X,    7HPSIO = , F11.6, 5X,                  -
     3  7HTHEO = , F11.6, 5X,      5HXO = , F11.6, 5X,                  -
     4    5HYO = , F11.6, 5X,      5HZO = , F11.6/)
C
      DO 500 KK= 1,NPL
C
C  BRING MERIDIAN DATA INTO CORE
      NF = NINT(KK)
      NT = NF
      NTA = NT
      NEL = 0
      PHID = PHI(KK)/RC
      IF (IPRINT .EQ. 1)                                                -
     1WRITE (TAPEOT,40) KK,PHID, YPA(KK), NINT(KK)
   40 FORMAT(1H0,13HPLANE NUMBER , I2, T26,6HPHI = , F11.6, 6X,         -
     1  6HYPA = , F11.6,                                                -
     2 T71, 26HNUMBER OF INTERSECTIONS = , I3/)
      IF (NF .EQ. 0)  GO TO 500
      DO 50 I = 1,NF
      J(I) = I
      JX(I) = I
   50 READ (TAPEC) ID(I), RJ(I), X(I), Y(I), Z(I), R(I), AX(I)
C
C  READ IN COMPONENT COUNTERS
      READ (TAPEC) (NI(I),I=1,NC)
C
C
      IF (IOV .GT. 0)  GO TO (70,90,110), IOV
C
C  ORDERING WILL USE AXIAL COORD.
      DO 60 I = 1,NF
   60 A(I) = AX(I)
      ORD = DORD(1)
      GO TO 130
C
C  ORDERING WILL USE X COORD.
   70 DO 80 I = 1,NF
   80 A(I) =+X(I)
      ORD = DORD(2)
      GO TO 130
C
C  ORDERING WILL USE Y COORD.
   90 DO 100 I = 1,NF
  100 A(I) =-Y(I)
      ORD = DORD(3)
      GO TO 130
C
C  ORDERING WILL USE Z COORD.
  110 DO 120 I = 1,NF
  120 A(I) =-Z(I)
      ORD = DORD(4)
C
C
  130 CONTINUE
C  FIRST ORDER RANDOM SETS (W.R.T.  AXIAL COORD.  A)
      N1 = 1
      I = NC
      IF (IOG .LT. 0)  GO TO 160
      I = 0
  140 I = I + 1
      IF (IOR(I) .EQ. 0)  GO TO 230
      N1 = NI(I)
      IF (N1 .EQ. 0)  GO TO 230
      IF (I - NC)150,160,160
  150 I2 = I
  155 I2 = I2 + 1
      IF (I2 .GT. NC)  GO TO 160
      NT = NI(I2) - 1
      IF (NT)  155, 155, 170
  160 NT = NF
  170 NT1 = NT - 1
      DO 220 L = N1,NT1
      J1 = J(L)
      IF (J1 .EQ. 0)  GO TO 230
      L1 = L + 1
C
      DO 210 K = L1,NTA
  180 J2 = J(K)
      IF (J2 .EQ. 0)  GO TO 215
      DELA = A(J1) - A(J2)
      IF (DELA)  190,190,185
C
  185 IF (ABS(DELA) .GT. (ABS(A(J1)) + 1.0)*0.001)  GO TO 210
C
  190 KD = K - L
      K1 = K
      DO 200 II = 1,KD
      K2 = K1 - 1
      J(K1) = J(K2)
  200 K1 = K2
      J(L) = J2
C
      IF (ABS(DELA) .GT. (ABS(A(J1)) + 1.0)*0.001)  GO TO 205
C
C  TWO EQUAL POINTS.  ELIMINATE J1 FROM SET.
      NT = NT -1
      NEL = NEL + 1
      DO 204 II = L1,NT
      L2 = II + 1
  204 J(II) = J(L2)
      J(NT + 1) = 0
      J1 = J2
      GO TO 180
  205 J1 = J2
  210 CONTINUE
  215 NTA = NT
  220 CONTINUE
  230 NT = NTA
      IF (I .LT. NC)  GO TO 140
C
C  CHECK IF GROUP ORDERING REQUIRED
      IF (IOG .GT. 0)  GO TO 236
      L = 0
      DO 235 I = 1,NT
      L = L + 1
  235 JX(L) = J(I)
      GO TO 460
C
C
C  NOW ORDER GROUPS
C  FIND BASE COMPONENT
  236 DO 240 I = 1,NC
      IB = I
      IF (COMPID(I) .EQ. COMPB)  GO TO 250
  240 CONTINUE
      IB = 1
C
C  IDENTIFY ELEMENTS OF BASE COMPONENT
  250 N1 = NI(IB)
      IF (N1 .GT. 0)  GO TO 260
      N1 = 1
      GO TO 290
  260 CONTINUE
      IF (IB - NC)270,290,290
  270 IB1 = IB
  280 IB1 = IB1 + 1
      IF (IB1 .GT. NC)  GO TO 290
      N2 = NI(IB1) - 1
      IF (N2 .LE. 0)  GO TO 280
      GO TO 300
  290 N2 = NF
  300 NT = N2 - N1 + 1
      L = 0
      DO 310 I = N1,N2
      L = L + 1
  310 JX(L) = J(I)
      IF (NC .LE. 1)   GO TO 460
      IF (NI(IB) .EQ. 0)  GO TO 460
C
C  NOW CYCLE OTHER COMPONENTS
      DO 450 IC = 1,NC
      IF (IC .EQ. IB)  GO TO 450
      NC1 = NI(IC)
      IF (NC1 .EQ. 0)  GO TO 450
      IF (IC - NC)320,340,340
  320 IC1 = IC
  330 IC1 = IC1 + 1
      IF (IC1 .GT. NC)  GO TO 340
      NC2 = NI(IC1) - 1
      IF (NC2 .LE. 0)  GO TO 330
      GO TO 350
  340 NC2 = NF
C
  350 DO 360 I = NC1,NC2
      L = L + 1
  360 JX(L) = J(I)
      IF (IOG .LE. 0)  GO TO 450
      LT = L
      J1 = J(NC1)
      DO 370 LX= 1,NT
      L1 = LX
      L2 = L1 + 1
      J2 = JX(LX)
      IF (A(J1) - A(J2))370,390,380
  370 CONTINUE
C
C  ELEMENTS DO NOT OVERLAP
      NT = LT
      GO TO 450
C
C  SAVE REMAINING INDICES FROM BASE COMPONENT
  380 L2 = L1
      IF (L2 .GT. NT)  GO TO 410
  390 LJ1 = JX(L2)
      LJ2 = J(NC2)
      IF (A(LJ1) .EQ. A(LJ2))  NC2 = NC2 - 1
      IX = N1 - 1
      DO 400  LX= L2,NT
      IX = IX + 1
  400 J(IX) = JX(LX)
C
C  INSERT ELEMENTS OF COMPONENT IC
  410 DO 420 I = NC1,NC2
      JX(L1) = J(I)
  420 L1 = L1 + 1
C
C  FILL IN REMAINING BASE ELEMENTS
      IF (L2 .GT. NT)  GO TO 440
      DO 430 I = N1,IX
      JX(L1) = J(I)
  430 L1 = L1 + 1
C
C  RESET POINT NUMBERS
  440 L = L1 - 1
      NT = L
C
  450 CONTINUE
  460 CONTINUE
C
      IF (IPRINT .EQ. 1)                                                -
     1WRITE (TAPEOT,470) ORD,IOG, (IOR(I),I=1,10)
  470 FORMAT(1H0,19HPOINTS ORDERED FOR , A1,    14H AS PER IOG = , I3,  -
     1 14H AND IOR(I) = , 10I3/1H0, T14, 2HID, 7X1HJ, T42,1HX,          -
     2   T62,1HY, T82,1HZ, T102,1HR, T122,1HA/)
C
C  SAVE THE DATA ON TAPEB
      WRITE(TAPEB)  NT
C
      DO 490 L = 1,NT
      I = JX(L)
      JJ= RJ(I)
      IC = ID(I)
      WRITE(TAPEB)  IC,COMPID(IC),JJ,X(I),Y(I),Z(I),R(I),A(I)
      IF (IPRINT .EQ. 1)                                                -
     1WRITE (TAPEOT,480) COMPID(IC),JJ,X(I),Y(I),Z(I),R(I),AX(I)
  480 FORMAT(1H , T12,A4, 4XI4, 4X,5F20.6)
  490 CONTINUE
C
      IF (IPRINT .EQ. 1)                                                -
     1WRITE(TAPEOT,495)  NEL
  495 FORMAT(1H0, I3, 40H DUPLICATE POINTS REMOVED FROM THE DATA.)
C
  500 CONTINUE
C
C
      RETURN
      END
*DECK CADA
      SUBROUTINE CADA(M,X,Y,T,S,C)
C
C     REVISED VERSION OF CIRCULAR ARC DATA ANALYSIS INC PLENTY OF OPTION
C     AL CHECK OUT STUFF.IT CALCS FROM M(X,Y) PTS THE ARC LENGTH S, ANGL
C     E T, AND CURVATURE C.
C
      DIMENSION X(  1),Y(  1),T(  1),S(  1),C(  1)
C
C     FIRST SOME CONSTS.
C
      Z1=1.000
      Z2=2.000
      PI=3.14159265359
      ZR=180.000/PI
      ZT=0.000002
      M1=M-1
C
C     NOW DO MAIN LOOP
C
      DO 60 J=2,M1
      X12=X(J)-X(J-1)
      Y12=Y(J)-Y(J-1)
      X23=X(J+1)-X(J)
      Y23=Y(J+1)-Y(J)
      X13=X(J+1)-X(J-1)
      Y13=Y(J+1)-Y(J-1)
      A12= ATAN2(Y12,X12)
      IF((X12.LT.0.000).AND.(Y12.LT.0.000)) A12=Z2*PI+A12
      A23= ATAN2(Y23,X23)
      IF((X23.LT.0.000).AND.(Y23.LT.0.000)) A23=Z2*PI+A23
      A13= ATAN2(Y13,X13)
      IF((X13.LT.0.000).AND.(Y13.LT.0.000)) A13=Z2*PI+A13
      DL12=Z2*(A23-A13)
      DL23=Z2*(A13-A12)
      DL13=Z2*(A23-A12)
      T1=A12-A23+A13
      T2=A23-A13+A12
      T3=A13-A12+A23
      D12= SQRT(X12*X12+Y12*Y12)
      D23= SQRT(X23*X23+Y23*Y23)
      F12=Z1
      IF(DL12.LT.ZT) GO TO 10
      V12=DL12/Z2
      F12=V12/ SIN(V12)
   10 S12=D12*F12
      F23=Z1
      IF(DL23.LT.ZT) GO TO 20
      V23=DL23/Z2
      F23=V23/ SIN(V23)
   20 S23=D23*F23
      C13=-DL13/(S12+S23)
      IF(J.NE.2) GO TO 30
      T(1)=T1
      S(1)=0.000
      C(1)=C13
   30 T(J)=T2
      S(J)=S(J-1)+S12
      C(J)=C13
      IF(J.NE.M1) GO TO 40
      T(M)=T3
      S(M)=S(M1)+S23
      C(M)=C(M1)
   40 T1D=T1*ZR
      T2D=T2*ZR
      T3D=T3*ZR
      AD12=A12*ZR
      AD23=A23*ZR
      AD13=A13*ZR
   60 CONTINUE
      RETURN
      END
*DECK FFSP
      SUBROUTINE FFSPEC
C
C  THIS ROUTINE IS USED TO PERMIT THE GENERATION AND STORAGE OF
C  UNIFORM FLOW FIELDS USING THE SIMPLE COMPRESSION, EXPANSION, ETC.,
C  FEATURES OF THE PROGRAM.
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FLIGHT/EACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /FSBS/FS,BS
      COMMON /FFIELD/TITLEM(10),TITLES(10),TITLEA(10),TITLER(10),       -
     1        IMTAB(9),IDTYP(5),LOSET(5),LOAB(20),LORG(20),L,           -
     2        DINF(6),IRW,LCNEXT,IREG,MACH,NAB,ALPHA,BETA,NREG,         -
     3        NSREG,ITFLAG
      DIMENSION TITLE(15),FS(8),BS(8),ANGLE(3)
      INTEGER  ERROR,CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL  MACH
C
C
      READ (TAPEIN,10) ISORCE
   10  FORMAT (I1)
      ITAB = ISORCE
      IF (ITAB.LT.1 .OR. ITAB.GT.4) GO TO 900
C
C
      READ (TAPEIN,20) DINF
   20  FORMAT (6F10.0)
C
C  INITIALIZE FLAGS
      MER = 0
      IPRINT = 0
      CPSTAG = 2.0
      ISDET = 0
      IFIRST = 0
      IDTYP(2) = 1
      ANGLE(2) = ABS(DINF(5))
C
C  INITIALIZE FREE STREAM DATA ARRAY
      FS(1) = RHOFS
      FS(2) = PFS
      FS(3) = TFS
      FS(4) = AFS
      FS(5) = VIS
      FS(6) = DINF(1)
      FS(7) = DINF(1) * FS(4)
      FS(8) = FS(1) * FS(7)/FS(5)
C
C
      GO TO (210,220,230,240), ITAB
C
C  WEDGE COMPRESSION FLOW FIELD
  210 CALL COMPR (ANGLE,MER,IPRINT,CPSTAG,ISDET,IFIRST,CP)
      WRITE (TAPEOT,215)
  215  FORMAT (1H0,46H  FLOW FIELD IS BEING GENERATED AND STORED BY ,   -
     1 20HCOMPRESSION ROUTINE.  )
      GO TO 800
C
C  PRANDTL-MEYER EXPANSION
  220 CALL EXPAND (ANGLE,MER,IPRINT,ISDET,CP)
      WRITE (TAPEOT,225)
  225  FORMAT (1H0,46H  FLOW FIELD IS BEING GENERATED AND STORED BY ,   -
     1 32HPRANDTL-MEYER EXPANSION ROUTINE.  )
      GO TO 800
C
C  CONICAL FLOW FIELD
  230 ANGLE(1) = DINF(5)
      CALL CONE (ANGLE,CP,0)
      WRITE (TAPEOT,235)
  235  FORMAT (1H0,46H  FLOW FIELD IS BEING GENERATED AND STORED BY ,   -
     1 13HCONE ROUTINE.  )
      GO TO 800
C
C  NEWTONIAN PRANDTL-MEYER FIELD
  240 ISE = 0
      ETAC = 1.0
      IPRCK = 0
      CALL NEWTPM (ANGLE,EMN,CP,ETAC,IPRCK,MER,CPSTAG,ISE,IFIRST)
      WRITE (TAPEOT,245)
  245  FORMAT (1H0,46H  FLOW FIELD IS BEING GENERATED AND STORED BY ,   -
     1 32HNEWTONIAN PRANDTL-MEYER ROUTINE.  )
C
C
  800 CONTINUE
      DINF(1) = BS(6)
      DINF(5) = BS(2) / PFS
      DINF(6) = BS(3) / TFS
C
C
C  STORE DATA
      IG10 = LCNEXT
      CALL WRITMS (10,DINF,6,IG10)
C     WRITE (10'IG10) DINF
 213  WRITE (TAPEOT,214) TITLEM,IMTAB, TITLES,MACH,NAB,LOAB,            -
     1  TITLEA,ALPHA,BETA,NREG,LORG, TITLER,IDTYP
  214 FORMAT (1H0,7HTITLEM=,10A4,7H IMTAB=,9I4,/1H ,7HTITLES=,10A4,     -
     1 7H MACH =,F6.3,5H NAB=,I3,/1H ,4X,5HLOAB=,20I4,/1H ,7HTITLEA=,   -
     2 10A4,7H ALPHA=,F6.3,6H BETA=,F6.3,8H NREG  =,I3,/1H ,4X,5HLORG=, -
     3 20I4,/1H ,7HTITLER=,10A4,7H IDTYP=,5I2)
      WRITE (TAPEOT,216) DINF
  216 FORMAT (1H0,5HDINF=,6F10.2)
C
C  SET POINTER TO NEXT EMPTY RECORD NUMBER
      LCNEXT = IG10 + 1
C
      RETURN
C
  900 WRITE (TAPEOT,910) ITAB
  910  FORMAT (1H0,9H***ITAB =,I2,28H INPUT TO SPECIAL FLOW FIELD,      -
     1        53H ROUTINE.  IT MUST BE BETWEEN 1 AND 4.  PROGRAM STOP.)
      STOP
      END
*DECK FFAI
      SUBROUTINE FFAIRF
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /TAGS/ITAG4,ITAG9,ITAG10
      COMMON /FFIELD/TITLEM(10),TITLES(10),TITLEA(10),TITLER(10),       -
     1        IMTAB(9),IDTYP(5),LOSET(5),LOAB(20),LORG(20),L,           -
     2        DINF(6),IRW,LCNEXT,IREG,MACH,NAB,ALPHA,BETA,NREG,         -
     3        NSREG,ITFLAG
C
      DIMENSION TITLE(15)
C
      INTEGER ERROR,PAGE
      INTEGER TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,        -
     1        TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      RETURN
      END
*DECK FFSU
      SUBROUTINE FFSURF
C
C
C  THIS ROUTINE IS USED TO TRANSFER SURFACE DATA (GENERATED AND
C  STORED ON UNIT 4 BY FORCE) TO THE FLOW FIELD UNIT 10.
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /FFIELD/TITLEM(10),TITLES(10),TITLEA(10),TITLER(10),       -
     1        IMTAB(9),IDTYP(5),LOSET(5),LOAB(20),LORG(20),L,           -
     2        DINF(6),IRW,LCNEXT,IREG,MACH,NAB,ALPHA,BETA,NREG,         -
     3        NSREG,ITFLAG
C
      DIMENSION TITLE(15),IFC(5),IFD(5),LOSF(5),DAT(6),DATA(12),DATB(25)
      DIMENSION  IPANL(10),E(25),EP(25),ELEM(25),E2(25),E1(25)
      DIMENSION LOFF(5),LOCD(5)
C
      INTEGER ERROR,PAGE
      INTEGER TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,        -
     1        TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
C
C
C  CHECK READ OR WRITE FLAG
      IF (IRW .NE. 0) GO TO 227
C
C  READ FLOW FIELD CONTROL AND PLANE ORIENTATION CARD
      READ (TAPEIN,20) NSREG, IFC1, ITFLAG, DAT
   20  FORMAT (I1,I4,I1,4X,6F10.0)
C
C  SET SUB-REGION COUNTERS
      IF (NSREG .LE. 0) NSREG = 1
      ISR = 0
C
      IG10 = LORG(IREG) + 1
      CALL WRITMS (10,DAT,6,IG10)
C     WRITE (10'IG10) DAT
      IG10 = LCNEXT + NSREG - 1
C
   25 ISR = ISR + 1
      LCNEXT = LORG(IREG) + 4 + ISR
C
      DO 30 I=1,5
       LOSF(I) = 0
       LOFF(I) = 0
       LOCD(I) = 0
      IFC(I) = 0
       DATB(I+5) = 0
   30  DATB(I+15) = 0
      IFC(1) = IFC1
C
      LOFF(1) = IG10 + 1
      IC = 1
      IDTYP(1) = 2
      IDTYP(2) = 2
C
C
C  CHECK IF DATA IS TO BE OBTAINED FROM INPUT UNIT OR UNIT 4
      IF (IFC(1) .EQ. 0) GO TO 39
C  READ IN DATA FROM INPUT UNIT
      IFR = IFC(1)
      DO 38 I=1,IFR
      READ (TAPEIN,35) DATA
   35  FORMAT (6F10.0)
      IG10 = IG10 + 1
      CALL WRITMS (10,DATA,12,IG10)
C     WRITE (10'IG10) DATA
   38  CONTINUE
      K = IFR
      GO TO 140
C
C
C  READ PANEL NUMBERS TO BE GROUPED TO FORM SURFACE COMPONENT
   39 CONTINUE
      READ (TAPEIN,40) IPANL
   40  FORMAT (10I2)
C  OBTAIN POINTER INFO FROM UNIT 4
      IG4 = 2
      CALL READMS (4,E,25,IG4)
C     READ (4'IG4) E
      NREM = E(4)
      K = 0
C
C  START PANEL DO LOOP
      DO 100 I=1,10
      IF (IPANL(I) .EQ. 0) GO TO 140
      WRITE (TAPEOT,50) IPANL(I)
   50 FORMAT (1H0,49HSURFACE DATA ARE BEING TRANSFERED FROM UNIT 4 TO , -
     1  17HUNIT 10.  IPANL =,I3,/1H ,28HDATA ARRAY FOLLOWS FOR EACH ,   -
     2   6HPOINT. )
      IG4 = IPANL(I) * 5
      CALL READMS (4,EP,25,IG4)
C     READ (4'IG4) EP
      ISTART = EP(3) -NREM
      N = EP(4)
C
C  START ELEMENT DO LOOP WITHIN A PANEL
      DO 99 II=1,N
      IG4 = ISTART + NREM*II
      CALL READMS (4,ELEM,25,IG4)
C     READ (4'IG4) ELEM
C
      IG41 = IG4 + 1
C
      CALL READMS (4,E2,25,IG41)
C     READ (4'IG41) E2
      IG4S = E2(NAB)
C
      CALL READMS (4,E1,25,IG4S)
C     READ (4'IG4S) E1
C
      DATA(1) = ELEM(7)
      DATA(2) = ELEM(8)
      DATA(3) = ELEM(9)
      DATA(4) = 0.0
      DATA(5) = 0.0
      DATA(6) = 0.0
      DATA(7) = E1(7)
      DATA(8) = E1(8)
      DATA(9) = E1(9)
      DATA(10) = E1(10)
      DATA(11) = E1(11)
      DATA(12) = E1(12)
      WRITE (TAPEOT,52) II,IG4S,DATA
   52  FORMAT (1H ,2I5,3X,6E12.5,/1H ,13X,6E12.5)
C
      IG10 = IG10 + 1
C
      CALL WRITMS (10,DATA,12,IG10)
C     WRITE (10'IG10) DATA
      K = K + 1
C
C
   99 CONTINUE
  100 CONTINUE
  140 CONTINUE
      IFC(1) = K
C
C  SAVE LOCATIONS AND COUNTERS FOR SUB-REGION
      DO 260 I = 1,5
      DATB(I) = LOFF(I)
      DATB(I+5) = IFC(I)
  260 DATB(I+10) = LOCD(I)
C
C
      CALL WRITMS (10, DATB,25,LCNEXT)
C     WRITE(10'LCNEXT)  DATB
C
      LCNEXT = IG10 + 1
      IF (ISR .LT. NSREG) GO TO 25
      GO TO 600
C
C  FLOW FIELD DATA WILL BE READ FROM UNIT 10
  227 WRITE (TAPEOT,217)
  217 FORMAT (1H0,48HSURFACE DATA ARE BEING READ FROM FLOW-FIELD UNIT )
      WRITE (TAPEOT,214) TITLEM,IMTAB, TITLES,MACH,NAB,LOAB,            -
     1  TITLEA,ALPHA,BETA,NREG,LORG, TITLER,IDTYP
  214 FORMAT (1H0,7HTITLEM=,10A4,7H IMTAB=,9I4,/1H ,7HTITLES=,10A4,     -
     1 7H MACH =,F6.3,5H NAB=,I3,/1H ,4X,5HLOAB=,20I4,/1H ,7HTITLEA=,   -
     2 10A4,7H ALPHA=,F6.3,6H BETA=,F6.3,8H NREG  =,I3,/1H ,4X,5HLORG=, -
     3 20I4,/1H ,7HTITLER=,10A4,7H IDTYP=,5I2)
      IG10 = LORG(IREG) + 1
      CALL READMS(10, DAT, 6, IG10)
C     READ (10'IG10)  DAT
      WRITE(TAPEOT,228) DAT
  228 FORMAT(1H0,                                                       -
     2  3HXO=,F7.3,3X,3HYO=,F7.3,3X,3HZO=,F7.3,                         -
     3  3X,5HPSIO=,F7.3,3X,6HTHETO=,F7.3,6X,5HPHIO=,F7.3)
C
C  READ IN SUB-REGIONS
      DO 800 ISR = 1,NSREG
      IG10 = LORG(IREG) + 4+ ISR
      ISF = 0
  700 CONTINUE
C
      CALL READMS (10, DATB,25,IG10)
C     READ(10'IG10) DATB
      DO 710 I = 1,5
      LOFF(I) = DATB(I)     + 0.001
      IFC(I) = DATB(I+5)    + 0.001
      LOCD(I) = DATB(I+10)  + 0.001
      IFD(I)  = DATB(I+15)  + 0.001
  710 CONTINUE
C
C
C  COUNT NUMBER OF SECONDARY FLOWS (SUB-REGIONS ONLY)
      IF (ISF .NE. 0)  GO TO 750
      NSECF = 0
      LOSF(I) = DATB(I+20)  + 0.001
      DO 720 I = 1,5
      IF (LOSF(I) .EQ. 0)  GO TO 730
      NSECF = NSECF + 1
  720 CONTINUE
  730 CONTINUE
      WRITE(TAPEOT,740)  IREG, ISR, NSECF
  740 FORMAT(1H1, 11HFLOW REGION, I3/1H0,  10HSUB-REGION, I3,           -
     1    20X  25HNUMBER OF SECONDARY FLOWS, I3)
C
  750 WRITE(TAPEOT,760)  LOFF, IFC, LOCD, IFD
  760 FORMAT(1H0, 4HLOFF,  5I20/1H , 4H IFC, 5I20/                      -
     1       1H0, 4HLOCD,  5I20/1H , 4H IFD, 5I20)
C
      IG10 = LOFF(1) - 1
      IFR = IFC(1)
      IC = 1
  231 WRITE (TAPEOT,237) IC
  237 FORMAT (1H0,9HBOUNDARY ,I2,5H DATA )
  236 DO 232 I=1,IFR
      IG10 = IG10 + 1
      CALL READMS (10,DATA,12,IG10)
C     READ (10'IG10) DATA
  232 WRITE (TAPEOT,233) DATA
  233 FORMAT (1H , 12F10.4)
      IF (IC .NE. 1) GO TO 234
      IC = 2
      IFR = IFC(2)
      IF (IFR .EQ. 0) GO TO 234
      GO TO 231
  234 IF (IC .NE. 2) GO TO 235
      IC = 3
      IFR = IFC(3)
      IF (IFR .EQ. 0) GO TO 235
      GO TO 231
  235 IF (IC .NE. 3) GO TO 239
      IC = 4
      IFR = IFC(4)
      IF (IFR .EQ. 0) GO TO 239
      GO TO 231
  239 IF (IC .NE. 4) GO TO 245
      IC = 5
      IFR = IFC(5)
      IF (IFR .EQ. 0) GO TO 245
      WRITE (TAPEOT,238)
  238 FORMAT (1H0,25HREMAINING FLOW-FIELD DATA  )
      GO TO 236
C
  245 CONTINUE
C
C  CHECK FOR SECONDARY FLOWS
      IF (ISF .EQ. NSECF)  GO TO 800
      ISF = ISF + 1
      WRITE(TAPEOT,770)  ISF
  770 FORMAT(1H1, 14HSECONDARY FLOW, I3)
C
C  SET LOCATIONS
      IG10 = LOSF(ISF)
      GO TO 700
C
  800 CONTINUE
C
  600 CONTINUE
C
C
C
      RETURN
      END
*DECK FFIN
      SUBROUTINE FFINPT
C
C  THIS ROUTINE IS USED TO PERMIT HAND LOADING OF FLOW FIELD DATA ON
C  UNIT 10.
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /TAGS/ITAG4,ITAG9,ITAG10
      COMMON /FFIELD/TITLEM(10),TITLES(10),TITLEA(10),TITLER(10),       -
     1        IMTAB(9),IDTYP(5),LOSET(5),LOAB(20),LORG(20),L,           -
     2        DINF(6),IRW,LCNEXT,IREG,MACH,NAB,ALPHA,BETA,NREG,         -
     3        NSREG,ITFLAG
C
      DIMENSION TITLE(15),IFC(5),IFD(5),LOSF(5),DAT(6),DATA(12),DATB(25)
      DIMENSION LOFF(5),LOCD(5)
C
      INTEGER ERROR,PAGE
      INTEGER TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,        -
     1        TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
C
      READ (TAPEIN,10) IDTYP(2)
   10  FORMAT (I1)
      ITAB = IDTYP(2)
      IF (ITAB.LT.1 .OR. ITAB.GT.4) GO TO 900
      GO TO (210,220,230,240), ITAB
C
C  UNIFORM FLOW FIELD - SAME FOR ALL X,Y,Z.
 210  IF (IRW .NE. 0) GO TO 212
      READ (TAPEIN,211) DINF
 211  FORMAT (6F10.0)
      IG10 = LCNEXT
      CALL WRITMS (10,DINF,6,IG10)
C     WRITE (10'IG10) DINF
C  SET POINTER TO START OF DATA
      LOFF(1) = LCNEXT
      LCNEXT = IG10 + 1
      WRITE (TAPEOT,216)
  216 FORMAT (1H0,43HDATA ARE BEING READ INTO UNIFORM FLOW FIELD  )
      GO TO 213
  212 IG10 = LCNEXT
      WRITE (TAPEOT,217)
 217  FORMAT (1H0,40HDATA ARE BEING READ FROM FLOW-FIELD UNIT)
      CALL READMS (10,DINF,6,IG10)
C     READ (10'IG10) DINF
 213  WRITE (TAPEOT,214) TITLEM,IMTAB, TITLES,MACH,NAB,LOAB,            -
     1  TITLEA,ALPHA,BETA,NREG,LORG, TITLER,IDTYP
  214 FORMAT (1H0,7HTITLEM=,10A4,7H IMTAB=,9I4,/1H ,7HTITLES=,10A4,     -
     1 7H MACH =,F6.3,5H NAB=,I3,/1H ,4X,5HLOAB=,20I4,/1H ,7HTITLEA=,   -
     2 10A4,7H ALPHA=,F6.3,6H BETA=,F6.3,8H NREG  =,I3,/1H ,4X,5HLORG=, -
     3 20I4,/1H ,7HTITLER=,10A4,7H IDTYP=,5I2)
      WRITE (TAPEOT,215) DINF
 215  FORMAT (1H0,5HDINF=,6F10.2)
      GO TO 600
C
C
C
C  NON-UNIFORM FLOW-FIELD DATA ARE INPUT OR READ
  220 IF (IRW .NE. 0) GO TO 227
C
C  READ ORIENTATION CARD
      READ(TAPEIN,221) NSREG, ITFLAG, DAT
  221 FORMAT(2(I1,4X), 6F10.0)
C  SET SUB-REGION COUNTERS
      IF (NSREG .LE. 0)  NSREG = 1
      ISR = 0
C
      IG10 = LORG(IREG) + 1
      CALL WRITMS (10, DAT, 6, IG10)
C     WRITE(10'IG10)  DAT
      IG10 = LCNEXT + NSREG - 1
  100 ISR = ISR + 1
      LCNEXT = LORG(IREG) + 4 + ISR
      ISF = 0
      DO 249 I = 1,5
  249 LOSF(I) = 0
  110 CONTINUE
C
C  READ IN FLOW FIELD CONTROL CARD
      READ(TAPEIN,229)  IFC, IFD, ISECF
  229 FORMAT(11I2)
C
C  PRESET LOCATIONS AND COUNTERS
      DO 250 I = 1,5
      LOFF(I) = 0
      LOCD(I) = 0
      DATB(I+5) = IFC(I)
      DATB(I+15) = IFD(I)
  250 CONTINUE
C
      LOFF(1) = IG10 + 1
      IFR = IFC(1)
      IC = 1
C  READ IN FLOW FIELD DATA.  IC=1 BOUNDARY 1, IC=2 BOUNDARY 2,
C  IC=3 BOUNDARY 3, IC=4 BOUNDARY 4, IC=5 REMAINING FLOW FIELD DATA
  222 DO 224 I=1,IFR
      READ (TAPEIN,223) DATA
  223 FORMAT (6F10.0)
      IG10 = IG10 + 1
  224 CALL WRITMS (10,DATA,12,IG10)
C 224 WRITE (10'IG10) DATA
      IF (IC .NE. 1) GO TO 225
      IC = 2
      LOFF(2) = IG10 + 1
      IFR = IFC(2)
      IF (IFR .EQ. 0)  GO TO 225
      GO TO 222
  225 IF (IC .NE. 2) GO TO 226
      IC = 3
      IFR = IFC(3)
      IF (IFR .EQ. 0)  GO TO 226
      LOFF(3) = IG10 + 1
      GO TO 222
  226 IF (IC .NE. 3) GO TO 241
      IC = 4
      IFR = IFC(4)
      IF (IFR .EQ. 0) GO TO 241
      LOFF(4) = IG10 + 1
      GO TO 222
  241 IF (IC .NE. 4) GO TO 242
      IC = 5
      IFR = IFC(5)
      IF (IFR .EQ. 0) GO TO 242
      LOFF(5) = IG10 + 1
      GO TO 222
  242 CONTINUE
C
C  SAVE LOCATIONS AND COUNTERS FOR SUB-REGION
      DO 260 I = 1,5
      DATB(I) = LOFF(I)
  260 DATB(I+10) = LOCD(I)
C
      CALL WRITMS (10, DATB,25,LCNEXT)
C     WRITE(10'LCNEXT)  DATB
C
C  CHECK FOR SECONDARY FLOW
      IF (ISECF .EQ. 0)  GO TO 300
C
C  SECONDARY FLOW
      IG10 = IG10 + 1
      LCNEXT = IG10
      ISF = ISF + 1
      LOSF(ISF) = LCNEXT
      GO TO 110
C
C
  300 CONTINUE
      IF (ISF .EQ. 0)  GO TO 500
C
C  RESET LOCATIONS  FOR SECONDARY FLOWS
      LCNEXT = LORG(IREG) + 4+ ISR
C
      CALL READMS (10, DATB,25,LCNEXT)
C     READ(10'LCNEXT) DATB
      DO 310 I = 1,ISF
  310 DATB(I+20) = LOSF(I)
C
      CALL WRITMS (10, DATB,25,LCNEXT)
C     WRITE(10'LCNEXT) DATB
C
C
  500 CONTINUE
      IF (ISR .LT. NSREG)  GO TO 100
C
      LCNEXT = IG10 + 1
      GO TO 600
C
C
C  FLOW FIELD DATA WILL BE READ FROM UNIT 10
  227 WRITE (TAPEOT,217)
      WRITE (TAPEOT,214) TITLEM,IMTAB, TITLES,MACH,NAB,LOAB,            -
     1  TITLEA,ALPHA,BETA,NREG,LORG, TITLER,IDTYP
      IG10 = LORG(IREG) + 1
      CALL READMS(10, DAT, 6, IG10)
C     READ (10'IG10)  DAT
      WRITE(TAPEOT,228) DAT
  228 FORMAT(1H0,                                                       -
     2  3HXO=,F7.3,3X,3HYO=,F7.3,3X,3HZO=,F7.3,                         -
     3  3X,5HPSIO=,F7.3,3X,6HTHETO=,F7.3,6X,5HPHIO=,F7.3)
C
C  READ IN SUB-REGIONS
      DO 800 ISR = 1,NSREG
      IG10 = LORG(IREG) + 4+ ISR
      ISF = 0
  700 CONTINUE
C
      CALL READMS (10, DATB,25,IG10)
C     READ(10'IG10) DATB
      DO 710 I = 1,5
      LOFF(I) = DATB(I)     + 0.001
      IFC(I) = DATB(I+5)    + 0.001
      LOCD(I) = DATB(I+10)  + 0.001
      IFD(I)  = DATB(I+15)  + 0.001
  710 CONTINUE
C
C
C  COUNT NUMBER OF SECONDARY FLOWS (SUB-REGIONS ONLY)
      IF (ISF .NE. 0)  GO TO 750
      NSECF = 0
      DO 720 I = 1,5
      LOSF(I) = DATB(I+20)  + 0.001
      IF (LOSF(I) .EQ. 0)  GO TO 730
      NSECF = NSECF + 1
  720 CONTINUE
  730 CONTINUE
      WRITE(TAPEOT,740)  IREG, ISR, NSECF
  740 FORMAT(1H1, 11HFLOW REGION, I3/1H0,  10HSUB-REGION, I3,           -
     1    20X  25HNUMBER OF SECONDARY FLOWS, I3)
C
  750 WRITE(TAPEOT,760)  LOFF, IFC, LOCD, IFD
  760 FORMAT(1H0, 4HLOFF,  5I20/1H , 4H IFC, 5I20/                      -
     1       1H0, 4HLOCD,  5I20/1H , 4H IFD, 5I20)
C
      IG10 = LOFF(1) - 1
      IFR = IFC(1)
      IC = 1
  231 WRITE (TAPEOT,237) IC
  237 FORMAT (1H0,9HBOUNDARY ,I2,5H DATA )
  236 DO 232 I=1,IFR
      IG10 = IG10 + 1
      CALL READMS (10,DATA,12,IG10)
C     READ (10'IG10) DATA
  232 WRITE (TAPEOT,233) DATA
  233 FORMAT (1H , 12F10.4)
      IF (IC .NE. 1) GO TO 234
      IC = 2
      IFR = IFC(2)
      IF (IFR .NE. 0) GO TO 231
  234 IF (IC .NE. 2) GO TO 235
      IC = 3
      IFR = IFC(3)
      IF (IFR .NE. 0) GO TO 231
  235 IF (IC .NE. 3) GO TO 239
      IC = 4
      IFR = IFC(4)
      IF (IFR .NE. 0) GO TO 231
  239 IF (IC .NE. 4) GO TO 245
      IC = 5
      IFR = IFC(5)
      IF (IFR .EQ. 0) GO TO 245
      WRITE (TAPEOT,238)
  238 FORMAT (1H0,25HREMAINING FLOW-FIELD DATA  )
      GO TO 236
C
  245 CONTINUE
C
C  CHECK FOR SECONDARY FLOWS
      IF (ISF .EQ. NSECF)  GO TO 800
      ISF = ISF + 1
      WRITE(TAPEOT,770)  ISF
  770 FORMAT(1H1, 14HSECONDARY FLOW, I3)
C
C  SET LOCATIONS
      IG10 = LOSF(ISF)
      GO TO 700
C
  800 CONTINUE
C
 230  CONTINUE
      GO TO 600
 240  CONTINUE
  600 CONTINUE
C
C
C
      RETURN
  900 WRITE (TAPEOT,910)
  910  FORMAT (1H ,47H** ITAB PARMAETER INPUT TO FFINPT IS WRONG*STOP )
      STOP
      END
*DECK FFBO
      SUBROUTINE FFBODY
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /FFIELD/TITLEM(10),TITLES(10),TITLEA(10),TITLER(10),       -
     1        IMTAB(9),IDTYP(5),LOSET(5),LOAB(20),LORG(20),L,           -
     2        DINF(6),IRW,LCNEXT,IREG,MACH,NAB,ALPHA,BETA,NREG,         -
     3        NSREG,ITFLAG
      COMMON/SOSEIN/ AMF, ALFWD, PHIT, G, IFLG(5), NP, AMP, ALFP,       -
     1    A(100), R(100)
      COMMON/SOSEOT/AMANS(100),AMDX(100), AMDY(100), AMDZ(100),         -
     1    PANS(100), TD(100), AMS(100), AMSX(100), AMSY(100), AMSZ(100),-
     2    PSHK(100), TS(100), NSP, NS, JS(10), IS(10), LS(10), IN(10),  -
     3    XANS(100), YANS(100), XS(100), YS(100)
C
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      DIMENSION TITLE(15), NE(10), DAT(6)
      DIMENSION  COMPID(10), PHI(40), YPA(40), DATA(12), LOSF(5)
      REAL MACH
      REAL  LOC(25)
C
      INTEGER ERROR,PAGE
      INTEGER TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,        -
     1        TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      DATA RC   /1.745329252E-2/
C
      TFX(XO,X,Y,Z) = XO + AP11*X + AP21*Y + AP31*Z
C
      TFY(YO,X,Y,Z) = YO + AP12*X + AP22*Y + AP32*Z
C
      TFZ(ZO,X,Y,Z) = ZO + AP13*X + AP23*Y + AP33*Z
C
      G = GAM
C
C  READ IN SHOCK EXPANSION FLOW FIELD CONTROL CARD
      READ(TAPEIN, 10)  IFLG, X1, X2
   10 FORMAT( 5I1, 5X, 2F10.0)
C
C  GO GET MERIDIAN CUTS.   RAW DATA ON TAPEB
C  AND BY MERIDIAN ON TAPEC.
C  IF IFLG(2) = 1,  USE PREVIOUSLY CALCULATED DATA
      IF (IFLG(2) .EQ. 1)  GO TO 20
      CALL MERID
C
C  NOW ORDER MERIDIAN DATA.   SAVE FINAL RESULTS ON TAPEB.
      CALL MOUT
C
   20 REWIND TAPEB
      READ(TAPEB)    COMPID,NC,NE,NPL,MPTOT,                            -
     1              PSIO,THEO,PHIO,XPO,YPO,ZPO, ITYP1,                  -
     2              (PHI(I),I=1,NPL), (YPA(I),I=1,NPL)
      IF(ITYP1.GT.1) ITFLAG=1
C  NOW READY TO CALCULATE FLOW FIELD DATA
C  USING SHOCK EXPANSION METHOD.
C
C  PREPARE VELOCITY AND TRANSFORMATION MATRICES.
C
      ALPHAR = RC*ALPHA
      BETAR  = RC*BETA
      COSA = COS(ALPHAR)
      SINA = SIN(ALPHAR)
      COSB = COS(BETAR)
      SINB = SIN(BETAR)
      COSPS = COS(RC*PSIO)
      SINPS = SIN(RC*PSIO)
      COST  = COS(RC*THEO)
      SINT  = SIN(RC*THEO)
C
C  DIRECTION COSINES OF FREE STREAM FLOW
      AMF = MACH
      AMFX = -COSA*COSB
      AMFY =  SINB
      AMFZ =  SINA*COSB
C
C  CALCULATE DIRECTION COSINES OF FREE STREAM
C  IN MERIDIAN AXIS COORDS.
C
C  COMPONENTS OF TRANSFORMATION MATRIX
      AA11 =  COST*COSPS
      AA12 =  COST*SINPS
      AA13 = -SINT
C
      AA21 = -SINPS
      AA22 =  COSPS
      AA23 =  0.0
C
      AA31 = -SINT*COSPS
      AA32 = -SINT*SINPS
      AA33 = -COST
C
C  DIRECTION COSINES IN MERIDIAN AXIS COORDS.
      VX = AA11*AMFX + AA12*AMFY + AA13*AMFZ
      VY = AA21*AMFX + AA22*AMFY + AA23*AMFZ
      VZ = AA31*AMFX + AA32*AMFY + AA33*AMFZ
C
C  CALCULATE LOCATION OF WINDWARD PLANE
      PHIW = 0.0
      IF (VY .EQ. 0.0  .AND.  VZ .LE. 0.0)  GO TO 30
      PHIW = 3.1415926536
      IF (VY .EQ. 0.0)  GO TO 30
      PHIW = ATAN2(VY,VZ)
   30 CONTINUE
C
C  CALCULATE ANGLE OF ATTACK IN WINDWARD PLANE
      ALFWD = ACOS(-VX)
C
C  BEGIN CYCLE ON SPECIFIC PLANES (NPL OF THEM)
C  THIS IS CYCLE ON SUB-REGIONS
      NSREG = NPL
      LCNEXT = LCNEXT + NSREG
      DO 1500 N = 1,NPL
C
C  TRANSFORMATION MATRIX FOR GIVEN PLANE (PHI + YPA).
      AP11 = AA11
      AP12 = AA12
      AP13 = AA13
C
      COSP = COS(PHI(N))
      SINP = SIN(PHI(N))
C
      AP21 =  COSP*AA21 - SINP*AA31
      AP22 =  COSP*AA22 - SINP*AA32
      AP23 = -SINP*AA33
C
      AP31 =  SINP*AA21 + COSP*AA31
      AP32 =  SINP*AA22 + COSP*AA32
      AP33 =  COSP*AA33
C
      XO = XPO
      YO = YPO + YPA(N)
      ZO = ZPO
C
C  LOCATION FROM WINDWARD PLANE
      PHIT =    (PHI(N) - PHIW)
C  MACH NO. IN PHIT PLANE, AMP.
      EMC = VZ*COS(PHIT) + VY*SIN(PHIT)
      AMP = AMF*SQRT(VX**2 + EMC**2)
C  ANGLE OF AMP TO AXIS
      ALFP = ATAN2(-EMC,-VX)
C  READ IN MERIDIAN DATA
      READ(TAPEB) NP
      DO  90  J = 1,NP
      READ(TAPEB)  IC, COMID, JJ, XI, YI, ZI, R(J), A(J)
   90 CONTINUE
C
C
      CALL  SOSE
C
C  SET UP FLOW FIELD REGIONS (NS OF THEM).
C
C  CYCLE ON SECONDARY FLOWS
      IG10 = LORG(IREG) + 4 + N
      NSECF = NS - 1
      DO 95 K = 10,25
   95 LOC(K) = 0
C
      ISF = 0
      IR = 0
C
C  GATHER, TRANSFORM AND STORE FLOW FIELD DATA.
  100 IR = IR + 1
      ITAG10 = LCNEXT
      DO 105  K = 1,9
  105 LOC(K) = 0
C
C  SET COUNTERS FOR BOUNDARY 1
      LOC(1) = LCNEXT
      I1 = IS (IR)
      I2 = NP
      IF (NS .GT. IR)  I2 = IS(IR + 1) - 1
      IL1 = 0
      DO 107 I = I1,I2
      IF (IL1 .NE. 0)  GO TO 106
      IF (X1 .GE. XANS(I))  IL1 = I
  106 IF (X2 .GE. XANS(I))  GO TO 108
  107 CONTINUE
      IL2 = I2
      GO TO 109
  108 IL2 = I
  109 IF (IL1 .LT. I1)  IL1 = I1
      I1 = IL1
      I2 = IL2
      LOC(6) = I2 - I1 + 1
      IB = 1
      GO TO 200
C
C  SET COUNTERS FOR BOUNDARY 2
  110 I1 = JS(IR)
      I2 = LS(IR)
      IL3 = 0
      DO 117 I = I1,I2
      IF (IL3 .NE. 0)  GO TO 116
      IF (X1 .GE. XS(I))  IL3 = I
  116 IF (X2 .GE. XS(I))  GO TO 118
  117 CONTINUE
      IL4 = I2
      GO TO 119
  118 IL4 = I
  119 IF (IL3 .LT. I1)  IL3 = I1
      I1 = IL3
      I2 = IL4
      IK = 1
      LOC(2) = LOC(1) + LOC(6)
      LOC(7) = I2 - I1 + 1
      GO TO 300
C
C  SET COUNTERS FOR BOUNDARY 3
  120 I1 = IL1
      I2 = I1
      IB = 2
      GO TO 200
  130 I1 = IL3
      I2 = I1
      IK = 2
      LOC(3) = LOC(2) + LOC(7)
      LOC(8) = 2
      GO TO 300
C
C  SET COUNTERS FOR BOUNDARY 4
      I2 = I1
      IB = 3
  140 I1 = IL2
      LOC(4) = LOC(3) + LOC(8)
C  THE FOLLOWING CARD IS A DUMMY TEST UNTIL INTERSECTIONS
C  BECOME ACTIVE.  CARD SHOULD BE
C     IF (NS .GT. IR)  GO TO 160
      IF (NS .EQ. 0)   GO TO 160
      GO TO 200
  150 I1 = IL4
      I2 = I1
      IK = 4
      LOC(9) = 2
      GO TO 300
  160 I1 = JS(IR+1)
      I2 = IN(IR)
      IK = 3
      LOC(9) = I2 - I1 + 1
      GO TO 300
  170 I1 = LS(IR)
      I2 = I1
      IK = 4
      LOC(9) = LOC(9) + 1
      GO TO 300
C
C
  200 CONTINUE
      DO 210 I = I1,I2
      DATA(1) = TFX(XO, XANS(I), 0.0, YANS(I))
      DATA(2) = TFY(YO, XANS(I), 0.0, YANS(I))
      DATA(3) = TFZ(ZO, XANS(I), 0.0, YANS(I))
      DATA(4) = XANS(I)
      DATA(5) = YANS(I)
      DATA(6) = PHI(N)
      DATA(7) = AMANS(I)
      DATA(8) = AMDX(I)
      DATA(9) = AMDZ(I)
      DATA(10)= AMDY(I)
      DATA(11)= PANS(I)
      DATA(12)= TD(I)
C
      CALL  WRITMS(10, DATA, 12, ITAG10)
C     WRITE(10'ITAG10)  DATA
      ITAG10 = ITAG10 + 1
C
  210 CONTINUE
      GO TO  (110, 130, 150), IB
C
C
  300 CONTINUE
      DO 310 I = I1,I2
      DATA(1) = TFX(XO, XS(I), 0.0, YS(I))
      DATA(2) = TFY(YO, XS(I), 0.0, YS(I))
      DATA(3) = TFZ(ZO, XS(I), 0.0, YS(I))
      DATA(4) = XS(I)
      DATA(5) = YS(I)
      DATA(6) = PHI(N)
      DATA(7) = AMS(I)
      DATA(8) = AMSX(I)
      DATA(9) = AMSZ(I)
      DATA(10)= AMSY(I)
      DATA(11)= PSHK(I)
      DATA(12)= TS(I)
C
      CALL  WRITMS(10, DATA, 12, ITAG10)
C     WRITE(10'ITAG10)  DATA
      ITAG10 = ITAG10 + 1
C
  310 CONTINUE
      GO TO   (120, 140, 170, 400), IK
C
C  CHECK FOR SECONDARY FLOWS.  FIRST SAVE COUNTERS
  400 CONTINUE
      CALL  WRITMS(10, LOC,  25, IG10)
C     WRITE(10'IG10)  LOC
C
      IF (NSECF .EQ. 0)  GO TO 500
C
C  SECONDARY FLOW.  SET LOCATIONS AND COUNTERS.
      ISF = ISF + 1
      IG10 = ITAG10
      LCNEXT = IG10 + 1

      NSECF = NSECF - 1
      LOSF(ISF) = IG10
      GO TO 100
C
  500 CONTINUE
      LCNEXT = ITAG10
      IF (ISF .EQ. 0)  GO TO 1500
C
C  RESET LOCATIONS FOR SECONDARY FLOWS
      IG10 = LORG(IREG) + 4 + N
C
      CALL  READMS(10, LOC,  25, IG10)
C     READ(10'IG10)  LOC
C
      DO 510 I = 1,ISF
  510 LOC(20+I) = LOSF(I)
C
      CALL  WRITMS(10, LOC,  25, IG10)
C     WRITE(10'IG10)  LOC
C
 1500 CONTINUE
C
C  SAVE ORIENTATION DATA
      DAT(1) = XPO
      DAT(2) = YPO
      DAT(3) = ZPO
      DAT(4) = PSIO
      DAT(5) = THEO
      DAT(6) = PHIO
      IG10 = LORG(IREG) + 1
      CALL WRITMS(10, DAT, 6, IG10)
C     WRITE(10'IG10)  DAT
C
C     SET IDTYP(1) FOR NON-UNIFORM FLOW FIELD
      IDTYP(2) = 2
C
      RETURN
      END
*DECK SOSE
      SUBROUTINE    SOSE
C
C  SECOND-ORDER SHOCK-EXPANSION METHOD
C  BASED ON NACA TR-1328.
C  (HIGHLY MODIFIED VERSION OF NASA TN D-5046)
C
      COMMON/SOSEIN/ AMF, ALF, PHIT, G, IFLG(5), N, AMP, ALFP,          -
     1    X(100), Y(100)
      COMMON/SOSEOT/AMANS(100),AMDX(100), AMDY(100), AMDZ(100),         -
     1    PANS(100), TD(100), AMS(100), AMSX(100), AMSY(100), AMSZ(100),-
     2    PSHK(100), TS(100), NSP, NS, JS(10), IS(10), LS(10), IN(10),  -
     3    XANS(100), YANS(100), XS(100), YS(100)
C
      COMMON/FSBS/FS,BS
      DIMENSION FS(8),BS(8),ANGL(3)
      DIMENSION  DEL(100), S(100), T(100), C(100)
      EQUIVALENCE (DEL(1), C(1))
C
      REAL MIDDLE,MNS
      DATA RC,DC/1.745329252E-2, 57.29577957/, PMIN/0.3/
      DATA MER,IPRINT,ISDET,CPSTAG/0,0,0,2.0/
      GP1 = G + 1.0
      GM1 = G - 1.0
      GR = SQRT(GP1/GM1)
      ANUMX = 0.97815*(GR - 1.0)*90.0*RC
      AME = AMF
      AMP2=AMP**2
      ALPHA = DC*ALF
      ALFPD = DC*ALFP
      PHI   = DC*PHIT
      IN(1) = 0
      JSS = 0
      J = 1
      NS = 1
      JSJ = 1
      JS (1) = 1
      IS(1) = 1
C
      XS(1) = X(1)
      YS(1) = Y(1)
      NSP = 0
      XSMAX = 3.0*X(N)
C
C  SET FLAGS FOR FLOW TYPE
      IFLG3 = IFLG(3)
      IFLG4 = IFLG(4)
      IF (IFLG3 .LE. 0)  GO TO 7
      GO TO (1,2,3,4),  IFLG3
C
C  FOSE, 2-D STARTING FLOW
    7 IT = 0
      IFLG3 = 0
      GO TO 5
C
C  SOSE, CP 792 CONE FLOW
    1 IT = 1
      IFLG3 = 1
      GO TO 5
C
C  SOSE, JONES  CONE FLOW
    2 IT = 2
      IFLG3 = 1
      GO TO 5
C
C  FOSE, CP 792 CONE STARTING FLOW
    3 IT = 1
      IFLG3 = 0
      GO TO 5
C
C  FOSE, JONES  CONE STARTING FLOW
    4 IT = 2
      IFLG3 = 0
C
    5 CONTINUE
C
C
C  CALCUALATE LOCAL SLOPES AND RUNNING LENGTHS
      IF (IFLG(1) .EQ. 1)  GO TO 9
C
C  LINEAR SLOPES AT MIDPT
      S(1) = 0.0
      DO 6 I = 2,N
      DY = Y(I) - Y(I-1)
      DX = -X(I) + X(I-1)
      DS = SQRT(DX**2 + DY**2)
      S(I) = S(I-1) + DS
    6 DEL(I) = DC*ATAN2(DY,DX)
      DEL(1) = DEL(2)
      GO TO 11
C
C  CIRCULAR ARC ROUTINE
C
    9 CALL CADA(N, X, Y, T, S, C)
C
C  CADA RETURNS SLOPE ANGLE (T), LENGTH (S), AND CURVATURE (C)
C  AT THE N POINTS -- SET DEL AND S AT MIDPOINTS.
C
      DEL(1) =-DC*T(1) + 180.0
      DO 10 I = 2,N
      DEL(I) =-DC*0.5*(T(I-1) + T(I)) + 180.0
   10 CONTINUE
C
C
   11 CONTINUE
      IF (IFLG(5) .NE. 1)  GO TO 12
C
      WRITE(6,32)
   32 FORMAT(1H1)
      IF (IFLG3 .EQ. 1)  WRITE(6, 33)
      IF (IFLG3 .EQ. 0)  WRITE(6, 34)
   33 FORMAT(1H ,29H SECOND-ORDER SHOCK-EXPANSION)
      WRITE(6, 51)  AMF, ALPHA, PHI, AMP, ALFPD
   51 FORMAT(///5H0M = , F12.6, 5X 8HALFWD = , F12.6,                   -
     15X7HPHIT = ,F12.6, 5X6HAMP = ,F12.6, 5X7HALFP = , F12.6)
      WRITE (6,37)
37    FORMAT(1H0, 22X1HX, 14X1HY, 13X5HDELTA, 11X1HS/)
      WRITE (6,38) (X(I),Y(I),DEL(I),S(I),I=1,N)
38    FORMAT (13X,  4F15.4)
C
C  STARTING SOLUTION
   12 CONTINUE
      I = 2
      DELC = RC*DEL(I)
      DELO = -ALFP
      FSHKO = DELC - DELO
      IF (IT .NE. 0)  GO TO 250
C
C  2-D STARTING FLOW
      ANGL(2) = DEL(I) + ALFPD
      FS(6) = AMP
      FS(2) = 1.0
      FS(3) = 1.0
      IFIRST = 0
      IF (ANGL(2) .LE. 0.0)  GO TO 200
C
      CALL COMPR(ANGL,MER,IPRINT,CPSTAG,ISDET,IFIRST,CP)
      GO TO 210
  200 ANGL(2) = -ANGL(2)
      CALL EXPAND(ANGL,MER,IPRINT,ISDET,CP)
C
  210 THETA = ANGL(3) - ALFPD
      THETA1 = THETA*RC
      TANS = TAN(THETA1)
      AMANS(I) = BS(6)
      PSHK(J) = BS(2)
      PC = BS(2)
      DPSK = 0.0
      TD(I) = BS(3)
      TS(J) = BS(3)
      COSL = AMP/AME
      ALAM = ARCOS(COSL)
      WOVS = SIN(ALAM)
      WOVB = WOVS
      VM = AMANS(I)*SQRT(TD(I))/AME
      VSURF = SQRT(VM**2 + WOVB**2)
      AMDX(I) = -VM*COS(DELC)/VSURF
      AMDY(I) =  VM*SIN(DELC)/VSURF
      AMDZ(I) =  WOVB/VSURF
      AMSX(J) = AMDX(I)
      AMSY(J) = AMDY(I)
      AMSZ(J) = AMDZ(I)
      AMS(J) = AMANS(I)
      T(J) = THETA
      GO TO 300
C
C  CONICAL STARTING FLOW
  250 CONTINUE
      CALL CONEA(DELC,AME,G,ALF,PHIT,ALFP,AMP,THETA1,AMANS(I),PC,IT)
      SWS = SIN(THETA1 + ALFP)
      MNS = (AMP*SWS)**2
      PSHK(J) = (2.*G*MNS - GM1)/GP1
      DPSK = PC    - PSHK(J)
      TANS = TAN(THETA1)
      THETA = DC*THETA1
C
C  CALCULATE FLOW PROPERTIES BEHIND THE SHOCK
C  TEMPERATURE RATIO
      TS(J) = PSHK(J)*(GM1*PSHK(J) + GP1)/(GP1*PSHK(J) + GM1)
C  SPEED OF SOUND RATIO
      ASJ = SQRT(TS(J))
C  VELOCITY COMPONENTS
      U2 = 1.0 - 2.*(MNS - 1.0)/(GP1*AMP2)
      V2 = 2.*(MNS - 1.0)/(GP1*MNS)*SWS*COS(THETA1 + ALFP)
      DEL2 = ATAN2(V2,U2)
      VT2 = SQRT(U2**2 + V2**2)
      UD = VT2*COS(DEL2 - ALFP)
      VD = VT2*SIN(DEL2 - ALFP)
      DNS = 1./SQRT(0.5*GP1 + 1./MNS)
      ETA = (1.-0.25*GP1*DNS*(1.+DNS))/(1.+0.25*GP1*(1.-DNS))
      WOVS = (1.-ETA)*ALF*SIN(PHIT)*(1.-ETA*COS(PHIT)/TANS)
      WOVB = WOVS
      IF (DELC .LE. 0.0)  GO TO 54
      WOVB = WOVS*SWS/SIN(DELC)
   54 CONTINUE
      WD = WOVS
      VT = SQRT(UD**2 + VD**2 + WD**2)
      AMS(J) = VT*AME/ASJ
      AMSX(J) =-UD/VT
      AMSY(J) = VD/VT
      AMSZ(J) = WD/VT
      T(J) = THETA
C
C  CALCULATE SURFACE PROPERTIES
      TD(I) = (1.+0.5*GM1*AME**2)/(1.+0.5*GM1*AMANS(I)**2)
      ASJ = SQRT(TD(I))
      VSURF = AMANS(I)*ASJ/AME
      WD = WOVB
      VM = SQRT(VSURF**2 - WD**2)
      UD = VM*COS(DELC)
      VD = VM*SIN(DELC)
      AMDX(I) =-UD/VSURF
      AMDY(I) = VD/VSURF
      AMDZ(I) = WD/VSURF
C
  300 CONTINUE
      XANS(I)=0.5*(X(I) + X(I-1))
      YANS(I) = 0.5*(Y(I) + Y(I-1))
      PANS(I)=PC
      CP   =(PANS(I)-1.)/(AMF**2*.7)
      AMU = ARSIN(1.0/AMANS(I)) + DEL(I)*RC
      XANS(1) = X(1)
      YANS(1) = Y(1)
      PANS(1) = PANS(2)
      AMANS(1) = AMANS(2)
      AMDX(1) = AMDX(2)
      AMDY(1) = AMDY(2)
      AMDZ(1) = AMDZ(2)
      TD(1) = TD(2)
C
C  SHOCK POSITION
      J = 2
      XS(J) = XS(J-1)
      YS(J) = YS(J-1)
      IF (IFLG(4) .EQ. 0)  GO TO 55
      TANM = TAN(AMU)
      XS(J) =(-Y(I)+Y(I-1) + X(I-1)*TANS - X(I)*TANM)/(TANS-TANM)
      YS(J) = Y(I-1) -(XS(J)-X(I-1))*TANS
      PSHK(J) = PSHK(J-1)
      TS(J) = TS(J-1)
      AMS(J) = AMS(J-1)
      AMSX(J) = AMSX(J-1)
      AMSY(J) = AMSY(J-1)
      AMSZ(J) = AMSZ(J-1)
      NSP = NSP + 1
   55 CONTINUE
      AMA=AMANS(I)
      ANGLE    = DC*AMU
      DPDSA=0
      PA=PC
C
      IF (IFLG(5) .NE. 1)  GO TO 60
      WRITE(6,36) AMANS(I), THETA, DPSK
   36 FORMAT(1H0, 11X,21HSTARTING FLOW -  M = , F8.5,                   -
     1   5X, 8HTHETA = , F8.3, 5X, 7HDPSK = , F8.5)
      WRITE (6,39)
   39 FORMAT(1H1, 26HINVISCID SOLUTION, SURFACE//1H ,                   -
     1    11X 4HX   , 5X  8HP/P(INF), 5X  1HM, 10X 2HCP, 6X,            -
     2     6X2HPB,11X3HETA,                                             -
     3     7X,   24HANGLE     CPLIM       PC)
      ETA = 0.0
      WRITE(6,40) XANS(I),PANS(I),AMANS(I),CP,PANS(I),ETA,ANGLE, CP,PC
   40 FORMAT(7XF8.4, 3XF9.5, 3XF7.4, 3XF7.4, 8XF9.5, 3XF9.5, 3XF8.4,    -
     1    3XF7.4, 3XF9.5)
C
C
C  BEGIN MAJOR LOOP
   60 CONTINUE
      DO 25 I=3,N
      D1 = RC*DEL(I-1)
      D2 = DEL(I)*RC
      ANG = D2 - D1
      DELC = D2
      IF (IFLG3 .EQ. 0)  GO TO 8
      CALL CONEA(DELC,AME,G,ALF,PHIT,ALFP,AMP,THETA1,AMC,PC,IT)
    8 ANUA=2.4495*ATAN(.40825*SQRT(AMA**2-1.))-ATAN(SQRT(AMA**2-1.))
      ANUB = ANUA - ANG
      IF (ANUB.GE.ANUA) GO TO 14
C
C  IF COMPRESSION ANGLE .LE. 1.0 DEGREE, USE ISENTROPIC EQUATIONS
C  AND NO SECONDARY SHOCK FORMATION.
      IF (ANG .LE.  0.0175)  GO TO 14
C
C     CALCULATION FOR COMPRESSION AND SHOCK FORMATION
C  SET FLAG FOR SECONDARY SHOCK FORMATION
      JSS = 1
      IF (IFLG(4) .NE. 0)  IFLG4 = 1
C
      ANGL(2) = ANG*DC
      FS(6) = AMA
      FS(2) = PA
      IFIRST = 0
      CALL COMPR(ANGL,MER,IPRINT,CPSTAG,ISDET,IFIRST,CP)
      SKANG = ANGL(3)*RC
      AMB = BS(6)
      PB = BS(2)
      AMUB=SIN(1./AMB)
      IF (IFLG3 .EQ. 0)  GO TO 15
C
C  NOTE.  REFERENCE NACA TR-1328 USES ANGLES SIGMA, D1, AND D2
C         ALL W.R.T. BODY AXES.  HOWEVER THEY APPEAR ONLY AS
C         DIFFERENCES (D2-D1), (SIGMA-D1), AND (SIGMA-D2).
C         IN THE PRESENT NOTATION THESE ARE DEFINED AS
C
C                 ANG = D2 - D1
C
C               SKANG = SIGMA - D1
C
C         SKANG - ANG = SIGMA - D2
C
      TD21 = TAN(ANG)
      CSD1 = COS(SKANG)
      SSD1 = SIN(SKANG)
      SSD2 = SIN(SKANG - ANG)
      TANM = TAN(AMUB)
      XX = 2.4*(TD21*CSD1 - SSD1)*(AMA*SSD1)**2 + SSD1
C
      YY = 1.0 + (1. - 2.*SSD1**2 + 2.*TD21*SSD1*CSD1)*(AMA*SSD1)**2
C
      F = (1. + 0.2*AMA**2)*SSD1*XX/(0.6*YY)
      BA=1.4*PA*AMA**2/(2.*(AMA**2-1.))
      BB=1.4*PB*AMB**2/(2.*(AMB**2-1.))
      XY = 2.*BB/(Y(I -1))*(SSD1*SIN(D1)/SSD2 - SIN(D2))                -
     1    + DPDSA*(BB*SSD1/(BA*SSD2) + (PB/PA - F)*CSD1*TANM/SSD2)
C
      DPDS = XY/(1. + TANM/TAN(SKANG - ANG))
   15 DELO = D1
      FSHKO = ANG
      THETA1 = SKANG + D1
      GO TO 21
C
C
C  PRANDTL MEYER EXPANSION (OR COMPRESSION)
   14 CONTINUE
      ANGL(2) =   -(ANG)*DC
      FS(6) = AMA
      CALL EXPAND(ANGL,MER,IPRINT,ISDET,CP)
      AMB = BS(6)
      PB = PA*(CP*0.5*G*AMA**2 + 1.0)
C
      IF (PB .LT. PMIN)  PB = PMIN
      IF (IFLG3 .EQ. 0)  GO TO 27
      OMEG12 = AMB/AMA*((1.+.5*GM1*AMA**2)/(1.+.5*GM1*AMB**2))**(0.5*   -
     1         GP1/GM1)
      BA = 0.5*G*PA*AMA**2/(AMA**2 - 1.0)
      BB = 0.5*G*PB*AMB**2/(AMB**2 - 1.0)
      DPDS = BB/Y(I-1)*(OMEG12*SIN(D1) - SIN(D2))                       -
     1    + BB/BA*OMEG12*DPDSA
C
   21 IF (IFLG3   .EQ. 0)  GO TO 27
      IF (PC .EQ. PB)   GO TO 22
      ETA =  DPDS*(S(I) - S(I-1))/(PC - PB)
      IF (ETA .GT. 180.)  ETA = 180.
      IF (ETA) 22,22,23
C
C  FIRST ORDER SHOCK EXPANSION (2-D)
   22 IF (IFLG(5) .EQ. 1)  WRITE(6, 34)
34    FORMAT (1X25H1ST ORDER SHOCK EXPANSION)
   27 PANS(I)=PB
      AMANS(I)=AMB
      AMA=AMB
      PA=PB
      IF (IFLG3 .EQ. 0)  PC = PB
      XANS(I)=(X(I)+X(I-1))/2.
      YANS(I) = 0.5*(Y(I) + Y(I-1))
      DPDSA=0.
      GO TO 24
C
C  SECOND ORDER SHOCK EXPANSION
23    PA=PC   -(PC   -PB)*EXP(-ETA)
      AMA=SQRT(2./GM1*((1.+.5*GM1*AMB**2)*(PB/PA)**(GM1/G)- 1.0))
      XANS(I)=(X(I)+X(I-1))/2.
      YANS(I) = 0.5*(Y(I) + Y(I-1))
      ETANS=ETA/2.
      PANS(I)=PC   -(PC   -PB)*EXP(-ETANS)
      AMANS(I)=SQRT(2./GM1*((1.+.5*GM1*AMB**2)*(PB/PANS(I))**           -
     1         (GM1/G) - 1.0))
      DPDSA=(PC   -PA)/(PC   -PB)*DPDS
   24 CP = 2.*(PANS(I) - 1.0)/(G*AMF**2)
C
C  CALCULATE SURFACE PROPERTIES
      TD(I) = (1. +0.5*GM1*AME**2)/(1. + 0.5*GM1*AMANS(I)**2)
      ASJ = SQRT(TD(I))
      VSURF = AMANS(I)*ASJ/AME
      WD = WOVB
      VM = SQRT(VSURF**2 - WD**2)
      UD = VM*COS(D2)
      VD = VM*SIN(D2)
      AMDX(I) =-UD/VSURF
      AMDY(I) = VD/VSURF
      AMDZ(I) = WD/VSURF
C  SHOCK CALCULATION
C
      AMU = ARSIN(1.0/AMA) + D2
      ANGLE    = DC*AMU
      CPCONE = (PC    - 1.)/(0.7*AMF**2)
      IF (JSS .NE. 1)  GO TO 70
C
C  SECONDARY SHOCK FORMATION
C  SET COUNTER (LSP) AND POSITION FOR LAST SHOCK POINT
      JSS = 0
      LS(NS) = NSP
      LSP = NSP - 1
C  SET COUNTER JS FOR START OF NEW SHOCK
C  AND SET POSITION EQUAL TO BODY LOCATION
      NS = NS + 1
      J = J + 3
      IS(NS) = I
      JS(NS) = J
      XS(J) = X(I-1)
      YS(J) = Y(I-1)
C  SET PROPERTIES EQUAL TO 2-D VALUES (FIRST POINT OF EMBEDDED SHOCK).
      PSHK(J) = PB
      MNS = (GP1*PSHK(J) + GM1)/(2.*G)
      TS(J) = PSHK(J)*(GM1*PSHK(J) + GP1)/(GP1*PSHK(J) + GM1)
      ASJ = SQRT(TS(J))
      UD =COS(D2)
      VD = SIN(D2)
      WD = WOVB
      VT = SQRT(UD**2 + VD**2 + WD**2)
      AMS(J) = VT*AME/ASJ
      AMSX(J) = -UD/VT
      AMSY(J) =  VD/VT
      AMSZ(J) =  WD/VT
      T(J) = THETA1*DC
      J = J + 1
      NSP = NSP + 3
      JSJ = I
C
C  SET UP SECOND POINT OF EMBEDDED SHOCK
      PSHK(J) = PSHK(J-1)
      AMS(J) = AMS(J-1)
      AMSX(J) = AMSX(J-1)
      AMSY(J) = AMSY(J-1)
      AMSZ(J) = AMSZ(J-1)
      THETA = THETA1
      DPSK = 0.0
      SWS = SIN(THETA1 + ALFP)
      GO TO 72
C
C
   70 IF (IFLG4 .EQ. 0)  GO TO 80
      J = J + 1
      FSHK = 1.0
      FSHKI = D2     - DELO
      IF (FSHKO .GT. 0.0)  FSHK = FSHKI/FSHKO
      PSHK(J  ) = PANS(I) - DPSK*FSHK
      IF (PSHK(J  ) .LT. 1.0) PSHK(J  ) = 1.0
C  CALCULATE FLOW PROPERTIES BEHIND THE SHOCK
      MNS = (GP1*PSHK(J  ) + GM1)/(2.*G)
      THETA = ARSIN(SQRT(MNS/AMP2)) - ALFP
      TS(J  ) = PSHK(J  )*(GM1*PSHK(J  ) + GP1)/(GP1*PSHK(J  )+GM1)
      ASJ = SQRT(TS(J  ))
      SWS = SIN(THETA + ALFP)
      U2 = 1.0 - 2.*(MNS - 1.0)/(GP1*AMP2)
      V2 = 2.*(MNS - 1.0)/(GP1*MNS)*SWS*COS(THETA + ALFP)
      DEL2 = ATAN2(V2,U2)
      VT2 = SQRT(U2**2 + V2**2)
      UD = VT2*COS(DEL2 - ALFP)
      VD = VT2*SIN(DEL2 - ALFP)
      WD = WOVS
      VT = SQRT(UD**2 + VD**2 + WD**2)
      AMS(J  ) = VT*AME/ASJ
      AMSX(J  ) =-UD/VT
      AMSY(J  ) = VD/VT
      AMSZ(J  ) = WD/VT
      T(J-1) = THETA*DC
C
   72 CONTINUE
      IF (THETA .LT. AMU)  GO TO 73
      J = J - 1
      IFLG4 = 0
      GO TO 80
   73 CONTINUE
      TANM = TAN(AMU)
      TANS = TAN(THETA)
      XS(J) =(-Y(I) + YS(J-1) + XS(J-1)*TANS - X(I)*TANM)/(TANS-TANM)
      YS(J) = YS(J-1) - (XS(J) - XS(J-1))*TANS
      NSP = NSP + 1
      IF (XS(J) .GT. XSMAX)  GO TO 74
C  HAVE REACHED LIMIT FOR SHOCK.  TURN OFF FLAG 4
      IFLG4 = 0
   74 CONTINUE
      IF (JSS .NE. 2)  GO TO 80
C
C  TWO SHOCKS,  CHECK FOR INTERSECTION
      L = LSP
   76 CONTINUE
      IF (XS(J) .LT. XS(L))  GO TO 77
      L = L - 1
      GO TO 76
C
   77 IF (YS(J) .LT. YS(L))  GO TO 80
C
C  INTERSECTION EXISTS.  DETERMINE SECOND POINT ON
C  FIRST SHOCK TO BE USED IN CALCULATION.
      L1 = L
      L2 = L + 1
      IF (XS(J-1) .LT. XS(L))  GO TO 78
      L1 = L - 1
      L2 = L
   78 CONTINUE
C
      TANM = TANS
      TANS = (YS(L2) - YS(L1))/(XS(L2) - XS(L1))
      IF (TANS .GE. TANM)  GO TO 75
C
C
      XSI = (-YS(J)+YS(J-1)+XS(L1)*TANS-XS(J)*TANM)/(TANS-TANM)
C
C  SET LAST SHOCK POINT COUNTER AND RESET COORDS.
      LS(NS-1) = L2
      XS(L2) = XSI
      YS(L2) = YS(L1) - (XSI - XS(L1))*TANS
      IN(NS-1) = J-1
C
   75 JSS = 0
   80 CONTINUE
C
      IF (IFLG(5) .EQ. 1)                                               -
     AWRITE(6,40) XANS(I),PANS(I),AMANS(I),CP,PB,ETA,ANGLE,CPCONE,PC
   25 CONTINUE
C
      LS(NS) = NSP
C
C  WRITE OUT SHOCK DATA
C
      DO 110 I = 1,NS
      IF (IFLG(5) .NE. 1)  GO TO 89
      WRITE(6,90)  I
   90 FORMAT(1H1,30HINVISCID SOLUTION, SHOCK WAVE ,I3//1H ,             -
     1    12X2HXS,  12X2HYS, 11X5HP2/P1, 10X2HM2, 10X5HTHETA/)
   89 CONTINUE
      J1 = JS(I)
      J2 = LS(I)
C
C  CHECK IF AT LEAST THREE SHOCK POINTS
      IF ((J2-J1) - 1)  91,92,93
C
C  ONLY ONE SHOCK POINT.  ADD ONE AT XSMAX
   91 J2 = J1 + 1
      XS(J2) = XSMAX
      YS(J2) = YS(J1) + (XS(J1)-XS(J2))*TAN(RC*T(J1))
      T(J2) = T(J1)
      AMS(J2) = AMS(J1)
      AMSX(J2) = AMSX(J1)
      AMSY(J2) = AMSY(J1)
      AMSZ(J2) = AMSZ(J1)
      PSHK(J2) = PSHK(J1)
      TS(J2) = TS(J1)
C
C  ONLY TWO SHOCK POINTS.  ADD ONE AT MIDPOINT
   92 J3 = J1 + 2
      XS(J3) = XS (J2)
      YS(J3) = YS(J2)
      T(J3) = T(J2)
      AMS(J3) = AMS(J2)
      AMSX(J3) = AMSX(J2)
      AMSY(J3) = AMSY(J2)
      AMSZ(J3) = AMSZ(J2)
      PSHK(J3) = PSHK(J2)
      TS(J3) = TS(J2)
C
      XS(J2) = 0.5*(XS(J3) + XS(J1))
      YS(J2) = 0.5*(YS(J3) + YS(J1))
      T(J2)  = 0.5*(T(J3) + T(J1))
      AMS(J2)  = 0.5*(AMS(J3) + AMS(J1))
      AMSX(J2) = 0.5*(AMSX(J3) + AMSX(J1))
      AMSY(J2) = 0.5*(AMSY(J3) + AMSY(J1))
      AMSZ(J2) = 0.5*(AMSZ(J3) + AMSZ(J1))
      PSHK(J2) = 0.5*(PSHK(J3) + PSHK(J1))
      TS(J2)   = 0.5*(TS(J3) + TS(J1))
C
      LS(I) = J3
C
C
   93 J2 = LS(I)
      IF (IFLG(5) .NE. 1)  GO TO 110
      DO 100 J = J1,J2
      WRITE(6,95)  XS(J), YS(J), PSHK(J), AMS(J), T(J)
   95 FORMAT(1H , 3X, 3XF10.4, 4(5XF9.4))
  100 CONTINUE
  110 CONTINUE
      RETURN
      END
*DECK SHIE
      OVERLAY (MARK4,2,2)
      PROGRAM SHIELD
C     SUBROUTINE SHIELD
C
C  THIS ROUTINE IS USED TO ACCOUNT FOR SHIELDING OF ONE ELEMENT BY
C  ANOTHER.
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /TAGS/ITAG4,ITAG9,ITAG10
      COMMON /ABDATA/NAB,ALPHA(20),BETA(20),ROL(20),CDELTA(20),QI(20),  -
     1               RI(20),PI(20)
      COMMON /INTERF/INT,ISHE(20),NSHE(100),I9,ISHEF,INF(20,22),        -
     1               DINF(20,6),LTOTAB(20)
      DIMENSION  TITLE(15),IN(500),IM(500),NX(500),NY(500),NZ(500),     -
     1 AREA(500),X1(500),X2(500),X3(500),X4(500),Y1(500),Y2(500),       -
     2 Y3(500),Y4(500),Z1(500),Z2(500),Z3(500),Z4(500),ELEM(25),XS(5),  -
     3          Y(5),Z(5),YS(5),ZS(5),S(4,2),LS(4,5),INT1(8),INT2(8),   -
     4 S2(2),LS2(2),XP(8),YP(8),ZP(8),X(5),IV2(4),IPF(9),XI(5),YI(5),   -
     5 ZI(5),YPIE(9),ZPIE(9),XSID(2),YSID(2),ZSID(2),YSIP(2),ZSIP(2),   -
     6 XO(4,3),YO(4,3),ZO(4,3),XPA(4),YPA(4),ZPA(4),XII(4),ETA(4),      -
     7 XCENT(500),YCENT(500),ZCENT(500),XC(3),YC(3),ZC(3),AR(3),E(25),  -
     8 IV1(4),EM(25),EP(25)
C
C
      INTEGER  CASE,PAGE,ERROR,SYMFCT
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL NX,NY,NZ,NXO,NXO2,LS,LS2,NX2,NY2,NZ2,NDN2
      DATA ISIZE/500/
C
      REWIND TAPEA
      REWIND TAPEB
      I9 = 0
      DO 10 I=1,100
   10 NSHE(I) = 0
   20  FORMAT (I2,I1,I2,15A4)
      READ (TAPEIN,20) NPANL,IPRINT,INAB,TITLE
      IG4 = 2
      CALL READMS (4,EM,25,IG4)
C     READ (4'IG4) EM
      NEXT = EM(1)
      NP   = EM(2)
      NPMAX= EM(3)
      NREM = EM(4)
      NPAN = 0
   30 NPAN = NPAN + 1
   40 READ (TAPEIN,50) IPAN,ISHE
   50  FORMAT (I2,20I2)
C
C
C  READ PANEL TO BE ANALYZED FOR SHIELDING
      IG4 = IPAN*5
      CALL READMS (4,EP,25,IG4)
C     READ (4'IG4) EP
      ISTAT3 = EP(1)
      COM    = EP(2)
      ISTART = EP(3)
      L      = EP(4)
      IORN   = EP(5)
      SYMFCT = EP(6)
      ISMY = SYMFCT
      ISTART = ISTART - NREM
      IF (L.GT.ISIZE) GO TO 1030
C
      DO 60 I=1,L
      IG4 = ISTART + NREM*I
      CALL READMS (4,ELEM,25,IG4)
C     READ (4'IG4) ELEM
      IN(I) = ELEM(2) + 0.0001
      IM(I) = ELEM(3) + 0.0001
      NX(I) = ELEM(4)
      NY(I) = ELEM(5)
      NZ(I) = ELEM(6)
      XCENT(I) = ELEM(7)
      YCENT(I) = ELEM(8)
      ZCENT(I) = ELEM(9)
      AREA(I) = ELEM(10)
      X1(I) = ELEM(11)
      X2(I) = ELEM(12)
      X3(I) = ELEM(13)
      X4(I) = ELEM(14)
      Y1(I) = ELEM(15)
      Y2(I) = ELEM(16)
      Y3(I) = ELEM(17)
      Y4(I) = ELEM(18)
      Z1(I) = ELEM(19)
      Z2(I) = ELEM(20)
      Z3(I) = ELEM(21)
      Z4(I) = ELEM(22)
   60 CONTINUE
C
      LTOT = L
C
C
C  READ ALL SHIELDING ELEMENT COMPONENTS AND STORE ON TAPE
      K = 0
      DO 80 I=1,20
      IF (ISHE(I) .EQ. 0) GO TO 90
      IG4 = ISHE(I)*5
      CALL READMS (4,EP,25,IG4)
C     READ (4'IG4) EP
      ISTAT3 = EP(1)
      COM    = EP(2)
      ISTART = EP(3)
      L      = EP(4)
      IORN   = EP(5)
      SYMFCT = EP(6)
      ISTART = ISTART - NREM
C
      DO 70 II=1,L
       K = K + 1
       IG4 = ISTART + NREM*II
      CALL READMS (4,ELEM,25,IG4)
C     READ (4'IG4) ELEM
      WRITE (TAPEB) ELEM
   70 CONTINUE
   80 CONTINUE
C
   90 LTOTS = K
C
C
C  START ANGLE OF ATTACK - BETA CYCLE
      DO 1020 I=1,NAB
      IF (IPRINT .EQ. 0) GO TO 110
      CALL HEADER
      WRITE (TAPEOT,100) IPAN,ISHE,ALPHA(I),BETA(I)
  100 FORMAT (1H0,51H****SHIELDING PROGRAM OUTPUT NEGATIVE AREA ELEMENTS-
     1 ,/1H ,5X,6HPANEL=,I2,3X,17HSHIELDING PANELS=,20I4,/1H ,          -
     2 5X,6HALPHA=,F6.2,7H  BETA=,F6.2,/1H0,8X,12H ICT  IN  IM,9X,2HNX, -
     3 12X,2HNY,12X,2HNZ,11X,5HXCENT,9X,5HYCENT,9X,5HZCENT,10X,4HAREA,  -
     4 /1H ,29X,2HX1,12X,2HX2,12X,2HX3,12X,2HX4,/1H ,29X,2HY1,12X,2HY2, -
     5 12X,2HY3,12X,2HY4,/1H ,29X,2HZ1,12X,2HZ2,12X,2HZ3,12X,2HZ4)
  110 CONTINUE
      PSI = BETA(I) / 57.2958
      THETA =-ALPHA(I) / 57.2958
      PHI = 0.0
      ICT = 0
C
C
C  SET UP CONSTANTS FOR ROTATION EQUATIONS
      SINTH = SIN(THETA)
      COSTH = COS(THETA)
      SINPSI = SIN(PSI)
      COSPSI = COS(PSI)
      SINPHI = SIN(PHI)
      COSPHI = COS(PHI)
      A1 = COSTH * SINPSI
      A2 = (COSPSI*COSPHI) + SINTH*(SINPSI*SINPHI)
      A3 = -(COSPSI*SINPHI) + SINTH*(SINPSI*COSPHI)
      A4 = -SINTH
      A5 = COSTH * SINPHI
      A6 = COSTH * COSPHI
      A7 = COSTH * COSPSI
      A8 = -(SINPSI*COSPHI) + SINTH*(COSPSI*SINPHI)
      A9 = (SINPSI*SINPHI) + SINTH*(COSPSI*COSPHI)
C
C
C  SELF-SHIELDING WITHIN COMPONENT WILL BE CHECKED
      LMAX = LTOT + LTOTS
C
      DO 1010 J=1,LTOT
      CREF = 1.0
      IREF1 = 1
      IF (AREA(J) .LT. 0.0001) GO TO 1010
      XI(1) = X1(J)
      XI(2) = X2(J)
      XI(3) = X3(J)
      XI(4) = X4(J)
      YI(1) = Y1(J)
      YI(2) = Y2(J)
      YI(3) = Y3(J)
      YI(4) = Y4(J)
      ZI(1) = Z1(J)
      ZI(2) = Z2(J)
      ZI(3) = Z3(J)
      ZI(4) = Z4(J)
      GO TO 130
  120 XI(2) = X4(J)
      XI(4) = X2(J)
      YI(1) =-Y1(J)
      YI(2) =-Y4(J)
      YI(3) =-Y3(J)
      YI(4) =-Y2(J)
      ZI(2) = Z4(J)
      ZI(4) = Z2(J)
  130 LSH = 0
      REWIND TAPEB
C  APPLY ROTATION MATRIX TO OUTWARD NORMAL
      NXO = NX(J)*A7 + NY(J)*A8*CREF + NZ(J)*A9
      IF (NXO .LE. 0.0001) GO TO 1000
C  APPLY ROTATION MATRIX TO ELEMENT
      X(1) = XI(1)*A7 + YI(1)*A8 + ZI(1)*A9
      X(2) = XI(2)*A7 + YI(2)*A8 + ZI(2)*A9
      X(3) = XI(3)*A7 + YI(3)*A8 + ZI(3)*A9
      X(4) = XI(4)*A7 + YI(4)*A8 + ZI(4)*A9
      Y(1) = XI(1)*A1 + YI(1)*A2 + ZI(1)*A3
      Y(2) = XI(2)*A1 + YI(2)*A2 + ZI(2)*A3
      Y(3) = XI(3)*A1 + YI(3)*A2 + ZI(3)*A3
      Y(4) = XI(4)*A1 + YI(4)*A2 + ZI(4)*A3
      Z(1) = XI(1)*A4 + YI(1)*A5 + ZI(1)*A6
      Z(2) = XI(2)*A4 + YI(2)*A5 + ZI(2)*A6
      Z(3) = XI(3)*A4 + YI(3)*A5 + ZI(3)*A6
      Z(4) = XI(4)*A4 + YI(4)*A5 + ZI(4)*A6
      YMIN = AMIN1 (Y(1),Y(2),Y(3),Y(4))
      YMAX = AMAX1 (Y(1),Y(2),Y(3),Y(4))
      ZMIN = AMIN1 (Z(1),Z(2),Z(3),Z(4))
      ZMAX = AMAX1 (Z(1),Z(2),Z(3),Z(4))
C
C
C  DO LOOP TO FIND SHIELDING ELEMENTS
      DO 990 K=1,LMAX
C  IS THIS THE COMPONENT OR IS IT THE SHIELDING ELEMENTS
      IREF2 = 1
      CREF2 = 1.0
C  AVOID ELEMENT SELF-SHIELDING
  140 IF (K.EQ.J .AND. IREF1.EQ.IREF2) GO TO 980
      IF (K .GT. LTOT) GO TO 160
      IF (AREA(K) .LT. 0.0001) GO TO 990
C  APPLY ROTATION MATRIX TO NORMAL
      NXO2 = NX(K)*A7 + NY(K)*A8*CREF2 + NZ(K)*A9
C  CHECK IF REAR FACING
      IF (NXO2 .LE. 0.0001) GO TO 980
C
      ELEM(1) = K
      ELEM(2) = IN(K)
      ELEM(3) = IM(K)
      ELEM(4) = NX(K)
      ELEM(5) = NY(K)
      ELEM(6) = NZ(K)
      ELEM(7) = XCENT(K)
      ELEM(8) = YCENT(K)
      ELEM(9) = ZCENT(K)
      ELEM(10)= AREA(K)
      ELEM(11)= X1(K)
      ELEM(12)=X2(K)
      ELEM(13)= X3(K)
      ELEM(14)= X4(K)
      ELEM(15)=Y1(K)
      ELEM(16)=Y2(K)
      ELEM(17)=Y3(K)
      ELEM(18)=Y4(K)
      ELEM(19)=Z1(K)
      ELEM(20)=Z2(K)
      ELEM(21)= Z3(K)
      ELEM(22)= Z4(K)
      IF (IREF2 .EQ. 1) GO TO 180
  150 ELEM(5) = -NY(K)
      ELEM(8) = -YCENT(K)
      ELEM(12) = X4(K)
      ELEM(14) = X2(K)
      ELEM(15) =-Y1(K)
      ELEM(16) =-Y4(K)
      ELEM(17) =-Y3(K)
      ELEM(18) =-Y2(K)
      ELEM(20) = Z4(K)
      ELEM(22) = Z2(K)
      GO TO 180
C
C  SHIELDING COMPONENTS
  160 IF (IREF2 .EQ. 1) READ (TAPEB) ELEM
      IF (ELEM(10) .LT. 0.0001) GO TO 990
      IF (IREF2 .EQ. 1) GO TO 170
      ELEM( 5) =-ELEM( 5)
      ELEM( 8) =-ELEM( 8)
      ELEM(15) =-ELEM(15)
      ELEM(16) =-ELEM(16)
      ELEM(17) =-ELEM(17)
      ELEM(18) =-ELEM(18)
      ELT = ELEM(12)
      ELEM(12) = ELEM(14)
      ELEM(14) = ELT
      ELT = ELEM(16)
      ELEM(16) = ELEM(18)
      ELEM(18) = ELT
      ELT = ELEM(20)
      ELEM(20) = ELEM(22)
      ELEM(22) = ELT
C  APPLY ROTATION MATRIX TO NORMAL
  170 NXO2 = ELEM(4)*A7 + ELEM(5)*A8 + ELEM(6)*A9
C  CHECK IF REAR FACING
      IF (NXO2 .LE. 0.0001) GO TO 980
C
  180 CONTINUE
      YS(1) = ELEM(11)*A1 + ELEM(15)*A2 + ELEM(19)*A3
      YS(2) = ELEM(12)*A1 + ELEM(16)*A2 + ELEM(20)*A3
      YS(3) = ELEM(13)*A1 + ELEM(17)*A2 + ELEM(21)*A3
      YS(4) = ELEM(14)*A1 + ELEM(18)*A2 + ELEM(22)*A3
      ZS(1) = ELEM(11)*A4 + ELEM(15)*A5 + ELEM(19)*A6
      ZS(2) = ELEM(12)*A4 + ELEM(16)*A5 + ELEM(20)*A6
      ZS(3) = ELEM(13)*A4 + ELEM(17)*A5 + ELEM(21)*A6
      ZS(4) = ELEM(14)*A4 + ELEM(18)*A5 + ELEM(22)*A6
      YMIN2 = AMIN1 (YS(1),YS(2),YS(3),YS(4))
      YMAX2 = AMAX1 (YS(1),YS(2),YS(3),YS(4))
      ZMIN2 = AMIN1 (ZS(1),ZS(2),ZS(3),ZS(4))
      ZMAX2 = AMAX1 (ZS(1),ZS(2),ZS(3),ZS(4))
C
C
C  CHECK FOR POSSIBLE SHIELDING
      IF ((YMIN2-YMAX).GE.0.0) GO TO 980
      IF ((YMIN-YMAX2) .GE. 0.0) GO TO 980
      IF ((ZMIN2-ZMAX) .GE. 0.0) GO TO 980
      IF ((ZMIN-ZMAX2) .GE. 0.0) GO TO 980
C  CHECK IF ELEMENT 2 IS REALLY IN FRONT OF ELEMENT 1
      XMIN = AMIN1(X(1),X(2),X(3),X(4))
      XS(1) = ELEM(11)*A7 + ELEM(15)*A8 + ELEM(19)*A9
      XS(2) = ELEM(12)*A7 + ELEM(16)*A8 + ELEM(20)*A9
      XS(3) = ELEM(13)*A7 + ELEM(17)*A8 + ELEM(21)*A9
      XS(4) = ELEM(14)*A7 + ELEM(18)*A8 + ELEM(22)*A9
      XMAX2 = AMAX1(XS(1),XS(2),XS(3),XS(4))
      IF (XMIN .GE. XMAX2) GO TO 980
C
C  POSSIBLE OVERLAP.  CALCULATE SIDE VECTORS OF SHIELDED ELEMENT
      S(1,1) = Y(2) - Y(1)
      S(1,2) = Z(2) - Z(1)
      S(2,1) = Y(3) - Y(2)
      S(2,2) = Z(3) - Z(2)
      S(3,1) = Y(4) - Y(3)
      S(3,2) = Z(4) - Z(3)
      S(4,1) = Y(1) - Y(4)
      S(4,2) = Z(1) - Z(4)
C
C  CALCULATE L'S
      IC = 0
      DO 200 I1=1,4
C     CHECK FOR ZERO LENGTH SIDE OF ELEMENT 1
      IF (S(I1,1).EQ.0.0 .AND. S(I1,2).EQ.0.0) IC = I1
      DO 190 I2=1,4
      LS(I1,I2) = (ZS(I2)-Z(I1))*S(I1,1) - (YS(I2)-Y(I1))*S(I1,2)
  190 CONTINUE
      LS(I1,5) = LS(I1,1)
  200 CONTINUE
C
      DO 210 IE=1,8
       INT1(IE) = 0
  210  INT2(IE) = 0
C
      JPOS = 0
      IE = 0
      DO 230 I1=1,4
      IF (I1 .EQ. IC) GO TO 230
      DO 220 I2=1,4
      IF (LS(I1,I2).GE.0.0 .AND. LS(I1,I2+1).GE. 0.0) GO TO 220
      IF (LS(I1,I2).LE.0.0 .AND. LS(I1,I2+1).LE.0.0) GO TO 220
      X(5) = X(1)
      Y(5) = Y(1)
      Z(5) = Z(1)
      YS(5) = YS(1)
      ZS(5) = ZS(1)
      XI(5) = XI(1)
      YI(5) = YI(1)
      ZI(5) = ZI(1)
C
C  INTERSECTION IS POSSIBLE. DO REVERSE-L CHECK TO VERIFY INTERSECTION.
C   (JPOS IS THE 'POSSIBLE INTERSECTION' COUNTER)
      JPOS = JPOS + 1
      S2(1) = YS(I2+1) - YS(I2)
      S2(2) = ZS(I2+1) - ZS(I2)
      IF (S2(1).EQ.0.0 .AND. S2(2).EQ.0.0) GO TO 220
      LS2(1) = (Z(I1)-ZS(I2))*S2(1)-(Y(I1)-YS(I2))*S2(2)
      LS2(2) = (Z(I1+1)-ZS(I2))*S2(1)-(Y(I1+1)-YS(I2))*S2(2)
      IF (LS2(1).GE.0.0 .AND. LS2(2).GE.0.0) GO TO 220
      IF (LS2(1).LE.0.0 .AND. LS2(2).LE.0.0) GO TO 220
C
C  A DEFINITE INTERSECTION HAS BEEN CONFIRMED.  SET INTERSECTION ID
      IE = IE + 1
      INT1(IE) = I1
      INT2(IE) = I2
      IF (IE .NE. 2) GO TO 220
      IF (INT1(1) .NE. INT1(2)) GO TO 220
      IF (INT2(2) .GT. INT2(1)) GO TO 220
      INT2S = INT2(1)
      INT2(1) = INT2(2)
      INT2(2) = INT2S
C
  220 CONTINUE
  230 CONTINUE
C
C
C  CHECK IF THE FIRST ELEMENT IS COMPLETELY CONTAINED BY THE SECOND
C  (JPOS = 8 BUT INT'S = 0)
      IBP = 0
      IF (JPOS .NE. 8) GO TO 280
      IF (INT1(1) .NE. 0) GO TO 280
C  CHECK THAT ALL ELEMENT 1 CORNERS ARE REALLY INSIDE OF ELEMENT 2
      I4 = 0
      DO 260 I1=1,4
       IF (I1 .EQ. IC) GO TO 260
      DO 250 I2=1,4
       S2(1) = YS(I2+1) - YS(I2)
      S2(2) = ZS(I2+1) - ZS(I2)
      IF (S2(1).NE.0.0 .AND. S2(2).NE.0.0) GO TO 240
      GO TO 250
  240 LS2(1) = (Z(I1)-ZS(I2))*S2(1) - (Y(I1)-YS(I2))*S2(2)
      IF (LS2(1) .GT. 0.0) GO TO 260
  250 CONTINUE
      I4 = I4 + 1
  260 CONTINUE
      IF (IC.EQ.0 .AND. I4.NE.4) GO TO 980
      IF (IC.NE.0 .AND. I4.NE.3) GO TO 980
C
C  THE FIRST ELEMENT IS CONTAINED BY THE SECOND.  SET UP AND SAVE
C  SHIELDED ELEMENT CHARACTERISTICS (THEY ARE THE SAME AS THE 1ST)
      NE = 1
      DO 270 I1=1,4
      IPF(I1) = I1*100
       XO(I1,1) = XI(I1)
       XP(I1) = XI(I1)
       YO(I1,1) = YI(I1)
       YP(I1) = YI(I1)
       ZO(I1,1) = ZI(I1)
  270  ZP(I1) = ZI(I1)
      XC(1) = XCENT(J)
      YC(1) = YCENT(J) * CREF
      ZC(1) = ZCENT(J)
      AR(1) = AREA(J)
      IP = 4
      IBP = 1
      GO TO 750
C
  280 CONTINUE
C
C  CHECK IF FIRST ELEMENT COMPLETELY CONTAINS THE SECOND
      DO 290 I1=1,4
      IF (I1 .EQ. IC) GO TO 290
      DO 289 I2=1,4
      IF (LS(I1,I2) .GT. 0.0) GO TO 310
  289 CONTINUE
  290 CONTINUE
C
C
C  THE FIRST ELEMENT COMPLETELY CONTAINS THE SECOND SINCE ALL L'S
C  WERE FOUND TO BE .LE. 0.0
C
C  SET UP AND SAVE THE NEW SHILDED ELEMENT (IT IS THE SAME AS THE 2ND)
C
      DO 300 I1=1,4
       XP(I1) = ELEM(I1+10)
       YP(I1) = ELEM(I1+14)
       ZP(I1) = ELEM(I1+18)
       YPIE(I1) = YS(I1)
  300  ZPIE(I1) = ZS(I1)
      XP(5) = XP(1)
      YP(5) = YP(1)
      ZP(5) = ZP(1)
      YPIE(5) = YPIE(1)
      ZPIE(5) = ZPIE(1)
      IPF(1) = 10
      IPF(2) = 20
      IPF(3) = 30
      IPF(4) = 40
      IP = 4
      Y(5) = Y(1)
      Z(5) = Z(1)
      XI(5) = XI(1)
      YI(5) = YI(1)
      ZI(5) = ZI(1)
      YS(5) = YS(1)
      ZS(5) = ZS(1)
      LSH = LSH + 1
      NE = 1
      GO TO 630
C
C  CHECK IF ELEMENTS 1 AND 2 WERE FOUND TO OVERLAP
  310 IF (INT1(1) .EQ. 0) GO TO 980
C
C  ELEMENTS OVERLAP.  FORM NEW NEGATIVE ELEMENTS FOR SHIELDED AREA
C
C**DETERMINE CORNERS OF POLYGON
C
C  CHECK ALL L'S FOR POINTS INSIDE OF ELEMENT 1 AND SAVE ID NUMBERS
      I3 = 0
      DO 330 I2=1,4
      DO 320 I1=1,4
      IF (I1 .EQ. IC) GO TO 320
       IF (LS(I1,I2) .GT. 0.0) GO TO 330
  320 CONTINUE
      I3 = I3 + 1
      IV2(I3) = I2
  330 CONTINUE
C
C  CHECK FOR ANY ELEMENT 1 CORNERS THAT ARE INSIDE OF ELEMENT 2
      I4 = 0
      DO 360 I1=1,4
      IF (I1 .EQ. IC) GO TO 360
      DO 350 I2=1,4
       S2(1) = YS(I2+1) - YS(I2)
       S2(2) = ZS(I2+1) - ZS(I2)
      IF (S2(1).EQ.0.0 .AND. S2(2).EQ.0.0) GO TO 350
  340 LS2(1) = (Z(I1)-ZS(I2))*S2(1) - (Y(I1)-YS(I2))*S2(2)
      IF (LS2(1) .GT. 0.0) GO TO 360
  350 CONTINUE
C
      I4 = I4 + 1
      IV1(I4) = I1
  360 CONTINUE
C
      IP = 0
      ICHK = 0
      IVT = IE + I3 + I4
      IF (IE.LE.2 .AND. IE.EQ.IVT) GO TO 980
C  CHECK IF ALL ELEMENT 2 CORNERS ARE OUTSIDE OF ELEMENT 1
      IF (I3 .EQ. 0) GO TO 430
C  SET ELEMENT 2 CORNER POINT AS POLYGON CORNER POINT
      I42 = IV2(1)
      I11 = 0
  370 IP = IP + 1
      IPF(IP) = I42*10
      IF (IP .EQ. IVT) GO TO 540
C
C  CHECK IF THERE IS AN INTERSECTION ON THIS SIDE OF ELEMENT 2
  380 DO 390 I1=1,IE
      IF (I1 .EQ. I11) GO TO 390
      IF (INT2(I1) .EQ. I42) GO TO 420
  390 CONTINUE
      I42 = I42 + 1
      IF (I42 .GT. 4) I42 = 1
      IF (I3 .EQ. 0) GO TO 410
      DO 400 I1=1,I3
      IF (IV2(I1) .EQ. I42) GO TO 370
  400 CONTINUE
  410 IF (ICHK .EQ. 1) GO TO 980
      IP = 0
      ICHK = 1
      GO TO 430
C
C  SAVE INTERSECTION ON ELEMENT 2 SIDE AS NEXT POLYGON CORNER POINT
  420 IP = IP + 1
      IPF(IP) = I1
      IF (IP .EQ. IVT) GO TO 540
      I41 = I1
      GO TO 450
C
C  CHECK IF ANY ELEMENT 1 CORNERS ARE INSIDE OF ELEMENT 2
  430 IF (I4 .EQ. 0) GO TO 440
      I2 = 1
      I1 = 0
      GO TO 500
C  SET THE LOWEST ORDER INTERSECTION ON ELEMENT 1 AND SAVE AS CORNER
  440 IP = 1
      IPF(IP) = 1
      I41 = 1
      I1 = 1
C
C  CHECK IF THERE IS AN INTERSECTION ON THIS SIDE OF ELEMENT 1
  450 DO 460 I11=1,IE
       IF (I11 .EQ. I41) GO TO 460
       IF (INT1(I11) .EQ. INT1(I1)) GO TO 530
  460 CONTINUE
C
C  CHECK IF NEXT CORNER POINT OF ELEMENT 1 IS INSIDE OF ELEMENT 2
  470 IF (I4 .EQ. 0) GO TO 490
      IF (I1 .GT. IE) GO TO 490
      IF (I1 .EQ. 0) GO TO 980
      I41 = INT1(I1) + 1
      IF (I41 .GT. 4) I41 = 1
      IF (I41 .EQ. IC) I41 = I41 + 1
      IF (I41 .GT. 4) I41 = 1
      DO 480 I2=1,I4
      IF (IV1(I2) .EQ. I41) GO TO 500
  480 CONTINUE
  490 I43 = I41
      GO TO 510
C
C  SAVE ELEMENT 1 CORNER AS NEXT POLYGON CORNER
  500 IP = IP + 1
      I43 = IV1(I2)
      IPF(IP) = I43*100
      IF (IP .EQ. IVT) GO TO 540
C
C  CHECK IF THE NEXT CORNER OF ELEMENT 1 IS ALSO INSIDE OF ELEMENT 2
      I2 = I2 + 1
      IF (I2 .GT. I4) GO TO 510
      I44 = I43 + 1
      IF (IV1(I2) .EQ. I44) GO TO 500
C
C  CHECK IF THERE IS AN INTERSECTION ON THIS SIDE OF ELEMENT 1
  510 DO 520 I11=1,IE
      IF (INT1(I11) .EQ. I43) GO TO 530
  520 CONTINUE
C
      I41 = I41 + 1
      GO TO 470
C
C  SAVE INTERSECTION ON SIDE OF ELEMENT 1 AS NEXT POLYGON CORNER
  530 IP = IP + 1
      IPF(IP) = I11
      IF (IP .EQ. IVT) GO TO 540
      I42 = INT2(I11)
      GO TO 380
C
C  POLYGON HAS BEEN COMPLETED. IT HAS IP CORNER POINTS.
C
  540 IF (IP .GE. 3) GO TO 550
C     WRITE (6,522) J,K,X,Y,Z,YS,ZS,LS
C 522 FORMAT (1H0,48H***THERE ARE NOT ENOUGH INTERSECTIONS AND INSIDE,
C    136H CORNER POINTS TO FORM A NEW ELEMENT,/1H ,2X,2HJ=,I3,
C    2 4H  K=,I3,/,(3X,5F10.4))
      GO TO 980
C
C * SET UP POLYGON CORNER POINTS
  550 DO 620 IE=1,IP
C  CHECK IF INTERSECTION OF SIDES, CORNER OF ELEMENT 2 OR ELEMENT 1
      IF (IPF(IE) .LT. 10) GO TO 560
      IF (IPF(IE) .LT. 100) GO TO 600
      GO TO 610
C
C  SIDE INTERSECTION
  560 I7 = IPF(IE)
      I1 = INT1(I7)
      I2 = INT2(I7)
      SAS = 1.0 /(1.0 + ABS(LS(I1,I2+1)/LS(I1,I2)))
      YPIE(IE) = SAS * (YS(I2+1)-YS(I2)) + YS(I2)
      ZPIE(IE) = SAS * (ZS(I2+1)-ZS(I2)) + ZS(I2)
      DY = ABS(Y(I1+1)-Y(I1))
      DZ = ABS(Z(I1+1)-Z(I1))
      IF (DZ .GT. DY) GO TO 580
      IF (DY .GT. 0.00001) GO TO 570
      DAD = 0.0
      GO TO 590
  570 DAD = ABS((YPIE(IE)-Y(I1))/DY)
      GO TO 590
  580 DAD = ABS((ZPIE(IE)-Z(I1))/DZ)
  590 XP(IE) = XI(I1) + (XI(I1+1)-XI(I1)) * DAD
      YP(IE) = YI(I1) + (YI(I1+1)-YI(I1)) * DAD
      ZP(IE) = ZI(I1) + (ZI(I1+1)-ZI(I1)) * DAD
      GO TO 620
C
C  CORNER POINT OF ELEMENT 2
  600 I7 = IPF(IE)/10
      XP(IE) = ELEM(I7+10)
      YP(IE) = ELEM(I7+14)
      ZP(IE) = ELEM(I7+18)
      GO TO 620
C
C  CORNER POINT OF ELEMENT 1
  610 I7 = IPF(IE)/100
      XP(IE) = XI(I7)
      YP(IE) = YI(I7)
      ZP(IE) = ZI(I7)
C
  620 CONTINUE
  630 CONTINUE
C **PROJECTION OF ELEMENT 2 CORNER POINTS INTO PLANE OF INPUT ELEMENT*
C
      IPF(IP+1) = IPF(1)
      DO 740 IE=1,IP
C CHECK IF THIS POLYGON CORNER PT. WAS AN ELEMENT 2 CORNER
      IF (IPF(IE).LT.10 .OR. IPF(IE).GT.40) GO TO 740
      IEE = IE + 1
      I7 = 0
      I2 = IPF(IE)/10
C  CALCULATE SIDE VECTORS
  640 S2(1) = YS(I2+1) - YS(I2)
      S2(2) = ZS(I2+1) - ZS(I2)
C     CHECK IF ZERO LENGTH SIDE
      IF (S2(1).EQ.0.0 .AND. S2(2).EQ.0.0) GO TO 650
      GO TO 660
  650 I2 = I2 + 1
      IF (I2 .EQ. 5) I2 = 1
      GO TO 640
C  SEARCH FOR SIDE PROJECTION INTERSECTIONS AND CALCULATE COORDINATES
  660 DO 690 I1=1,4
      LS2(1) = (Z(I1)-ZS(I2))*S2(1) - (Y(I1)-YS(I2))*S2(2)
      LS2(2) = (Z(I1+1)-ZS(I2))*S2(1) - (Y(I1+1)-YS(I2))*S2(2)
      IF (LS2(1).GT.0.0 .AND. LS2(2).GT.0.0) GO TO 690
      IF (LS2(1).LT.0.0 .AND. LS2(2).LT.0.0) GO TO 690
      I7 = I7 + 1
      IF (ABS(LS2(1)) .GT. 0.1E-10) GO TO 670
      IF (ABS(LS2(2)) .LT. 0.1E-10) GO TO 661
      XSID(I7) = XI(I1)
      YSID(I7) = YI(I1)
      ZSID(I7) = ZI(I1)
      YSIP(I7) = Y(I1)
      ZSIP(I7) = Z(I1)
      GO TO 680
  661 IF (ABS(Y(I1+1)-Y(I1)) .EQ. 0.0) GO TO 662
      SAS = (YS(I2)-Y(I1))/(Y(I1+1)-Y(I1))
      GO TO 671
  662 IF (ABS(Z(I1+1)-Z(I1)) .EQ. 0.0) GO TO 663
      SAS = (ZS(I2)-Z(I1))/(Z(I1+1)-Z(I1))
      GO TO 671
  663 SAS = 0.0
      GO TO 671
  670 SAS = 1.0 / (1.0+ABS(LS2(2)/LS2(1)))
C  CALCULATE SIDE INTERSECTION IN INPUT COORDINATE SYSTEM
  671 XSID(I7) = XI(I1) + SAS*(XI(I1+1)-XI(I1))
      YSID(I7) = YI(I1) + SAS*(YI(I1+1)-YI(I1))
      ZSID(I7) = ZI(I1) + SAS*(ZI(I1+1)-ZI(I1))
C  CALCULATE SIDE INTERSECTION COORDINATES IN VIEWING REFERENCE COORD.
      YSIP(I7) = Y(I1) + SAS*(Y(I1+1)-Y(I1))
      ZSIP(I7) = Z(I1) + SAS*(Z(I1+1)-Z(I1))
  680 CONTINUE
      IF (I7 .EQ. 2) GO TO 700
  690 CONTINUE
C  CALCULATE COORDINATES OF CORNER PT. IN ELEMENT PLANE
  700 DY = ABS(YSIP(2)-YSIP(1))
      DZ = ABS(ZSIP(2)-ZSIP(1))
      IF (DZ .GT. DY) GO TO 720
      IF (DY .GT. 0.00001) GO TO 710
      DAD = 0.0
      GO TO 730
  710 DAD = ABS((YS(I2)-YSIP(1))/DY)
      GO TO 730
  720 DAD = ABS((ZS(I2)-ZSIP(1))/DZ)
  730 XP(IE) = XSID(1) + (XSID(2)-XSID(1))*DAD
      YP(IE) = YSID(1) + (YSID(2)-YSID(1))*DAD
      ZP(IE) = ZSID(1) + (ZSID(2)-ZSID(1))*DAD
  740 CONTINUE
  750 CONTINUE
C     POLYGON CORNER POINTS ARE NOW COMPLETE AND STORED IN XP, YP, ZP
C  MAKE CHECK FOR DEFINITE SHIELDING
      XMAX = AMAX1(X(1),X(2),X(3),X(4))
      IF (IP .EQ. 8) GO TO 770
      DO 760 IE=IP,7
  760 XP(IE+1) = 99999.9
  770 XMIN2 = AMIN1 (XP(1),XP(2),XP(3),XP(4),XP(5),XP(6),XP(7),XP(8))
      IF (XMIN2 .GE. XMAX) GO TO 790
C    SHIELDING NOT DEFINITE, SO CHECK FURTHER
      DO 780 IE=1,IP
      IF (IPF(IE).GT.9 .AND. IPF(IE).LT.50) GO TO 780
      NX2 = XP(IE) - ELEM(7)
      NY2 = YP(IE) - ELEM(8)
      NZ2 = ZP(IE) - ELEM(9)
      VN = SQRT (NX2*NX2 + NY2*NY2 + NZ2*NZ2)
      IF (VN .EQ. 0.0) GO TO 780
      NX2 = NX2/VN
      NY2 = NY2/VN
      NZ2 = NZ2/VN
      NDN2 = ELEM(4)*NX2 + ELEM(5)*NY2 + ELEM(6)*NZ2
      IF (NDN2 .GT. 0.0001) GO TO 980
  780 CONTINUE
      IF (IBP .EQ. 1) GO TO 950
  790 CONTINUE
C
C  SET UP PROJECTION TRANSFORMATION DATA FOR SHIELDED ELEMENT
      T1X = XI(3) - XI(1)
      T2X = XI(4) - XI(2)
      T1Y = YI(3) - YI(1)
      T2Y = YI(4) - YI(2)
      T1Z = ZI(3) - ZI(1)
      T2Z = ZI(4) - ZI(2)
      AVX = 0.25*(XI(1)+XI(2)+XI(3)+XI(4))
      AVY = 0.25*(YI(1)+YI(2)+YI(3)+YI(4))
      AVZ = 0.25*(ZI(1)+ZI(2)+ZI(3)+ZI(4))
      T = SQRT(T1X*T1X + T1Y*T1Y + T1Z*T1Z)
      IF (T .EQ. 0.0) GO TO 800
      T1X = T1X/T
      T1Y = T1Y/T
      T1Z = T1Z/T
  800 T2X = NY(J)*T1Z*CREF - NZ(J)*T1Y
      T2Y = NZ(J)*T1X - NX(J)*T1Z
      T2Z = NX(J)*T1Y - NY(J)*T1X*CREF
C  PROJECT POLYGON POINTS INTO QUADRILATERAL PLANE
      DO 810 IE=1,IP
       IF (IPF(IE) .GT. 40) GO TO 810
      XN = T1X*(XP(IE)-AVX) + T1Y*(YP(IE)-AVY) + T1Z*(ZP(IE)-AVZ)
      YN = T2X*(XP(IE)-AVX) + T2Y*(YP(IE)-AVY) + T2Z*(ZP(IE)-AVZ)
      XP(IE) = AVX + T1X*XN + T2X*YN
      YP(IE) = AVY + T1Y*XN + T2Y*YN
      ZP(IE) = AVZ + T1Z*XN + T2Z*YN
  810 CONTINUE
C
C  CONVERT POLYGON POINTS TO THE REQUIRED NUMBER OF ELEMENTS
      DO 820 I1=1,4
      XO(I1,1) = XP(I1)
      YO(I1,1) = YP(I1)
  820 ZO(I1,1) = ZP(I1)
      NE = 1
      IF (IP .NE. 3) GO TO 830
      XO(4,1) = XP(3)
      YO(4,1) = YP(3)
      ZO(4,1) = ZP(3)
      GO TO 880
C
  830 IF (IP .EQ. 4) GO TO 880
      DO 840 I1=1,4
      XO(I1,2) = XP(I1+3)
      YO(I1,2) = YP(I1+3)
  840 ZO(I1,2) = ZP(I1+3)
      NE = 2
      IF (IP .NE. 5) GO TO 850
      XO(3,2) = XP(1)
      YO(3,2) = YP(1)
      ZO(3,2) = ZP(1)
      XO(4,2) = XP(1)
      YO(4,2) = YP(1)
      ZO(4,2) = ZP(1)
      GO TO 880
  850 IF (IP .NE. 6) GO TO 860
      XO(4,2) = XP(1)
      YO(4,2) = YP(1)
      ZO(4,2) = ZP(1)
      GO TO 880
C
  860 XO(1,3) = XP(4)
      YO(1,3) = YP(4)
      ZO(1,3) = ZP(4)
      XO(2,3) = XP(7)
      YO(2,3) = YP(7)
      ZO(2,3) = ZP(7)
      NE = 3
      IF (IP .NE. 7) GO TO 870
      XO(3,3) = XP(1)
      YO(3,3) = YP(1)
      ZO(3,3) = ZP(1)
      XO(4,3) = XP(1)
      YO(4,3) = YP(1)
      ZO(4,3) = ZP(1)
      GO TO 880
  870 XO(3,3) = XP(8)
      YO(3,3) = YP(8)
      ZO(3,3) = ZP(8)
      XO(4,3) = XP(1)
      YO(4,3) = YP(1)
      ZO(4,3) = ZP(1)
      GO TO 880
C
  880 CONTINUE
C  CALCULATE AREA AND CENTROID FOR NEW NEGATIVE ELEMENTS
      DO 940 I1=1,NE
       T1X = XO(3,I1) - XO(1,I1)
       T2X = XO(4,I1) - XO(2,I1)
       T1Y = YO(3,I1) -YO(1,I1)
       T2Y = YO(4,I1) - YO(2,I1)
       T1Z = ZO(3,I1) - ZO(1,I1)
       T2Z = ZO(4,I1) - ZO(2,I1)
       AVX = 0.25*(XO(1,I1)+XO(2,I1)+XO(3,I1)+XO(4,I1))
       AVY = 0.25*(YO(1,I1)+YO(2,I1)+YO(3,I1)+YO(4,I1))
       AVZ = 0.25*(ZO(1,I1)+ZO(2,I1)+ZO(3,I1)+ZO(4,I1))
       D = NX(J)*(AVX-XO(1,I1)) + NY(J)*(AVY-YO(1,I1))*CREF +           -
     1     NZ(J)*(AVZ-ZO(1,I1))
       PD = ABS(D)
       T = SQRT(T1X*T1X + T1Y*T1Y + T1Z*T1Z)
       IF (T .LT. 0.0001) GO TO 890
       T1X = T1X/T
       T1Y = T1Y/T
       T1Z = T1Z/T
  890  T2X = NY(J)*T1Z*CREF - NZ(J)*T1Y
       T2Y = NZ(J)*T1X - NX(J)*T1Z
       T2Z = NX(J)*T1Y - NY(J)*T1X*CREF
       DO 900 I2=1,4
        XPA(I2) = XO(I2,I1) + NX(J)*D
        YPA(I2) = YO(I2,I1) + NY(J)*D*CREF
        ZPA(I2) = ZO(I2,I1) + NZ(J)*D
        D = - D
       XDIF = XPA(I2) - AVX
        YDIF = YPA(I2) - AVY
        ZDIF = ZPA(I2) - AVZ
        XII(I2) = T1X*XDIF + T1Y*YDIF + T1Z*ZDIF
  900   ETA(I2) = T2X*XDIF + T2Y*YDIF + T2Z*ZDIF
       ETACK = ETA(2) - ETA(4)
      IF (ABS(ETACK) .GT. 0.0001) GO TO 910
        XI0 = 0.0
        GO TO 920
  910  XI0 = 0.333333*(XII(4)*(ETA(1)-ETA(2)) + XII(2)                  -
     1      *(ETA(4)-ETA(1))) / (ETA(2)-ETA(4))
  920  ETA0 = -0.333333 * ETA(1)
       DO 930 I2=1,4
        XII(I2) = XII(I2) - XI0
  930   ETA(I2) = ETA(I2) - ETA0
      XC(I1) = AVX + T1X*XI0 + T2X*ETA0
      YC(I1) = AVY + T1Y*XI0 + T2Y*ETA0
      ZC(I1) = AVZ + T1Z*XI0 + T2Z*ETA0
       XI3M1 = XII(3) - XII(1)
       ETA2M4= ETA(2) - ETA(4)
      AR(I1) = 0.5*XI3M1*ETA2M4
  940 CONTINUE
  950 CONTINUE
C
      DO 970 I8=1,NE
      IF (AR(I8) .LE. 0.0001) GO TO 970
      ICT = ICT + 1
      E(1) = ICT
      E(2) = IN(J)
      E(3) = IM(J)
      E(4) = NX(J)
      E(5) = NY(J) * CREF
      E(6) = NZ(J)
      E(7) = XC(I8)
      E(8) = YC(I8)
      E(9) = ZC(I8)
      E(10) = -AR(I8)
      E(11) = XO(1,I8)
      E(12) = XO(2,I8)
      E(13) = XO(3,I8)
      E(14) = XO(4,I8)
      E(15) = YO(1,I8)
      E(16) = YO(2,I8)
      E(17) = YO(3,I8)
      E(18) = YO(4,I8)
      E(19) = ZO(1,I8)
      E(20) = ZO(2,I8)
      E(21) = ZO(3,I8)
      E(22) = ZO(4,I8)
      E(23) = 4.0
      E(24) = 0.0
      E(25) = 0.0
      WRITE (TAPEA) E
      IF (IPRINT .NE. 0) WRITE (TAPEOT,960) E
  960 FORMAT (1H0,8X,3F4.1,2X,7E14.5,/1H ,22X,4E14.5,/1H ,22X,4E14.5,/  -
     1  1H ,22X,4E14.5,/1H ,22X,3E14.5)
  970 CONTINUE
  980 IF (IREF2.EQ.2 .OR. ISMY.EQ.1 .OR. BETA(I).EQ.0.0) GO TO 990
      IREF2 = 2
      CREF2 = -1.0
      GO TO 140
C
  990 CONTINUE
 1000 IF (IREF1.EQ.2 .OR. ISMY.EQ.1 .OR. BETA(I).EQ.0.0) GO TO 1010
      IREF1 = 2
      CREF = -1.0
      GO TO 120
 1010 CONTINUE
C
C
      I9 = I9 + 1
      NSHE(I9) = ICT
 1020 CONTINUE
C  END OF ALPHA-BETA LOOP
C
C  CHECK FOR END OF COMPONENT ANALYSIS LOOP
      IF (NPAN .LT. NPANL) GO TO 30
      REWIND TAPEA
      GO TO 1050
C
 1030 WRITE (6,1040) ISIZE
 1040  FORMAT (1H0,43H**ERROR***NUMBER OF ELEMENTS IN A COMPONENT,      -
     1 14HCANNOT EXCEED  ,I4,34H  A STOP WILL BE CALLED IN ROUTINE  ,   -
     2  8H SHIELD.  )
      STOP
C1050 RETURN
 1050 CONTINUE
      END
*DECK PRES
      OVERLAY (MARK4,2,3)
      PROGRAM PRES
C     SUBROUTINE PRES
C
C  THIS IS THE EXECUTIVE ROUTINE FOR THE INVISCID PRESSURE CALCULATIONS
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /GDATA/LTOT,J,SYMFCT,IORN,IGTYPE,L
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /ABDATA/NAB,ALPHA(20),BETA(20),ROL(20),CDELTA(20),QI(20),  -
     1               RI(20),PI(20)
      COMMON /REF/SREF,MAC,SPAN,XCG,YCG,ZCG
      COMMON /INTERF/INT,ISHE(20),NSHE(100),I9,ISHEF,INF(20,22),        -
     1               DINF(20,6),LTOTAB(20)
      COMMON /FARRAY/F
      COMMON /MDATA/IMPACT,ISHAD,IPRINT,PDATA,ISAVE,IPIN
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON/SURFN2/INORM,ISURF,IX,IY,IZ,U1,UL,V1,VL,CR,CT,CHX,N2,N3,   -
     1    XO,YO,ZO,AP11,AP12,AP13,AP21,AP22,AP23,AP31,AP32,AP33,        -
     2  FLOWC(7),XI(500),YI(500),B(503,7),XKF(503),AA(5999),            -
     A  XB(4), YB(4), ZB(4),                                            -
     3  NDSET,IABSET,IR,LORG(20),ISR(20),NS,ISFR,IVIS, IFTYP,IFLOW,     -
     4    BX(2,20), BY(2,20), NB
      DIMENSION ELEM(25),                     TITLE(15),E(25),EP(25)
      DIMENSION F(11),IPANL(10),PDATA(6),IPR(20),FF(11),IMP(20),ISA(20),-
     1  ISH(20),PDA(6,20),COM(10)
      DIMENSION LCOM(41),LSUM(41),TITLE9(5)
      DIMENSION  INFI(22),DINFI(6),E1(8),E2(11),E4(41),E5(41),E6(41),   -
     1           E7(11),E8(14)
      DIMENSION IG4S(1000)
      DIMENSION  INP(20)
      INTEGER ERROR,SYMFCT,PAGE,CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL  MACH,MAC
      DATA ISIZE/1000/
      DATA TITLE9/10HFORCE DATA,10H SAVE UNIT,10H          ,            -
     1 10H          ,10H          /
C     DATA TITLE9/4HFORC,4HE DA,4HTA S,4HAVE ,4HUNIT/
C
C
C  SET INITIAL CONSTANTS FOR START OF CASE
      ERROR = 0
      NCOM = 0
      I9 = 0
C
      WRITE (TAPEOT,10)
   10  FORMAT (1H1,32H*** PRESSURE CALCULATION PROGRAM  )
C
C  READ TITLE CARD AND FLAGS
      READ (TAPEIN,20) NCOMP,IFSAVE,TITLE
   20  FORMAT (I2,I1,3X,15A4)
C  SET UP CONSTANTS FOR FORCE DATA SAVE ON UNIT 9
      IF (IFSAVE .EQ. 2) GO TO 60
      IF (IFSAVE .NE. 0) GO TO 40
C
C
C  INITIALIZE CONSTANTS FOR UNIT 9 FORCE DATA SAVE UNIT
C        NTOT - TOTAL NUMBER OF COMPONENTS SAVED
C        ISUM - TOTAL NUMBER OF SUMMATION SETS
C        NEXT - NEXT EMPTY RECORD ON UNIT 9
C        LCOM - POINTERS TO COMPONENT DATA (41)  1ST RECORD IS DATA TYPE
C        LSUM - POINTERS TO SUMMATION DATA (41)  1ST RECORD IS DATA TYPE
C               (DATA TYPE=1 FORCE ONLY,  =2 FORCE + STABILITY DATA)
      NTOT = 0
      ISUM = 0
      NEXT = 10
      DO 21 I=1,41
       LCOM(I) = 0
   21  LSUM(I) = 0
      GO TO 50
C
C  RETRIEVE PREVIOUSLY SAVED TABLE OF CONTENTS
   40 IG9 = 1
      CALL READMS (9,E1,8,IG9)
C     READ (9'IG9) E1
      NTOT = E1(1)
      ISUM = E1(2)
      NEXT = E1(3)
C   CHECK IF VALID RECORD
      IF (E1(4) .EQ. TITLE9(1)) GO TO 43
      WRITE (TAPEOT,42)
   42  FORMAT (1H0,47H***IFSAVE WAS INPUT = 1 IN PRES YET UNIT 9 HAS ,  -
     1 55HNEVER BEEN INITIALIZED WITH A IFSAVE = 0. PROGRAM STOP. )
      STOP
   43 IG9 = 2
      CALL READMS (9,E5,41,IG9)
C     READ (9'IG9) E5
      DO 45 I=1,40
   45  LCOM(I) = E5(I+1)
C
   50 DO 22 I=1,20
       E4(I+1) = ALPHA(I)
   22  E4(I+21)= BETA (I)
      E4(1) = NAB
      DO 24 I=1,5
   24  E1(I+3) = TITLE9(I)
      DO 25 I=1,41
   25  E6(I) = 0.0
      DO 26 I=1,11
   26  E7(I) = 0.0
C
C  READ COMPONENT SELECTION CARD + INTERFERENCE FLAGS
   60 READ (TAPEIN,70) IPANL,IPM,INT,ISHEF
   70  FORMAT (10I2,3I1)
      NCOM = NCOM + 1
C
C ********
C  CHECK IF NEW PRESSURE DATA ARE TO BE READ
      IF (IPM .GT. 1) GO TO 110
C  READ PRESSURE METHOD DATA (1 CARD OR NAB CARDS)
      DO 100 I=1,NAB
      IF (IPM.EQ.0 .OR. I.EQ.1) READ (TAPEIN,80) IMPACT,ISHAD,IPRINT,   -
     1    IPIN,ISAVE,PDATA
   80 FORMAT(2I2,3I1,3X,6F10.0)
      IMP(I) = IMPACT
      ISH(I) = ISHAD
      IPR(I) = IPRINT
      ISA(I) = ISAVE
      INP(I) = IPIN
C
      DO 90 K=1,6
   90  PDA(K,I) = PDATA(K)
  100 CONTINUE
  110 CONTINUE
C ********
C
C  SET UP INTERFERENCE DATA ARRAY  (DINF)
      INTF = 0
      IF (INT.EQ.0 .OR. INT.EQ.3) GO TO 119
      DO 115 I=1,NAB
      IF (I.EQ.1 .OR. INT.EQ.1)                                         -
     1READ(TAPEIN, 111) INFI
  111 FORMAT(10I1, 12I2)
      DO 113 J=1,22
 113  INF(I,J) = INFI(J)
      IF((I.EQ.1 .OR. INT.EQ.1) .AND. INFI(1).EQ.0)                     -
     1READ(TAPEIN, 112)  DINFI
  112 FORMAT(10X, 6F10.0)
      DO 114 J=1,6
 114  DINF(I,J) = DINFI(J)
 115  CONTINUE
 119  CONTINUE
C  CHECK IF INTERFERENCE FLAG IS TO BE TURNED ON.
      IF (INT .EQ. 0) GO TO 118
      DO 117 I=1,NAB
      IF (INF(I,1) .GT. 0) INTF = 1
  117 CONTINUE
  118 CONTINUE
      IF (INTF .EQ. 1) REWIND TAPEE
C
C  OBTAIN GEOMETRY DATA FROM SAVE UNIT FOR COMPLETE COMPONENT AND
C  PLACE IN GEOMETRY DATA WORKING ARRAYS
      IG4 = 2
      CALL READMS (4,E,25,IG4)
C     READ (4'IG4) E
      NEXTG = E(1)
      NP   = E(2)
      NPMAX= E(3)
      NREM = E(4)
      K = 0
      NCS = 0
      DO 130 I=1,10
      IF (IPANL(I) .EQ. 0) GO TO 140
      NCS = NCS + 1
      IG4 = IPANL(I)*5
      CALL READMS (4,EP,25,IG4)
C     READ (4'IG4) EP
      ISTAT3 = EP(1)
      COM(I) = EP(2)
      ISTART = EP(3)
      N = EP(4)
      IORN = EP(5)
      SYMFCT = EP(6)
      ISTART = ISTART - NREM
C
      DO 120 II=1,N
       K = K + 1
      IF (K .GT. ISIZE) GO TO 150
      IG4 = ISTART + NREM*II
      IG4S(K) = IG4
      IF (INTF .NE. 1) GO TO 120
      CALL READMS (4,ELEM,25,IG4)
C     READ (4'IG4) ELEM
      WRITE (TAPEE) IG4,ELEM
  120 CONTINUE
  130 CONTINUE
C
  140 LTOT = K
      GO TO 170
  150 WRITE (TAPEOT,160) ISIZE,ISIZE
  160  FORMAT (1H ,46H*** ERROR *** NUMBER OF ELEMENTS PER COMPONENT  , -
     1       13HCANNON EXCEED ,I4,/1H ,14X,22HDIVIDE THE SHAPE INTO  ,  -
     2       47HMORE COMPONENTS WITH NO COMPONENT GREATER THAN  ,I4,    -
     3       9H ELEMENTS  )
      STOP
  170 CONTINUE
C
      ISRF = 0
      DO 172 I = 1,NAB
      IF (INP(I) .GT. 0)  ISRF = 1
  172 CONTINUE
      IF (ISRF .EQ. 0)  GO TO 175
C
C  ELEMENTS MUST BE WRITTEN ON TAPEE
C  CHECK IF ALREADY DONE FOR INTERFERRENCE FLOWS
      IF (INTF .EQ. 1)  GO TO 175
C
      DO 174 I = 1,LTOT
      IG4 = IG4S(I)
      CALL READMS(4,ELEM,25,IG4)
C     READ(4'IG4)  ELEM
      WRITE(TAPEE)  IG4,ELEM
  174 CONTINUE
  175 CONTINUE
C
C
C
C  CHECK FOR INTERFERENCE USAGE
      IF (INTF .EQ. 0) GO TO 181
C  CALL FLOW FIELD PRE-PROCESSOR FOR INTERFERENCE DATA
      CALL FLNTRP
C
C
C
  181  CONTINUE
C
C
C
C  CHECK FOR INPUT SURFACE PRESSURES
      IF (ISRF .EQ. 0)  GO TO 183
C  CALL PRE-PROCESSOR FOR SURFACE DATA
      CALL  CPINPT(INP, LTOTAB)
  183 CONTINUE
C
C
C
C  GEOMETRY DATA LOAD IS COMPLETE
C
      ISAS = 0
      IF (IFSAVE .EQ. 2) GO TO 182
      NTOT = NTOT + 1
      LCOM(NTOT) = NEXT
      NEXT = NEXT + 2
  182 CONTINUE
C
C**********************************
C  START ALPHA-BETA LOOP (DO ALL ALPHA-BETAS FOR GIVEN COMPONENT)
      DO 190 J=1,NAB
      IMPACT = IMP(J)
      ISHAD = ISH(J)
      IPRINT = IPR(J)
      ISAVE = ISA(J)
      IPIN = INP(J)
      IF (ISAVE .EQ. 1) ISAS = 1
      DO 180 I=1,6
  180 PDATA(I) = PDA(I,J)
C***GO TO FORCE PROGRAM
      CALL FORCE (NEXTG,IG4S)
       IF (ERROR .NE. 0) GO TO 460
C
C  SAVE FORCE DATA ON UNIT 9 IF REQUIRED
      IF (IFSAVE .EQ. 2) GO TO 190
      CALL WRITMS (9,F,11,NEXT)
C     WRITE (9'NEXT) F
      NEXT = NEXT + 1
      CALL WRITMS (9,E7,11,NEXT)
C     WRITE (9'NEXT) E7
      NEXT = NEXT + 1
  190 CONTINUE
C**END OF ALPHA-BETA LOOP INTO FORCE
C************************************
C
C
C  RESET COUNTERS IN GEOMETRY TABLE IF DATA WHERE SAVED
      IF (ISAS .EQ. 0) GO TO 192
      E(1) = NEXTG
      IG4 = 2
      CALL WRITMS (4,E,25,IG4)
C     WRITE (4'IG4) E
  192 CONTINUE
C
      IF (IFSAVE .EQ. 2) GO TO 450
C
C***OUTPUT DATA ******
C  WRITE HEADER INFORMATION FOR FORCE OUTPUT PAGE
      CALL HEADER
      WRITE (TAPEOT,200) NCOM
  200  FORMAT (1H0,18HCOMPONENT NUMBER =, I3)
      WRITE (TAPEOT,210) (COM(I),I=1,NCS)
  210  FORMAT (1H0,12HPANEL ID =  , 20(A4,2X))
      WRITE (6,230) MACH,V,RENO
  230 FORMAT (1H0,7H  MACH=F8.3,6H  VEL=F9.1,16H FT/SEC  RE/FT =E13.5 )
      IF (PSTAG .LT. 0.00001) WRITE (6,240) ALT
  240 FORMAT (1H ,7H  ALT =F8.0 )
      IF (PSTAG .GT. 0.00001) WRITE (6,250) PSTAG,TSTAG
  250 FORMAT (1H ,16X7HP STAG=F7.1,16H ATMOS   T STAG=F7.1,6H DEG F )
      WRITE (TAPEOT,260) GTYPE
  260  FORMAT (1H ,2X,2A4)
      WRITE (6,270) SREF,SPAN,MAC,XCG,YCG,ZCG
  270 FORMAT (1H0,9H  S REF =F9.2,8H  SPAN =F8.2,8H  MAC  =F8.2,/1H ,   -
     1  9H  X CG  =F9.2,8H  Y CG =F8.2,8H  Z CG =F8.2 )
      WRITE (TAPEOT,280)
  280  FORMAT (1H0,10HFORCE DATA,/1H ,7H  ALPHA,4X,3HC D,7X,3HC L,7X,   -
     1 3HC A,7X,3HC Y,7X,3HC N,/1H ,7H  BETA ,4X,3HL/D,7X,3HC M,7X,     -
     2 4HC LL,6X,4HC LN)
C
C  RETRIEVE OUTPUT DATA FROM UNIT 9 AND PRINT
      DO 300 I=1,NAB
       IG9 = LCOM(NTOT) + I*2
      CALL READMS (9,F,11,IG9)
C     READ (9'IG9) F
C  WRITE OUTPUT FORCE DATA
      WRITE (TAPEOT,290) F
  290  FORMAT (1H0,F7.2,5F10.5,/1H ,F7.2,4F10.5)
  300 CONTINUE
C**OUTPUT DATA COMPLETED FOR THIS COMPONENT
C
C  SAVE COMPONENT INFORMATION IN TABLE OF CONTENTS
      DO 191 I=2,11
  191  E2(I) = IPANL(I-1)
      E2(1) = NTOT
      IG9 = LCOM(NTOT)
      CALL WRITMS (9,E2,11,IG9)
C     WRITE (9'IG9) E2
      IG9 = IG9 + 1
      CALL WRITMS (9,E4,41,IG9)
C     WRITE (9'IG9) E4
C
C  UPDATE MAIN TABLE OF CONTENTS
      E1(1) = NTOT
      E1(2) = ISUM
      E1(3) = NEXT
      IG9 = 1
      CALL WRITMS (9,E1,8,IG9)
C     WRITE (9'IG9) E1
      DO 310 I=2,41
  310  E5(I) = LCOM(I-1)
      E5(1) = 0.0
      IG9 = 2
      CALL WRITMS (9,E5,41,IG9)
C     WRITE (9'IG9) E5
      IG9 = 3
      CALL WRITMS (9,E6,41,IG9)
C     WRITE (9'IG9) E6
      E8(1) = MACH
      E8(2) = V
      E8(3) = RENO
      E8(4) = ALT
      E8(5) = PSTAG
      E8(6) = TSTAG
      E8(7) = GTYPE(1)
      E8(8) = GTYPE(2)
      E8(9) = SREF
      E8(10) = SPAN
      E8(11) = MAC
      E8(12) = XCG
      E8(13) = YCG
      E8(14) = ZCG
      IG9 = 4
      CALL WRITMS (9,E8,14,IG9)
C     WRITE (9'IG9) E8
      WRITE (TAPEOT,430) NTOT
  430  FORMAT (1H0,10X,35HDATA SAVED ON UNIT 9.  SET NUMBER =,I4)
C
C  CHECK IF LAST COMPONENT HAS BEEN COMPLETED
  450 IF (NCOM .LT. NCOMP) GO TO 60
      GO TO 480
C
C
C
C
  460 WRITE (TAPEOT,470) ERROR,J
  470  FORMAT (1H ,10H** ERROR =,I2,26H ON RETURN FROM FORCE.  J= ,I1)
C 480 RETURN
  480 CONTINUE
      END
*DECK FORC
      SUBROUTINE FORCE (NEXT,IG4S)
C
C
C***********************************************************************
C**THIS SUBROUTINE CALCULATES THE PRESSURE COEFFICIENT ON EACH SURFACE**
C**ELEMENT, RESOLVES IT INTO THE REQUIRED DIRECTIONS, AND ADDS UP THE **
C**CONTRIBUTIONS TO FIND THE TOTAL VEHICLE COEFFICIENTS.              **
C***********************************************************************
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /GDATA/LTOT,J,SYMFCT,IORN,IGTYPE,L
      COMMON /REF/SREF,MAC,SPAN,XCG,YCG,ZCG
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /ABDATA/NAB,ALPHA(20),BETA(20),ROL(20),CDELTA(20),QI(20),  -
     1               RI(20),PI(20)
      COMMON /FARRAY/F
      COMMON /INTERF/INT,ISHE(20),NSHE(100),I9,ISHEF,INF(20,22),        -
     1               DINF(20,6),LTOTAB(20)
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON /MDATA/IMPACT,ISHAD,IPRINT,PDATA,ISAVE,IPIN
      COMMON /FSBS/FS,BS
      DIMENSION ANGLE(3),FS(8),BS(8)
      DIMENSION F(11),PDATA(6),E(25),TITLE(15),DINFL(6),LCOND(3),FSS(8)
      DIMENSION IG4S(1)
      DIMENSION E1(25),E2(25),E3(25),INFLOW(5)
      INTEGER  ERROR,SYMFCT,SYMFCO,CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL  MACH,MAC,NX,NY,NZ,MACHSQ
C
C
      DATA RC/.17453292E-1/
      RAD(A) = A /.572957795E+02
C  SET UP STARTING CONSTANTS
      IFIRST = 0
      CA  = 0.0
      CY  = 0.0
      CN  = 0.0
      CLL = 0.0
      CLM = 0.0
      HML = 0.0
      HMR = 0.0
      CLN = 0.0
      DELTAS = 0.0
      AREAT = 0.0
      NPRT = 51
      NPCK = 51
      IDERIV = 0
      IPRCK = 0
      IF (IPRINT .EQ. 2) IPRCK = 1
      SYMFCO = 0
      ISHE1 = 0
      CPSTAG = PDATA(1)
      QQINF = PDATA(2)
      ETAC = PDATA(3)
      ENPM = PDATA(4)
      IMPACI = PDATA(5)
      ISHADI = PDATA(6)
C
C  CALCULATE DIRECTION COSINES OF VELOCITY VECTOR
      ALPHAR = RAD(ALPHA(J))
      BETAR  = RAD(BETA(J))
      ROLL = ROL(J)
      PHIR = RAD(ROLL)
      VXO = -V*COS(ALPHAR)*COS(BETAR)
      VYO =  V*(SIN(PHIR)*SIN(ALPHAR)*COS(BETAR)+COS(PHIR)*SIN(BETAR))
      VZO =  V*(COS(PHIR)*SIN(ALPHAR)*COS(BETAR)-SIN(PHIR)*SIN(BETAR))
C
      Q = QI(J)
      R = RI(J)
      P = PI(J)
      LTS = LTOT
      IF (INT.NE.0 .AND. INF(J,1).GT.1) LTS = LTOTAB(J)
      IF (IPIN .GT. 0)  LTS = LTOTAB(J)
C
C  INITIALIZE FREE STREAM DATA ARRAY
      FS(1) = RHOFS
      FS(2) = PFS
      FS(3) = TFS
      FS(4) = AFS
      FS(5) = VIS
      FS(6) = MACH
      FS(7) = MACH * FS(4)
      FS(8) = FS(1)*FS(7)/FS(5)
      GP1 = GAM + 1.0
      GM1= GAM - 1.0
      DO 9 I=1,8
    9 FSS(I) = FS(I)
      ICKF = 0
      INL = 0
C
C*****START OF ELEMENT DO LOOP *****
   10 DO 589 L=1,LTS
C  CHECK FOR SHIELDING OPTION
      IF (ISHE1 .EQ. 1) GO TO 15
C  CHECK FOR INTERFERENCE
      IF (INT.NE.0 .AND. INF(J,1).GT.1) GO TO 16
      IF (IPIN .GT. 0)  GO TO 16
C  GET GEOMETRY DATA FROM NORMAL STORAGE ARRAYS
      IG4 = IG4S(L)
      CALL READMS (4,E,25,IG4)
C     READ (4'IG4) E
      N     = E(2)
      M     = E(3)
      NX    = E(4)
      NY    = E(5)
      NZ    = E(6)
      XCENT = E(7)
      YCENT = E(8)
      ZCENT = E(9)
      AREA  = E(10)
C  OBTAIN POINTER ARRAYS FOR SURFACE DATA SAVE
      IG41 = IG4 + 1
      CALL READMS (4,E2,25,IG41)
C     READ (4'IG41) E2
      IG42 = IG4 + 2
      CALL READMS (4,E3,25,IG42)
C     READ (4'IG42) E3
C  CHECK ON SYMMETRY REQUIREMENTS (CHANGE SIGNS IF REQUIRED)
      IF (SYMFCO .EQ. 0) GO TO 60
      NY = -NY
       YCENT = -YCENT
      INL = 1
      GO TO 60
C  READ GEOMETRY DATA FROM SHIELDING DATA UNIT
  15  READ (TAPEA) E
      GO TO 18
C  READ GEOMETRY DATA FROM FLOW FIELD UNIT
  16  READ (TAPEF) IG4,LCOND,E,DINFL,INFLOW
      IG41 = IABS(IG4) + 1
      IF (LCOND(1) .EQ. 2) GO TO 16
C  DUMP GEOMETRY DATA INTO WORKING VARIABLES
  18  N = E(2) + 0.00001
       M = E(3) + 0.0001
       NX = E(4)
       NY = E(5)
       NZ = E(6)
       XCENT = E(7)
       YCENT = E(8)
       ZCENT = E(9)
       AREA = E(10)
  60  CONTINUE
      IF (IPIN .GT. 0)  GO TO 68
C
C  DETERMINE LOCAL EXTERNAL FLOW CONDITIONS
      IF (INT .NE. 0) GO TO 61
      IF (L .GT. 1) GO TO 69
      GO TO 68
C  INCLUDE INTERFERENCE FLOW FIELD EFFECTS
C  CHECK IF FLOW FIELD IS NON-UNIFORM
  61  IF (INF(J,1) .GT. 1) GO TO 62
      IF (L .GT. 1) GO TO 69
      DO 65 I=1,9
  65  DINFL(I) = DINF(J,I)
C
C  FLOW FIELD IS NON-UNIFORM. LOCAL FLOW FIELD DATA FROM SAVE UNIT (10)
C  WILL BE USED.
C  CHECK IF LOCAL CONDITIONS ARE NOT FREE-STREAM
   62 IF (LCOND(1) .NE. 0) GO TO 64
      IF (ICKF .EQ. 1) GO TO 68
      ICKF = 1
C    SET LOCAL CONDITIONS TO FREESTREAM VALUES
      DO 63 I=1,8
   63 FS(I) = FSS(I)
      GO TO 68
   64 ICKF = 0
C  USE LOCAL FLOW FIELD DATA FROM STORAGE UNIT TO
C  SET UP LOCAL FREE STREAM (FS) TABLE
      FS(2) = DINFL(5) * PFS
      FS(3) = DINFL(6) * TFS
      FS(1) = GAM*FS(2) / ((GAM-1.0)*GASCP*FS(3))
      FS(4) = SQRT((GAM-1.)*GASCP*FS(3))
      IF (FS(3) .GE. AV1) FS(5) = 2.27E-8*FS(3)**1.5/(FS(3)+198.6)
      IF (FS(3) .LT. AV1) FS(5) = AV2 * FS(3)**AV3
      FS(6) = DINFL(1)
      FS(7) = FS(6)*FS(4)
      FS(8) = FS(1) * FS(7)/FS(5)
      VXI = FS(7)*DINFL(2)
      VYI = FS(7)*DINFL(3)
      VZI = FS(7)*DINFL(4)
      GO TO 71
C
   68 VXI = VXO
      VYI = VYO
      VZI = VZO
   71 VX = VXI
      VY = VYI
      VZ = VZI
C
  69  CONTINUE
C
      IF (Q.EQ.0.0 .AND. R.EQ.0.0 .AND. P.EQ.0.0) GO TO 70
C  CALCULATE VELOCITY COMPONENTS WITH VEHICLE ROTATION
      VX = VXI+ (Q*(+ZCENT-ZCG)-R*(+YCENT-YCG))
      VY = VYI+ (R*(+XCENT-XCG)+P*(+ZCENT-ZCG))
      VZ = VZI- (P*(+YCENT-YCG)+Q*(+XCENT-XCG))
C
   70 VLOCAL = SQRT(VX*VX + VY*VY + VZ*VZ)
C  COMPUTE COSINE OF ANGLE BETWEEN UNIT VECTORS
      COSDEL =(-NX*VX - NY*VY - NZ*VZ) / VLOCAL
      IF (COSDEL.GT.-1.0001 .AND. COSDEL.LT.-1.0   ) COSDEL = -1.0
      IF (COSDEL.GT. 1.0    .AND. COSDEL.LT. 1.0001) COSDEL =  1.0
      IF (COSDEL.GE.-1.0 .AND. COSDEL.LE.1.0) GO TO 90
      WRITE (6,80)
   80 FORMAT (1H0,44H***** FORCE ROUTINE WILL ATTEMPT TO FIND THE       -
     162H ARCCOSINE OF AN ARGUMENT WHOSE ABSOLUTE VALUE IS GREATER THAN -
     210H ONE *****,/1H ,15X30H*** JOB WILL BE TERMINATED ***  )
      ERROR = 1
      GO TO 620
C
C  COMPUTE ANGLE BETWEEN UNIT VECTORS
   90 THETA = ARCOS(COSDEL)
C
C
C
C  COMPUTE NEWTONIAN IMPACT ANGLE
      IF (IMPACT.NE.10 .AND. ENPM.NE.0.0) THETA = THETA / ENPM
      DELTAR = 1.570796327- THETA
      IF (DELTAR.GT.-0.00001  .AND. DELTAR.LT.0.00001 ) DELTAR = 0.0
C
C  CALCULATE NEWTONIAN IMPACT ANGLE IN DEGREES
      DELTA = DELTAR * .572957795E+02
      ANGLE(2) = DELTA
C
      DO 111 I=1,8
  111  BS(I) = 0.0
      TX = NY*VZ - NZ*VY
      TY = NZ*VX - NX*VZ
      TZ = NX*VY - NY*VX
      SX = TY*NZ - TZ*NY
      SY = TZ*NX - TX*NZ
      SZ = TX*NY - TY*NX
      STOTAL = SQRT(SX*SX + SY*SY + SZ*SZ)
      IF (STOTAL .EQ. 0.0) GO TO 115
      SX = SX / STOTAL
      SY = SY / STOTAL
      SZ = SZ / STOTAL
  115 CONTINUE
C
C  CHECK IF SURFACE DATA TO BE USED
      IF (IPIN - 1) 119, 116, 117
C
C  CP IS AVAILABLE AS DINFL(5)
  116 CP = DINFL(5)
      CPI = CP
      BS(2) = (0.5*GAM*CP*MACH**2 + 1.0)*PFS
      BS(3) = 1.0
      BS(6) = MACH
      GO TO 415
C
C  SURFACE PROPERTIES AVAILABLE IN DINFL ARRAY
  117 CP = (DINFL(5) - 1.0)*2.0/(GAM*MACH**2)
      CPI = CP
      BS(2) = DINFL(5)*PFS
      BS(3) = DINFL(6)*TFS
      BS(6) = DINFL(1)
      GO TO 415
  119 CONTINUE
C
C
C  CHECK TO SEE IF SURFACE IS IN A SHADOW REGION
      IF (DELTAR .LT. 0.0) GO TO 320
C
C
C***********************************************************************
C*********** SELECT IMPACT PRESSURE METHOD     *************************
C***********************************************************************
      GO TO (120,130,140,150,160,170,180,190,200,210,240,250,280,290,300-
     1   ),IMPACT
C
C  CALCULATE PRESSURE USING MODIFIED NEWTONIAN THEORY
  120 CP = CPSTAG * COSDEL * COSDEL
      GO TO 410
C
C  CALCULATE PRESSURE USING NEWTONIAN - PRANDTL-MEYER METHOD
  130   ISE   = 1
      CALL NEWTPM (ANGLE,EMN,CP,ETAC,IPRCK,MER,CPSTAG,                  -
     1      ISE,IFIRST)
      GO TO 410
C
C  CALCULATE PRESSURE USING TANGENT WEDGE
  140   ISDET = 2
      CALL COMPR (ANGLE,MER,IPRCK,CPSTAG,ISDET,IFIRST,CP)
      GO TO 410
C
C  CALCULATE PRESSURE USING TANGENT WEDGE - INFINITE MACH METHOD
  150 EMNS = 0.5*(GAM+1.)*FS(6)*SIN(DELTAR)+EXP(-0.25*(GAM+1.)*         -
     1      FS(6)*SIN(DELTAR))
      CP = 4./(GAM+1.)*(EMNS**2-1.)/(FS(6)*FS(6))
      GO TO 410
C
C  CALCULATE PRESSURE USING TANGENT CONE EMPIRICAL METHOD
  160 ANGLE(1) = DELTA
      CALL CONE (ANGLE,CP,2)
      GO TO 410
C
C  CALCULATE PRESSURE USING CONE AT ANGLE OF ATTACK
  170 CONTINUE
C  JONES METHOD IS USED
      IT = 0
C  CALCULATE LOCATION OF WINDWARD PLANE
  175 PHIW = 0.0
      IF (VY .EQ. 0.0  .AND.  VZ .GE. 0.0)  GO TO 176
      PHIW = 3.1415926536
      IF (VY .EQ. 0.0)  GO TO 176
      PHIW = ATAN2(-VY,VZ)
  176 CONTINUE
C
C  ANGLE OF ATTACK IN WINDWARD PLANE
      ALFWD =ARCOS(-VX/FS(7))
C
C  CONE ANGLE
      DCR = ARSIN(NX)
C
C  MERIDIAN ANGLE
      IF (NY .NE. 0.0)  GO TO 177
      PHI = 0.0
      IF (NZ .EQ. 0.0)  GO TO 178
  177 PHI = ATAN2(NY, -NZ)
C
C  LOCATION FROM WINDWARD PLANE
  178 PHIT = PHI - PHIW
C
C  MACH NUMBER IN PHIT PLANE
      VC = VZ*COS(PHI)  - VY*SIN(PHI)
      AMP = FS(6)*SQRT(VX**2 + VC**2)/FS(7)
C
C  ANGLE OF AMP TO AXIS
      IF (VC .NE. 0.0)  GO TO 179
      ALFP = 0.0
      IF (VX .EQ. 0.0)  GO TO 181
  179 ALFP = ATAN2( VC, -VX)
C
C
  181 ANGLE(1) = DCR/RC
      IF (IPRCK .EQ. 1)                                                 -
     1WRITE(6,1000) PHIW, PHI,PHIT, ALFWD,ALFP,DCR,AMP
 1000 FORMAT(1H0, 7X4HPHIW,11X3HPHI, 12X4HPHIT, 11X5HALFWD,             -
     1    10X4HALFP, 11X3HDCR, 12X3HAMP/1H , 7F15.6)
      CALL ACONE(ANGLE,CP,ALFWD,PHIT,ALFP,AMP,IT,IPRCK)
C
      GO TO 410
C
C  CALCULATE PRESSURE USING VAN DYKE UNIFIED THEORY
  180 CP = 0.5*(GAM+1.)*DELTAR**2 + SQRT((0.25*(GAM+1.)**2*DELTAR**4)   -
     1      + 4.0*DELTAR**2/((FS(6)*FS(6))-1.0))
      GO TO 410
C
C  CALCULATE BLUNT BODY VISCOUS EFFECTS
  190 CP = 0.0
      IVISIN = 1
C
C  THE VISCOUS FORCE COEFFICIENT TAU IS CALCULATED IN
C  SUBROUTINE BLUNT, WHICH ONLY NEEDS TO BE CALLED ONCE
C  FOR EACH SECTION.
C
      IF(L.EQ.1)CALL BLUNT(PFS,FS(6),TFS,VIS,RHOFS,ETAC,RENO,TAU,IVISIN)
      SHEAR = TAU*COS(DELTAR)
      GO TO 220
C
C  CALCULATE PRESSURE USING SHOCK-EXPANSION METHOD
  200 CALL SHKEXP (N,M,IPRCK,NX,NY,NZ,DELTA,PFS,FS(6),                  -
     1  DELTAR,IMPACI,CPSTAG,TFS,CP,ISHADI,IFIRST,L,IPRINT,             -
     2  RHOFS,AFS,VIS,V,RENO,0)
      IF (ERROR .EQ. 3) GO TO 620
      GO TO 410
C
C  CALCULATE PRESSURE USING FREE MOLECULAR FLOW
  210 FN = CPSTAG
      FT = ENPM
      TBTIN = ETAC
      S = SQRT(GAM/2.0)*FS(6)
      SSIND = S * SIN(DELTAR)
      ERFS = ERF(SSIND)
      CP =(1.0/(S*S))*((((2.0-FN)/1.7724539*SSIND+FN/2.0*SQRT(TBTIN))*  -
     1    EXP(-SSIND*SSIND)) + (((2.0-FN)*(SSIND*SSIND+0.5)+FN/2.0*     -
     2    1.7724539*SQRT(TBTIN)*SSIND) * (1.0+ERFS) ))
C  CALCULATE SHEAR FORCE COEFFICIENT FOR FREE MOLECULAR FLOW
      SHEAR = COS(DELTAR)*FT/(1.7724539*S)* (EXP(-SSIND*SSIND)          -
     1        +1.7724539*SSIND*(1.0+ERFS))
      SKIN = SHEAR
  220 IF (SHEAR .GT. 1.0E-25) GO TO 230
       SHEARX = 0.0
       SHEARY = 0.0
       SHEARZ = 0.0
       GO TO 410
  230 SHEARX = SHEAR * SX
      SHEARY = SHEAR * SY
      SHEARZ = SHEAR * SZ
      GO TO 410
C
C  SET PRESSURE COEFFICIENT TO INPUT VALUE
  240 CP = CPSTAG
      GO TO 410
C
C
C  CALCULATE PRESSURE USING HANKEY FLAT SURFACE EMPIRICAL CORRELATION
  250 IF (DELTA .GE. 10.0) GO TO 260
      HANKEY= (0.195+0.222594/FS(6)**0.3-0.4)*DELTA + 4.0
      GO TO 270
  260 HANKEY= 1.95 + 0.3925/(FS(6)**0.3*TAN(DELTAR))
  270 CP = HANKEY* COSDEL*COSDEL
      GO TO 410
C
C  CALCULATE PRESSURE USING DELTA WING CORRELATION (SMYTH)
  280 DELDLW = DELTAR
      IF (DELDLW .LT. 0.01745) DELDLW = 0.01745
      EMNS = FS(6)* SIN(DELDLW)
      EMNS = 1.09*EMNS + EXP(-0.49 *EMNS)
      CP = 1.0/(FS(6)*FS(6)) * 1.66667*(EMNS*EMNS-1.0)
      GO TO 410
C
C CALCULATE PRESSURE USING MODIFIED DALHEM-BUCK RELATIONSHIP
  290 XLNM = ALOG(FS(6))
      A1 = (6.-.3*FS(6))+SIN((XLNM-.588)/1.20*3.14159)
      A2 = 1.15 + 0.5*SIN((XLNM-0.916)/3.29*3.14159)
      IF(DELTAR.EQ.0.0) CP=0.0
      IF(DELTAR.EQ.0.0) GO TO 410
      CP=1.0/(ABS(SIN(4.0*DELTAR)))**0.75+1.0
      IF(CP.GT.5.0) CP=5.0
      IF(CP.LT.2.0 .OR. (DELTA.GT.22.5)) CP=2.0
      CP=CP*COSDEL*COSDEL*(A1/DELTA**A2+1.)
      GO TO 410
C
C  CALCULATE PRESSURE USING BLAST WAVE ANALYSIS
  300 IF (CPSTAG .GT. 0.5) GO TO 310
      CP = (0.067*(FS(6)*FS(6))*ETAC/(ENPM-XCENT) + 0.44 )              -
     1   / (GAM/2.0*(FS(6)*FS(6)))
      GO TO 410
  310 CP = (0.121*(FS(6)*FS(6))*ETAC/(ENPM-XCENT)**.667 + 0.56)         -
     1   / (GAM/2.0*(FS(6)*FS(6)))
      GO TO 410
C
C***********************************************************************
C****************  SELECT SHADOW PRESSURE METHOD   *********************
C***********************************************************************
  320 GO TO (330,340,350,170,370,380,200,390,210),ISHAD
C
C  CALCULATE PRESSURE IN SHADOW REGIONS
C
C  CALCULATE PRESSURE USING CP=0 IN SHADOW REGIONS
  330 CP = 0.0
      GO TO 410
C
C  CALCULATE PRESSURE USING NEWTONIAN - PRANDTL-MEYER
  340  ISE   = 1
      CALL NEWTPM (ANGLE,EMN,CP,ETAC,IPRCK,MER,CPSTAG,                  -
     1       ISE,IFIRST )
      GO TO 410
C
C  CALCULATE PRESSURE USING PRANDTL-MEYER EXPANSION FROM FREE STREAM
  350 ANGLE(2) = ABS(DELTA)
       ISDET = 2
      CALL EXPAND (ANGLE,MER,IPRCK,ISDET,CP)
       GO TO 410
C
C
C
C  CALCULATE PRESSURE USING VAN DYKE UNIFIED THEORY
  370 CP = -1.4/(GAM*FS(6)**2)
      B = SQRT(FS(6)**2 - 1.0)
      DELMX = 2.*(1. - (1. - 0.7*(B/FS(6))**2)**((GAM-1.)*0.5/GAM))     -
     1         /(B*(GAM-1.0))
      IF (ABS(DELTAR) .GE. DELMX)  GO TO 410
      CP = 2./(GAM*B**2)*((1.-.5*(GAM-1.)*B*ABS(DELTAR))                -
     1    **(2.*GAM/(GAM-1.)) - 1.0)
      GO TO 410
C
C  CALCULATE PRESSURE USING BASE PRESSURE RELATIONSHIP (CP =-1/M**2)
  380 CP = - 1.0 / (FS(6)*FS(6))
      GO TO 410
C
C  SET PRESSURE COEFFICIENT TO INPUT VALUE
  390 CP = ETAC
      GO TO 410
C
C
C ********
  410 CONTINUE
C ********
C
C  CORRECT CP FOR LOCAL Q
      CP = CP * QQINF * VLOCAL*VLOCAL / (V*V)
C  CORRECT CP TO FREE STREAM CONDITIONS IF INTERFERENCE WAS USED
      IF (INT .EQ. 0) GO TO 415
      IF (LCOND(1) .EQ. 0) GO TO 415
      CPI = CP
      CP = ((CP*GAM/2.*(FS(6)*FS(6))+1.)* DINFL(5)-1.0) /               -
     1     (GAM/2.*MACH*MACH)
  415 CONTINUE
C
C  CHECK IF LOCAL FLOW PROPERTIES (BS ARRAY) ARE NEEDED.
      IF (ISAVE .EQ. 0)  GO TO 416
C
      IF (DELTAR .GE. 0.0)                                              -
     1GO TO (417,417,416,417,416,416,417,416,416,416,                   -
     2       417,417,417,417,417), IMPACT
C
      GO TO (417,417,416,416,417,417,416,417,417), ISHAD
C
C 418 IF (MER .EQ. 0)  GO TO 416
C
C CALCULATE APPROXIMATE LOCAL CONDITIONS, BS, GIVEN ONLY CP
  417 CONTINUE
      IF (ABS(CP) .LT. 0.00001)  GO TO 402
      IF (CP)  403,402,401
C
C  CP = 0.0,  SET BS = FS
  402 DO 391 I = 1,8
  391 BS(I) = FS(I)
      GO TO 416
C
C  APPROXIMATE LOCAL FLOW ASSUMING EXPANSION FROM FS.
C  PRESSURE (FROM DEFINITION OF CP)
  403 MACHSQ = MACH**2
      P2P1 = 0.5*GAM*MACHSQ*CP + 1.0
      BS(2) = PFS*P2P1
      P2P1 = BS(2)/FS(2)
C  TEMPERATURE
      T2T1 = (P2P1)**(GM1/GAM)
      BS(3) = FS(3)*T2T1
C  SPEED OF SOUND
      BS(4) = FS(4)*SQRT(T2T1)
C  DENSITY
      BS(1) = FS(1)*P2P1/T2T1
C  MACH NUMBER
      BS(6) = SQRT(2.0/GM1*((1.0+0.5*GM1*FS(6)**2)/T2T1 - 1.0))
C  VELOCITY
      BS(7) = BS(6)*BS(4)
C  VISCOSITY
      IF(BS(3).GE.AV1) BS(5) = 2.27E-8*BS(3)**1.5/(BS(3)+198.6)
      IF(BS(3).LT.AV1) BS(5) = AV2*BS(3)**AV3
C  REYNOLDS NUMBER
      BS(8) = BS(1)*BS(7)/BS(5)
C
      GO TO 416
C
C  CALCULATE LOCAL CONDITIONS, BS, GIVEN ONLY CP.
C  APPROXIMATED ASSUMING OBLIQUE SHOCK WAVE.
C
C
C  PRESSURE  (FROM DEFINITION OF CP)
  401 MACHSQ = MACH*MACH
      P2P1 = 0.5*GAM*MACHSQ*CP + 1.0
      BS(2) = PFS*P2P1
      P2P1 = BS(2)/FS(2)
C  DENSITY  (EQ. 158)
      R2R1 = (GP1*P2P1 + GM1)/(GM1*P2P1 + GP1)
      BS(1) = FS(1)*R2R1
C  TEMPERATURE  (EQ. 159)
      T2T1 = P2P1/R2R1
      BS(3) = FS(3)*T2T1
C  SPEED OF SOUND
      BS(4) = FS(4)*SQRT(T2T1)
C
C  VISCOSITY
      IF(BS(3).GE.AV1) BS(5) = 2.27E-8*BS(3)**1.5/(BS(3)+198.6)
      IF(BS(3).LT.AV1) BS(5) = AV2*BS(3)**AV3
C  MACH NUMBER  (EQ. 157)
      BS6SQ=(MACHSQ*(GP1*P2P1 + GM1) - 2.0*(P2P1**2 - 1.0))/(P2P1       -
     1       *(GM1*P2P1 + GP1))
      IF(BS6SQ.LT.1.0) BS(6)=1.01
      IF(BS6SQ.GE.1.0) BS(6)=SQRT(BS6SQ)
C
C  VELOCITY
      BS(7) = BS(4) * BS(6)
C  REYNOLDS NUMBER PER FOOT
      BS(8) = BS(1) * BS(7)/BS(5)
C
  416 CONTINUE
C
C***********************************************************************
C******* PRESSURE CALCULATION PART OF PROGRAM HAS BEEN COMPLETED *******
C***********************************************************************
C
C
C
C  SELECT FORCE METHOD TO MEET SYMMETRY REQUIREMENTS
      IF (SYMFCT .EQ. 1) GO TO 420
      IF (R.NE.0.0 .OR. P.NE.0.0) GO TO 420
      IF (BETA(J).EQ.0.0 .AND. ROLL.EQ.0.0) GO TO 450
C
C  CALCULATE SIX-COMPONENT FORCE CONTRIBUTIONS OF ELEMENT
  420 DELCA = NX    * (CP*AREA/SREF)
      DELCY = NY    * (CP*AREA/SREF)
      DELCN =-NZ    * (CP*AREA/SREF)
      IF (IMPACT.EQ.8 .AND. DELTAR.GE.0.0) GO TO 430
      IF ((IMPACT.EQ.10.AND.DELTAR.GE.0.0) .OR.                         -
     1    (ISHAD.EQ.9.AND.DELTAR.LT.0.0)) GO TO 430
      GO TO 440
  430 DELCA = DELCA - SHEARX *(AREA/SREF)
      DELCY = DELCY - SHEARY *(AREA/SREF)
      DELCN = DELCN + SHEARZ *(AREA/SREF)
  440 DELCLL= DELCY * (ZCENT - ZCG)/SPAN                                -
     1       +DELCN * (YCENT - YCG)/SPAN
      DELCLM= DELCN * (XCENT - XCG)/MAC                                 -
     1       +DELCA * (ZCENT - ZCG)/MAC
      DELCLN= DELCY * (XCENT - XCG)/SPAN                                -
     1       -DELCA * (YCENT - YCG)/SPAN
      GO TO 480
  450 DELCA = NX    * (CP*AREA/SREF) * 2.0
      DELCY =  0.0
      DELCN =-NZ    * (CP*AREA/SREF) * 2.0
      IF (IMPACT.EQ.17 .OR.ISHAD.EQ.10) GO TO 470
      IF (IMPACT.EQ.8 .AND. DELTAR.GE.0.0) GO TO 460
      IF ((IMPACT.EQ.10.AND.DELTAR.GE.0.0) .OR.                         -
     1    (ISHAD.EQ.9.AND.DELTAR.LT.0.0)) GO TO 460
       GO TO 470
  460 DELCA = DELCA - SHEARX * 2.0*(AREA/SREF)
      DELCN = DELCN + SHEARZ * 2.0*(AREA/SREF)
  470 DELCLL = 0.0
      DELCLM=(DELCN * (XCENT - XCG) / MAC                               -
     1       +DELCA * (ZCENT - ZCG) / MAC )
      DELCLN=  0.0
C
C  SUM UP SIX-COMPONENT FORCE CONTRIBUTIONS
  480 CA = CA + DELCA
      CY = CY + DELCY
      CN = CN + DELCN
      CLL = CLL + DELCLL
      CLM = CLM + DELCLM
      CLN = CLN + DELCLN
      AREAT = AREAT + AREA
  490 IF (IPRINT .EQ. 0) GO TO 580
C  CHECK TO PRINT HEADER AT TOP OF PAGE
  500 IF (NPRT.LT.NPCK) GO TO 560
  510 NPRT = 0
      CALL HEADER
      WRITE (TAPEOT,520) (GTYPE(I),I=1,2)
  520 FORMAT (1H , 63X, 2A4)
  530 CONTINUE
      WRITE (TAPEOT,540) MACH,ALT,SREF,SPAN,IMPACT,IMPACI,              -
     1  XCG,YCG,ZCG,MAC,ISHAD,ISHADI
  540 FORMAT (1H0,20HELEMENT DATA   MACH=F7.3,7H  ALT =F8.0,9H  S REF = -
     1 F8.1,8H  SPAN =F7.1,10H  IMPACT =I3,10H  IMPACI =I3,/1H ,        -
     2 15X5HXCG =F7.1,7H  YCG =F7.1,10H    ZCG  =F7.1,4X5HMAC =F7.1,    -
     3 10H   ISHAD =I3,10H  ISHADI =I3)
      WRITE (TAPEOT,550) ALPHA(J),BETA(J),CPSTAG,ETAC,DELTAS,           -
     1  IDERIV,Q,R,P
  550 FORMAT (1H ,5X17HANGLE OF ATTACK =F6.2,3X11HYAW ANGLE =F6.2,      -
     1  3X3HK =      F8.5,3X6HETAC =F8.4,3X,9HDELTA E =F6.2,/1H ,       -
     2  5X8HIDERIV =I3,3X3HQ =E12.5,3X,3HR =E12.5,3X3HP =E12.5,/        -
     3  1H0,2X,1HL,6X,6HDEL CA,8X                                       -
     4  6HDEL CY,8X6HDEL CN,7X7HDEL CLL,7X7HDEL CLM,7X7HDEL CLN,7X2HCP, -
     5  13X4HAREA,/1H ,11X2HCA,12X2HCY,12X2HCN,11X3HCLL,11X3HCLM,       -
     6  12X3HCLN,8X5HDELTA/1H ,10X5HXCENT, 9X5HYCENT, 9X5HZCENT)
      NPRT = NPRT + 15
C
C  PRINT ELEMENT DATA
  560 WRITE (TAPEOT,570) L,DELCA,DELCY,DELCN,DELCLL,DELCLM,DELCLN,CP,   -
     1  AREA,CA,CY,CN,CLL,CLM,CLN,DELTA,XCENT,YCENT,ZCENT
  570 FORMAT (1H0,I4,8E14.5,/1H ,4X7E14.5/1H , 4X3E14.5)
      NPRT = NPRT + 4
      IF (INT .EQ. 0)  GO TO 580
      IF (LCOND(1) .EQ. 0)  GO TO 580
      WRITE(TAPEOT,565) LCOND,CPI,DINFL,INFLOW
      NPRT = NPRT + 2
  565 FORMAT (1H ,8X,6HLCOND=,I2,I4,I3,6H  CPI=,E13.5,8H  DINFL=,6F9.5/ -
     1  1H , 8X16HFLOW DATA SET = , I2, 4X17HALPHA-BETA SET = , I2,     -
     2  4X14HFLOW REGION = , I2, 4X13HSUB-REGION = , I2,                -
     3  4X17HSECONDARY FLOW = , I2)
C
C  SET UP AND SAVE ELEMENT RESULTS ON GEOMETRY STORAGE UNIT.
C  ONLY DATA FOR ELEMENTS ACTUALLY ON UNIT 4 ARE SAVED.
C  DATA FOR REFLECTED ELEMENTS, PARTIAL ELEMENTS, ETC., ARE NOT SAVED.
  580 IF (ISAVE .EQ. 0) GO TO 589
      IF (IG4 .LE. 0) GO TO 589
      E1( 1) = IG4
      E1( 2) = E(1)
      E1( 3) = 0.0
      E1( 4) = 0.0
      E1( 5) = CP
      E1( 6) = DELTA
      E1( 7) = BS(6)
      E1( 8) = SX
      E1( 9) = SY
      E1(10) = SZ
      E1(11) = BS(2)/PFS
      E1(12) = BS(3)/TFS
      E1(13) = DELCA
      E1(14) = DELCY
      E1(15) = DELCN
      E1(16) = DELCLL
      E1(17) = DELCLM
      E1(18) = DELCLN
      E1(19) = 0.0
      E1(20) = 0.0
      E1(21) = 0.0
      E1(22) = 0.0
      E1(23) = 0.0
      E1(24) = 0.0
      E1(25) = 0.0
C  CHECK IF SPACE IS AVAILABLE FOR STORING ELEMENT DATA
      IF (NEXT .LE. 3000) GO TO 585
      WRITE (TAPEOT,583)
  583 FORMAT (1H0,42HSPACE ON UNIT 4 FOR SURFACE DATA HAS BEEN ,        -
     1 37HEXCEEDED. NO MORE DATA WILL BE SAVED. )
      ISAVE = 0
      GO TO 589
  585 CONTINUE
      CALL WRITMS (4,E1,25,NEXT)
C     WRITE (4'NEXT) E1
C  RESET POINTER ARRAY FOR SAVED DATA
      IF (INL .EQ. 1) GO TO 587
      E2(J) = NEXT
      CALL WRITMS (4,E2,25,IG41)
C     WRITE (4'IG41) E2
      GO TO 588
  587 E3(J) = NEXT
      CALL WRITMS (4,E3,25,IG42)
C     WRITE (4'IG42) E3
  588 NEXT = NEXT + 1
      IF (IPRINT .EQ. 0) GO TO 589
C     WRITE (TAPEOT,591) E1,E2
C 591 FORMAT (1H ,3HE1=,8E12.5,/1H ,3X,8E12.5,/1H ,3X,9E12.5,/1H ,
C    1 3HE2=,8E12.5,/1H ,3X,8E12.5,/1H ,3X,9E12.5)
C     NPRT = NPRT + 6
  589 CONTINUE
C ***** END OF DO LOOP FOR ALL ELEMENTS
C
C
C  CHECK IF SHIELDING WAS DONE AND COMPLETED
      IF (ISHE1 .EQ. 1) GO TO 610
C  CHECK IF SHIELDING IS TO BE DONE BUT IS NOT COMPLETED
      IF (ISHEF .NE. 0) GO TO 600
C  CHECK IF NO SYMMETRY
      IF (SYMFCT .EQ. 1) GO TO 610
C  CHECK IF ROTATION RATES ARE USED
      IF (R.NE.0.0 .OR. P.NE.0.0) GO TO 590
C  CHECK IF YAW OR ROLL ARE ZERO
      IF (BETA(J).EQ.0.0 .AND. ROLL.EQ.0.0) GO TO 610
C  CHECK IF SYMMETRY CALCULATIONS ARE COMPLETED
 590  IF (SYMFCO .EQ. 1) GO TO 610
C  CHECK IF INTERFERENCE TABLES WERE USED (SYMMETRY ALREADY DONE)
      IF (INT.NE.0 .AND. INF(J,1).GT.1) GO TO 610
C  SET SYMMETRY RE-CYCLE FLAG
      SYMFCO = 1
      GO TO 10
C
C
  600 I9 = I9 + 1
      LTS = NSHE(I9)
      IF (LTS .EQ. 0) GO TO 610
      ISHE1 = 1
      GO TO 10
C
C
  610 CONTINUE
C  SET UP ARRAY OF FINAL DATA
      F(1) = ALPHA(J)
      F(4) = CA
      F(5) = CY
      F(6) = CN
      F(7) = BETA(J)
      F(9) = CLM
      F(10)= CLL
      F(11)= CLN
C  RESOLVE NORMAL AND AXIAL FORCES IN LIFT AND DRAG DIRECTION
      CD = CA*COS(ALPHAR)*COS(BETAR)-CY*SIN(PHIR)*SIN(ALPHAR)*COS(BETAR)-
     1  -CY*COS(PHIR)*SIN(BETAR)+CN*COS(PHIR)*SIN(ALPHAR)*COS(BETAR)    -
     2  -CN*SIN(PHIR)*SIN(BETAR)
      CL = -CA*SIN(ALPHAR)-CY*SIN(PHIR)*COS(ALPHAR)+CN*COS(PHIR)        -
     1  *COS(ALPHAR)
C  CALCULATE SIDE FORCE COEFFICIENT - WIND AXIS
      CYPRIM = CA*COS(ALPHAR)*SIN(BETAR)-CY*SIN(PHIR)*SIN(ALPHAR)       -
     1  *SIN(BETAR)+CY*COS(PHIR)*COS(BETAR)+CN*COS(PHIR)*SIN(ALPHAR)    -
     2  *SIN(BETAR)+CN*SIN(PHIR)*COS(BETAR)
C
C  SET UP REMAINING PARAMETERS
      F(2) = CD
      F(3) = CL
      IF (CD .EQ. 0.0) CD = 0.000001
      F(8) = CL / CD
C
C
  620 RETURN
      END
*DECK SHKE
      SUBROUTINE SHKEXP(N,M,IPRCK,NX,NY,NZ,DELTA,PFS,MACH,              -
     1  DELTAR,IMPACI,CPSTAG,TFS,CP,ISHADI,IFIRST,LL,IPRINT,            -
     2  RHOFS,AFS,VIS,V,RENO,ISMODE)
C
C***********************************************************************
C*** THIS SUBROUTINE CALCULATES LOCAL CONDITIONS ON AN ELEMENT USING ***
C*** SHOCK EXPANSION THEORY.                                         ***
C***********************************************************************
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /GDATA/LTOT,J,SYMFCT,IORN,IGTYPE,L
      COMMON /FSBS/FS,BS
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      DIMENSION  TITLE(15),ANGLE(3),FS(8),BS(8),NXI( 30),NYI( 30),      -
     1  NZI(30),BSS(8,30),FSS(8)
      INTEGER  CASE,PAGE,ERROR
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      REAL  MACH,NX,NY,NZ,NXI,NYI,NZI,NU
C
      IORIEN = IORN
      DO 5 I=1,8
    5  FSS(I) = FS(I)
C
C  CHECK IF THIS ELEMENT IS THE FIRST ELEMENT IN A COLUMN OF ELEMENTS
      IF( IORIEN.EQ.0.AND.N.EQ.1 .OR. IORIEN.EQ.1.AND.M.EQ.1 ) GO TO 60
C
C***********************************************************************
C******  CALCULATIONS FOR ELEMENTS THAT ARE NOT INITIAL ROW ELEMENTS ***
C***********************************************************************
      IF (IORIEN .EQ. 0) II = M
      IF (IORIEN.EQ.0 .AND. M.GT.MMAX) GO TO 60
      IF (IORIEN .EQ. 1) II=N
      SINNU =SQRT((NY*NZI(II)-NZ*NYI(II))**2+(NZ*NXI(II)-NX*NZI(II))**2 -
     1      +(NX*NYI(II)-NY*NXI(II))**2)
      NU = ARSIN(SINNU) * 0.5729578E02
      NU = ABS(NU)
      IF (NX .LT. NXI(II)) NU = -NU
      ANGLE(2) = ABS(NU)
C
C  SET UP DATA FOR COMPR OR EXPAND
      DO 10 I=1,8
   10  FS(I) = BSS(I,II)
       ISDET = 0
      IF (NU.GT.-0.00001 .AND. NU.LT.0.00001) GO TO 30
      IF (NU .LT. 0.0) GO TO 20
      CALL COMPR (ANGLE,MER,IPRCK,CPSTAG,ISDET,IFIRST,CP)
      GO TO 50
   20 CALL EXPAND (ANGLE,MER,IPRCK,ISDET,CP)
      GO TO 50
C
   30 DO 40 I=1,8
   40 BS(I) = FS(I)
   50 CP=(BS(2)/FSS(2)-1.0)/(0.5*GAM*FSS(6)*FSS(6))
      GO TO 150
C
C***********************************************************************
C************  CALCULATION FOR INITIAL ELEMENT OF EACH ROW  ************
C***********************************************************************
C
C  CHECK IF THERE ARE TOO MANY INITIAL ELEMENTS (MAXIMUM OF 100)
   60 IF ((IORIEN.EQ.0 .AND. M.GT. 30).OR.(IORIEN.EQ.1.AND.N.GT. 30))   -
     1   GO TO 170
C
      MMAX = M
      IF (IORIEN.EQ.0) II=M
      IF (IORIEN.EQ.1) II=N
      IF (ISMODE .EQ. 1) GO TO 150
C
      ANGLE(2) = ABS(DELTA)
      NU = DELTA
      ISDET = 0
C
C  CHECK IF IMPACT OR SHADOW
      IF (DELTAR .LE. 0.0) GO TO 110
C
C  IMPACT FLOW  ******************
      GO TO (200,200,70,200,80,200,200,200,200,200,200,200,90),IMPACI
C
C  TANGENT WEDGE
   70 CALL COMPR (ANGLE,MER,IPRCK,CPSTAG,ISDET,IFIRST,CP)
      GO TO 150
C
C  TANGENT CONE EMPIRICAL
   80 ANGLE(1) = DELTA
      CALL CONE (ANGLE,CP,0)
      GO TO 150
C  DELTA WING EMPIRICAL FOR SHOCK-EXPANSION CALCS.
   90 DELDLW = DELTAR
      IF (DELDLW .LT. 0.01745) DELDLW = 0.01745
      EMNS = FS(6) * SIN(DELDLW)
      EMNS = 2.*(GAM+1.0)/(GAM+3.)*EMNS+EXP((0.25*(GAM+1.)              -
     1      -2.*(GAM+1.0)/(GAM+3.))*EMNS)
      CP = 4./(FS(6)**2*(GAM+1.))*(EMNS**2-1.0)
      P2P1I = 0.5*GAM*FS(6)**2*CP + 1.0
      BS(2) = P2P1I * FS(2)
      TINT2 = ((GAM+1.0)**2 *EMNS*EMNS)/((2.0*GAM*EMNS*EMNS-(GAM-1.))*  -
     1        ((GAM-1.0)*EMNS*EMNS + 2.0))
      BS(6) = SQRT((FS(6)**2-(4.0*(EMNS-1.0)*(GAM*EMNS+1.0))/           -
     1        ((GAM+1.0)**2*EMNS))*TINT2)
      BS(3) = FS(3) / TINT2
      BS(1) = RHOFS * (BS(2)/PFS) * (TFS/BS(3))
      BS(4) = SQRT((GAM-1.)*GASCP*BS(3))
      IF(BS(3).GE.AV1) BS(5) = 2.27E-8*BS(3)**1.5/(BS(3)+198.6)
      IF(BS(3).LT.AV1) BS(5) = AV2*BS(3)**AV3
      BS(7) = BS(4) * BS(6)
      BS(8) = BS(1) * BS(7) / BS(5)
      GO TO 150
C  SHADOW FLOW **************************
  110 GO TO (120,120,130,120,120,120,120),ISHADI
  120 GO TO 200
C  EXPANSION FROM FREESTREAM
  130 ISDET = 0
      CALL EXPAND (ANGLE,MER,IPRCK,ISDET,CP)
C
  150 NXI(II) = NX
      NYI(II) = NY
      NZI(II) = NZ
  151 DO 152 I=1,8
  152  BSS(I,II) = BS(I)
C
C
      IF (IPRINT .NE. 0) WRITE (TAPEOT,160) LL,N,M,BS(2),BS(3),BS(6),CP,-
     1  NU,FS(2),FS(3),FS(6)
  160 FORMAT (1H0,32H  SHK-EXP. LOCAL CONDITIONS  LL=I5,4H  N=I4,       -
     1  4H  M=I4,4H  P=E12.5,4H  T=E12.5,7H  MACH=F7.3,5H  CP=E12.5,/   -
     2  1H ,28X,13HTURN ANGLE  =F9.4,4X,3HPI=E12.5,4H TI=E12.5,         -
     3  7H MACHI=F7.3 )
      DO 165 I=1,8
  165  FS(I) = FSS(I)
      RETURN
C
C
  170 WRITE (TAPEOT,180)
  180 FORMAT (1H ,48H****NUMBER OF INITIAL ELEMENTS CANNOT EXCEED 100   -
     1 57H FOR SHOCK-EXPANSION CALCULATIONS.  CHANGE INPUT DATA**** )
      WRITE (TAPEOT,190) IORIEN,LL,N,M
  190 FORMAT (1H ,10X,8HIORIEN =I2,5X,                                  -
     1  5X,4HLL =I5,5X,3HN =I5,5X,3HM =I5)
      ERROR  = 3
      RETURN
  200 WRITE (TAPEOT,210)
  210 FORMAT (1H ,47H****DURING SHOCK-EXPANSION CALCULATIONS PROGRAM    -
     1 59H TRIED TO USE WRONG INITIAL ELEMENT METHOD--CHECK INPUT****)
      ERROR  = 3
      RETURN
C
      END
*DECK BLUN
      SUBROUTINE BLUNT(PFS,MACH,TFS,VIS,RHOFS,RB,RENO,TAU,IVISIN)
C
C
C  THIS SUBROUTINE CALCULATES THE VISCOUS FORCES ON A BLUNT
C  FACED BODY FOLLOWING THE APPROACH SUGGESTED BY L. GOLDBERG IN
C  G. E. REPORT R66SD21 (SEE ALSO R65SD50).  THE STRAIGHT VISCOUS
C  FORCES ARE CALCULATED USING A SIMPLE CORRELATION FORMULA BASED ON
C  THE RESULTS OF SCALA AND GILBERT.  THE LOW DENSITY OR VISCOUS
C  INTERACTION EFFECTS ARE BASED ON NUMERICAL RESULTS OF HIGHER
C  ORDER BOUNDARY-LAYER SOLUTIONS.  THE SHEAR EFFECTS ARE A COMPLICATED
C  FUNCTION OF THE INVERSE DENSITY RATIO AND THE SHOCK REYNOLDS
C  NUMBER.  IN THE PRESENT CALCULATIONS THESE LOW DENSITY
C  EFFECTS ARE DETERMINED FROM A SET OF EXPONENTIAL FUNCTION
C  CURVES WHICH HAVE BEEN MATCHED TO THE NUMERICAL RESULTS.
C  CALCULATION OPTIONS ARE CONTROLLED BY THE FLAG IVISIN,
C
C        IVISIN      GAS       VISCOUS-INTERACTION
C           0        IDEAL          NO
C           1        IDEAL          YES
C           2        REAL           NO
C           3        REAL           YES
C
C  THE LAST TWO OPTIONS ARE NOT YET AVAILABLE.
C*******M*******D. N. SMYTH PROGRAM AUTHOR*****************************
C
C
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
C
      REAL MACH
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      DATA AOD,   BOD,      A1,    B1,     ODK,  XOEV,   EVK,    EPS  / -
     1     1.0,  3.2907,  0.667,  1.1111, -2.0,  -0.3,  -1.80,  0.01  /
      G = GAM
      GCP = GASCP
      GP1 = G + 1.0
      GM1 = G - 1.0
C
      IF (IVISIN.LT.2) GO TO 10
C
C  REAL GAS SOLUTION (TO BE ADDED).
C
C  IDEAL GAS SOLUTION.  ALL EQUATIONS FROM NACA TR-1135.
C  INVERSE DENSITY RATIO ACROSS NORMAL SHOCK.
   10 RORAI = (GM1 + 2.0/MACH**2)/GP1
C
C  TEMPERATURE BEHIND NORMAL SHOCK.
      T2 = TFS*(2.*G*MACH**2-GM1)*(GM1*MACH**2+2.)/(GP1*MACH)**2
C
C  CALCULATE VISCOSITY.
      IF (T2.LT.AV1) VIS2 = AV2*T2**AV3
      IF (T2.GE.AV1) VIS2 = 2.27E-8*T2**1.5/(T2+198.6)
C
C  REYNOLDS NUMBER BEHIND NORMAL SHOCK.
      RES = RENO*RB*VIS/VIS2
C
C  CALCULATE SHEAR COEFFICIENT.
   20 CFO = 2.0/(SQRT(RES)*(1.0 - 0.495*SQRT(RORAI)))
C
C  CHECK IF LOW DENSITY VISCOUS-INTERACTION EFFECTS DESIRED.
      TWBL = 1.0
      IF((IVISIN.EQ.0).OR.(IVISIN.EQ.2))GO TO 70
C
C  DETERMINE LOW DENSITY EFFECTS.  CALCULATE INDEPENDENT VARIABLE, EX.
      EX = ALOG10(RES*RORAI**3)
C
C  CHECK BOUNDARIES
      IF (EX.GT.3.0) GO TO 70
      TWBL = 0.0
      IF (EX.LT.-6.0) GO TO 70
C
C
   30 F1 = A1 - B1*EX
      IF  (EX.GT.-3.0) GO TO 40
      Y2 = F1
      GO TO 60
C
C
   40 DXEV = EX - XOEV
      IF  (ABS(DXEV).LT.EPS)GO TO 50
      Y2 = F1 + (1.0 - F1)/(1.0 - EXP(EVK*DXEV))
      GO TO 60
C
C
   50 Y2 = F1 + B1/(EVK*(1.0 + 0.5*EVK*DXEV))
   60 DXOD = EX - (AOD + BOD*ALOG10(RORAI))
      TWBL = Y2/(1.0 + EXP(ODK*DXOD))
C
C
   70 TAU = TWBL*CFO
C
C
C  THE FOLLOWING CARDS ARE FOR CHECKOUT ONLY (SET IPRINT = 1).
C
      IPRINT = 0
C
      IF (IPRINT.NE.1) RETURN
      WRITE (TAPEOT,80) RORAI,RES,EX,CFO,TAU
   80 FORMAT(1H1, 2X7HRORAI =,E13.6,5X5HRES =,E13.6,5X11H(E**3)RES =,   -
     1      E13.6,5X5HCFO =,E13.6, 5X5HTAU =,E13.6)
      WRITE (TAPEOT,90) PFS,TFS,RHOFS,VIS,RENO
   90 FORMAT(1H0,2X7H  PFS =,E13.6,5X5HTFS =,E13.6,5X11H    RHOFS =,    -
     1            E13.6,5X5HVIS =,E13.6, 4X6HRENO =,E13.6)
      RETURN
      END
*DECK CPIN
      SUBROUTINE  CPINPT(INP, LTOTAB)
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /GDATA/LTOT,J,SYMFCT,IORN,IGTYPE,L
      COMMON /ABDATA/NAB,ALPHA(20),BETA(20),ROL(20),CDELTA(20),QI(20),  -
     1               RI(20),PI(20)
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /SURFN2/INORM,ISURF,IX,IY,IZ,U1,UL,V1,VL,CR,CT,CHX,N2,N3,  -
     1    XO,YO,ZO,AP11,AP12,AP13,AP21,AP22,AP23,AP31,AP32,AP33,        -
     2  FLOWC(7),XI(500),YI(500),B(503,7),XKF(503),AA(5999),            -
     A  XB(4), YB(4), ZB(4),                                            -
     3  NDSET,IABSET,IR,LORG(20),ISR(20),NS,ISFR,IVIS, IFTYP,IFLOW,     -
     4    BX(2,20), BY(2,20), NB
C
      DIMENSION                  ELEM(25), LCOND(3), DINFL(6)
      DIMENSION TITLE(15), INP(20), LTOTAB(20)
      DIMENSION TITLEM(10),IMTAB(9),LOAB(20),TITLES(10),TITLEA(10),     -
     1  TITLER(10),E4(12),E2(13),DAT(6),                  IDTYP(5),     -
     3   E3(17), ISF(5), FDATA(34), XP(4,6)
C
      INTEGER ERROR,PAGE,CASE,SYMFCT
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      EQUIVALENCE  (FDATA(1), LCOND(1)), (FDATA(4), ELEM(1)),           -
     1  (FDATA(29), DINFL(1))
      DATA RC/0.1745329E-1/
C  FOR CHECKOUT SET IPRINT = 1
      IPRINT = 0
C
C
      WRITE(TAPEOT,5)
    5 FORMAT(1H1,45HPREVIOUSLY SAVED SURFACE DATA WILL BE USED TO,      -
     1            17H CALCULATE FORCES)
C
C  BEGIN ALPHA-BETA CYCLE
      REWIND TAPEF
      DO 2000 IAB = 1,NAB
      ICT = 0
      ISYM = 1
      IF (INP(IAB)   .EQ. 0)  GO TO 2000
C
C  INPUT REGION ID INFO AND NORMALIZATION FLAGS
   10 READ (TAPEIN,20) LASTR,NDSET,IABSET,IR,INORM,ISURF,IPF,           -
     1  (ISR(I),I=1,10), ISF,NN
   20  FORMAT (I1,3I2,3I1,   10I2,5I1,5X,I3)
C
      WRITE (TAPEOT,32) LASTR,NDSET,IABSET,IR,INORM,ISURF,              -
     1    IPF, (ISR(I),I=1,10), ISF
   32  FORMAT (1H0,5X,6HLASTR=,I2,4X,6HNDSET=,I2,4X,7HIABSET=,I2,4X,    -
     1 4HIR =,I2,             4X,6HINORM=,I2,4X,6HISURF=,I2,4X,         -
     2    /1H , 4HIPF=, I2, 4X4HISR=, 10I3, 4X4HISF=, 5I2/)
C
C  READ BOUNDARY POINTS FOR NORMALIZATION
      DO 38 I=1,4
   38 READ (TAPEIN,50) XB(I),YB(I),ZB(I)
   50  FORMAT (3F10.0)
C
C  READ IN MASTER DIRECTORY
      ITAG10 = 1
      CALL READMS (10,TITLEM,10,ITAG10)
C     READ(10'ITAG10) TITLEM
      ITAG10 = 2
      CALL READMS (10,IMTAB,9,ITAG10)
C     READ(10'ITAG10) IMTAB
C
C  CHECK DATA SET NUMBER
      IF (IMTAB(1) .GE. NDSET)  GO TO 40
      WRITE (TAPEOT,39) NDSET,IMTAB(1)
   39  FORMAT (1H0,9H**NDSET =,I2,31H IS GREATER THAN THE NUMBER OF ,   -
     1 44HDATA SETS ACTUALLY ON UNIT 10. PROGRAM HALT.  )
      STOP
C
C
C  READ IN FLOW DATA SET DIRECTORY
   40 ITAG10 = IMTAB(NDSET + 4)
      CALL READMS (10,E4,12,ITAG10)
C     READ (10'ITAG10) E4
      DO 41 I=1,10
   41 TITLES(I) = E4(I)
      MACH = E4(11)
      NABS = E4(12)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,LOAB,20,ITAG10)
C     READ(10'ITAG10)  LOAB
C
C  READ IN FLOW REGION DIRECTORY FOR REQUESTED ALPHA-BETA SET
      ITAG10 = LOAB(IABSET)
      CALL READMS (10,E2,13,ITAG10)
C     READ (10'ITAG10) E2
      DO 42 I=1,10
   42 TITLEA(I) = E2(I)
      ALPHAS = E2(11)
      BETAS = E2(12)
      NREG = E2(13)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,LORG,20,ITAG10)
C     READ(10'ITAG10)  LORG
C
C
C
C
C  READ IN REQUESTED FLOW REGIONS
C
C
C
      ITAG10 = LORG(IR)
      CALL READMS (10,E3,17,ITAG10)
C     READ (10'ITAG10) E3
      DO 91 I=1,10
   91 TITLER(I) = E3(I)
      DO 92 I=1,5
      IDTYP(I) = E3(I+10)
   92 CONTINUE
      IFTYP = IDTYP(1)
      IFLOW = IDTYP(2)
      IVIS = 0
      IF (IFTYP .EQ. 4)  IVIS = 1
   94 NSREG = E3(16)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,DAT, 6,ITAG10)
C     READ (10'ITAG10) DAT
      XO     = DAT( 1)
      YO     = DAT( 2)
      ZO     = DAT( 3)
      PSIO     = DAT( 4)
      THETO     = DAT( 5)
      PHIO     = DAT( 6)
C
      SINT = SIN(THETO*RC)
      COST = COS(THETO*RC)
      COSPS = COS(PSIO*RC)
      SINPS = SIN(PSIO*RC)
      SINP = SIN(PHIO*RC)
      COSP = COS(PHIO*RC)
      AP11 = COST*COSPS
      AP12 = COST*SINPS
      AP13 =-SINT
      AP21 =-COSP*SINPS + SINP*SINT*COSPS
      AP22 = COSP*COSPS + SINP*SINT*SINPS
      AP23 = SINP*COST
      AP31 = SINP*SINPS + COSP*SINT*COSPS
      AP32 =-SINP*COSPS + COSP*SINT*SINPS
      AP33 = COSP*COST
C
C  SET INDICES FOR NORMALIZING DATA
      IF(INORM .LE. 0)  GO TO 100
      GO TO (110,130,140,150),INORM
C
C  NORMALIZE W.R.T.  A,R
  100 IX = 4
      IY = 5
      IZ = 6
      GO TO 190
C
C  NORMALIZE W.R.T.  X,Y
  110 IX = 1
      IY = 2
      IZ = 3
      GO TO 190
C
C  NORMALIZE W.R.T.  X,Z
  130 IX = 1
      IY = 3
      IZ = 2
      GO TO 190
C
C  NORMALIZE W.R.T.  Y,Z
  140 IX = 2
      IY = 3
      IZ = 1
      GO TO 190
C
C  NORMALIZE W.R.T.  A,PHI
  150 IX = 4
      IY = 6
      IZ = 5
      GO TO 190
C
C  CALCULATE NORMALIZING LENGTHS
  190 CONTINUE
      DO 95 I = 1,4
      XX =XB(I) - XO
      YY =YB(I) - YO
      ZZ =ZB(I) - ZO
      XP(I,1) = XX*AP11 + YY*AP12 + ZZ*AP13
      XP(I,2) = XX*AP21 + YY*AP22 + ZZ*AP23
      XP(I,3) = XX*AP31 + YY*AP32 + ZZ*AP33
      XP(I,4)  =  XP(I,1)
      XP(I,5)  =  SQRT(XP(I,2)**2 + XP(I,3)**2)
      IF (XP(I,2) .EQ. 0.0)  GO TO 194
      XP(I,6)  =  ATAN2(XP(I,2), -XP(I,3))
      IF(XP(I,6).LT.0.0) XP(I,6) = 6.283185308 + XP(I,6)
      GO TO 95
  194 XP(I,6)  =  0.0
      IF (XP(I,3) .GT. 0.0)  XP(I,6) = 3.141592654
   95 CONTINUE
C
C
      U1 = XP(1,IX)
      UL = XP(2,IX) - U1
      CR = UL
      IF (ISURF  .EQ. 1)  GO TO 96
      V1 = XP(3,IY)
      VL = XP(4,IY) - V1
      GO TO 97
C
   96 UL = XP(3,IX)
      CT = XP(4,IX) - XP(3,IX)
      V1 = XP(1,IY)
      VL = XP(3,IY) - V1
   97 CONTINUE
C
C
C
C  ESTABLISH SUB-REGION COUNTERS
      IF (ISR(1) .GT. 0)  GO TO 210
      NS = NSREG
      DO 200 I = 1,NS
  200 ISR(I) = I
      GO TO 230
  210 NS = 0
      DO 220 I = 1,10
      IF (ISR(I) .LE. 0)  GO TO 230
  220 NS = NS + 1
C
  230 IF (NS .LE. NSREG)  GO TO 250
      WRITE(TAPEOT,240)  NS,NSREG
  240 FORMAT(1H0,28HSURFACE INTERPOLATION.  THE ,I2,13H SUB-REGIONS ,   -
     1 36HREQUESTED IS GREATER THAN AVAILABLE./1H0, 12HCOUNTER SET ,    -
     2 11HTO NSREG = , I2, 20H AND CASE CONTINUES.)
C
      NS = NSREG
  250 CONTINUE
C
C
      REWIND TAPEE
      INTAPE = TAPEC
      ITAPES = TAPED
C
      I = 0
      ISFR = 0
      ICYCLE = 0
      NTOT = 0
      IF (IPF .NE. 0)  GO TO 1520
 1100 CONTINUE
      ERROR = 0
      CALL SFNTR2
      IF (ERROR .EQ. 1)  GO TO 1520
C
C  SPECIAL OUTPUT OF FITTED CP SURFACE
C
      IF (NN .EQ. 0)  GO TO 1110
      IF (NN-1)  1101, 1110, 1102
 1101 NN = IABS(NN)
      WRITE(TAPEOT,4090)  NN
 4090 FORMAT(1H1,40HSPECIAL  OUTPUT  OF  FITTED  CP  SURFACE/           -
     1       1H0,10H      AT  , I3,  15H  INPUT  POINTS/                -
     2       1H0, 6X,1HX, 9X,1HY, 9X,1HZ, 9X,2HCP)
      IC = 0
      IT = 1
      DO 5030 II = 1,NN
      READ(TAPEIN,5000)  XX,YY,ZZ, IFLG,IROW,JJ,IPAN
 5000 FORMAT( 3F10.3, 24X,I3,4X,I4,3X,I4,4X,I4)
      CALL VALU2(IT,XX,YY,ZZ,XN,YN,ZN,IC,IT,INR,                        -
     1    DINFL(1),DINFL(2),DINFL(3),DINFL(4),DINFL(5),DINFL(6))
C
C  CHECK IF POINT WAS WITHIN BOUNDARIES
      IF (INR .EQ. 0)  IFLG = -1
C
      WRITE(TAPEOT,5010)  XX,YY,ZZ,DINFL(5),IFLG,IROW,JJ,IPAN
 5010 FORMAT(1H0, 4F10.3, 10X,4H I/O,I3,4H ROW,I4,3H PT,I4,4H PAN,I4)
      WRITE(TAPEG, 5020)  XX,YY,ZZ,DINFL(5),IFLG,IROW,JJ,IPAN
 5020 FORMAT(     4F10.3, 10X,4H I/O,I3,4H ROW,I4,3H PT,I4,4H PAN,I4)
 5030 CONTINUE
      GO TO 1110
 1102 CONTINUE
      NN2 = 2*NN
      NN3 = 3*NN
      IC = 1
      IT = 1
      DN = 1.0/(NN-1)
      XN = -DN
C
      WRITE(TAPEOT,4000) NN,DN
 4000 FORMAT(1H1,19X, 40HSPECIAL  OUTPUT  OF  FITTED  CP  SURFACE/      -
     1       1H0,24X,  5HNN = ,I3, 12X,5HDY = , F6.3/)
C
      DO 3100 II = 1,NN
      XN = XN + DN
      YN = -DN
      DO 3000 J = 1,NN
      YN = YN + DN
      CALL VALU2(IC,XX,YY,ZZ,XN,YN,ZN,IC,IT,INR,                        -
     1    DINFL(1),DINFL(2),DINFL(3),DINFL(4),DINFL(5),DINFL(6))
      XX = XX - XO
      YY = YY - YO
      ZZ = ZZ - ZO
      ELEM(1) = XX*AP11 + YY*AP12 + ZZ*AP13
      ELEM(2) = XX*AP21 + YY*AP22 + ZZ*AP23
      ELEM(3) = XX*AP31 + YY*AP32 + ZZ*AP33
      ELEM(4) = ELEM(1)
      ELEM(5) = SQRT(ELEM(2)**2 + ELEM(3)**2)
      IF (ELEM(2) .EQ. 0.0)  GO TO 2094
      ELEM(6) = ATAN2(ELEM(2), -ELEM(3))
      GO TO 2095
 2094 ELEM(6) = 0.0
      IF (ELEM(3) .GT. 0.0)  ELEM(6) = 3.141592654
 2095 CONTINUE
      AA(J)     = ELEM(IX)
      AA(NN +J) = ELEM(IY)
      AA(NN2+J) = ELEM(IZ)
      AA(NN3+J) = DINFL(5)
 3000 CONTINUE
C
      WRITE(TAPEOT,4010)  XN
 4010 FORMAT(1H0, 1X,5HXN = , F6.3)
C
      J2 = 0
 3010 J1 = J2 + 1
      J2 = J1 + 5
      IF (J2 .GT. NN)  J2 = NN
      WRITE(TAPEOT,4020)  (J, J=J1,J2)
 4020 FORMAT(1H0, 13XI3, 5(17XI3))
      WRITE(TAPEOT,4030)  (AA(J), J=J1,J2)
 4030 FORMAT(3H X1, 6E20.6)
      WRITE(TAPEOT,4040)  (AA(NN+J), J=J1,J2)
 4040 FORMAT(3H X2, 6E20.6)
      WRITE(TAPEOT,4050)  (AA(NN2+J),J=J1,J2)
 4050 FORMAT(3H X3, 6E20.6)
      WRITE(TAPEOT,4060)  (AA(NN3+J),J=J1,J2)
 4060 FORMAT(3H CP, 6E20.6)
      IF (J2 .NE. NN)  GO TO 3010
 3100 CONTINUE
C
C
C
C  START CYCLE ON THE ELEMENTS
 1110 REWIND INTAPE
      REWIND ITAPES
      ISAVET = ITAPES
      ICYCLE = ICYCLE + 1
      IF (IPRINT .NE. 1)  GO TO 1111
      WRITE(TAPEOT,9030)  INTAPE,ITAPES,LTOT
 9030 FORMAT(1H0,23HAT LOOP 1500, INTAPE = ,I3, 5X9HITAPES = ,I3,       -
     1    5X7HLTOT = ,I5)
 1111 CONTINUE
      DO 1500 II = 1,LTOT
      IF (ICYCLE .GT. 1)  GO TO 1050
C     READ(TAPEE,END=1510) IG4,ELEM
      READ(TAPEE) IG4,ELEM
      IF (EOF(TAPEE)) 1510,1012
 1012 LCOND(2) = ELEM(1)
      GO TO 1090
 1050 CONTINUE
C     READ(INTAPE,END=1510)  IG4,FDATA
      READ(INTAPE)  IG4,FDATA
C     IF (EOF(INTAPE)) 1510,1080
C
C  CHECK IF ELEMENT ALREADY PROCESSED ON PREVIOUS CYCLE
 1080 IF (LCOND(1) .NE. 0)  GO TO 1200
 1090 CONTINUE
      IF (ISYM .EQ. 1)  GO TO 1095
C  REFLECT ELEMENT TO -Y SIDE AND CHANGE ORDER OF POINTS 2 AND 4
      IG4 = -IG4
      ELEM(5) = -ELEM(5)
      ELEM(8) = -ELEM(8)
      ELEM(15) = -ELEM(15)
      ELEM(16) = -ELEM(16)
      ELEM(17) = -ELEM(17)
      ELEM(18) = -ELEM(18)
      ELT = ELEM(12)
      ELEM(12) = ELEM(14)
      ELEM(14) = ELT
      ELT = ELEM(16)
      ELEM(16) = ELEM(18)
      ELEM(18) = ELT
      ELT = ELEM(20)
      ELEM(20) = ELEM(22)
      ELEM(22) = ELT
C
C  INTERPOLATE FOR SURFACE PROPERTIES AT CENTROIDS.
 1095 CONTINUE
      IC = 0
      IT = 1
      CALL VALU2(1, ELEM(7), ELEM(8), ELEM(9), XN, YN, ZN,IC,IT,INR,    -
     1    DINFL(1), DINFL(2), DINFL(3), DINFL(4), DINFL(5), DINFL(6))
C
      LCOND(1) = 0
      IF (INR .EQ. 0)  GO TO 1200
      LCOND(1) = 1
      NTOT = NTOT + 1
C
C  SAVE RESULTS ON TEMPORARY UNIT
 1200 CONTINUE
      WRITE(ITAPES)  IG4,FDATA
C
C  GO TO NEXT ELEMENT
 1500 CONTINUE
 1510 CONTINUE
C
C
 1520 I = I + 1
      IF (I .GT. 5)  GO TO 1600
      ISFR = ISF(I)
      IF (IPRINT .NE. 1)  GO TO 1525
      WRITE(TAPEOT,9010)  I,ISFR,ICYCLE,NTOT,ERROR
 9010 FORMAT(1H0, 4HI = ,I3, 5X7HISFR = ,I3, 5X9HICYCLE = ,I3,          -
     1  7HNTOT = ,I5, 5X8HERROR = ,I3)
 1525 CONTINUE
      IF (ISFR .EQ. 0)  GO TO 1600
      IF (ICYCLE .EQ. 0)  GO TO 1100
      IF (NTOT .EQ. LTOT)  GO TO 1600
C
C  SWITCH TAPES (ONLY IF ERROR = 0)
      IF (ERROR .NE. 0)  GO TO 1100
      I1 = ITAPES
      ITAPES = INTAPE
      INTAPE = I1
      GO TO 1100
C
C  SAVE RESULTS ON TAPEF
 1600 CONTINUE
      IF (ICYCLE .GT. 0)  GO TO 1560
      WRITE(TAPEOT,1550)
 1550 FORMAT(1H1,47HSURFACE  INTERPOLATION (CPINT) CANNOT BE MADE./     -
     154H0CHECK THAT PROPER FLOW FIELD DATA HAS BEEN SPECIFIED.,        -
     2 16H RUN IS STOPPED.)
      STOP
C
 1560 REWIND ISAVET
      IF (IPRINT .NE. 1)  GO TO 1601
      WRITE(TAPEOT,9020)  LTOT,INTAPE,ISAVET
 9020 FORMAT(1H0, 7HLTOT = ,I5, 5X9HINTAPE = ,I3, 5X9HISAVET = ,I3)
 1601 CONTINUE
      DO 1610 L = 1,LTOT
C     READ(ISAVET,END=1620)  IG4,FDATA
      READ(ISAVET)  IG4,FDATA
      IF (EOF(ISAVET))  1620,1605
 1605 WRITE(TAPEF)  IG4,FDATA,NDSET,IABSET,NS,IPF,ISFR
      ICT = ICT + 1
      IF (IPRINT .NE. 1)  GO TO 1610
      WRITE(TAPEOT,9000)  IG4,LCOND,ELEM,DINFL
 9000 FORMAT(1H0, 6HIG4 = ,I5, 5X8HLCOND = , 3I3/                       -
     1  8H ELEM = , 10E12.4/1H ,7X10E12.4/1H , 7X,5E12.4/               -
     2  9H DINFL = , 6E12.4)
 1610 CONTINUE
 1620 CONTINUE
C
C  CHECK FOR SYMMETRY REQUIREMENTS
      IF (SYMFCT.EQ.1 .OR. BETAS.EQ.0.0 .OR. ISYM.EQ.2)  GO TO 1900
      REWIND TAPEE
      ISYM = 2
      GO TO 10
C
 1900 LTOTAB(IAB) = ICT
C  END OF ALPHA-BETA LOOP
 2000 CONTINUE
C
      REWIND TAPEE
      REWIND TAPEF
C
      RETURN
      END
*DECK FLNT
      SUBROUTINE    FLNTRP
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /GDATA/LTOT,JJ,SYMFCT,IORN,IGTYPE,LL
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /ABDATA/NAB,ALPHA(20),BETA(20),ROL(20),CDELTA(20),QI(20),  -
     1               RI(20),PI(20)
      COMMON /INTERF/INT,ISHE(20),NSHE(100),I9,ISHEF,INF(20,22),        -
     1               DINF(20,6),LTOTAB(20)
      INTEGER ERROR,SYMFCT,PAGE,CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      DIMENSION  ELEM(25), XIN(4), YIN(4), ZIN(4)
      DIMENSION  TITLE(15), TITLEM(10), TITLES(10), TITLEA(10),         -
     1          TITLER(10)
      DIMENSION  IFL(4), IMTAB(9), LOAB(20), LORG(20), LOFF(5), LOCD(5),-
     1         IDTYP(5), IFC(4,6), ITFLAG(4), XO(4), YO(4), ZO(4),      -
     2         PSIO(4), THETO(4), PHIO(4), COST(4), SINT(4), COSS(4),   -
     3         SINS(4), IX(4), IY(4), A1(4), A2(4),                     -
     4         XI(103),YI(103),FI(103),XB(4,100),XX(4,103),YY(4,103),   -
     5         COORDS(6), FLOW(103,6), XKF(103),A( 5429),  B(103,6),    -
     6         CFB(4,2,53),  CFF(4,103,6),RB(2), XP(6), LCOND(3),       -
     7         DINFL(6),DAT( 6), FIC(4,2), FLOWC(4,6),E1(25),E2(13),    -
     8         E3(17),E4(12), E5(25), E6(6), E7(3),                     -
     9         ISR(4),ISF(4),IFD(4,6),LOSF(5),PHIC(4)
      COMMON/SURFN2/WK(11197)
      EQUIVALENCE (WK(1), XI(1)), (WK(104), YI(1)), (WK(207), FI(1)),   -
     1    (WK(310), XX(1,1)), (WK(722), YY(1,1)), (WK(1134), FLOW(1,1)),-
     2   (WK(1752), B(1,1)), (WK(2370), XKF(1)), (WK(2473), CFF(1,1,1)),-
     3   (WK(4945),XB(1,1)), (WK(5345), CFB(1,1,1)), (WK(5769), A(1))
      REAL  MACH
      DATA RC, NX, MX, MX1,    KD                                       -
     1    /0.1745329E-1,   103, 6, 1,      2000/
      TFX(XO,X,Y,Z) = XO + AP11*X + AP21*Y + AP31*Z
      TFY(YO,X,Y,Z) = YO + AP12*X + AP22*Y + AP32*Z
      TFZ(ZO,X,Y,Z) = ZO + AP13*X + AP23*Y + AP33*Z
C  FOR CHECKOUT,SET FLAG IPRINT=1
      IPRINT = 0
      REWIND  TAPEF
C  CYCLE ON ALPHA, BETA
      DO 2000  IAB = 1,NAB
C
C  DATA SET NUMBER AND ALPHA-BETA SET NUMBER
      NDSET = INF(IAB,2)
      IABSET = INF(IAB,3)
C
      WRITE(TAPEOT,3000) IAB, NDSET, (INF(IAB,I),I=1,10)
 3000 FORMAT(1H1,30HFLOW INTERPOLATION SUBROUTINE /1H0,                 -
     1  6HIAB = ,I3, 5X 8HNDSET = ,I3,5X6HINF = ,10(5XI3))
      WRITE(TAPEOT,3010)  ALPHA(IAB), BETA(IAB)
 3010 FORMAT(1H0, 8HALPHA = , F10.6,  7HBETA = , F10.6)
C  DEFINE FLOW FIELD REGIONS
      NFR = 0
      J = 8
      DO 10 I = 1,4
      J = J + 3
      IF (INF(IAB,J) .EQ. 0)  GO TO 20
      NFR = NFR + 1
      IFL(NFR) = INF(IAB,J)
      ISR(NFR) = INF(IAB,J+1)
      ISF(NFR) = INF(IAB,J+2)
   10 CONTINUE
C
C  CHECK IF DEFAULT TO FREE STREAM
   20 IF (NFR .EQ. 0)  GO TO 1010
      WRITE(TAPEOT,3020) NFR,  (IFL(NR), NR=1,NFR)
 3020 FORMAT(1H0,35HNUMBER OF FLOW REGIONS REQUESTED = ,I3, 10X,        -
     1       4(5XI3))
C
C  READ IN MASTER DIRECTORY
      ITAG10 = 1
      CALL READMS (10,TITLEM,10,ITAG10)
C     READ(10'ITAG10) TITLEM
      ITAG10 = 2
      CALL READMS (10,IMTAB,9,ITAG10)
C     READ(10'ITAG10) IMTAB
C
C  CHECK DATA SET NUMBER
      IF (IMTAB(1) .GE. NDSET)  GO TO 40
C
C
C
C  READ IN FLOW DATA SET DIRECTORY
   40 ITAG10 = IMTAB(NDSET + 4)
      CALL READMS (10,E4,12,ITAG10)
C     READ (10'ITAG10) E4
      DO 41 I=1,10
   41 TITLES(I) = E4(I)
      MACH = E4(11)
      NABS = E4(12)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,LOAB,20,ITAG10)
C     READ(10'ITAG10)  LOAB
C
C  READ IN FLOW REGION DIRECTORY FOR REQUESTED ALPHA-BETA SET
      ITAG10 = LOAB(IABSET)
      CALL READMS (10,E2,13,ITAG10)
C     READ (10'ITAG10) E2
      DO 42 I=1,10
   42 TITLEA(I) = E2(I)
      ALPHAS = E2(11)
      BETAS = E2(12)
      NREG = E2(13)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,LORG,20,ITAG10)
C     READ(10'ITAG10)  LORG
C
C  CHECK IF STORED A-B SET CONSISTENT WITH REQUEST
C     IF (ALPHA(IAB) .NE. ALPHAS)  GO TO 50
C     IF (BETA(IAB) .EQ. BETAS)  GO TO 60
+
C  A-B NOT CONSISTENT
C  50 STOP
C
C
C
C  READ IN REQUESTED FLOW REGIONS
C  FIRST CHECK IF REQUESTED REGIONS AVAILABLE
   60 CONTINUE
      DO 70 NR = 1,NFR
      IF (IFL(NR) .GT. NREG)  GO TO 80
   70 CONTINUE
      GO TO 90
C
C
   80 WRITE(6, 85)   NR, NDSET
   85 FORMAT(1H, 26HREQUESTED FLOW REGION NO. ,I2, 12H OF DATA SET, I3, -
     1     15H NOT AVAILABLE.)
      STOP
C
C  READ IN FLOW FIELD REGIONS AND CALCULATE COEFFICIENTS
   90 CONTINUE
      DO 1000 NR = 1,NFR
      IR = IFL(NR)
      ITAG10 = LORG(IR)
      CALL READMS (10,E3,17,ITAG10)
C     READ (10'ITAG10) E3
      DO 91 I=1,10
   91 TITLER(I) = E3(I)
      DO 92 I=1,5
      IDTYP(I) = E3(I+10)
   92 CONTINUE
      NSREG = E3(16)
      ITFLAG(NR) = E3(17)
C
C  CHECK FLOW-FIELD DATA TYPE FLAG
      IF (IDTYP(1) .EQ. 1) GO TO 98
      WRITE (TAPEOT,97)
   97  FORMAT (1H0,45H**IN ATTEMPTING TO READ FLOW FIELD DATA FROM ,    -
     1 52HUNIT 10 IDTYP(1) WAS NOT EQUAL TO 1 AS IT SHOULD BE.,         -
     2 14H PROGRAM STOP.  )
      STOP
   98 IF (IDTYP(2) .EQ. 1) GO TO 1600
      ITAG10 = ITAG10 + 1
      CALL READMS (10,DAT, 6,ITAG10)
C     READ (10'ITAG10) DAT
      XO(NR) = DAT( 1)
      YO(NR) = DAT( 2)
      ZO(NR) = DAT( 3)
      PSIO(NR) = DAT( 4)
      THETO(NR) = DAT( 5)
      PHIO(NR) = DAT( 6)
C
C  LOCATE SUB-REGION
      IS = 0
      IG10 = LORG(IR) + 4 + ISR(NR)
   93 CONTINUE
      CALL READMS(10, E1, 25, IG10)
C     READ(10'IG10)  E1
      DO 94 I = 1,5
      LOFF(I) = E1(I)
      IFC(NR,I) = E1(I+5)
      LOCD(I) = E1(I+10)
      IFD(NR,I) = E1(I+15)
   94 CONTINUE
C
      IF (IS .NE. 0)  GO TO 96
      DO 95 I = 1,5
   95 LOSF(I) = E1(I+20)
C
C  CHECK IF SECONDARY FLOW
      IF (ISF(NR) .EQ. 0)  GO TO 96
      IS = ISF(NR)
      IG10 = LOSF(IS)
      GO TO 93
C
   96 CONTINUE
C
      WRITE(TAPEOT,3030) TITLEM, IMTAB, TITLES, MACH, NABS,LOAB,        -
     1   TITLEA, ALPHAS, BETAS, NREG, LORG, TITLER, IDTYP, LOFF
 3030 FORMAT(1H0, 7HTITLEM=,10A4, 7H IMTAB=, 9I4,/1H , 7HTITLES=,10A4,  -
     1 7H MACH =, F6.3, 6H NABS=,I3,/ 1H ,4X,5HLOAB,20I4,/1H, 7HTITLEA=,-
     210A4, 8H ALPHAS=,F6.3, 7H BETAS=,F6.3, 8H NREG = ,I3,/1H , 4X,    -
     3 5HLORG=,20I4,/1H , 7HTITLER=,10A4, 7H IDTYP=,5I2, 7H LOFF =,5I4)
      WRITE(TAPEOT,3040)   (IFC(NR,I),I=1,5), ITFLAG(NR), XO(NR),       -
     1    YO(NR), ZO(NR),  PSIO(NR), THETO(NR), PHIO(NR)
 3040 FORMAT(1H0, 6HIFC = , 5I5, 9HITFLAG = ,I3,6H XO = , F10.6,        -
     1 6H YO = ,F10.6,6H ZO = ,F10.6/1H0,                               -
     2 8H PSIO = , F10.6,10H  THETO = , F10.6,  9H  PHIO = ,F10.6)
C  SET INDICES TO BE USED TO NORMALIZE DATA
      INORM = 0
      IF (INORM - 1) 100,110,120
C
C  NORMALIZE W.R.T.  A,R
  100 IX(NR) = 4
      IY(NR) = 5
      GO TO 190
C
C  NORMALIZE W.R.T.  X,Y
  110 IX(NR) = 1
      IY(NR) = 2
      GO TO 190
C
  120 IF (INORM - 3) 130,140,100
C  NORMALIZE W.R.T   X,Z
  130 IX(NR) = 1
      IY(NR) = 3
      GO TO 190
C
C  NORMALIZE W.R.T.  Y,Z
  140 IX(NR) = 2
      IY(NR) = 3
      GO TO 190
C
C
C
C  BRING THE FLOW DATA INTO CORE
C  START WITH BOUNDARY ONE
  190 IC = 0
      IB = 0
      MF = 1
      LS = 2
      IXX = IX(NR)
      IYY = IY(NR)
      A1(NR) = 0.0
      A2(NR) = 0.0
      DO 195 J = 1,6
  195 FLOWC(NR,J) = 0.0
      GO TO 205
  200 A1(NR) = XI(1)
      A2(NR) = XI(NB1)
  205 IB = IB + 1
      NB1 = IFC(NR,IB)
      N3 = NB1 + 3
      ITAG10 = LOFF(IB)
      FIC(NR,IB) = 0.0
C
      DO 210 I = 1,NB1
      IC = IC + 1
      CALL READMS (10,E4,12,ITAG10)
C     READ (10'ITAG10) E4
      ITAG10 = ITAG10 + 1
      DO 207 II=1,6
  207 COORDS(II) = E4(II)
      DO 208 II=1,6
  208 FLOW(IC,II) = E4(II+6)
      XI(I) = COORDS(IXX)
      YI(I) = 1.0
      FI(I) = COORDS(IYY)
      FIC(NR,IB) = FIC(NR,IB) + FI(I)
      DO 206 J = 1,6
  206 FLOWC(NR,J) = FLOWC(NR,J) + FLOW(IC,J)
      XB(NR,IC) = COORDS(IXX)
      XX(NR,IC) = COORDS(IXX)
      YY(NR,IC) = COORDS(IYY)
  210 CONTINUE
C
      WRITE(TAPEOT, 3050) IB,  (XI(I), YI(I),  FI(I), I = 1,NB1)
 3050 FORMAT(1H0, 5HIB = ,I2/  (1H ,F20.6))
C  CHECK IF COEFFICIENTS ALREADY AVAILABLE
      IF (LOCD(IB) .NE. 0) GO TO 250
      FIC(NR,IB) = FIC(NR,IB)/NB1
      DO 215 I = 1,NB1
  215 FI(I) = FI(I) - FIC(NR,IB)
C
C  CALCULATE BOUNDARY COEFFICIENTS
      CALL ROWFM1(NB1,MF,XI,YI,FI,XKF,NX,MX1,LS, TAPEB)
C
      CALL SOLVIT(A,N3,MF,KD, TAPEB,TAPEC,TAPED,TAPEB, B,NX,MX, NERR)
C
C  CHECK IF MATRIX SINGULAR
      IF (NERR .EQ. 0)  GO TO 230
      WRITE(6, 220)
  220 FORMAT(1H1, 16HMATRIX SINGULAR.)
C
C
C  PUT COEFFICIENTS INTO PROPER ARRAY AND STORE
  230 CONTINUE
      DO 240 I = 1,N3
  240 CFB(NR,IB,I) = B(I,1)
C
      ITAG10 = IMTAB(2)
      LOCD(IB)= ITAG10
      I6 = N3 + 3
      IFD(NR,IB) = I6
      I2 = 0
  241 I1 = I2 + 1
      I2 = I2 + 25
      IF (I2 .GT. N3)  I2 = N3
      II = 0
      DO 242 I = I1,I2
      II = II + 1
  242 E5(II)= B(I,1)
C
      CALL WRITMS(10,E5,25,ITAG10)
C
C     WRITE(10'ITAG10)  E5
      ITAG10 = ITAG10 + 1
      IF (I2 .LT. N3)  GO TO 241
      E7(1) = A1(NR)
      E7(2) = A2(NR)
      E7(3) = FIC(NR,IB)
C
      CALL WRITMS(10,E7,3,ITAG10)
C
C     WRITE(10'ITAG10)  E7
      IMTAB(2) = ITAG10 + 1
      WRITE(TAPEOT, 3055) IB,  (B(I,1),I=1,N3), A1(NR),A2(NR),FIC(NR,IB)
 3055 FORMAT(1H0, 8HBOUNDARY,I2,13H COEFFICIENTS//(1H , 7F18.6))
C
      GO TO 300
C
C  READ IN BOUNDARY ONE COEFFICIENTS
  250 ITAG10 = LOCD(IB)
      I6 = N3 + 3
      I2 = 0
  251 I1 = I2 + 1
      I2 = I2 + 25
      IF (I2 .GT. N3) I2 = N3
C
      CALL READMS(10,E5,25,ITAG10)
C
C     READ(10'ITAG10)  E5
      ITAG10 = ITAG10 + 1
      II = 0
      DO 252 I = I1,I2
      II = II + 1
  252 CFB(NR,IB,I) = E5(II)
      IF (I2 .LT. N3)  GO TO 251
C
      CALL READMS(10,E7,3,ITAG10)
C
C     READ(10'ITAG10)  E7
      A1(NR) = E7(1)
      A2(NR) = E7(2)
      FIC(NR,IB) = E7(3)
C
C
C  NOW DO BOUNDARY TWO
  300 IF (IB .EQ. 1)  GO TO 200
C
C  BOTH BOUNDARIES COMPLETE.  READ ADDITIONAL DATA (IF ANY).
      NB1 = IFC(NR,5)
      IF (NB1 .EQ. 0)  GO TO 320
      ITAG10 = LOFF(5)
      DO 310 I = 1,NB1
      IC = IC + 1
      CALL READMS (10,E4,12,ITAG10)
C     READ (10'ITAG10) E4
      ITAG10 = ITAG10 + 1
      DO 301 J=1,6
  301 COORDS(J) = E4(J)
      DO 302 J=1,6
  302 FLOW(IC,J) = E4(J+6)
      XX(NR,IC) = COORDS(IXX)
      YY(NR,IC) = COORDS(IYY)
      DO 305 J = 1,6
  305 FLOWC(NR,J) = FLOWC(NR,J) + FLOW(IC,J)
  310 CONTINUE
C
C  NORMALIZE DATA POINTS
  320 IFC(NR,6) = IC
      AX = 1.0/(A2(NR) - A1(NR))
C
C**NOTE.  BOUNDARY ONE POINTS HAVE RN = 0.0
C         BOUNDARY TWO POINTS HAVE RN = 1.0
C
      NB1 = IFC(NR,1)
      DO 330  I = 1,NB1
      XI(I) = (XX(NR,I) - A1(NR))*AX
  330 YI(I) = 0.0
      N1 = NB1 + 1
      NB1 = NB1 + IFC(NR,2)
      DO 340  I =N1,NB1
      XI(I) = (XX(NR,I) - A1(NR))*AX
  340 YI(I) = 1.0
C
      N2 = IFC(NR,6)
      IF (IFC(NR,5) .EQ. 0)  GO TO 501
C
C  FIELD POINTS
      N1 = N2 - IFC(NR,5) + 1
      DO 500  I = N1,N2
      IB = 0
      IC = 0
C
C  CALCULATE BOTH BOUNDARY VALUES
  410 IB = IB + 1
      N = IFC(NR,IB)
      N3 = N + 3
      RB(IB) = CFB(NR,IB,1) + CFB(NR,IB,2)*XX(NR,I) + FIC(NR,IB)
      J3 = 3
      DO 450 J = 1,N
      J3 = J3 + 1
      UIJ = 0.0
      IC = IC + 1
      IF (XX(NR,I) .EQ. XX(NR,IC))  GO TO 430
      TR1 = (XX(NR,I) - XX(NR,IC))**2
      UIJ = TR1*ALOG(TR1)
  430 RB(IB) = RB(IB) + UIJ*CFB(NR,IB,J3)
  450 CONTINUE
      IF (IB .EQ. 1)  GO TO 410
C
C  BOTH BOUNDARIES CALCULATE, NORMALIZE POINT
      XI(I) = (XX(NR,I) - A1(NR))*AX
      YI(I) = (YY(NR,I) - RB(1))/(RB(2) - RB(1))
  500 CONTINUE
C
  501 WRITE(TAPEOT, 3060) NR
 3060 FORMAT(1H0,36HNORMALIZED FLOW FIELD DATA REGION = ,I3, 10X,       -
     1 21HXI, YI, (FI(J),J=1,6)//)
      WRITE(TAPEOT, 3070)    (XI(I), YI(I), (FLOW(I,J),J=1,6), I=1,N2)
 3070 FORMAT(1H ,  8F16.6)
C  RELOAD COORDINATE ARRAYS
  502 DO 503  I = 1,N2
      YY(NR,I) = YI(I)
  503 XX(NR,I) = XI(I)
C
C  CHECK IF FLOW FIELD COEFFICIENTS AVAILABLE
      N3 = N2 + 3
      IF (LOCD(5) .NE. 0) GO TO 550
      DO 505 J = 1,6
      FLOWC(NR,J) = FLOWC(NR,J)/N2
      DO 504 I = 1,N2
  504 FLOW(I,J) = FLOW(I,J) - FLOWC(NR,J)
  505 CONTINUE
C
C  CALCULATE COEFFICIENTS FOR FLOW FIELD DATA
      NB1 = N2
      LS = 0
      CALL ROWFM1(NB1,MX,XI,YI,FLOW,XKF,NX,MX,LS, TAPEB)
C
      CALL SOLVIT(A,N3,MX,KD, TAPEB,TAPEC,TAPED,TAPEB, B,NX,MX, NERR)
C
      IF (NERR .NE. 0)   WRITE(6, 220)
C
C  PUT COEFFICIENTS IN PROPER ARRAYS AND STORE
      DO 520  I = 1,N3
      DO 510  J = 1,6
  510 CFF(NR,I,J) = B(I,J)
  520 CONTINUE
C
      ITAG10 = IMTAB(2)
      LOCD(5) = ITAG10
      I6 = N3*6
      I2 = 0
  521 I1 = I2 + 1
      I2 = I2 + 4
      IF (I2 .GT. N3)  I2 = N3
      II = 0
      DO 523 I = I1,I2
      DO 522 J = 1,6
      II = II + 1
  522 E5(II) = B(I,J)
  523 CONTINUE
C
      CALL WRITMS(10,E5,24,ITAG10)
C
C     WRITE(10'ITAG10)  E5
      ITAG10 = ITAG10 + 1
      IF (I2 .LT. N3)  GO TO 521
      DO 524 J = 1,6
  524 E6(J) = FLOWC(NR,J)
C
      CALL WRITMS(10,E6,6,ITAG10)
C
C     WRITE(10'ITAG10)  E6
      IFD(NR,5) = I6 + 6
      IMTAB(2) = ITAG10 + 1
      WRITE(TAPEOT, 3065)   ((B(I,J), J=1,6),I=1,N3),(FLOWC(NR,J),J=1,6)
 3065 FORMAT(1H0,17HFLOW COEFFICIENTS//(1H , 6F18.6))
C
C  RESET DIRECTORIES
      DO 526 I = 1,5
      E1(I+10) = LOCD(I)
  526 E1(I+15) = IFD(NR,I)
      CALL WRITMS(10, E1, 25, IG10)
C     WRITE(10'IG10)  E1
      ITAG10 = 2
      CALL WRITMS(10, IMTAB, 9, ITAG10)
C     WRITE(10'ITAG10)  IMTAB
      GO TO 600
C
C  READ IN FLOW FIELD COEFFICIENTS
  550 ITAG10 = LOCD(5)
      I6 = N3*6
      I2 = 0
  551 I1 = I2 + 1
      I2 = I2 + 4
      IF (I2 .GT. N3) I2 = N3
C
      CALL READMS(10,E5,24,ITAG10)
C
C     READ(10'ITAG10) E5
      ITAG10 = ITAG10 + 1
      II = 0
      DO 553 I = I1,I2
      DO 552 J = 1,6
      II = II + 1
  552 CFF(NR,I,J) = E5(II)
  553 CONTINUE
      IF (I2 .LT. N3)  GO TO 551
C
      CALL READMS(10,E6,6,ITAG10)
C
C     READ(10'ITAG10)  E6
      DO 554 J = 1,6
  554 FLOWC(NR,J) = E6(J)
C
C
C
  600 CONTINUE
      PHIC(NR) = COORDS(6)
      COST(NR) = COS(THETO(NR)*RC)
      SINT(NR) = SIN(THETO(NR)*RC)
      COSS(NR) = COS(PSIO(NR)*RC)
      SINS(NR) = SIN(PSIO(NR)*RC)
 1000 CONTINUE
C
C  COEFFICIENTS FOR ALL REQUESTED REGIONS ARE IN CORE
C  START CYCLE ON ELEMENT DATA
 1010 CONTINUE
      IF(IPRINT.EQ.0) GO TO 3079
      WRITE(TAPEOT, 3080)
 3080 FORMAT(1H0,48HINTERPOLATED DATA. NR, XP(IXX), YP(IYY), AN, RN,,   -
     117H(DINFL(I), I=1,6)//)
      WRITE(TAPEOT, 3082) LTOT
 3082 FORMAT(1H , 7HLTOT = , I5//)
 3079 CONTINUE
      ISYM = 1
      ICT = 0
      REWIND  TAPEE
 1011 DO 1500 II = 1,LTOT
C     READ (TAPEE,END=1510) IG4,ELEM
      READ (TAPEE) IG4,ELEM
      IF (EOF(TAPEE)) 1510,1012
 1012 LCOND(2) = ELEM(1)
      IF (ISYM .EQ. 1) GO TO 1090
      IG4 = -IG4
C  REFLECT ELEMENT TO -Y SIDE AND CHANGE ORDER OF PTS 2 AND 4
      ELEM(5) = -ELEM(5)
      ELEM(8) = -ELEM(8)
      ELEM(15) = -ELEM(15)
      ELEM(16) = -ELEM(16)
      ELEM(17) = -ELEM(17)
      ELEM(18) = -ELEM(18)
      ELT = ELEM(12)
      ELEM(12) = ELEM(14)
      ELEM(14) = ELT
      ELT = ELEM(16)
      ELEM(16) = ELEM(18)
      ELEM(18) = ELT
      ELT = ELEM(20)
      ELEM(20) = ELEM(22)
      ELEM(22) = ELT
 1090 IF (NFR .EQ. 0)  GO TO 1155
      XP(1) = ELEM(7)
      XP(2) = ELEM(8)
      XP(3) = ELEM(9)
C  SET FLOW FIELD REGION NUMBER
      NR = 1
C
C  TRANSFORM COORDS TO FLOW PLANE ORIENTATION
 1100 CONTINUE
      AA11 = COST(NR)*COSS(NR)
      AA12 = COST(NR)*SINS(NR)
      AA13 = -SINT(NR)
      AA21 = -SINS(NR)
      AA22 = COSS(NR)
      AA23 = 0.0
      AA31 = -SINT(NR)*COSS(NR)
      AA32 = -SINT(NR)*SINS(NR)
      AA33 = -COST(NR)
      DX = XP(1) - XO(NR)
      DY = XP(2) - YO(NR)
      DZ = XP(3) - ZO(NR)
C  AXIAL COORD
      XP(4)=AA11*DX + AA12*DY + AA13*DZ
C  CHECK FOR MERIDIAN (ITFLAG=0) OR PARALLEL (ITFLAG=1)
      IF(ITFLAG(NR).EQ.0) GO TO 1101
      PHI = PHIC(NR)
      GO TO 1103
 1101 CONTINUE
C
C  RADIAL COORD
      YP = AA21*DX + AA22*DY
      ZP = AA31*DX + AA32*DY + AA33*DZ
      XP(5) = SQRT(YP**2 + ZP**2)
C  ANGULAR COORD
      IF (YP .NE. 0.0)  GO TO 1102
      PHI = 0.0
      IF (ZP .EQ. 0.0)  GO TO 1103
 1102 PHI = ATAN2(YP,ZP)
 1103 XP(6) = PHI - PHIO(NR)
      SINP = SIN(PHI)
      COSP = COS(PHI)
C
      AP11 = AA11
      AP12 = AA12
      AP13 = AA13
      AP21 = COSP*AA21 - SINP*AA31
      AP22 = COSP*AA22 - SINP*AA32
      AP23 = -SINP*AA33
      AP31 = SINP*AA21 + COSP*AA31
      AP32 = SINP*AA22 + COSP*AA32
      AP33 = COSP*AA33
      IF(ITFLAG(NR).EQ.0) GO TO 1104
      XP(5) = AP31*DX + AP32*DY + AP33*DZ
 1104 CONTINUE
C  NORMALIZE COORDS FOR FLOW REGION.  FIRST FIND BOUNDARIES.
      IXX = IX(NR)
      IYY = IY(NR)
      IB = 0
      IC = 0
 1110 IB = IB + 1
      N1 = IFC(NR,IB)
      N3 = N1 + 3
      RB(IB) = CFB(NR,IB,1) + CFB(NR,IB,2)*XP(IXX) + FIC(NR,IB)
      J3 = 3
C
      DO 1150 J = 1,N1
      J3 = J3 + 1
      IC = IC + 1
      UIJ = 0.0
      IF (XP(IXX) .EQ. XB(NR,IC))  GO TO 1130
      TR1 = (XP(IXX) - XB(NR,IC))**2
      UIJ = TR1*ALOG(TR1)
 1130 RB(IB) = RB(IB) + UIJ*CFB(NR,IB,J3)
 1150 CONTINUE
      IF (IB .EQ. 1)  GO TO 1110
C
C  BOTH BOUNDARIES CALCULATED, FORM NORMALIZED COORDS.
      AN = (XP(IXX) - A1(NR))/(A2(NR) - A1(NR))
      RN = (XP(IYY) - RB(1))/(RB(2) - RB(1))
      IF(IPRINT.EQ.0) GO TO 1151
      WRITE(TAPEOT, 3083) RB
 3083 FORMAT(1H , 8HRB(1) = , F18.6, 10X, 8HRB(2) = , F18.6)
 1151 CONTINUE
C  TEST IF NORMALIZED COORDS WITHIN REGION
      IF ((AN .LT. 0.0))                    GO TO 1152
      IF ((RN .GE. 0.0) .AND. (RN .LE. 1.0))  GO TO 1200
C
C  POINT NOT WITHIN REGION,  GO TO NEXT REGION (IF SPECIFIED).
 1152 CONTINUE
      NR = NR + 1
      IF (NR .LE. NFR)  GO TO 1100
C
C  NOT WITHIN ANY SPECIFIED REGION.  DEFAULT TO FREE STREAM.
 1155 LCOND(1) = 0
      LCOND(3) = 0
      DO 1160 K = 1,6
 1160 DINFL(K) = 0.0
      GO TO 1400
C
C  INTERPOLATE FOR FLOW FIELD VARIABLES
 1200 CONTINUE
      N1 = IFC(NR,6)
      N3 = N1 + 3
      XKF(1) = 1.0
      XKF(2) = AN
      XKF(3) = RN
      J3 = 3
C
      DO 1250 J = 1,N1
      J3 = J3 + 1
      UIJ = 0.0
      TR1 = 0.0
      TR2 = 0.0
      IF (AN .EQ. XX(NR,J))  GO TO 1210
      TR1 = (AN - XX(NR,J))**2
 1210 IF (RN .EQ. YY(NR,J))  GO TO 1220
      TR2 = (RN - YY(NR,J))**2
 1220 RBIJ = TR1 + TR2
      IF (RBIJ .EQ. 0.0)  GO TO 1230
      UIJ = RBIJ*ALOG(RBIJ)
 1230 XKF(J3) = UIJ
 1250 CONTINUE
C
C  CALCULATE FUNCTIONS
      DO 1300 K = 1,6
      DINFL(K) = FLOWC(NR,K)
      DO 1290 J = 1,N3
      DINFL(K) = DINFL(K) + XKF(J)*CFF(NR,J,K)
 1290 CONTINUE
 1300 CONTINUE
C  TRANSFORM DIRECTION COSINES
      VX = DINFL(2)
      VY = DINFL(3)
      VZ = DINFL(4)
      VT = SQRT(VX**2 + VY**2 + VZ**2)
      DINFL(2) = TFX(0.0, VX, VY, VZ)/VT
      DINFL(3) = TFY(0.0, VX, VY, VZ)/VT
      DINFL(4) = TFZ(0.0, VX, VY, VZ)/VT
C
C  SAVE RESULTS
      LCOND(1) = 1
      LCOND(3) = NR
      IF(IPRINT.EQ.0) GO TO 3091
      WRITE(TAPEOT,3084) VX,VY,VZ
 3084 FORMAT(6H VX = ,F12.6,10H     VY = ,F12.6, 10H     VZ = ,F12.6)
 1400 CONTINUE
      IF(IPRINT.EQ.0) GO TO 3091
      WRITE(TAPEOT, 3085) LCOND,  (ELEM(I), I=4,10)
 3085 FORMAT(1H , 3I5, 2X, 7F14.6)
      WRITE(TAPEOT, 3090) NR, XP(IXX), XP(IYY), AN, RN,(DINFL(I),I=1,6)
 3090 FORMAT(1H , I3, 10F12.6)
 3091 CONTINUE
      IF (LCOND(3) .NE. 0)  GO TO 3100
      IFLNR = 0
      ISRNR = 0
      ISFNR = 0
      GO TO 3110
 3100 IFLNR = IFL(NR)
      ISRNR = ISR(NR)
      ISFNR = ISF(NR)
 3110 CONTINUE
      WRITE(TAPEF) IG4,LCOND,ELEM,DINFL,NDSET,IABSET,IFLNR,ISRNR,ISFNR
      ICT = ICT + 1
C
C  GO TO NEXT ELEMENT
 1500 CONTINUE
 1510 CONTINUE
C  CHECK FOR SYMMETRY REQUIRMENTS
      IF (SYMFCT.EQ.1 .OR. BETAS.EQ.0.0 .OR. ISYM.EQ.2) GO TO 2010
      REWIND TAPEE
      ISYM = 2
      GO TO 1011
C
C  UNIFORM FLOW FIELD IS ON DATA STORAGE UNIT.  LOAD INTO DINF ARRAY.
 1600 ITAG10 = LORG(IR) + 5
      CALL READMS (10,DINFL,6,ITAG10)
C     READ (10'ITAG10) DINFL
      DO 1610 I=1,6
 1610 DINF(IAB,I) = DINFL(I)
      GO TO 2000
C
 2010 LTOTAB(IAB) = ICT
C  THIS MEANS THAT TAPEF MUST BE FILLED ON THE SAME RUN THAT THE
C  FORCES ARE CALCULATED SINCE THERE IS NO OTHER WAY TO FILL UP THE
C  LTOTAB ARRAY WITH THE PROPER ELEMENT COUNTS.
C  END OF ALPHA-BETA LOOP
 2000 CONTINUE
C
      REWIND TAPEE
      REWIND TAPEF
C
      RETURN
      END
*DECK VAL2
      SUBROUTINE VALU2(N,X,Y,Z,XN,YN,ZN,IC,IT,INT,EMT,EMX,EMY,EMZ,POP,  -
     1    TOT)
C
      COMMON/SURFN2/INORM,ISURF,IX,IY,IZ,U1,UL,V1,VL,CR,CT,CHX,N2,N3,   -
     1    XO,YO,ZO,AP11,AP12,AP13,AP21,AP22,AP23,AP31,AP32,AP33,        -
     2  FLOWC(7),XI(500),YI(500),B(503,7),XKF(503),AA(5999),            -
     A  XB(4), YB(4), ZB(4),                                            -
     3  NDSET,IABSET,IR,LORG(20),ISR(20),NS,ISFR,IVIS, IFTYP,IFLOW,     -
     4    BX(2,20), BY(2,20), NB
C
      DIMENSION X(N),Y(N),Z(N),INT(N),EMT(N),EMX(N),EMY(N),EMZ(N),      -
     1    POP(N),TOT(N),VT(6),XT(6),FI(7), BP(2)
C
C
      DO 500 I = 1,N
      IF (IC .EQ. 1)  GO TO 70
C
C  TRANSFORM COORDS
      XX = X(I) - XO
      YY = Y(I) - YO
      ZZ = Z(I) - ZO
C
      XT(1) = XX*AP11 + YY*AP12 + ZZ*AP13
      XT(2) = XX*AP21 + YY*AP22 + ZZ*AP23
      XT(3) = XX*AP31 + YY*AP32 + ZZ*AP33
      XT(4)  =  XT(1)
      XT(5)  =  SQRT(XT(2)**2 + XT(3)**2)
      IF (XT(2) .EQ. 0.0)  GO TO 40
      XT(6)  =  ATAN2(XT(2),-XT(3))
      IF(XT(6).LT.0.0) XT(6) = 6.283185308 + XT(6)
      GO TO 50
   40 XT(6) = 0.0
      IF (XT(3) .GT. 0.0)  XT(6) = 3.141592654
   50 CONTINUE
C
C  NORMALIZE COORDS
      YN = (XT(IY) - V1)/VL
      IF (ISURF .EQ. 1)  GO TO 60
      XN = (XT(IX) - U1)/UL
      GO TO 70
   60 CHX = CR + (CT-CR)*YN
      XLE = U1 + (UL-U1)*YN
      XN = (XT(IX) - XLE)/CHX
C
C  CHECK IF WITHIN SURFACE BOUNDARIES
   70 IF (XN .LT. 0.0)  GO TO 80
      IF (XN .GT. 1.0)  GO TO 80
      IF (YN .LT. 0.0)  GO TO 80
      IF (YN .GT. 1.0)  GO TO 80
C
C  CHECK IF WITHIN FLOW BOUNDARIES
      IB = 0
  800 IB = IB + 1
      DO 810 I1 = 1,NB
      J = I1
      IF (YN .LT. BY(IB,I1))  GO TO 820
  810 CONTINUE
C
  820 IF (J .EQ. 1)  J = 2
      DY = BY(IB,J) - BY(IB,J-1)
      IF (DY .EQ. 0.0)  GO TO 80
      DX = BX(IB,J) - BX(IB,J-1)
      BP(IB) = BX(IB,J-1) + (YN - BY(IB,J-1))*DX/DY
      GO TO (830,840), IB
  830 IF (XN .LT. BP(IB))  GO TO 80
      GO TO 800
  840 IF (XN .GT. BP(IB))  GO TO 80
C
C  POINT WITHIN FLOW BOUNDARIES
      XN = XN - BP(1)
      IF (IVIS .EQ. 0)  GO TO 850
      XN = XN/(BX(2,1) - BX(1,1))
      GO TO 860
  850 XN = XN/(BP(2) - BP(1))
  860 CONTINUE
C
C  POINT WITHIN BOUNDARIES.  CALCULATE VALUES.
      XKF(1) = 1.0
      XKF(2) = XN
      XKF(3) = YN
      J3 = 3
C
      DO 250 J = 1,N2
      J3 = J3 + 1
      UIJ = 0.0
      TR1 = 0.0
      TR2 = 0.0
      IF (XN .EQ. XI(J))  GO TO 210
      TR1 = (XN - XI(J))**2
  210 IF (YN .EQ. YI(J))  GO TO 220
      TR2 = (YN - YI(J))**2
  220 RBIJ = TR1 + TR2
      IF (RBIJ .EQ. 0.0)  GO TO 230
      UIJ = RBIJ*ALOG(RBIJ)
  230 XKF(J3) = UIJ
  250 CONTINUE
C
C
      DO 300 K = 1,7
      FI(K) = FLOWC(K)
      DO 290 J = 1,N3
      FI(K) = FI(K) + XKF(J)*B(J,K)
  290 CONTINUE
  300 CONTINUE
C
      INT(I) = 1
      EMT(I) = FI(1)
      FT = SQRT(FI(2)**2 + FI(3)**2 + FI(4)**2)
      IF (FT .EQ. 0.0)  FT = 1.0
      FI(2) = FI(2)/FT
      FI(3) = FI(3)/FT
      FI(4) = FI(4)/FT
      EMX(I) = FI(2)/CR
      EMY(I) = FI(3)/VL
      POP(I) = FI(5)
      TOT(I) = FI(6)
      ZN = FI(7)
C
C  TRANSFORM XN, YN, ZN  COORDS BACK TO (X, Y, Z)
      IF (IVIS .EQ. 0)  GO TO 310
      XN = XN*(BX(2,1) - BX(1,1))
      GO TO 320
  310 XN = XN*(BP(2) - BP(1))
  320 XN = XN + BP(1)
      XT(IY) = YN*VL + V1
      XT(IZ) = ZN
      IF (ISURF .EQ. 1)  GO TO 75
      XT(IX) = XN*UL + U1
      GO TO 76
   75 XT(IX) = XN*(CR+(CT-CR)*YN) + U1 + (UL-U1)*YN
   76 CONTINUE
      IF (INORM .LE. 0)  GO TO 79
      GO TO (81, 82, 83, 84),  INORM
C
C  INORM = 0     IX =4,  IY = 5,  IZ = 6
   79 XX = XT(IX)
      SINPH = SIN(XT(IZ))
      COSPH = COS(XT(IZ))
      YY =  XT(IY)*SINPH
      ZZ = -XT(IY)*COSPH
      VT(1) = FI(2)
      VT(2) = FI(3)*SINPH + FI(4)*COSPH
      VT(3) = FI(4)*SINPH - FI(3)*COSPH
      GO TO 90
C
C  INORM = 1     IX = 1,  IY = 2,  IZ = 3
   81 XX = XT(IX)
      YY = XT(IY)
      ZZ = XT(IZ)
  110 VT(1) = FI(2)
      VT(2) = FI(3)
      VT(3) = FI(4)
      GO TO 90
C
C  INORM = 2     IX = 1,  IY = 3,  IZ = 2
   82 XX = XT(IX)
      YY = XT(IZ)
      ZZ = XT(IY)
  111 VT(1) = FI(2)
      VT(2) = FI(4)
      VT(3) = FI(3)
      GO TO 90
C
C  INORM = 3     IX = 2,  IY = 3,  IZ = 1
   83 XX = XT(IZ)
      YY = XT(IX)
      ZZ = XT(IY)
  112 VT(1) = FI(4)
      VT(2) = FI(2)
      VT(3) = FI(3)
      GO TO 90
C
C  INORM = 4     IX = 4,  IY = 6,  IZ = 5
   84 XX = XT(IX)
      SINPH = SIN(XT(IY))
      COSPH = COS(XT(IY))
      YY = XT(IZ)*SINPH
      ZZ =-XT(IZ)*COSPH
      EMY(I) = EMY(I)/ZN
  113 VT(1) = FI(2)
      VT(2) = FI(4)*SINPH + FI(3)*COSPH
      VT(3) =-FI(4)*COSPH + FI(3)*SINPH
C
   90 IF (IC .EQ. 0)  GO TO 100
      X(I) = XO + XX*AP11 + YY*AP21 + ZZ*AP31
      Y(I) = YO + XX*AP12 + YY*AP22 + ZZ*AP32
      Z(I) = ZO + XX*AP13 + YY*AP23 + ZZ*AP33
C
C  CHECK COORDINATE SYSTEM FOR DIRECTION COSINES
  100 IF (IT .EQ. 1)  GO TO 500
  120 EMX(I) = VT(1)*AP11 + VT(2)*AP21 + VT(3)*AP31
      EMY(I) = VT(1)*AP12 + VT(2)*AP22 + VT(3)*AP32
      EMZ(I) = VT(1)*AP13 + VT(2)*AP23 + VT(3)*AP33
      GO TO 500
C
C  POINT NOT WITHIN BOUNDARIES.  SET FLAG AND GO TO NEXT POINT.
   80 INT(I) = 0
C
C
  500 CONTINUE
C
C
      RETURN
      END
*DECK SFN2
      SUBROUTINE  SFNTR2
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON/SURFN2/INORM,ISURF,IX,IY,IZ,U1,UL,V1,VL,CR,CT,CHX,N2,N3,   -
     1    XO,YO,ZO,AP11,AP12,AP13,AP21,AP22,AP23,AP31,AP32,AP33,        -
     2  FLOWC(7),XI(500),YI(500),B(503,7),XKF(503),AA(5999),            -
     A  XB(4), YB(4), ZB(4),                                            -
     3  NDSET,IABSET,IR,LORG(20),ISR(20),NS,ISFR,IVIS, IFTYP,IFLOW,     -
     4    BX(2,20), BY(2,20), NB
C
      DIMENSION TITLE(15),E4(12),E4B(12),E1(25),LOSF(5),                -
     1    FLOW(503, 7),            XT(6), VT(6), BP(2)
      DIMENSION A(77,77)
C
      INTEGER ERROR,       PAGE,CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      EQUIVALENCE  (FLOW(1,1), B(1,1))
      EQUIVALENCE (A(1,1), AA(1))
C
      DATA     NX, MX,     KD                                           -
     1    /                503, 7,    5999/
C  SET CHECKOUT PRINT FLAG
      IPRINT = 1
C
C  INITIALIZE CONSTANT ARRAY FLOWC
      DO 98 I = 1,7
   98 FLOWC(I) = 0.0
C
      IC = 0
      NB = 0
C
C  CYCLE ON SUB-REGIONS
      DO 600 II = 1,NS
      ISBR = ISR(II)
      IG10 = LORG(IR) + 4+ ISBR
      CALL READMS(10,E1,25,IG10)
C     READ(10'IG10)  E1
      LOFF = E1(1) + 0.01
      N1 = E1(6) + 0.01
C
      DO 500 J = 1,5
  500 LOSF(J) = E1(J+20) + 0.01
      IF (ISFR .EQ. 0)  GO TO 510
C
      IF (LOSF(ISFR) .LE. 0)  GO TO 600
C
C  READ IN SECONDARY FLOW POINTERS
      IG10 = LOSF(ISFR)
      CALL READMS(10,E1,25,IG10)
C     READ(10'IG10)  E1
      LOFF = E1(1) + 0.01
      N1 = E1(6) + 0.01
C
C  READ IN THE DATA
  510 ITAG10 = LOFF
      IBSF = 0
      IB = 0
      DO 310 I = 1,N1
      CALL READMS(10,E4,12,ITAG10)
C     READ(10'ITAG10)  E4
      ITAG10 = ITAG10 + 1
C
C  TRANSFORM DATA
  301 CONTINUE
      XX = E4(1) - XO
      YY = E4(2) - YO
      ZZ = E4(3) - ZO
C
      XT(1) = XX*AP11 + YY*AP12 + ZZ*AP13
      XT(2) = XX*AP21 + YY*AP22 + ZZ*AP23
      XT(3) = XX*AP31 + YY*AP32 + ZZ*AP33
      XT(4) = XT(1)
      XT(5) = SQRT(XT(2)**2 + XT(3)**2)
      IF (XT(2) .EQ. 0.0)  GO TO 304
      XT(6) = ATAN2(XT(2),-XT(3))
      IF(XT(6).LT.0.0) XT(6) = 6.283185308 + XT(6)
      GO TO 305
  304 XT(6) = 0.0
      IF (XT(3) .GT. 0.0)  XT(6) = 3.141592654
  305 CONTINUE
      IF (IBSF .EQ. 1)  GO TO 523
C
C  NORMALIZE THE DATA
      IC = IC + 1
      IF (IC .LE. 500)  GO TO 303
      WRITE (TAPEOT,302)
  302  FORMAT (1H0,48H*ROUTINE SFNTRP HAS ATTEMPTED TO LOAD MORE DATA , -
     1 62HPOINTS INTO INTERPOLATION ARRAYS THEN WE HAVE SPACE AVAILABLE.-
     2 ,/1H ,52H*CALCULATIONS WILL CONTINUE WITH ONLY THE FIRST 100 ,   -
     3  7HPOINTS.  )
      IC = IC - 1
      GO TO 311
  303 YI(IC) = (XT(IY) - V1)/VL
      IF (ISURF .EQ. 1)  GO TO 306
      XI(IC) = (XT(IX) - U1)/UL
      GO TO 307
  306 CHX = CR + (CT-CR)*YI(IC)
      XLE = U1 + (UL-U1)*YI(IC)
      XI(IC) = (XT(IX) - XLE)/CHX
C
  307 CONTINUE
C  CHECK IF WITHIN SURFACE BOUNDARIES.
      IF (XI(IC) .LT. 0.0)  GO TO 308
      IF (XI(IC) .GT. 1.0)  GO TO 308
      IF (YI(IC) .LT. 0.0)  GO TO 308
      IF (YI(IC) .GT. 1.0)  GO TO 308
C
C  POINT WITHIN SURFACE BOUNDARIES.  SET UP FLOW BOUNDARIES --
C  -- INITIALIZE AS SURFACE BOUNDARIES.
      IF (IB .EQ. 1)  GO TO 535
      IB = 1
      NB = NB + 1
      BX(1,NB) = 0.0
      BY(1,NB) = YI(IC)
      IF (ISFR .EQ. 0)  GO TO 520
      BX(1,NB) = XI(IC)
C
  520 CONTINUE
      IF (IFTYP .EQ. 2)  GO TO 530
      IF (ISFR .EQ. 5)   GO TO 530
      IG10SF = LOSF(ISFR+1)
      IF (IG10SF .LE. 0)  GO TO 530
      CALL READMS(10,E1,25,IG10SF)
C     READ(10'IG10SF)  E1
      LOFF = E1(1) + 0.01
      CALL READMS(10,E4B,12,LOFF)
C     READ(10'LOFF)  E4B
      E4(1) = E4B(1)
      E4(2) = E4B(2)
      E4(3) = E4B(3)
      IBSF = 1
      GO TO 301
  523 IBSF = 0
      YIB = (XT(IY) - V1)/VL
      IF (ISURF .EQ. 1)  GO TO 526
      XIB = (XT(IX) - U1)/UL
      GO TO 527
  526 CHB = CR + (CT-CR)*YIB
      XLB = U1 + (UL-U1)*YIB
      XIB = (XT(IX) - XLB)/CHB
C
  527 CONTINUE
      BX(2,NB) = XIB
      BY(2,NB) = YIB
      GO TO 535
C
C
C
  530 CONTINUE
      BX(2,NB) = 1.0
      BY(2,NB) = BY(1,NB)
C  POINT WITHIN BOUNDARIES.  SET UP FLOW ARRAYS.
  535 CONTINUE
C
C  TRANSFORM FLOW DIRECTION COSINES
      VT(1) = E4(8)*AP11 + E4(9)*AP12 + E4(10)*AP13
      VT(2) = E4(8)*AP21 + E4(9)*AP22 + E4(10)*AP23
      VT(3) = E4(8)*AP31 + E4(9)*AP32 + E4(10)*AP33
      SINPH =  SIN(XT(6))
      COSPH =  COS(XT(6))
      VT(4) =  VT(1)
      VT(5) =  VT(2)*SINPH - VT(3)*COSPH
      VT(6) =  VT(2)*COSPH + VT(3)*SINPH
      FLOW(IC,1)  =  E4(7)
      FLOW(IC,2)  =  VT(IX)
      FLOW(IC,3)  =  VT(IY)
      FLOW(IC,4)  =  VT(IZ)
      FLOW(IC,5)  =  E4(11)
      FLOW(IC,6)  =  E4(12)
      FLOW(IC,7) = XT(IZ)
      GO TO 310
C
C  POINT NOT WITHIN BOUNDARIES.  RESET COUNTER AND GO TO NEXT POINT.
  308 IC = IC - 1
C
  310 CONTINUE
  600 CONTINUE
      IF (IC .GT. 2)  GO TO 311
      WRITE(TAPEOT,1000)  IC
 1000 FORMAT(1H1, 5HONLY ,I3,29H POINTS WERE FOUND IN SFNTR2 ,          -
     1 56HTO BE WITHIN  SURFACE BOUNDARIES.  THIS IS INSUFFICIENT /     -
     2 55H TO USE THE SURFACE SPLINE.  RUN CONTINUES, BUT USER IS,      -
     3 38H CAUTIONED TO CHECK RESULTS CAREFULLY.)
      WRITE(TAPEOT,1005)  NDSET,IABSET,IR,ISR,ISFR
 1005 FORMAT(1H0,40HTHIS APPLIES TO THE FOLLOWING FLOW DATA /           -
     1 12H DATA SET = ,I3, 10X17HALPHA-BETA SET = ,I3,                  -
     2 10X14HFLOW REGION = ,I3/                                         -
     3 15H SUB-REGIONS = , 20I3/                                        -
     4 18H SECONDARY FLOW = ,I3)
      ERROR = 1
      RETURN
C
C  ALL THE SURFACE DATA ARE IN PROPER ARRAYS.
C
  311 N2 = IC
C
C  CHECK BOUNDARY POINTS
      IF (NB .GT. 1)  GO TO 700
      NB = 2
      BX(1,2) = BX(1,1)
      BX(2,2) = BX(2,1)
      BY(1,2) = 1.0
      BY(2,2) = 1.0
C
C  NORMALIZE TO FLOW BOUNDARIES (IN XI ONLY).
C  FIRST ARRANGE BOUNDARY DATA IN ORDER OF ASCENDING YI VALUES
  700 IB = 0
  710 IB = IB + 1
      I1 = 1
  720 YY = BY(IB,I1)
      I2 = I1 + 1
      J = 0
      DO 730 I = I2,NB
      IF (YY .LT. BY(IB,I))  GO TO 730
      J = I
      YY = BY(IB,I)
  730 CONTINUE
C
      IF (J .EQ. 0)  GO TO 740
      BY(IB,J) = BY(IB,I1)
      BY(IB,I1) = YY
C
  740 I1 = I1 + 1
      IF (I1 .LT. NB)  GO TO 720
      IF (IB .EQ. 1)  GO TO 710
C
C  BOUNDARY DATA NOW IN ORDER.  PROCEED WITH NORMALIZATION.
      IF (IPRINT .EQ. 0)  GO TO 770
      WRITE(TAPEOT,750)  NB
  750 FORMAT(1H1,18HBOUNDARY  DATA,   , I3, 8H POINTS./                 -
     1    1H0, 3X1HI, 7X2HX1, 12X2HY1, 12X2HX2, 12X2HY2//)
      WRITE(TAPEOT,760)  (I,BX(1,I),BY(1,I),BX(2,I),BY(2,I), I=1,NB)
  760 FORMAT(1H , I3, 4F14.6)
  770 CONTINUE
      IC = 0
      DO 900 I = 1,N2
      XX = XI(I)
      YY = YI(I)
      IB = 0
  800 IB = IB + 1
C
      DO 810 I1 = 1,NB
      J = I1
      IF (YY .LT. BY(IB,I1))  GO TO 820
  810 CONTINUE
C
  820 IF (J .EQ. 1)  J = 2
      DY = BY(IB,J) - BY(IB,J-1)
      IF (DY .EQ. 0.0)  GO TO 900
      DX = BX(IB,J) - BX(IB,J-1)
      BP(IB) = BX(IB,J-1) + (YY - BY(IB,J-1))*DX/DY
      GO TO (830,840), IB
  830 IF (XX .LT. BP(IB))  GO TO 900
      GO TO 800
  840 IF (XX .GT. BP(IB))  GO TO 900
C
C  POINT WITHIN FLOW BOUNDARIES
      IC = IC + 1
      XI(IC) = XX - BP(1)
      YI(IC) = YY
      IF (IVIS .EQ. 0)  GO TO 850
      XI(IC) = XI(IC)/(BX(2,1) - BX(1,1))
      GO TO 860
  850 XI(IC) = XI(IC)/(BP(2) - BP(1))
  860 FLOW(IC,1) = FLOW(I,1)
      FLOW(IC,2) = FLOW(I,2)
      FLOW(IC,3) = FLOW(I,3)
      FLOW(IC,4) = FLOW(I,4)
      FLOW(IC,5) = FLOW(I,5)
      FLOW(IC,6) = FLOW(I,6)
      FLOW(IC,7) = FLOW(I,7)
C
      DO 300 II = 1,7
  300 FLOWC(II) = FLOWC(II) + FLOW(IC,II)
C
  900 CONTINUE
      IF (IC .GT. 2)  GO TO 910
      WRITE(TAPEOT,1010)  IC
 1010 FORMAT(1H1, 5HONLY ,I3, 29H POINTS WERE FOUND IN SFNTR2,          -
     151HTO BE WITHIN FLOW BOUNDARIES.  THIS IS INSUFFICIENT/           -
     2 55H TO USE THE SURFACE SPLINE.  RUN CONTINUES, BUT USER IS,      -
     3 38H CAUTIONED TO CHECK RESULTS CAREFULLY.)
      WRITE(TAPEOT,1005)  NDSET,IABSET,IR,ISR,ISFR
      ERROR = 1
      RETURN
  910 CONTINUE
      N2 = IC
      N3 = N2 + 3
C  PRINT NORMALIZED ARRAYS
      IF (IPRINT .EQ. 0)  GO TO 330
      WRITE(TAPEOT,3060) NDSET, IABSET,IR
 3060 FORMAT(1H1,34HNORMALIZED SURFACE DATA.  NDSET = ,I2, 5X,          -
     1  9HIABSET = ,I2, 5X, 9HREGION = ,I2/1H0, T4,1HI, T13,2HXI,       -
     2  T27,2HYI, T39,4HMACH, T55,2HMX, T69,2HMY, T83,2HMZ,             -
     3   T95,4HP/P1, T106,4HT/T1, T125,2HZI//)
      WRITE(TAPEOT,3070) (I,XI(I), YI(I), (FLOW(I,J),J=1,7), I=1,N2)
 3070 FORMAT(1H , I3, 9F14.6)
C
C
  330 CONTINUE
C
      DO 350 J = 1,7
      FLOWC(J) = FLOWC(J)/N2
      DO 340 I = 1,N2
  340 FLOW(I,J) = FLOW(I,J) - FLOWC(J)
  350 CONTINUE
C
C
C  CALCULATE COEFFICIENT ARRAY (SURFACE SPLINE).
      LS = 0
      IF (N2 .GT. 74)  GO TO 360
      N7 = 77
      CALL  ROWFM2(N2, N7, XI, YI, A, LS)
C
C  SHIFT B-ARRAY TO INCLUDE 3 ROWS OF ZEROES
      N1 = N2 + 1
      N4 = N2 + 4
      DO 355 J = 1,7
      DO 353 I = 1,N2
  353 B(N4-I,J) = B(N1-I,J)
      DO 354 I = 1,3
  354 B(I,J) = 0.0
  355 CONTINUE
C
      D = 1.0
      CALL  MIS2(A, N3, N7, B, MX, NX, MX, NERR, D)
      GO TO 370
  360 CONTINUE
      CALL ROWFM1 (N2,MX,XI,YI,FLOW,XKF,NX,MX,LS,TAPEB)
C
      CALL SOLVIT(AA,N3,MX,KD,TAPEB,TAPEC,TAPED,TAPEB,B,NX,MX,NERR)
  370 CONTINUE
      IF (NERR .NE. 0)  WRITE(TAPEOT,220)
  220 FORMAT(1H1, 16HMATRIX SINGULAR.)
C
C  COEFFICIENTS ARE IN ARRAY  B(I,J)
      IF (IPRINT .EQ. 0)  GO TO 400
      WRITE(TAPEOT,3080)
 3080 FORMAT(1H1,42HSURFACE INTERPOLATION COEFFICIENTS  B(I,J)//)
      WRITE(TAPEOT,3090)  (I, (B(I,J), J=1,7), I=1,N3)
 3090 FORMAT(1H , I5, 7F15.5)
      WRITE(TAPEOT,3100)  FLOWC
 3100 FORMAT(1H0, 5X, 7F15.5)
  400 CONTINUE
C
C
C
C
      RETURN
      END
*DECK ROW2
      SUBROUTINE  ROWFM2(N, NX, XI, YI, A, LS)
C
C  CALCULATES COEFFICIENT ARRAY A FOR SURFACE SPLINE
C  THIS ROUTINE USED WHEN N .LE. 74
C
C  LS = 0, SURFACE SPLINE  X AND Y VARIABLE
C  LS = 1, LINEAR SPLINE,  X CONSTANT
C  LS = 2, LINEAR SPLINE  Y CONSTANT
C
C
      DIMENSION XI(1), YI(1), A(NX,NX)
      N3 = N + 3
C
C  FIRST ROW
      I = 1
      A(I,1) = 0.0
      A(I,2) = 0.0
      A(I,3) = 0.0
      DO 10 J = 4,N3
   10 A(I,J) = 1.0
C
C  SECOND ROW
      I = 2
      A(I,2) = 0.0
      IF (LS .EQ. 1)  A(I,2) = 1.0
      A(I,1) = 0.0
      A(I,3) = 0.0
      JX = 0
      DO 30 J = 4,N3
      JX = JX + 1
   30 A(I,J) = XI(JX)
C
C  THIRD ROW
      I = 3
      A(I,3) = 0.0
      IF (LS .EQ. 2)  A(I,3) = 1.0
      A(I,1) = 0.0
      A(I,2) = 0.0
      JX = 0
      DO 40 J = 4,N3
      JX = JX + 1
   40 A(I,J) = YI(JX)
C
C  FOURTH THROUGH N3 ROWS
      DO 100 IX = 4,N3
      I = IX - 3
      A(IX,1) = 1.0
      A(IX,2) = XI(I)
      A(IX,3) = YI(I)
      J3 = 3
      DO 80 J = 1,N
      J3 = J3 + 1
      AIJ = 0.0
      TR1 = 0.0
      TR2 = 0.0
      IF (I .EQ. J)  GO TO 70
      IF (XI(I) .EQ. XI(J))  GO TO 50
      TR1 = (XI(I) - XI(J))**2
   50 IF (YI(I) .EQ. YI(J))  GO TO 60
      TR2 = (YI(I) - YI(J))**2
   60 RAIJ = TR1 + TR2
      IF (RAIJ .EQ. 0.0)  GO TO 70
      AIJ = RAIJ*ALOG(RAIJ)
   70 A(IX,J3) = AIJ
   80 CONTINUE
  100 CONTINUE
C
C
      RETURN
      END
*DECK MIS2
      SUBROUTINE  MIS2(A, N, ND, B, MD, NX, MX, NERR, D)
C
C     MIS1 - MATRIX INVERT OR SOLVE
C
C     THIS SUBROUTINE SOLVES THE MATRIX EQUATION  A*C = B  WHERE A AND
C         B ARE INPUT.  IF B IS A UNIT MATRIX, THEN C IS THE INVERSE
C         OF A.
C
C
C         A    = IN-OUT = A TWO DIMENSIONAL ARRAY (DIMENSIONED ND BY
C                         ND) CONTAINING AN INPUT MATRIX OF ORDER N.
C                         THE A MATRIX IS DESTROYED BY THE SUBROUTINE.
C
C         N    = INPUT  = THE ORDER (INTEGER) OF A (N LESS THAN OR
C                         EQUAL TO ND) AND THE NUMBER OF ROWS IN B.
C
C         ND   = INPUT  = THE MAXIMUM DIMENSIONS (INTEGER) OF THE
C                         SQUARE MATRIX A.
C
C         B    = IN-OUT = A TWO DIMENSIONAL ARRAY (DIMENSIONED ND BY
C                         MD) CONTAINING THE SECOND INPUT MATRIX.
C                         THIS ARRAY IS MODIFIED AND CONTAINS (UPON
C                         OUTPUT) THE C MATRIX SOLUTION.
C
C         MD   = INPUT  = THE NUMBER (INTEGER) OF COLUMNS IN B.
C
C         NERR = OUTPUT = OUTPUT CODE (INTEGER)
C                       = 0  IF A IS NON-SINGULAR
C                       = 1  IF A IS SINGULAR
C                       = 2  IF N IS LESS THAN OR EQUAL TO ZERO
C                       = 3  IF N IS GREATER THAN ND
C
C         D    = INPUT  = SCALE FACTOR TO SCALE DETERMINENT.
C              = OUTPUT = THE SCALED DETERMINENT OF A.
C
      DIMENSION  A(ND,ND), B(NX,MX)
      EQUIVALENCE  (L,FL), (K,FK)
C
C     CHECK THE VALUE OF N
C
      IF  ( N - 1 ) 10 , 20 , 30
C
   10 D = 0.0E0
      NERR = 2
      GO TO 190
C
   20 AIJMAX = A(1,1)
      IF  ( AIJMAX .EQ. 0.0E0 )  GO TO 60
      B(1,1) = B(1,1) / AIJMAX
      D = D * AIJMAX
      GO TO 180
C
   30 IF  ( N .LE. ND )  GO TO 40
      NERR = 3
      GO TO 190
C
C     START REDUCTION OF MATRIX A
C
   40 DO 130   I = 1, N
C
C     SEARCH FOR MAXIMUM ELEMENT IN ITH ROW OF A-MATRIX
C
      AIJMAX = A(I,1)
      JMAX = 1
      DO 50   J = 2, N
      IF  ( ABS( A(I,J) ) .LE. ABS( AIJMAX ) )  GO TO 50
      AIJMAX = A(I,J)
      JMAX = J
   50 CONTINUE
C
C     IF AIJMAX IS ZERO, THE MATRIX IS SINGULAR
C
      IF  ( ABS( AIJMAX ) .GT. 0.0E0 )  GO TO 70
   60 D = 0.0E0
      NERR = 1
      GO TO 190
C
C     NORMALIZE ITH ROW BY AIJMAX (JMAX ELEMENT OF ITH ROW)
C
   70 DO 80   J = 1, N
   80 A(I,J) = A(I,J) / AIJMAX
C
C     THIS CALCULATION VOIDED TO REMOVE UNDERFLOW ERRORS FOR MATRICES
C     THAT ARE ALMOST, BUT NOT QUITE, SINGULAR
C     D = D * AIJMAX
C
C     NORMALIZE ITH ROW OF B
C
      DO 90   J = 1, MD
   90 B(I,J) = B(I,J) / AIJMAX
C
C     USE ROW TRANSFORMATIONS TO GET ZEROS ABOVE AND BELOW THE JMAX
C     ELEMENT OF THE ITH ROW OF A.  APPLY SAME ROW TRANSFORMATIONS
C     TO THE B MATRIX.
C
      DO 120   K = 1, N
      IF  ( K .EQ. I )  GO TO 120
      ARAT = -A(K,JMAX)
      DO 100   J = 1, N
      IF  ( ABS( A(I,J) ) .EQ. 0.0E0 )  GO TO 100
      A(K,J) = ARAT * A(I,J) + A(K,J)
  100 CONTINUE
      A(K,JMAX) = 0.0E0
      DO 110   J = 1, MD
      IF  ( ABS( B(I,J) ) .EQ. 0.0E0 )  GO TO 110
      B(K,J) = ARAT * B(I,J) + B(K,J)
  110 CONTINUE
  120 CONTINUE
C
C     STORE ROW COUNTER (I) IN TOP ELEMENT OF JMAX COLUMN. THUS,
C     THE TOP ROW OF A WILL CONTAIN THE LOC OF THE PIVOT (UNITY)
C     ELEMENT OF EACH COLUMN (AFTER REDUCTION).
C
      L = I
  130 A(1,JMAX) = FL
C                 THIS STORES INTEGER IN TOP ROW OF A
C
C     THE REDUCTION OF A IS NOW COMPLIETE. PERFORM ROW INTERCHANGES
C     AS INDICATED IN THE FIRST ROW OF A.
C
      DO 170   I = 1, N
      K = I
  140 FK = A(1,K)
C                 THIS PUTS THE INTEGER VALUE IN A INTO K
      IF  ( K - I ) 140 , 170 , 150
C
C     IF K(1,I) IS LESS THAN I, THEN THAT ROW HAS ALREADY BEEN
C     INVOLVED IN AN INTERCHANGE, AND WE USE K(1,K) UNTIL WE GET
C     A VALUE OF K GREATER THAN I  (CORRESPONDING TO A ROW STORED
C     BELOW THE ITH ROW).
C
  150 DO 160   J = 1, MD
      ARAT = B(I,J)
      B(I,J) = B(K,J)
  160 B(K,J) = ARAT
      D = -D
  170 CONTINUE
  180 NERR = 0
  190 RETURN
      END
*DECK ERF
      FUNCTION ERF(X)
C  THIS FUNCTION ROUTINE IS REQUIRED BY CDC MODELS OF THE ARBITRARY-
C  BODY PROGRAM.  IT IS USED WITH THE ERROR FUNCTION SUBPROGRAM (ERRF).
C  THESE ROUTINES ARE NOT REQUIRED IN THE IBM/360 MODEL BECAUSE THEY
C  ARE ALREADY AVAILABLE IN THE 360 FORTRAN LIBRARY.
C
      CALL ERRF(X,Y)
      ERF = Y
      RETURN
      END
*DECK ERRF
      SUBROUTINE ERRF(X,Y)
C  THIS ROUTINE IS REQUIRED BY CDC MODELS OF THE ARBITRARY-BODY
C  PROGRAM.  THIS ROUTINE IS NOT REQUIRED IN THE IBM/360 MODEL
C  BECAUSE IT IS ALREADY AVAILABLE IN THE IBM FORTRAN LIBRARY.
C
      DIMENSION C(7)
      DATA (C(J),J=1,7)/1.,7.05230784E-2,4.22820123E-2,9.2705272E-3,    -
     1  1.520143E-4,2.765672E-4,4.30638E-5/
      IF (X .EQ. 0.0) GO TO 70
      Z = ABS(X)
      Y = SIGN(1.0,X)
      IF (Z .GE. 4.17) RETURN
      P = C(7)
      DO 50 J=1,6
      K = 7 - J
   50 P = C(K) + P*Z
      Y = Y*(1.0-P**(-16))
      RETURN
   70 Y = 0.0
      RETURN
      END
*DECK ACON
      SUBROUTINE  ACONE(ANGLE, CP, ALF, PHI, ALFP, EMP, IT, IPRCK)
C  CIRCULAR CONE AT ANGLE OF ATTACK.
C  BASED ON ARC CP =792 AND EXTENDED BY D.N. SMYTH.
C
      DIMENSION FS(8), BS(8), ANGLE(3)
      DIMENSION AA(6), A(18)
C
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON/FSBS/ FS,BS
C
      DATA A/ -0.07657, 1.4775, 0.064669,                               -
     2         0.42339, 0.13241,0.035871,                               -
     3        -0.002083,-.075797,-.01923,                               -
     4         0.29898, -.10011,0.29589,                                -
     5        -0.99727, -.41751,0.068791,                               -
     6        -.039442, 0.10422,0.063801/
      DATA RC/.17453292E-1/
C
      G = GAM
      EM = FS(6)
      GM1 = G - 1.0
      DCR = ANGLE(1)*RC
      GP1 = G + 1.0
      PMIN = 0.3
      CPCONE = 0.0
      CPSTAG = 0.0
      CPX = 0.0
      DPSK = 0.0
      COSA = COS(ALF)
      SINA = SIN(ALF)
      COSP = COS(PHI)
      SINP = SIN(PHI)
      EM2 = EM**2
      CPMIN = (PMIN - 1.0)/(0.5*G*EM2)
C
      IF (DCR .LT. 0.0)  GO TO 35
      IF (DCR .LT. 1.E-4)  GO TO 5
      IF (DCR .LT. 0.0872665)  GO TO 4
      IF (IT .EQ. 1)  GO TO 4
C
C  JONES' METHOD (AIAA JL., FEB. 1972, PP234-236).
      EM2I = 1.0/EM2
      COS2P = COS(2.*PHI)
      T = SIN(2.9*DCR)*TAN(DCR)
      AC = ALF/DCR
      EMA = EM
      CALL CONE(ANGLE, CPCONE, ISDET)
      PCONE = 0.5*G*EM2*CPCONE + 1.0
      EMS = BS(6)
      DSC = ANGLE(3)*RC
C
      DO  3 I = 1,6
      J = 3*(I-1) + 1
    3 AA(I) = A(J) + A(J+1)*COSP + A(J+2)*COS2P
C
      CPX = (AA(1)*T + AA(2)*T*EM2I + AA(3)*EM2I)*AC                    -
     1    + (AA(4)*T + AA(5)*T*EM2I + AA(6)*EM2I)*AC**2
      GO TO 40
C
C
C
C  AXIAL FLOW COMPONENT
    4 EMA = EM*COSA
      FS6 = FS(6)
      FS(6) = EMA
      CALL CONE(ANGLE, CPCONE, ISDET)
      PCONE = 0.5*G*EMA**2*CPCONE + 1.0
      CPCONE = (PCONE - 1.0)/(0.5*G*EM2)
      EMS = BS(6)
      DSC = ANGLE(3)*RC
      FS(6) = FS6
C
    5 IF (ALF .LT. 1.E-4)  GO TO 40
C
C  NORMAL FLOW COMPONENT
      EMC2 = EM2*(SINA)**2
      IF (EMC2 - 1.0)  10, 10, 20
C  SUBSONIC NORMAL COMPONENT
   10 PSTAG = (1.0 + 0.5*GM1*EMC2)**(G/GM1)
      GO TO 30
C  SUPERSONIC NORMAL COMPONENT
   20 PSTAG = (0.5*GP1*EMC2)**(G/GM1)*(GP1/(2.*G*EMC2-GM1))**(1./GM1)
   30 CPSTAG = (PSTAG - 1.0)/(0.5*G*EM2)*COSP*ABS(COSP)
C
      IF (CPSTAG .LT. 0.0  )  CPSTAG = 0.0
      IF (DCR .LT. 1.E-4)  GO TO 40
C  CROSS PRODUCT TERM - EMPIRICAL FIT FROM CP =792.
      SCD = SIN(DCR)*COS(DCR)
      X = 0.5*3.1415927/(SCD*SQRT(EM2-1.0))
      BK = 1.95 + 0.07*COS(X)
      CPX = 2.0*BK*SCD*COSP*SINA*COSA
      GO TO 40
C
C  CONE FLOW IS DETACHED OR UNDEFINED (DCR .LT. 0.0)
C  USE IMPACT METHODS
C
C  FIRST GET IMPACT ANGLE (IN MERIDIAN PLANE)
   35 CONTINUE
      DELI = ALFP + DCR
      IF (DELI .GT. 0.0)  GO TO 36
C
C  EXPANSION FLOW
      ANGLE(2) = ABS(DELI)*57.29577951
      FS(6) = EMP
      IPRINT = 0
      ISDET = 2
      CALL EXPAND(ANGLE,MER,IPRINT,ISDET,CP)
      EMSURF = BS(6)
      EM2 = EMP**2
      PSURF = 0.5*G*EM2*CP + 1.0
      IF (PSURF .LT. PMIN)  PSURF = PMIN
      GO TO 50
C
C  COMPRESSION FLOW,  USE TANGENT-CONE EMPIRICAL
   36 CK = 2.*GP1/(G+3.)*EMP*SIN(DELI)
      EMNS = (CK + EXP(-CK))**2
      CP = (8.*GP1*EMNS/((3.+5.)*EMNS + 2.))*SIN(DELI)**2
      PSURF = 0.5*G*EM2*CP + 1.0
      IF (PSURF .LT. PMIN)  PSURF = PMIN
      PCONE = PSURF
      DPSK = PCONE - (2.*G*EMNS - GM1)/GP1
      GO TO 50
C
C  COMBINED SURFACE PRESSURE
   40 PSURF = 0.5*G*EM2*(CPCONE + CPSTAG + CPX) + 1.0
C
C  LIMIT MINIMUM PSURF
      IF (PSURF .LT. PMIN)  PSURF = PMIN
C
C  SHOCK ANGLE DSR, RELATIVE TO AXIS
C
C  USE IMPACT METHODS TO OBTAIN DPSK
C  (ADJUST TO ALPHA = ZERO RESULTS)
C
      DELI = DCR
      IS = 1
      FDP = 1.0
      EMC = EMA
      GO TO 46
C
C  CALCULATE VALUE FROM NCONE
   45 CONTINUE
      EMNS = (EMA*SIN(DSC))**2
      PS = (2.*G*EMNS - GM1)/GP1
      FDP = PS/P2
      EMC = EMP
C
C  NOW CALCULATE VALUE AT ACTUAL IMPACT ANGLE
      DELI = ALFP + DCR
      DPSK = 0.0
      IF (DELI .LE. 0.0)  GO TO 50
      IS = 2
   46 EMD = EMC*SIN(DELI)
      CK =  2.*GP1/(G+3.)*EMD
      EMNS = (CK + EXP(-CK))**2
      P2 = (2.*G*EMNS - GM1)/GP1
      GO TO (45,47), IS
   47 DPSK = PSURF - P2*FDP
   50 IF (DPSK .LT. 0.0)  DPSK = 0.0
      PSHK = PSURF - DPSK
      IF (PSHK .LT. 1.0)  PSHK = 1.0
C  SURFACE MACH NUMBER
      EMSURF = SQRT((EM2*(GP1*PSHK+GM1) - 2.*GP1*GM1)                   -
     1        /(PSHK*(GM1*PSHK + GP1)))
C
      EM2 = EMP**2
      DSR =            (GP1*PSHK + GM1)/(2.*G*EM2)
      IF (DSR .GT. 1.0)  DSR = 1.0
      IF (DSR .LT. 0.0)  DSR = 1.0/EM2
      DSR = ARSIN(SQRT(DSR))
      DSR = DSR - ALFP
C
C
C  CALCULATE BS ARRAY
      EM2 = EM**2
      BS(6) = EMSURF
      BS(2) = FS(2)*PSURF
      CP = (PSURF - 1.0)/(0.5*G*EM2)
      ANGLE(3) = DSR/RC
      TST1 = (1. + 0.5*GM1*EM2)/(1. + 0.5*GM1*EMSURF**2)
      BS(3) = FS(3)*TST1
      BS(1) = FS(1)*PSURF/TST1
      BS(4) = FS(4)*SQRT(TST1)
      IF (BS(3).GE.AV1) BS(5) = 2.27E-8*BS(3)**1.5/(BS(3)+198.6)
      IF (BS(3).LT.AV1) BS(5) = AV2*BS(3)**AV3
      BS(7) = BS(6)*BS(4)
      BS(8) = BS(1)*BS(7)/BS(5)
C
      IF (IPRCK .NE. 1)  RETURN
      WRITE(6,100)  CPCONE,CPSTAG,CPX,CP
  100 FORMAT(1H0, 9HCPCONE = ,F10.5, 5X9HCPSTAG = ,F10.5,               -
     1    5X6HCPX = ,F10.5, 5X5HCP = ,F10.5/)
      WRITE(6,200)  FS,BS
  200 FORMAT(1H ,10HFS ARRAY  , 8F15.6/1H ,10HBS ARRAY  , 8F15.6)
      RETURN
      END
*DECK VISC
      OVERLAY (MARK4,2,4)
      PROGRAM VISCUS
C     SUBROUTINE VISCUS
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /GDATA/LTOT,J,SYMFCT,IORN,IGTYPE,L
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /ABDATA/NAB,ALPHA(20),BETA(20),ROL(20),CDELTA(20),QI(20),  -
     1               RI(20),PI(20)
      COMMON /REF/SREF,MAC,SPAN,XCG,YCG,ZCG
      COMMON /FARRAY/F
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON /SKIND/LS,IS(100,9),SURF(100,8),DELTA,SHEAR
      COMMON/C1    /INORM,ISURF,IX,IY,IZ,U1,UL,V1,VL,CR,CT,CHX,N2,N3,   -
     1    XO,YO,ZO,AP11,AP12,AP13,AP21,AP22,AP23,AP31,AP32,AP33,        -
     2  FLOWC(2),XI(500),YI(500),B(503,2),XKF(503),AA(2477),            -
     A  XB(4), YB(4), ZB(4),                                            -
     3  NDSET,IABSET,IR,LORG(20),ISR(20),N4,ISFR,IVIS, IFTYP,IFLOW,     -
     4    BX(2,20), BY(2,20), NB ,DUM(4)
      DIMENSION F(11),IPANL(20),IPR(20),ISF(20),ISA(20)
      DIMENSION EP(25),E1(8),E4(41),E2(11),                             -
     1  ELEM(25),TITLE(15),COM(10),E(25),E5(41),E6(41),E7(11),E8(14)
      DIMENSION LCOM(41),LSUM(41),TITLE9(5)
      DIMENSION IG4S(1000)
      DIMENSION LTOTAB(20)
      INTEGER ERROR,SYMFCT,PAGE,CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL  MACH,MAC
      DATA ISIZE,ISIZ2/1000,100/
      DATA TITLE9/10HFORCE DATA,10H SAVE UNIT,10H          ,            -
     1 10H          ,10H          /
C     DATA TITLE9/4HFORC,4HE DA,4HTA S,4HAVE ,4HUNIT/
C
C
C  SET INITIAL CONSTANTS FOR START OF CASE
      ERROR = 0
      NCOM = 0
      I9 = 0
      ISFCHK = 0
      NEWSF = 0
C
      CALL HEADER
      WRITE (TAPEOT,10)
   10  FORMAT (1H0,30H** SKIN FRICTION FORCE PROGRAM)
C
C  READ TITLE CARD AND FLAGS
      READ (TAPEIN,20) NCOMP,IFSAVE,TITLE
   20  FORMAT (I2,I1,3X,15A4)
C  SET UP CONSTANTS FOR FORCE DATA SAVE ON UNIT 9
      IF (IFSAVE .EQ. 2) GO TO 60
      IF (IFSAVE .NE. 0) GO TO 40
      NTOT = 0
      ISUM = 0
      NEXT = 10
      DO 21 I=1,41
       LCOM(I) = 0
   21  LSUM(I) = 0
      GO TO 50
C
C  RETRIEVE PREVIOUSLY SAVED TABLE OF CONTENTS
   40 IG9 = 1
      CALL READMS (9,E1,8,IG9)
C     READ (9'IG9) E1
      NTOT = E1(1)
      ISUM = E1(2)
      NEXT = E1(3)
C   CHECK IF VALID RECORD
      IF (E1(4) .EQ. TITLE9(1)) GO TO 43
      WRITE (TAPEOT,42)
   42  FORMAT (1H0,47H***IFSAVE WAS INPUT = 1 IN PRES YET UNIT 9 HAS ,  -
     1 55HNEVER BEEN INITIALIZED WITH A IFSAVE = 0. PROGRAM STOP. )
      STOP
   43 IG9 = 2
      CALL READMS (9,E5,41,IG9)
C     READ (9'IG9) E5
      DO 45 I=1,40
   45  LCOM(I) = E5(I+1)
C
   50 DO 22 I=1,20
       E4(I+1) = ALPHA(I)
   22  E4(I+21)= BETA (I)
      E4(1) = NAB
      DO 24 I=1,5
   24  E1(I+3) = TITLE9(I)
      DO 25 I=1,41
   25  E6(I) = 0.0
      DO 26 I=1,11
   26  E7(I) = 0.0
C
C  READ GEOMETRY DATA SOURCE DATA
   60 READ (TAPEIN,70) IPANL,ISK,NS
   70  FORMAT (20I2,I1,I3)
      NCOM = NCOM + 1
C  CHECK IF NEW SKIN FRICTION FLAG CARDS ARE TO BE READ
      IF (ISK .GT. 1) GO TO 110
C
C ********
C  READ SKIN FRICTION METHOD DATA (1 CARD OR NAB CARDS)
      DO 100 I=1,NAB
      IF (ISK.EQ.0 .OR. I.EQ.1) READ (TAPEIN,80) ISFMTH,IPRINT,ISAVE
   80  FORMAT (3I1)
      IPR(I) = IPRINT
      ISF(I) = ISFMTH
      ISA(I) = ISAVE
      IF (ISFMTH .EQ. 1) ISFCHK = 1
      IF (ISFMTH .EQ. 0)  NEWSF = 1
  100 CONTINUE
      IF (NEWSF .EQ. 1)  REWIND TAPEE
C
  110 CONTINUE
C
C ********
C  OBTAIN GEOMETRY DATA FROM SAVE UNIT FOR COMPLETE COMPONENT AND
C  PLACE IN GEOMETRY DATA WORKING ARRAYS
      IG4 = 2
      CALL READMS (4,E,25,IG4)
C     READ (4'IG4) E
      NEXTG = E(1)
      NP   = E(2)
      NPMAX = E(3)
      NREM = E(4)
      K = 0
      NCS = 0
C
      DO 130 I=1,20
       IF (IPANL(I) .EQ. 0) GO TO 140
      NCS = NCS + 1
      IG4 = IPANL(I)*5
      CALL READMS (4,EP,25,IG4)
C     READ (4'IG4) EP
      ISTAT3 = EP(1)
      COM(I) = EP(2)
      ISTART = EP(3)
      N      = EP(4)
      IORN   = EP(5)
      SYMFCT = EP(6)
      ISTART = ISTART - NREM
C
      DO 120 II=1,N
       K = K + 1
      IF (K .GT. ISIZE) GO TO 190
      IG4 = ISTART + NREM*II
      IG4S(K) = IG4
      IF (NEWSF .NE. 1)  GO TO 120
      CALL READMS(4,ELEM,25,IG4)
C     READ(4'IG4)  ELEM
      WRITE(TAPEE)  IG4,ELEM
  120 CONTINUE
  130 CONTINUE
  140 LTOT = K
C  GEOMETRY DATA LOAD IS COMPLETE
C
C
C  CHECK IF SIMPLE ELEMENTAL SKIN FRICTION IS TO BE CALCULATED
      IF (ISFCHK .NE. 1) GO TO 230
C  READ SKIN FRICTION DATA CARDS
C    CHECK IF NUMBER OF ELEMENTS SPECIFIED IS CORRECT (NS = LTOT)
      IF (NS .EQ. LTOT) GO TO 160
      WRITE (TAPEOT,150) NS,LTOT
  150  FORMAT (1H0,49H***WARNING**THE NUMBER OF SKIN FRICTION SURFACES ,-
     110HINPUT, NS=,I3,44H DOES NOT MATCH THE GEOMETRY DATA SET, LTOT=, -
     2  I3)
      STOP
  160 IF (NS .GT. ISIZ2) GO TO 190
      DO 170 I=1,NS
C 170 READ (TAPEIN,180,END=210) (IS(I,J),J=1,9),(SURF(I,J),J=1,8)
  170 READ (TAPEIN,180)         (IS(I,J),J=1,9),(SURF(I,J),J=1,8)
      IF (EOF(TAPEIN)) 210,230
  180  FORMAT (I2,8I1,2F9.0,3F6.0,2F6.0,F4.0)
C     GO TO 230
  190 WRITE (TAPEOT,200) ISIZ2,ISIZ2
  200  FORMAT (1H ,47H*** ERROR *** NUMBER OF ELEMENTS PER COMPONENT  , -
     1  14HCANNOT EXCEED ,I4,/1H ,14X,22HDIVIDE THE SHAPE INTO  ,       -
     2  47HMORE COMPONENTS WITH NO COMPONENT GREATER THAN   ,I4,        -
     3   9H ELEMENTS  )
      STOP
  210 WRITE (TAPEOT,220)
  220  FORMAT (1H0,46H*** ATTEMPT TO READ END OF FILE WHILE READING  ,  -
     1  19HSKIN FRICTION CARDS)
      STOP
C
  230 CONTINUE
C
C
      ISAS = 0
      IF (IFSAVE .EQ. 2) GO TO 235
      NTOT = NTOT + 1
      LCOM(NTOT) = NEXT
      NEXT = NEXT + 2
  235 CONTINUE
C
C  CHECK FOR NEW INTEGRAL SKIN FRICTION METHOD
      IF (NEWSF .EQ. 0)  GO TO 240
C
C  CALL INTEGRAL BOUNDARY LAYER PROGRAM
      CALL INTEG
C
C  CALL PRE-PROCESSOR FOR VISCOUS SURFACE DATA
      CALL  CFINPT(ISF,LTOTAB)
C
  240 CONTINUE
C
C  START ALPHA-BETA LOOP (DO ALL ALPHA-BETAS FOR GIVEN COMPONENT)
      DO 250 J=1,NAB
      ISFMTH = ISF(J)
      IPRINT = IPR(J)
      ISAVE = ISA(J)
      IF (ISAVE .EQ. 1) ISAS = 1
C
C***GO TO SKIN FRICTION FORCE PROGRAM
      CALL FORSF (NEXTG,IG4S,IPRINT,ISAVE,ISFMTH,LTOTAB)
       IF (ERROR .NE. 0) GO TO 530
C
C  SAVE FORCE DATA ON UNIT 9
      IF (IFSAVE .EQ. 2) GO TO 250
      CALL WRITMS (9,F,11,NEXT)
C     WRITE (9'NEXT) F
      NEXT = NEXT + 1
      CALL WRITMS (9,E7,11,NEXT)
C     WRITE (9'NEXT) E7
      NEXT = NEXT + 1
  250 CONTINUE
C ***END OF ALPHA-BETA LOOP
C
      IF (IFSAVE .EQ. 2) GO TO 450
C
C  WRITE HEADER INFORMATION FOR FORCE OUTPUT PAGE
      CALL HEADER
      WRITE (TAPEOT,260) NCOM
  260  FORMAT (1H0,18HCOMPONENT NUMBER =,I3)
      WRITE (TAPEOT,270) (COM(I),I=1,NCS)
  270  FORMAT (1H0,12HPANEL ID =  , 20(A4,2X))
      WRITE (TAPEOT,280)
  280  FORMAT (1H0,20HSKIN FRICTION FORCES)
      WRITE (6,300) MACH,V,RENO
  300 FORMAT (1H0,7H  MACH=F8.3,6H  VEL=F9.1,16H FT/SEC  RE/FT =E13.5 )
      IF (PSTAG .LT. 0.00001) WRITE (6,310) ALT
  310 FORMAT (1H ,7H  ALT =F8.0 )
      IF (PSTAG .GT. 0.00001) WRITE (6,320) PSTAG,TSTAG
  320 FORMAT (1H ,16X7HP STAG=F7.1,16H ATMOS   T STAG=F7.1,6H DEG F )
      WRITE (TAPEOT,330) GTYPE
  330  FORMAT (1H ,2X,2A4)
      WRITE (6,340) SREF,SPAN,MAC,XCG,YCG,ZCG
  340 FORMAT (1H0,9H  S REF =F9.2,8H  SPAN =F8.2,8H  MAC  =F8.2,/1H ,   -
     1  9H  X CG  =F9.2,8H  Y CG =F8.2,8H  Z CG =F8.2 )
      WRITE (TAPEOT,350)
  350  FORMAT (1H0,10HFORCE DATA,/1H ,7H  ALPHA,4X,3HC D,7X,3HC L,7X,   -
     1 3HC A,7X,3HC Y,7X,3HC N,/1H ,7H  BETA ,4X,3HL/D,7X,3HC M,7X,     -
     2 4HC LL,6X,4HC LN)
C
C  WRITE OUTPUT FORCE DATA
      DO 370 I=1,NAB
       IG9 = LCOM(NTOT) + I*2
      CALL READMS (9,F,11,IG9)
C     READ (9'IG9) F
      WRITE (TAPEOT,360) F
  360  FORMAT (1H0,F7.2,5F10.5,/1H ,F7.2,4F10.5)
  370 CONTINUE
C
C
C
C  RESET COUNTERS IN GEOMETRY TABLE IF DATA WHERE SAVED
      IF (ISAS .EQ. 0) GO TO 192
      E(1) = NEXTG
      IG4 = 2
      CALL WRITMS (4,E,25,IG4)
C     WRITE (4'IG4) E
C  SAVE COMPONENT INFORMATION IN TABLE OF CONTENTS
  192 CONTINUE
      DO 191 I=2,11
  191  E2(I) = IPANL(I-1)
      E2(1) = NTOT
      IG9 = LCOM(NTOT)
      CALL WRITMS (9,E2,11,IG9)
C     WRITE (9'IG9) E2
      IG9 = IG9 + 1
      CALL WRITMS (9,E4,41,IG9)
C     WRITE (9'IG9) E4
C
C  UPDATE MAIN TABLE OF CONTENTS
      E1(1) = NTOT
      E1(2) = ISUM
      E1(3) = NEXT
      IG9 = 1
      CALL WRITMS (9,E1,8,IG9)
C     WRITE (9'IG9) E1
      DO 440 I=2,41
  440  E5(I) = LCOM(I-1)
      E5(1) = 0.0
      IG9 = 2
      CALL WRITMS (9,E5,41,IG9)
C     WRITE (9'IG9) E5
      IG9 = 3
      CALL WRITMS (9,E6,41,IG9)
C     WRITE (9'IG9) E6
C
      E8(1) = MACH
      E8(2) = V
      E8(3) = RENO
      E8(4) = ALT
      E8(5) = PSTAG
      E8(6) = TSTAG
      E8(7) = GTYPE(1)
      E8(8) = GTYPE(2)
      E8(9) = SREF
      E8(10) = SPAN
      E8(11) = MAC
      E8(12) = XCG
      E8(13) = YCG
      E8(14) = ZCG
      IG9 = 4
      CALL WRITMS (9,E8,14,IG9)
C     WRITE (9'IG9) E8
C
      WRITE (TAPEOT,430) NTOT
  430  FORMAT (1H0,10X,35HDATA SAVED ON UNIT 9.  SET NUMBER =,I4)
C
C  CHECK IF LAST COMPONENT HAS BEEN COMPLETED
  450 IF (NCOM .LT. NCOMP) GO TO 60
C
C
C
  520 GO TO 550
  530 WRITE (TAPEOT,540) ERROR,J
  540  FORMAT (1H ,10H** ERROR =,I2,26H ON RETURN FROM FORCE.  J=,I1)
C 550 RETURN
  550 CONTINUE
      END
*DECK FORS
      SUBROUTINE FORSF (NEXT,IG4S,IPRINT,ISAVE,ISFMTH,LTOTAB)
C
C
C***********************************************************************
C***********************************************************************
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /GDATA/LTOT,J,SYMFCT,IORN,IGTYPE,L
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /ABDATA/NAB,ALPHA(20),BETA(20),ROL(20),CDELTA(20),QI(20),  -
     1               RI(20),PI(20)
      COMMON /REF/SREF,MAC,SPAN,XCG,YCG,ZCG
      COMMON /FARRAY/F
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON /SKIND/LS,IS(100,9),SURF(100,8),DELTA,SHEAR
      COMMON /FSBS/FS(8),BS(8)
      DIMENSION F(11),E(25),TITLE(15),E1(25),ANGLE(3)
      DIMENSION IG4S(1000)
      DIMENSION  LTOTAB(20),LCOND(3),DINFL(6)
      INTEGER  ERROR,SYMFCT,SYMFCO,CASE,PAGE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL  MACH,MAC,NX,NY,NZ
      REAL  MACHO,MACHSQ
C
      RAD(A) = A /.572957795E+02
C
C  SET UP STARTING CONSTANTS
      CA  = 0.0
      CY  = 0.0
      CN  = 0.0
      CLL = 0.0
      CLM = 0.0
      CLN = 0.0
      AREAT = 0.0
      NPCK = 51
      NPRT = 51
      ALPHAR = RAD(ALPHA(J))
      BETAR  = RAD(BETA(J))
      ROLL = ROL(J)
      PHIR = RAD(ROLL)
      Q = QI(J)
      R = RI(J)
      P = PI(J)
      IDERIV = 0
      SYMFCO = 0
      LTS = LTOT
      IF (ISFMTH .EQ. 0)  LTS = LTOTAB(J)
C
C  INITIALIZE FREE STREAM DATA ARRAY
      FS(1) = RHOFS
      FS(2) = PFS
      FS(3) = TFS
      FS(4) = AFS
      FS(5) = VIS
      FS(6) = MACH
      FS(7) = MACH * FS(4)
      FS(8) = FS(1)*FS(7)/FS(5)
      G1 = GAM + 1.0
      GM1= GAM - 1.0
      G4 = 4./G1
      G11 = GM1/G1
      G21 = 2.0*(1.0-G11)
      G2 = 2.0*GAM
C
C*****START OF ELEMENT DO LOOP *****
   10 DO 600 L=1,LTS
      IF (ISFMTH .EQ. 0)  GO TO 16
C  GET GEOMETRY DATA FROM NORMAL STORAGE ARRAYS
      IG4 = IG4S(L)
      CALL READMS (4,E,25,IG4)
C     READ (4'IG4) E
      N     = E(2)
      M     = E(3)
      NX    = E(4)
      NY    = E(5)
      NZ    = E(6)
      XCENT = E(7)
      YCENT = E(8)
      ZCENT = E(9)
      AREA  = E(10)
C
      IF (SYMFCO .EQ. 0) GO TO 60
      NY = -NY
      YCENT = -YCENT
      GO TO 60
C
C  READ GEOMETRY DATA FROM STREAMLINE DATA UNIT
   16 READ(TAPEF)  IG4,LCOND,E,DINFL
C     WRITE (TAPEOT,920) IG4,LCOND,E,DINFL
C 920 FORMAT (1H ,4HIG4=,I5,3X,6HLCOND=,3I3,/1H ,6HE=    ,10E12.4,/1H ,
C    1 6X,10E12.4,/1H ,6X,5E12.4,/1H ,6HDINFL=,6F12.4)
C
C  DUMP GEOMETRY DATA INTO WORKING VARIABLES
      N = E(2)
      M = E(3)
      NX = E(4)
      NY = E(5)
      NZ = E(6)
      XCENT = E(7)
      YCENT = E(8)
      ZCENT = E(9)
      AREA = E(10)
      SHEAR = DINFL(1)
      IG41 = IABS(IG4) + 1
      IF (IG4 .LT. 0)  IG41 = IG41 + 1
      GO TO 70
   60 CONTINUE
C  OBTAIN SURFACE PROPERTY DATA
      IG41 = IG4 + 1
C  OBTAIN POINTER TO REFLECTED DATA
      IF (SYMFCO .NE. 0) IG41 = IG41 + 1
   70 CONTINUE
      CALL READMS (4,E1,25,IG41)
C     READ (4'IG41) E1
C
      IG4SD = E1(J) + 0.0001
      CALL READMS (4,E1,25,IG4SD)
C     READ (4'IG4SD) E1
C     WRITE (TAPEOT,900) IG4SD,E1
C 900 FORMAT (1H ,6HIG4SD=,I5,8E12.5,/1H ,11X,8E12.5,/1H ,11X,9E12.5)
C
C  CHECK IF DATA MATCHES
      LE1 = E1(2) + 0.0001
      LE  = E (1) + 0.0001
      IF (LE1 .EQ. LE) GO TO 260
      WRITE (TAPEOT,250)
  250  FORMAT (1H0,43H***ELEMENT NUMBER OF SURFACE PROPERTY DATA ,      -
     1  46HDOES NOT MATCH GEOMETRY DATA ELEMENT NUMBER.  ,              -
     2 13HPROGRAM STOP.  )
      WRITE (TAPEOT,251) IG4,J,E
  251 FORMAT (1H ,4HIG4=,I4,3H J=,I2,3H E=,8E12.5,/1H ,16X,8E12.5,/1H , -
     1  16X,9E12.5)
      STOP
C
  260 SX = E1(8)
      SY = E1(9)
      SZ = E1(10)
C
C  CHECK SKIN FRICTION METHOD FLAG
      IF (ISFMTH .EQ. 1) GO TO 300
      CP = 0.0
      DELTA = E1(6)
      GO TO 430
C
  300 CP = E1(5)
      ANGLE(1) = E1(6)
      DELTA = E1(6)
      BS(6) = E1(7)
      PPINF = E1(11)
      TTINF = E1(12)
      IF (ABS(CP) .GT. 0.00001) GO TO 400
      DO 390 I=1,8
  390 BS(I) = FS(I)
      GO TO 410
  400 IF (BS(6).EQ.0.0 .OR. PPINF.EQ.0.0 .OR. TTINF.EQ.0.0) GO TO 405
C  CALCULATE BS ARRAY USING PPINF AND TTINF OBTAINED FROM SURFACE DATA
C    PRESSURE
      BS(2) = PPINF*PFS
C    TRMPERATURE
      BS(3) = TTINF * TFS
C    DENSITY
      BS(1) = BS(2)/(BS(3)*GASCP*(GM1/GAM))
C    SPEED OF SOUND
      BS(4) = SQRT(GASCP*GM1*BS(3))
C    VISCOSITY
      IF (BS(3).GE.AV1) BS(5) = 2.27E-8*BS(3)**1.5/(BS(3)+198.6)
      IF (BS(3).LT.AV1) BS(5) = AV2*BS(3)**AV3
      GO TO 408
C
C  CALCULATE BS ARRAY GIVEN ONLY CP
C  CALCULATE SQUARE OF MACH NUMBER NORMAL TO EFFECTIVE SHOCK
  405 MACHO = FS(6)
      MACHSQ = (MACHO*MACHO*CP-G4)/G21
C  CALCULATE EFFECTIVE DENSITY RATIO
      EPSI = G11 * (1.0+2.0/(GM1*MACHSQ))
C  CALCULATE THE EFFECTIVE SHOCK ANGLE SQUARED
      ANGLE(3) = CP / (2.0*(1.0-EPSI))
C  CALCULATE NORMAL MACH SQUARED TIMES SQUARE OF SHOCK ANGLE
      EMN = MACHSQ * ANGLE(3)
      IF (EMN .LT. 1.01) EMN = 1.01
      BS(1) = FS(1)*G1*EMN/(GM1*EMN+2.0)
C  PRESSURE      EQ. 128
      BS(2) = FS(2)*(G2*EMN-GM1)/G1
C  TEMPERATURE   EQ. 130
      R3 = (G2*EMN-GM1)*(2.0+GM1*EMN)/(G1*G1*EMN)
      BS(3) = FS(3) * R3
C  SPEED OF SOUND
      BS(4) = FS(4) * SQRT(R3)
C  VISCOSITY
      IF(BS(3).GE.AV1) BS(5) = 2.27E-8*BS(3)**1.5/(BS(3)+198.6)
      IF(BS(3).LT.AV1) BS(5) = AV2*BS(3)**AV3
C  MACH NUMBER   EQ. 132
      BS6SQ = ((G1*FS(6))**2*EMN - 4.0*(EMN-1.0)*(GAM*EMN+1.0))/        -
     1        ((2.0*GAM*EMN - GM1)*(2.0+GM1*EMN))
      IF (BS6SQ .LT. 1.0) BS(6) = 1.01
      IF (BS6SQ .GE. 1.0) BS(6) = SQRT(BS6SQ)
C  VELOCITY
  408 BS(7) = BS(4) * BS(6)
C  REYNOLDS NUMBER PER FOOT
      BS(8) = BS(1) * BS(7)/BS(5)
C
C***********************************************************************
  410 LS = L
C  CALL THE MARK III SKIN FRICTION ROUTINE
      IGTYPE = 2
      IF (IS(L,3) .EQ. 1) IGTYPE = 17
C     WRITE (TAPEOT,910) BS
C 910 FORMAT (1H ,3HBS=,8E12.5)
      CALL SKINFR
      IF (ABS(SURF(L,1)) .GT. 0.00001) AREA = SURF(L,1)
      CP = 0.0
      IF (IGTYPE .EQ. 17) CP = SHEAR / (GAM/2.0*MACH*MACH)
  430 SHEARX = SHEAR*SX
      SHEARY = SHEAR*SY
      SHEARZ = SHEAR*SZ
C
  440 CONTINUE
C  SELECT FORCE METHOD TO MEET SYMMETRY REQUIREMENTS
      IF (SYMFCT .EQ. 1) GO TO 450
      IF (R.NE.0.0 .OR. P.NE.0.0) GO TO 450
      IF (BETA(J).EQ.0.0 .AND. ROLL.EQ.0.0) GO TO 470
C
C  CALCULATE SIX-COMPONENT FORCE CONTRIBUTIONS OF ELEMENT
  450 DELCA = NX * (CP*AREA/SREF)
      DELCY = NY * (CP*AREA/SREF)
      DELCN =-NZ * (CP*AREA/SREF)
      IF (IGTYPE .EQ. 17) GO TO 460
      DELCA = DELCA - SHEARX *(AREA/SREF)
      DELCY = DELCY - SHEARY *(AREA/SREF)
      DELCN = DELCN + SHEARZ *(AREA/SREF)
  460 DELCLL= DELCY * (ZCENT - ZCG)/SPAN                                -
     1       +DELCN * (YCENT - YCG)/SPAN
      DELCLM= DELCN * (XCENT - XCG)/MAC                                 -
     1       +DELCA * (ZCENT - ZCG)/MAC
      DELCLN= DELCY * (XCENT - XCG)/SPAN                                -
     1       -DELCA * (YCENT - YCG)/SPAN
      GO TO 500
  470 DELCA = NX  * (CP*AREA/SREF) * 2.0
      DELCY = 0.0
      DELCN =-NZ  * (CP*AREA/SREF) * 2.0
      IF (IGTYPE .EQ. 17) GO TO 490
      DELCA = DELCA - SHEARX * 2.0*(AREA/SREF)
      DELCN = DELCN + SHEARZ * 2.0*(AREA/SREF)
  490 DELCLL = 0.0
      DELCLM=(DELCN * (XCENT - XCG) / MAC                               -
     1       +DELCA * (ZCENT - ZCG) / MAC )
      DELCLN=  0.0
C
C  SUM UP SIX-COMPONENT FORCE CONTRIBUTIONS
  500 CA = CA + DELCA
      CY = CY + DELCY
      CN = CN + DELCN
      CLL = CLL + DELCLL
      CLM = CLM + DELCLM
      CLN = CLN + DELCLN
      AREAT = AREAT + AREA
  510 IF (IPRINT .EQ. 0) GO TO 595
C  CHECK TO PRINT HEADER AT TOP OF PAGE
  520 IF (NPRT.LT.NPCK) GO TO 580
  530 NPRT = 0
      CALL HEADER
      WRITE (TAPEOT,540) (GTYPE(I),I=1,2)
  540 FORMAT (1H , 63X, 2A4)
  550 CONTINUE
      WRITE (TAPEOT,560) MACH,ALT,SREF,SPAN,XCG,YCG,ZCG,MAC
  560 FORMAT (1H0,20HELEMENT DATA   MACH=F7.3,7H  ALT =F8.0,9H  S REF = -
     1 F8.1,8H  SPAN =,F7.1,/1H ,                                       -
     2 15X5HXCG =F7.1,7H  YCG =F7.1,10H    ZCG  =F7.1,4X5HMAC =F7.1)
      WRITE (TAPEOT,570) ALPHA(J),BETA(J),                              -
     1  IDERIV,Q,R,P
  570 FORMAT (1H ,5X17HANGLE OF ATTACK =F6.2,3X11HYAW ANGLE =F6.2,/1H , -
     2  5X8HIDERIV =I3,3X3HQ =E12.5,3X,3HR =E12.5,3X3HP =E12.5,/        -
     3  1H0,2X,1HL,6X,6HDEL CA,8X                                       -
     4  6HDEL CY,8X6HDEL CN,7X7HDEL CLL,7X7HDEL CLM,7X7HDEL CLN,7X2HCP, -
     5  13X4HAREA,/1H ,11X2HCA,12X2HCY,12X2HCN,11X3HCLL,11X3HCLM,       -
     6  12X3HCLN,8X5HDELTA/1H ,10X5HXCENT, 9X5HYCENT, 9X5HZCENT)
      NPRT = NPRT + 15
C
C  PRINT ELEMENT DATA
  580 WRITE(TAPEOT,590)L,DELCA,DELCY,DELCN,DELCLL,DELCLM,DELCLN,CP,AREA,-
     1  CA,CY,CN,CLL,CLM,CLN,DELTA,XCENT,YCENT,ZCENT
  590 FORMAT (1H0,I4,8E14.5,/1H ,4X7E14.5/1H , 4X3E14.5)
      NPRT = NPRT + 4
C  SET UP AND SAVE ELEMENT RESULTS ON GEOMETRY STORAGE UNIT
  595 IF (ISAVE .EQ. 0) GO TO 600
      E1(3) = SHEAR
      CALL WRITMS (4,E1,25,IG4SD)
C     WRITE (4'IG4SD) E1
C
C*****
  600 CONTINUE
C ***** END OF DO LOOP FOR ALL ELEMENTS
C
C
C  CHECK IF NO SYMMETRY
      IF (ISFMTH .EQ. 0)  GO TO 620
      IF (SYMFCT .EQ. 1) GO TO 620
C  CHECK IF YAW AND ROLL ARE ZERO
      IF (BETA(J).EQ.0.0 .AND. ROLL.EQ.0.0) GO TO 620
C  CHECK IF SYMMETRY CALCULATIONS ARE COMPLETED
      IF (SYMFCO .EQ. 1) GO TO 620
C  SET SYMMETRY RE-CYCLE FLAG
      SYMFCO = 1
      GO TO 10
  620 CONTINUE
C  SET UP ARRAY OF FINAL DATA
      F(1) = ALPHA(J)
      F(4) = CA
      F(5) = CY
      F(6) = CN
      F(7) = BETA(J)
      F(9) = CLM
      F(10)= CLL
      F(11)= CLN
C  RESOLVE NORMAL AND AXIAL FORCES IN LIFT AND DRAG DIRECTION
      CD = CA*COS(ALPHAR)*COS(BETAR)-CY*SIN(PHIR)*SIN(ALPHAR)*COS(BETAR)-
     1  -CY*COS(PHIR)*SIN(BETAR)+CN*COS(PHIR)*SIN(ALPHAR)*COS(BETAR)    -
     2  -CN*SIN(PHIR)*SIN(BETAR)
      CL = -CA*SIN(ALPHAR)-CY*SIN(PHIR)*COS(ALPHAR)+CN*COS(PHIR)        -
     1  *COS(ALPHAR)
C  CALCULATE SIDE FORCE COEFFICIENT - WIND AXIS
      CYPRIM = CA*COS(ALPHAR)*SIN(BETAR)-CY*SIN(PHIR)*SIN(ALPHAR)       -
     1  *SIN(BETAR)+CY*COS(PHIR)*COS(BETAR)+CN*COS(PHIR)*SIN(ALPHAR)    -
     2  *SIN(BETAR)+CN*SIN(PHIR)*COS(BETAR)
C
C  SET UP REMAINING PARAMETERS
      F(2) = CD
      F(3) = CL
      IF (CD .EQ. 0.0) CD = 0.000001
      F(8) = CL / CD
C
C
  630 RETURN
      END
*DECK SKIN
      SUBROUTINE SKINFR
C
C
C
C  THIS SUBROUTINE CALCULATES SKIN FRICTION FOR BOTH LAMINAR
C  AND TURBULENT FLOWS.  REFERENCE TEMPERATURE, REFERENCE
C  ENTHALPY, AND SPALDING-CHI CALCULATION PROCEDURES MAY BE SELECTED.
C  ALSO, THE INDUCED PRESSURES DUE TO VISCOUS-INTERACTION ARE
C  DETERMINED IN THIS SUBROUTINE.
C
C
C
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /GDATA/LTOT,J,SYMFCT,IORN,IGTYPE,L
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /REF/SREF,MAC,SPAN,XCG,YCG,ZCG
      COMMON /ABDATA/NAB,ALPHA(20),BETA(20),ROL(20),CDELTA(20),QI(20),  -
     1               RI(20),PI(20)
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON /SKIND/LS,IS(100,9),SURF(100,8),DELTA,SKIN
      COMMON /FSBS/FS,BS
      COMMON /TEMPQC/HAW,H2,H1,HW,CKU,FC,FRX,RET,ELLOC,GCP,  TST1,ROMURA
      DIMENSION  ANGLE(3),BS(8),CFT(6),CFL(6),FS(8),RE(2),SCF(4),TR(10),-
     1  TS(2),CF(2),  SCFA(2),TITLE(15),RT(2)
      INTEGER  ERROR,SYMFCT,SYMFCO,CASE,PAGE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL  MACH,MAC,NX,NY,NZ,KO,M,LAMBDA
C
C
C  CHECK IF FLOW IS SUPERSONIC
   10 IF (MACH .GT.1.0) GO TO 30
      WRITE (TAPEOT,20)
   20 FORMAT (1H0,47H**** INPUT MACH NUMBER IS NOT SUPERSONIC.  SKIN    -
     1 49H FRICTION ANALYSIS FOR THIS POINT IS STOPPED ****  )
      SKIN = 0.0
      GO TO 510
C
C  SET STARTING CONSTANTS
   30 MER  = 1
      SCFA(1) = 0.0
      SCFA(2) = 0.0
      IF (LS .EQ. 1) NPRT = 0
      IGTY = 0
      IF (IGTYPE .EQ. 17) IGTY = 1
      IF (IGTYPE .EQ. 17) IGTYPE = 2
      MEREXP= 0
      NC   = 0
      NS = LS
      SCF(1) = 0.0
      SCF(2) = 0.0
      SCF(3) = 0.0
      SCF(4) = 0.0
C
C  VISCOSITY EQUATION
      GA= GAM
      TR(1) = ALT
      TR(2) = MACH
      TR(3) = MACH * FS(4)
      TR(4) = 0.0
      ANGLE(1) = DELTA
      I = LS
C
C
C
C  DETERMINE APPROPRIATE LENGTHS AND TAPER RATIOS.
      EL = SURF(I,2)
      ELO = SURF(I,3)
      TAPER1 = SURF(I,4)
      TAPER2 = SURF(I,5)
      IF (TAPER1 .LT. 0.0) GO TO 40
      SURF(I,5) = (EL*TAPER2 + ELO*TAPER1)/(EL + ELO)
      EL = EL + ELO
      GO TO 70
   40 TAPER1 = -TAPER1
      SURF(I,5) = 1.0
      EL1 = ELO + EL*TAPER2
      EL  = EL + ELO*TAPER1
      IF (EL-EL1)50,70,60
   50 SURF(I,5) = EL/EL1
      EL = EL1
      GO TO 70
   60 SURF(I,5) = EL1/EL
   70 IF (TAPER1 .EQ. 0.0) TAPER1 = 0.0001
      IF (SURF(I,5) .EQ. 0.0) SURF(I,5) = 0.0001
      TR(5) = SURF(I,6)
       TR(6) = SURF(I,7)
C
      IF (SURF(I,5) .LT. 0.8) GO TO 80
      ELL    = EL * 4.0 * ((1.0 + SURF(I,5)) / (3.0+SURF(I,5)))**2
      GO TO 90
C
   80 ELL    = EL * (0.75*(1.0-SURF(I,5)**2) /(1.0-SURF(I,5)**1.5))**2
   90 REN1 = FS(8) * ELL
C
C  CALCULATE REFERENCE TEMPERATURE, REYNOLDS NO., AND WALL
C  TEMPERATURE (IF REQUIRED).  FIRST CHECK IF TEMPERATURE
C  ITERATIONS AND/OR LOCAL CF DATA TO BE PRINTED.
  100 IF (IS(I,9).EQ.0) GO TO 120
C
C  LOCAL DATA TO BE PRINTED.  IF TEMPERATURE ITERATIONS START
C  NEW PAGE FOR EACH SURFACE.  OTERWISE TEST IF HEADER REQUIRED.
      IF (IS(I,9).EQ.1) GO TO 110
      IF ((NPRT.LT.50).AND.(LS.NE.1)) GO TO 120
C
  110 CALL HEADER
      WRITE (TAPEOT,350) (GTYPE(IK),IK=1,2)
      WRITE (TAPEOT,360) ALPHA(J),MACH,TR(3),ALT,FS(8),SREF
      NPRT = 9
  120 CALL TEMP(EL,TR,RE,TS,IS(I,6),MER,IS(I,9),RT,CF)
C  CHECK ERROR FLAG
      IF (MER .LE. 1) GO TO 130
      MER = 1
      GO TO 330
C
C  CALCULATE VISCOUS-INVISCID INTERACTION EFFECT ON SKIN FRICTION
  130 KO = MACH * SIN(ANGLE(1) / 57.29578)
      IF (KO.LT.-0.0001 .OR. KO.GT.0.0001) GO TO 140
      PO = 1.0
       M = 1.9156
       GO TO 170
  140 CONTINUE
      IF (KO.GE.0.0) GO TO 150
C  EXPANSION SURFACE.
      PO = 0.00001
      M = 0.00001
      IF (KO.LE.(-2./(GA-1.))) GO TO 170
      PO = (1.0 + 0.5*(GA-1.)*KO)**(2.*GA/(GA-1.))
      IF (KO.GE.-3.0) GO TO 160
      M = 1.424 + 0.219*KO
      GO TO 170
C  COMPRESSION SURFACE.
  150 PO = 1.0 + 0.25*GA*(GA + 1.0)*KO*KO +                             -
     1         GA*KO*SQRT(1.0 + (0.25*(GA + 1.0)*KO)**2)
  160 M = 1.9156 + KO*(0.41727 - KO*(0.0419101 + KO*(0.010427           -
     1           - KO*(0.00214381 - KO*1.03217E-4))))
      IF (KO .GT. 10.0) M = SQRT(2.0*GA*(GA+1.0))
  170 TWTRL  = TR(5) / RT(1)
      G = 0.8604*(GA-1.)*(TWTRL+(4.65*PRAN**(-.166667)-3.65)*PRAN/2.59)
      A =  G / 2.0
      IF(TR(5).GE.AV1) VISWL = 2.27E-8*TR(5)**1.5/(TR(5)+198.6)
      IF(TR(6).GE.AV1) VISWT = 2.27E-8*TR(6)**1.5/(TR(6)+198.6)
      IF(TR(5).LT.AV1) VISWL = AV2*TR(5)**AV3
      IF(TR(6).LT.AV1) VISWT = AV2*TR(6)**AV3
      RELOC = BS(8) * SURF(I,2)
      CLAM = VISWL * TFS / (VIS*TR(5))
      CTURB= VISWT * TFS / (VIS*TR(6))
      CHIBAR = MACH**3*SQRT(CLAM) / SQRT(REN1*EL/ELL)
      VBAR = CHIBAR /(MACH*MACH)
      IF(TS(1).GE.AV1) VISTAR= 2.27E-8*TS(1)**1.5/(TS(1)+198.6)
      IF(TS(1).LT.AV1) VISTAR= AV2*TS(1)**AV3
      CSTAR = VISTAR * TFS / (VIS*TS(1))
      VSTAR = MACH * SQRT(CSTAR) / SQRT(REN1*EL/ELL)
      FJ = IS(I,2)
      LAMBDA = A * CHIBAR /SQRT(1. + 2.*FJ)
      IF (IGTY .EQ. 1) GO TO 500
      B = M * LAMBDA / PO * SQRT(EL/ELL)
      CFCFOL = SQRT(1.0+B) + 0.5*B*ALOG(ABS((SQRT(1.0+B)+1.0)/          -
     1             (SQRT(1.0+B)-1.0)))
      IF (CFCFOL .LT. 1.0) CFCFOL = 1.0
      CFCFOT = 1.0

C
C  START TURBULENT FLOW CALCULATIONS
      IF (RE(2) .LE. 6570.) GO TO 260
      EN = 0.8686 / (ALOG10(RE(2)) - 2.0)
C  CHECK TAPER RATIO AND CHARACTERISTIC LENGTH TERMS
      IF (SURF(I,5) .LT. 0.8) GO TO 180
      Q = SQRT ((1.0 + SURF(I,5)) / (1.0 + EN + SURF(I,5) * (1.0-EN)))
      GO TO 190
C
  180 Q = SQRT ((1.0 - SURF(I,5)**2) *(1.0- 0.5 *EN) /                  -
     1   (1.0 - SURF(I,5)**(2.0-EN)))
C
  190 ELT = EL * (RE(2)/10.0**1.5) ** (Q - 1.0)
      ESIN = SIN((ANGLE(1)-TR(4))/57.29578)
      ECOS = COS((ANGLE(1)-TR(4))/57.29578)
      RE(2)  = RE(2) * ELT/EL
      CFT(1) = 0.088 / (0.43429448 * ALOG(RE(2)) - 1.5)**2
      FF = ELO      /SURF(I,2)*(1.0 + TAPER1)/(1.0 + TAPER2)
      IF (ELO.LT. 0.0001) GO TO 250
      IF ((RE(2)*ELO/ELT).GT. 6570.0) GO TO 220
      IF (TAPER1.LT. 0.8) GO TO 200
      EL1 = ELO*4.0*((1.+TAPER1)/(3.0+TAPER1))**2
      GO TO  210
  200 EL1 = ELO*(0.75*(1.-TAPER1**2)/(1.-TAPER1**1.5))**2
  210 CFL(1) = 1.328/SQRT(RE(2)*EL1/ELT)
      FF = FF*(CFL(1)/CFT(1) - 1.0)
      GO TO 250
  220 EN = 0.8686/(ALOG10(RE(2)*ELO/ELT) - 2.0)
      IF (TAPER1.LT. 0.8) GO TO 230
      Q = SQRT((1.0+TAPER1)/(1.0+EN+TAPER1*(1.-EN)))
      GO TO 240
  230 Q = SQRT((1.0-TAPER1**2)*(1.0-0.5*EN)/(1.0-TAPER1**(2.0-EN)))
  240 EL1 = ELO*(RE(2)*ELO/ELT/10.**1.5)**(Q-1.0)
      FF = FF*(((ALOG10(RE(2))-1.5)/(ALOG10(RE(2)*EL1/ELT)              -
     1              -1.5))**2 - 1.0)
  250 CFT(1) = CFT(1)*(1.0-FF)
      CFT(2) = CFT(1) /FC
      CFT(3) = CFT(2) * (BS(7)/FS(7))**2 * BS(1) / FS(1) * CFCFOT
      CFT(4) = CFT(3) * SURF(I,1) / SREF
      IF (IGTYPE .EQ. 2) GO TO 260
      IF (IS(I,5).EQ.0) CFT(5) = -ESIN * CFT(4)
      IF (IS(I,5).EQ.0) CFT(6) =  ECOS * CFT(4)
      IF (IS(I,5).EQ.1) CFT(5) =  0.0
      IF (IS(I,5).EQ.1) CFT(6) = CFT(4) * COS(SURF(I,4)/57.29578)
C
C  START LAMINAR FLOW CALCULATIONS
  260 RE(1)  = RE(1) * ELL/EL
      ESIN = SIN((ANGLE(1)-TR(4))/57.29578)
      ECOS = COS((ANGLE(1)-TR(4))/57.29578)
      FF = ELO      /SURF(I,2)*(1.0 + TAPER1)/(1.0 + TAPER2)
      IF (ELO.LT. 0.0001) GO TO 290
      IF (TAPER1.LT. 0.8) GO TO 270
      EL1 = ELO*4.0*((1.0 + TAPER1)/(3.0 + TAPER1))**2
      GO TO 280
  270 EL1 = ELO*(0.75*(1.0-TAPER1**2)/(1.0-TAPER1**1.5))**2
  280 B = B*SQRT(ELL/EL1)
      CFCFO1 = SQRT(1.0+B) + 0.5*B*ALOG(ABS((SQRT(1.0+B)+1.0)/          -
     1             (SQRT(1.0+B)-1.0)))
      FF = FF*(SQRT(ELL/EL1)*CFCFO1/CFCFOL - 1.0)
  290 CFL(1) = 1.328/SQRT(RE(1))*(1.0-FF)
      CFL(2) = CFL(1) * BS(3)/TS(1)
      CFL(3) = CFL(2) * (BS(7)/FS(7))**2 * BS(1) / FS(1) * CFCFOL
      CFL(4) = CFL(3) * SURF(I,1) / SREF
      IF (IGTYPE .EQ. 2) GO TO 310
      IF (IS(I,5).EQ.0) CFL(5) = -ESIN * CFL(4)
      IF (IS(I,5).EQ.0) CFL(6) =  ECOS * CFL(4)
      IF (IS(I,5).EQ.1) CFL(5) =  0.0
      IF (IS(I,5).EQ.1) CFL(6) = CFL(4) * COS(SURF(I,4)/57.29578)
C
C  CALCULATE TOTALS USING LAMINAR FLOW
      SCF(1) = SCF(1) + CFL(5)
      SCF(2) = SCF(2) + CFL(6)
C  TOTAL SKIN FRICTION FORCE COEFF. AND SURFACE
      SCFA(1) = SCFA(1) + CFL(4)
C
C  CHECK IF RE(2) IS LOWER THAN THE CUTOFF POINT (USE LAMINAR PROP.)
      IF (RE(2) .GT. 6570.0) GO TO 300
      SCF(3) = SCF(3) + CFL(5)
      SCF(4) = SCF(4) + CFL(6)
      SCFA(2) = SCFA(2) + CFL(4)
      CFT(3) = CFL(3)
      CFT(5) = CFL(5)
      CFT(6) = CFL(6)
      GO TO 320
C  CALCULATE TOTALS USING TURBULENT FLOW
  300 SCF(3) = SCF(3) + CFT(5)
      SCF(4) = SCF(4) + CFT(6)
C  TOTAL SKIN FRICTION FORCE COEFF. AND SURFACE
      SCFA(2) = SCFA(2) + CFT(4)
      GO TO 320
  310 CFL(6) = 0.0
      CFL(5) = 0.0
      SCF(2) = 0.0
      SCF(1) = 0.0
      CDL = 0.0
      CFT(6) = 0.0
      CFT(5) = 0.0
      SCF(4) = 0.0
      SCF(3) = 0.0
      CDT = 0.0
      IF (RE(2) .LE. 6570.0) CFT(3) = CFL(3)
C
C  CALCULATE RE*/FT
  320 RE1 = RE(1) / ELL
      IF (RE(2) .LE. 6570.0) ELT = EL
      RE2 = RE(2) / ELT
      TWTL = TR(5) / FS(3)
      TWTT = TR(6) / FS(3)
      TWTRL = TR(5) / RT(1)
      TWTRT = TR(6) / RT(2)
      IF (IGTYPE .EQ. 2) GO TO 330
      ALPHAR = ALPHA(J)/57.295779
      CDT = CFT(5)*SIN(ALPHAR) + CFT(6)*COS(ALPHAR)
      CDL = CFL(5)*SIN(ALPHAR) + CFL(6)*COS(ALPHAR)
C
C  CHECK IF DATA IS TO BE PRINTED
  330 IF (IS(I,7).EQ.0 .AND. MEREXP.EQ.0) GO TO 490
      IF (IS(I,7).EQ.0 .AND. MEREXP.NE.0) GO TO 470
C  PRINT SKIN FRICTION DATA
C
      IF (IS(I,9).EQ.0) GO TO 340
      IF ((NS.EQ.1).AND.(MEREXP.EQ.1)) GO TO 340
      IF (IS(I,9).EQ.1) GO TO 370
      IF ((NS.NE.1).AND.(NPRT.GT.10)) GO TO 400
      GO TO 370
C
C  CHECK IF HEADER IS REQUIRED
  340 IF ((NS.NE.1).AND.(NPRT.LT.50)) GO TO 400
      CALL HEADER
      WRITE (TAPEOT,350) (GTYPE(IK),IK=1,2)
  350 FORMAT (1H , 63X, 2A4)
      NPRT = 5
C
      WRITE (TAPEOT,360) ALPHA(J),MACH,TR(3),ALT,FS(8),SREF
  360 FORMAT (1H0,                                                      -
     1 23H FREE STREAM CONDITIONS,/1H ,9X7HALPHA =F7.2,6X9HMACH    =    -
     2 F6.2,3X10HVELOCITY =F9.1,3X10HALTITUDE =F9.1,/1H ,9X7HRE/FT =    -
     3 1PE10.3,3X9HS REF   =0PF9.1)
      NPRT = NPRT + 4
C
  370 WRITE (TAPEOT,380)
      NPRT = NPRT + 5
  380 FORMAT (1H0,19H SKIN FRICTION DATA,/1H ,9X8HSURF NO.,3X4HTYPE,    -
     1 4X6HMETHOD,4X5HS WET,3X7HLENGTHL,2X7HLENGTHI,3X5HTAPER,          -
     2 4X8HANGLE(1),2X6HRE LOC,4X7HCHI BAR,2X5HV BAR,/                  -
     3 1H ,2X3HLAM,7X2HCF,7X2HCA,7X2HCN,5X6HSUM CA,3X6HSUM CN,5X2HTW,   -
     4 7X4HTW/T,6X5HTW/TR,3X6HRE*/FT,4X7H   CD  ,2X6HCF/CFO,/           -
     5 1H ,2X4HTURB,6X2HCF,7X2HCA,7X2HCN,5X6HSUM CA,3X6HSUM CN,5X2HTW,  -
     6 7X4HTW/T,6X5HTW/TR,3X6HRE*/FT,4X7H   CD  ,2X6HCF/CFO )
C
      IF (IS(I,8) .EQ. 0) GO TO 400
      WRITE (TAPEOT,390)
      NPRT = NPRT + 1
  390 FORMAT (1H ,10X4HMACH,8X1HV,5X7HV SOUND,3X5HP-PSF,3X6HTEMP-R,     -
     1 3X9HRHO*10**4,1X9HVIS*10**7,3X5HRE/FT,2X,6HC STAR,7X,1HC,5X,     -
     2 6HV STAR)
C
  400 WRITE (TAPEOT,410) (IS(I,K),K=1,3),(SURF(I,K),K=1,4),ANGLE(1),RELO-
     1C             ,CHIBAR,VBAR
      NPRT = NPRT + 2
  410 FORMAT (1H0,11XI2,9XI1,7XI2,4XF8.0,2XF6.1,4XF5.1,3XF5.1,6XF6.2,   -
     1 1X1PE10.3,2X0PF7.3,1XF7.4 )
C
      IF (MEREXP.NE.0) GO TO 450
C
      WRITE (TAPEOT,420) CFL(3),CFL(6),CFL(5),SCF(2),SCF(1),TR(5),TWTL, -
     1   TWTRL,RE1,CDL    ,CFCFOL,                                      -
     2               CFT(3),CFT(6),CFT(5),SCF(4),SCF(3),TR(6),TWTT,     -
     3   TWTRT,RE2,CDT    ,CFCFOT
      NPRT = NPRT + 2
  420 FORMAT (1H ,2X3HLAM,4XF8.5,F9.5,F9.5,F9.5,F9.5,F9.1,F10.4,        -
     1 F10.4,1PE10.3,0PF9.5,1XF7.4,/                                    -
     2 1H ,2X4HTURB,3XF8.5,F9.5,F9.5,F9.5,F9.5,F9.1,F10.4,F10.4,        -
     3 1PE10.3,0PF9.5,1XF7.4 )
C
  430 IF (IS(I,8) .EQ. 0) GO TO 480
      WRITE (TAPEOT,440) FS(6),FS(7),FS(4),FS(2),FS(3),FS(1),FS(5),FS(8)-
     1, CSTAR,CLAM,VSTAR,BS(6),BS(7),BS(4),BS(2),BS(3),BS(1),BS(5),BS(8)
      NPRT = NPRT + 2
  440 FORMAT (1H ,2X6HSTREAM,F9.5,F9.1,F9.2,F9.4,F9.2,4PF10.7,7PF10.6,  -
     11PE10.3,2E10.3,0PF7.4,/1H ,2X6HLOCAL ,0PF9.5,F9.1,F9.2,F9.4,      -
     2  F9.2,4PF10.7,7PF10.6,1PE10.3)
      GO TO 480
C
  450 WRITE (TAPEOT,460)
      NPRT = NPRT + 1
  460 FORMAT (1H ,10X43HFLOW EXPANDED TO A VACUUM - SURFACE DELETED )
  470 MEREXP = 0
      CFL(3) = 0.0
      CFT(3) = 0.0
      IF (IS(I,7) .NE. 0) GO TO 430
C  STEP PRINT FLAG
  480 CONTINUE
C
  490 IJ = I
C
C
C  ADD SKIN FRICTION DRAG TO AXIAL FORCE COEFFICIENT
      IF (IS(IJ,4) .EQ. 0) SKIN = CFT(3)
      IF (IS(IJ,4) .NE. 0) SKIN = CFL(3)
      GO TO 510
C
C  CALCULATE INDUCED PRESSURE INCREMENT
  500 SKIN  =8./3.*M*LAMBDA*EL/SURF(I,2)*((1.+SURF(I,5)+SQRT(SURF(I,5)))-
     1 /((1.+SQRT(SURF(I,5)))*(1.+TAPER2))-(1.+TAPER1+SQRT(TAPER1))/    -
     2 ((1.+SQRT(TAPER1))*(1.+TAPER2))*SQRT(ELO/EL))
C
  510 RETURN
C
      END
*DECK TEMP
      SUBROUTINE TEMP(EL,TR,RE,TS,NW,MER,IPRINT,RT,CF)
C
C
C  CALCULATES WALL TEMPERATURE AND OTHER QUANTITIES NECESSARY
C  FOR SKIN FRICTION AND BOUNDARY LAYER CALCULATIONS.
C  NW IS CONTROL FLAG WITH OPTIONS GIVEN BY FOLLOWING MATRIX.
C
C        GAS       WALL TEMP. TYPE            METHOD FOR
C        TYPE    EQUIL   TAW   INPUT     LAMINAR    TURBULENT
C
C        IDEAL     0      1      2        REF. T      S-C
C
C        REAL      3      4      5        REF. H      S-C
C
C        IDEAL     6     ---     7        REF. T      REF. T
C
C        REAL      8     ---     9        REF. H      REF. H
C
C
C
C  BOTH LAMINAR (K = 1) AND TURBULENT (K = 2) DETERMINED.
C***************D. N. SMYTH PROGRAM AUTHOR******************************
C
C
C
      DIMENSION  CF(2),   BS(8),FS(8),RE(2),TR(10),TS(2),RT(2),RF(2)
      COMMON /SKIND/LS,IS(100,9),SURF(100,8),DELTA,SKIN
      COMMON /FSBS/FS,BS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /TEMPQC/HAW,H2,H1,HW,CKU,FC,FRX,RET,ELLOC,GCP,  TST1,ROMURA
      COMMON /FLAG2/ITW,IHW,IFLOW,ITURB,CFTLOC
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      INTEGER CASE,PAGE,ERROR
      DATA EPST,KTMAX,EMISS/5.E-4,10,0.8/
C
C  SET UP GENERAL QUANTIES (GCP CONSISTENT WITH ATMOS).
      G = GAM
      GCP = GASCP
      HTMH1 = 0.5 * FS(7)**2
      HTMH2 = 0.5 * BS(7)**2
C
      IF (EL .LE. 0.0) EL = 0.01
      ELLOC = EL
      RF(1) = SQRT(PRAN)
      RF(2) = PRAN**(1./3.)
      CKU = 0.332*FS(5)*SQRT(FS(8)/EL)/PRAN**(2./3.)*SQRT(BS(7)/FS(7))
      RADK = 0.480E-12*EMISS*778.0
C
C  SET UP CONTROL FLAGS
      ITURB = 1
      IF (NW.GT.5) ITURB = 2
      NWI = NW
      ITW = 1
      IF (NWI.LT.3) GO TO 30
      ITW = 2
      NWI = NWI - 3
      IF (NWI.LT.3) GO TO 30
      IF (NWI.LT.5) GO TO 10
      NWI = NWI - 5
      GO TO 20
   10 ITW = 1
      NWI = NWI - 3
   20 IF (NWI.NE.0) NWI = 2
C
C  MAJOR LOOP FOR CALCULATING LAMINAR (K=1) AND TURBULENT (K=2) FLOW.
   30 DO 400 K = 1,2
      H1 = GCP * FS(3)
      IF (IPRINT.NE.1) GO TO 50
      WRITE (TAPEOT,40)
      NPRT = NPRT + 1
   40 FORMAT(1H )
   50 KT = 0
      IFLOW = K
      IHW = 0
      H2 = H1 + HTMH1 - HTMH2
      HAW = H2 + RF(K)*HTMH2
      TC1 = 100.
      IF (NWI - 1)80,60,70
   60 HW = HAW
      IHW = 1
      GO TO 210
   70 TC1 = TR(K+4)
      IF (TC1.GT.7000.) TC1 = 7000.
      GO TO 210
   80 ITW = 1
C  NOTE, FOR REAL GAS EQUILIBRIUM TW IDEAL GAS DONE FIRST.
      TR1 = TC1
      QC1 = QC(TC1)
      QR1 = RADK*1.E+8
      QR2 = QC1
      TR2 = (QR2/RADK)**0.25
      TC2 = HAW/GCP
      IF (TR2 .LT.TC2) GO TO 90
      QC2 = 0.0
      TR2 = TC2
      QR2 = RADK*TR2**4
      GO TO 100
   90 TC2 = TR2
      QC2 = QC(TC2)
C
C  ITERATION CYCLE FOR TW
  100 KT = KT + 1
C**CHECK IF TEMPERATURE ITERATIONS TO BE PRINTED.
      IF (IPRINT.NE.1) GO TO 120
      WRITE (TAPEOT,110) KT,TC1,TR1,TC2,TR2,ITW,QC1,QR1,QC2,QR2
  110 FORMAT(1H ,2X4HKT =,I4,5X5HTC1 =,E13.6,5X5HTR1 =,E13.6,           -
     1       5X5HTC2 =,E13.6,5X5HTR2 =,E13.6, /3X4HITW=,I4,             -
     2       5X5HQC1 =,E13.6,5X5HQR1 =,E13.6,5X5HQC2 =,E13.6,           -
     3       5X5HQR2 =,E13.6)
      NPRT = NPRT +1
C
C  CHECK IF ALLOWABLE NUMBER OF ITERATIONS EXCEEDED.
  120 CONTINUE
      IF (KT.GT.KTMAX) GO TO 200
      DQC = QC1-QC2
      DQR = QR2-QR1
      DTC = TC1-TC2
      DTR = TR2-TR1
C  LINEAR SOLUTION (OR INTERCEPT FOR NEXT GUESS.
      TC1 = ((QR1*TR2 - QR2*TR1)*DTC + (QC1*TC2 - QC2*TC1)*DTR)/        -
     1      (DQC*DTR - DQR*DTC)
C
C  CALCULATE HEATING RATES AND CHECK CONVERGENCE.
      IF (TC1.LT.0.0) GO TO 140
  130 TR1 = TC1
      QR1 = RADK*TR1**4
      QC1 = QC(TC1)
      IF (ABS(1. - QC1/QR1).LE.EPST) GO TO 190
C  NO SOLUTION, INITIATE NEXT CYCLE.
      IF (QC1.GT.0.0) GO TO 170
C
C  QC1 NEQATIVE, SPECIAL INITIALIZATION USED.
  140 KSUB = 1
  150 TC2 = TC1 + QC1*(TC2-TC1)/(QC1-QC2)
      QC2 = QC(TC2)
      TR2 = TC2
      QR2 = RADK*TR2**4
      IF (KSUB.NE.1) GO TO 100
      TC1 = TC2
  160 TC1 = 0.5*TC1
      QC1 = QC(TC1)
      TR1 = TC1
      QR1 = RADK*TR1**4
      IF (QC1.GT.QR1) GO TO 100
      IF (KSUB.EQ.5) GO TO 100
      KSUB = KSUB + 1
      GO TO 160
C
C  QC1 POSITIVE, CONTINUE INITIALIZATION OF NEXT CYCLE.
  170 QR2 = QC1
      TR2 = (QR2/RADK)**0.25
      TC2 = TR2
      QC2 = QC(TC2)
      IF (ABS(1. - QC2/QR2).LE.EPST) GO TO 180
      IF (QC2.GT.0.0) GO TO 100
      KSUB = 2
      GO TO 150
C
C  SOLUTION OBTAINED
  180 TC1 = TC2
C
C  CHECK IF REAL GAS SOLUTION DESIRED.
  190 IF ((ITW.EQ.2).OR.(NW.LT.3)) GO TO 210
      IF ((NW.EQ.6).OR.(NW.EQ.7)) GO TO 210
C
C  DETERMINE REAL GAS SOLUTION
      ITW = 2
      KT = 0
      H1 = ENTHAL (FS(3), FS(2))
      H2 = H1 + HTMH1 - HTMH2
      HAW = H2 + RF(K)*HTMH2
      GO TO 130
C
C  EXCEEDED ALLOWABLE ITERATIONS (KTMAX), AVERAGE LAST TWO VALUES
  200 CONTINUE
      TC1 = (TC1 + TC2)*0.5
      GO TO 190
C
C  CALCULATE QC AT FINAL TW VALUE TO SET QUANTITIES IN COMMON.
  210 QC1 = QC(TC1)
  220 RT(K) = HAW/GCP
      IF(NW.EQ.1 .OR. NW.EQ.4) TC1 = RT(K)
      TR(K+4) = TC1
      TR(K+6) = HW
      TR(K+8) = HAW
      TS(K) = TST1*FS(3)
C  RT AND TS ARE CORRECT ONLY FOR AN IDEAL GAS.
      GO TO (230,370),K
  230 CFLLOC = CKU*ROMURA*2.0*PRAN**(2./3.)/(BS(1)*BS(7))
      RE(K) = (0.664*BS(3)/(TS(K)*CFLLOC))**2
      NW1 = 0
C
C  THE FOLLOWING CARDS ARE FOR LOCAL CF PRINTOUT ONLY.
C  LAMINAR FLOW
      CF1RE1 = 0.664*SQRT((BS(7)/FS(7))**3)*ROMURA
      CF1 = CF1RE1/SQRT(FS(8)*ELLOC)
      CF(1) = CF1
      RORA = ROMURA**2
      HAWH1 = HAW/H1
      NW1 = NW + 1
C
C  CHECK IF PRINTOUT OF LOCAL SKIN FRICTION CHARACTERISTICS DESIRED.
      IF  ((IPRINT.LT.1).OR.(IPRINT.GT.2)) GO TO 380
C
  240 NPRT = NPRT + 2
      GO TO (250,250,250,270,270,270,290,290,310,310),NW1
  250 WRITE (TAPEOT,260) NW
  260 FORMAT(1H0,2X3HNW=,I2,3X32HIDEAL GAS, REF. T/S-C  SOLUTION.)
      GO TO 330
  270 WRITE (TAPEOT,280) NW
  280 FORMAT(1H0,2X3HNW=,I2,3X32HREAL  GAS, REF. H/S-C  SOLUTION.)
      GO TO 330
  290 WRITE (TAPEOT,300) NW
  300 FORMAT(1H0,2X3HNW=,I2,3X35HIDEAL GAS, REF. T/REF. T  SOLUTION.)
      GO TO 330
  310 WRITE (TAPEOT,320) NW
  320 FORMAT(1H0,2X3HNW=,I2,3X35HREAL  GAS, REF. H/REF. H  SOLUTION.)
  330 WRITE (TAPEOT,340) KT,TC1,CF1,CF1RE1,RORA,TST1,HAWH1
      NPRT = NPRT + 1
  340 FORMAT(1H , 2X3HKT=, I2, 3X6HTWEQ =,F7.1,1HR, 3X5HCF1 =,E13.6,    -
     1      3X10HCF1(RE1) =,F9.6,3X9H ROMURA =,F9.5, 3X7HH*/H1 =,F9.4,  -
     2       3X8HHAW/H1 =,F9.4)
      GO TO 380
C
C  TURBULENT FLOW
  350 IF (RET.LT.2540.0) GO TO 360
      CF1 = CFTLOC*BS(1)/FS(1)*(BS(7)/FS(7))**2
      CF(2) = CF1
      CF1RE1 = CF1*(FS(8)*ELLOC)**0.2
  360 RORA = 1.0/FC
      HAWH1 = HAW/H1
      IF (IPRINT - 1)380,240,330
C
C  THIS ENDS PRINTOUT CARDS.
  370 RE(K) = RET
      IF (NW1.NE.0) GO TO 350
  380 IF ((K.EQ.2).OR.(RE(1).GT.6570.)) GO TO 400
C  TURBULENT FLOW SAME AS LAMINAR.
      RE(2) = RE(1)
      TS(2) = TS(1)
      RT(2) = RT(1)
      TR(6) = TR(5)
      TR(8) = TR(7)
      TR(10) = TR(9)
      CF(2) = CF(1)
C
      IF ((IPRINT.LT.1).OR.(IPRINT.GT.2)) GO TO 410
      WRITE (TAPEOT,390)
  390 FORMAT(1H0, 2X45HREYNOLDS NUMBER BELOW CUTOFF, TURBULENT FLOW ,   -
     1              16HSAME AS LAMINAR.)
      NPRT = NPRT + 2
C
      GO TO 410
  400 CONTINUE
  410 RETURN
      END
*DECK ROMU
      FUNCTION ROMU(HS,P2)
C
C
C  THIS FUNCTION HAS THREE ENTRIES.  THE FIRST, ROMU(HS,P2), CALCULATES
C  THE DENSITY-VISCOSITY PRODUCT FOR EQUILIBRIUM AIR AT THE INPUT
C  ENTHALPY (HS) AND PRESSURE (P2).
C           RANGE,  HS TO ABOUT 4.E+8 (FT/SEC)**2 AND P2 .GT. 1.E-4
C                   AND .LT. 10.  EXTRAPOLATION FOR P2 OUTSIDE THIS.
C  THE SECOND, ENTHAL(TW,PW), CALCULATES THE ENTHALPY CORRESPONDING
C  TO THE INPUT TEMPERATURE (TW) AND PRESSURE (PW).
C           RANGE,  TW TO ABOUT 8000.0R (PROGRAM HAS CUTOFF AT
C                   7000.0R)  AND PW SAME AS P2 ABOVE.
C  THE  THIRD, ROW(HS,P2), CALCULATES THE DENSITY (SLUGS/FT**3)
C  FOR EQUILIBRIUM AIR AT THE INPUT ENTHALPY (HS) AND PRESSURE (P2).
C           RANGE,  SAME AS FOR ROMU ABOVE.
C  ALL ENTRIES REQUIRE BLOCK DATA FOR COMMON/PROP/ AND FUNCTION
C  POLY.  THE PROPERTIES BASED ON AEDC TR-65-58 AND HANSENS VISCOSITY.
C  DETAILS OF THE PROPERTY FITS ARE GIVEN IN DOUGLAS REPORT LB-32706.
C***************D. N. SMYTH PROGRAM AUTHOR******************************
C
C
C
      COMMON /PROP/ FH(135), FR(135)
      DIMENSION IH(3)
      DATA PREF/2117.36/
      H1 = HS*1.0E-8
C
C  DETERMINE ENTHALPY RANGE AT 10.0ATM
      IRM1 = 1
      IF (H1.LT.0.042) GO TO 10
      IRM1 = 10
      IF (H1.LT.0.1768) GO TO 10
      IRM1 = 46
      IF (H1.LT.0.650) GO TO 20
      IRM1 = 55
      IF (H1.GT.1.10) IRM1 = 64
C
C  DETERMINE ENTHALPY RANGE AT 10.0**-4 ATM
   10 IF (H1.GT.0.1768) GO TO 20
      IRM2 = IRM1
      H1 = H1*10.0
      GO TO 30
   20 IRM2 = 19
      IF (H1.LT.0.580) GO TO 30
      IRM2 = 28
      IF (H1.GT.0.980) IRM2 = 37
   30 N = 6
      PBAR = P2/PREF
      PBARLG = ALOG10(PBAR)
      ROMU =-0.2*((PBARLG-1.0)*POLY(FR,IRM2,H1,N) - (PBARLG+4.0)*       -
     1           POLY(FR,IRM1,H1,N))
      ROMU = ROMU*PBAR*1.0E-9
      RETURN
C
C
C  DETERMINE ENTHALPY FOR GIVEN TEMPERATURE (MAXIMUM 7000.0R)
C     ENTRY ENTHAL(TW,PW)
      ENTRY ENTHAL
      TW = HS
      PW = P2
      N = 8
      IF (TW.GT.7000.0) TW = 7000.0
      TWX = TW*1.0E-4
      J = 1
      IF (TW.GT.2700.) GO TO 40
      IH1 = 1
      ROMU = POLY(FH,IH1,TWX,N)*1.0E+8
      RETURN
C
   40 PBAR = PW/PREF
      PBARLG = ALOG10(PBAR)
C
C  DETERMINE THREE PBARLG VALVES TO USE IN QUADRATIC INTERPOLATION
      IF (PBARLG.GT.-3.0) GO TO 50
      PBAR1 = -4.0
      PBAR2 = -3.0
      PBAR3 = -2.0
      GO TO 80
   50 IF (PBARLG.GT.-2.0) GO TO 60
      PBAR1 = -3.0
      PBAR2 = -2.0
      PBAR3 = -1.0
      GO TO 100
   60 IF (PBARLG.GT.-1.0) GO TO 70
      PBAR1 = -2.0
      PBAR2 = -1.0
      PBAR3 =  0.0
      GO TO 120
   70 PBAR1 = -1.0
      PBAR2 =  0.0
      PBAR3 =  1.0
      GO TO 140
C
C  DETERMINE TEMP. RANGE AT PBARLG = -4
   80 IH(J) = 10
      IF (TW.LT.4200.) GO TO 90
      IH(J) = 19
      IF (TW.GT.5500.) IH(J) = 28
   90 J = J + 1
C
C  DETERMINE TEMP. RANGE AT PBARLG = -3
  100 IH(J) = 37
      IF (TW.LT.4540.) GO TO 110
      IH(J) = 46
      IF (TW.GT.6120.) IH(J) = 55
  110 J = J + 1
C
C  DETERMINE TEMP. RANGE AT PBARLG = -2
  120 IH(J) = 64
      IF (TW.LT.5220.) GO TO 130
      IH(J) = 73
      IF (TW.GT.6660.) IH(J) = 82
  130 J = J + 1
      IF (J.GT.3) GO TO 150
C
C  DETERMINE TEMP. RANGE AT PBARLG = -1
  140 IH(J) = 91
      IF (TW.GT.5580.) IH(J) = 100
      J = J + 1
      IF (J.GT.3) GO TO 150
C  DETERMINE TEMP. RANGE AT PBARLG = 0
      IH(J) = 109
      IF (TW.GT.6300.) IH(J) = 118
      J = J + 1
      IF (J.GT.3) GO TO 150
C
C  DETERMINE TEMP. RANGE AT PBARLG = 1
      IH(J) = 127
C
C  CALCULATE ENTHALPY
  150 IH1 = IH(1)
      IH2 = IH(2)
      IH3 = IH(3)
      HC1 = (PBARLG - PBAR2)*(PBARLG - PBAR3)*0.5
      HC2 = (PBARLG - PBAR1)*(PBARLG - PBAR3)
      HC3 = (PBARLG - PBAR1)*(PBARLG - PBAR2)*0.5
      ROMU =(HC1*POLY(FH,IH1,TWX,N) - HC2*POLY(FH,IH2,TWX,N)            -
     1        + HC3*POLY(FH,IH3,TWX,N))*1.0E+8
      RETURN
C
C
C  DETERMINE DENSITY FOR GIVEN ENTHALPY AND PRESSURE.
      ENTRY ROW
C     ENTRY  ROW(HS,P2)
      H1 = HS*1.0E-8
      N = 9
C
C DETERMINE ENTHALPY RANGE AT 10.0 ATM.
      IRO1  = 73
      IF (H1.GT.0.1768) GO TO 160
      ROMU = 0.12336898/POLY(FR,IRO1,H1,N)
      GO TO 190
  160 N = 8
      IRO1  = 109
      IF (H1.LT.0.503) GO TO 170
      IRO1  = 118
      IF (H1.GT.0.983) IRO1  = 127
C
C  DETERMINE ENTHALPY RANGE AT 10.0**-4 ATM.
  170 IRO2 = 82
      IF (H1.LT.0.542) GO TO 180
      IRO2 = 91
      IF (H1.GT.0.889) IRO2 = 100
  180 PBAR = P2/PREF
      PBARLG = ALOG10(PBAR)
      ROMU = -0.2*((PBARLG - 1.0)*POLY(FR,IRO2,H1,N) -                  -
     1            (PBARLG + 4.0)*POLY(FR,IRO1,H1,N))
  190 ROMU = ROMU*PBAR*1.0E-3
      RETURN
      END
*DECK QC
      FUNCTION  QC(TW)
C
C
C  CALCULATES THE AERODYNAMIC HEATING AT THE GIVEN
C  WALL TEMP.(TW) IN LAMINAR (IFLOW = 1) AND TURBULENT
C  (IFLOW = 2) FLOW OF EITHER AN IDEAL GAS (ITW = 1)
C  OR A REAL GAS (ITW = 2).  REFERENCE TEMPERATURE OR
C REFERENCE ENTHALPY USED FOR LAMINAR FLOW.  SPALDING-CHI (ITURB = 1)
C  OR REFERENCE TEMPERATURE/REFERENCE ENTHALPY (ITURB = 2) USED
C  FOR TURBULENT FLOW.
C***************D. N. SMYTH PROGRAM AUTHOR******************************
C
C
C
      COMMON /FSBS/FS,BS
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TEMPQC/HAW,H2,H1,HW,CKU,FC,FRX,RET,ELLOC,GCP,  TST1,ROMURA
      COMMON /FLAG2/ITW,IHW,IFLOW,ITURB,CFTLOC
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      DIMENSION TITLE(15),BS(8),FS(8)
      INTEGER CASE,PAGE,ERROR
C
C  MONAGHAN REFERENCE CONDITION COEFFICIENTS
      A2 = 0.468*PRAN**0.33333
      A1 = 1.0 - A2
      A2 = A2 - 0.273*SQRT(PRAN)
      PW = BS(2)
C
C  CHECK FOR LAMINAR OR TURBULENT.
      IF (IFLOW-2)20,10,20
   10 GO TO (130,170), ITURB
C  LAMINAR FLOW.  CHECK IF ENTHALPY INPUT.
   20 IF (IHW)40,40,30
   30 GO TO (60,110), ITW
   40 IF (ITW.EQ.2) GO TO 100
C
C  REFERENCE TEMP. SOLUTION.
   50 HW = GCP*TW
   60 TST1 = (A1*HW + A2*HAW + (1.-A1-A2)*H2)/H1
      TCT1 = 198.6/FS(3)
      IF (FS(3).GT.AV1) GO TO 90
      IF (TST1*FS(3).GT.AV1) GO TO 70
      VISRA = TST1**AV3
      GO TO 80
   70 VISRA = 2.270E-8*SQRT(TST1*FS(3))/(1.+ TCT1/TST1)/ FS(5)
   80 ROMURA = SQRT(BS(2)/FS(2)*VISRA/TST1)
      GO TO 120
   90 ROMURA = SQRT(SQRT(TST1)*(1.+TCT1)/(TST1+TCT1)*BS(2)/FS(2))
      GO TO 120
C
C  REFERENCE ENTHALPY SOLUTION.
  100 HW = ENTHAL(TW,PW)
  110 HSTAR = A1*HW + A2*HAW + (1.-A1-A2)*H2
      ROMURA = SQRT(ROMU(HSTAR,PW)/(FS(1)*FS(5)))
      TST1 = HSTAR/H1
  120 QC = CKU*ROMURA*(HAW - HW)
      RETURN
C
C
C  TURBULENT FLOW,  SPALDING-CHI METHOD
  130 IF (IHW.GT.0) GO TO 160
      TW1 = TW
      IF(TW1.LT.100.0) TW1= 100.0
      GO TO (140,150),ITW
C  IDEAL GAS SOLUTION
  140 HW = GCP*TW1
      GO TO 160
C  REAL GAS SOLUTION
  150 HW = ENTHAL(TW1,PW)
  160 A = HAW/H2 - 1.
      B = HW/H2 - 1.
      C = SQRT((A+B)**2 + 4.*A)
      FC = A/(ARSIN((A-B)/C) + ARSIN((A+B)/C))**2
      FRX = (HAW/H2)**0.772/(FC*(HW/H2)**1.474)
      RET = FRX*BS(8)*ELLOC
      IF (RET.LT.2540.) GO TO 30
      CFTLOC = 0.088*(ALOG10(RET) - 2.3686)/(ALOG10(RET)-1.5)**3
      RA=1.0+5.0*SQRT(0.5*CFTLOC)*(PRAN-1.0+ALOG((5.0*PRAN+1.0)/6.0))
      CFTLOC = CFTLOC/FC
      QC = BS(1)*BS(7)*0.5*CFTLOC*(HAW - HW)/RA
      RETURN
C
C  TURBULENT FLOW,  REFERENCE METHOD
  170 GO TO (180,190), ITW
C  IDEAL GAS - REFERENCE TEMPERATURE
  180 HW = GCP*TW
      TST1 = (A1*HW + A2*HAW + (1.-A1-A2)*H2)/H1
      TSTAR = TST1*FS(3)
      IF (TSTAR.LT.AV1) VIS = AV2*TSTAR**AV3
      IF (TSTAR.GE.AV1  ) VIS = 2.27E-8*TSTAR**1.5/(TSTAR + 198.6)
      ROSTAR = BS(1)*BS(3)/TSTAR
      GO TO 200
C  REAL GAS - REFERENCE ENTHALPY
  190 HW = ENTHAL(TW,PW)
      HSTAR = A1*HW + A2*HAW + (1.-A1-A2)*H2
      TST1 = HSTAR/H1
      ROSTAR = ROW(HSTAR,PW)
      VIS = ROMU(HSTAR,PW)/ROSTAR
  200 FC = BS(1)/ROSTAR
      FRX  =      ROSTAR*BS(5)/(BS(1)*VIS)
      RET  = FRX*BS(8)*ELLOC
      IF (RET.LT.2540.0) GO TO 30
      CFTLOC = 0.088*(ALOG10(RET) - 2.3686)/(ALOG10(RET) - 1.5)**3/FC
      QC = 0.5*(PRAN**(-2./3.))*BS(1)*BS(7)*CFTLOC*(HAW - HW)
      RETURN
      END
*DECK POLY
      FUNCTION POLY(A,I,HX,N)
      DIMENSION A(135)
C
C  THIS FUNCTION GENERATES AN N-TH ORDER POLYNOMIAL
C  IN HX WITH COEFFICIENTS A(K) STARTING WITH K=I.
C
      POLY = A(I)
      DO  10 J = 1,N
      K = I + J
   10 POLY = POLY + A(K)*HX**J
      RETURN
      END
*DECK BLKD
      BLOCK DATA
C
C
C  THIS SUBROUTINE INITIALIZES INTO COMMON/PROP/  THE COEFFICIENT
C  ARRAYS REQUIRED BY FUNCTION ROMU (ARO3)  TO DETERMINE THE
C  REAL EQUILIBRIUM AIR PROPERTIES.  OTHER PROGRAM PARAMETERS ARE ALSO
C  INITIALIZED.
C
C
      COMMON /PROP/ FH,FR
         DIMENSION FH(135),FR(135),FH1(108),FH2(27),FR1(72),FR2(63)
      EQUIVALENCE  (FH(1),FH1(1)),(FH(109),FH2(1)),                     -
     1              (FR(1),FR1(1)), (FR(73),FR2(1))
C
C
      DATA               FH1  / 0.0, .60181771, -.22228717, 2.5953429,  -
     1 -2.7853922, -9.7092052, 23.289510, -12.199244, -2.5817427,       -
     2 -.12935540, -2.9966848, 48.010840, -184.77242, 249.48974,        -
     3 -51.244932, 0.0, 0.0, 0.0,   -6.5939838, 19.010757, 19.992531,   -
     4 -39.975681, -112.89466, 156.16378, 0.0, 0.0, 0.0,   2.2022949,   -
     5 -14.101200, 23.004509, 52.890407, -165.08756, 113.04871, 0.0,    -
     6 0.0, 0.0,   -.20293060, .71240021, 11.699213, -47.629621,        -
     7 42.913642, 30.631199, 0.0, 0.0, 0.0,    1.8692814, -22.097879,   -
     8 56.153394, -16.042275, 36.738951, -263.49237, 239.87072, 0.0,    -
     9 0.0,    -.15686170, 1.1830883, -2.0213376, 19.029276, -26.810587,-
     X -9.9053574, 24.334188, 0.0 , 0.0,    .92262030, -8.5032999,      -
     A 20.492311, 45.587738, -119.90206, -509.58200, 1721.3813,         -
     B -1337.6228, 0.0,    -2.6782862, 1.2865940, 22.104893, -12.395676,-
     C -26.121859, -12.897718, 38.794573, 0.0, 0.0,    -1.6135321,      -
     D 5.3650713, 2.4832548, -9.7412082, 1.2468173, .39646271, 4.5573527-
     E,0.0, 0.0,    .44553169, -3.0252481, 2.6196596, 50.144314,        -
     F -151.34585, 133.67463, -154.12089, 535.69899, -494.43566,        -
     G -3.0416265, 12.560193, -20.33612, 17.381598, 23.843668,          -
     H -64.498613, 36.134646, 0.0, 0.0/
C
C
      DATA                   FH2  / .1199213, -.65116698, 3.8928011,    -
     1 -.45545770, -5.3407127, -21.592914, 33.774256, 58.270657,        -
     2 -78.177197,    .34683226, -.79201527, -.79886544, 5.2064374,     -
     3 -1.2818503, 4.3016173, -6.9417639, 0.0, 0.0,   .11764422,        -
     4 -.62580124, 3.5461409, 4.8925829, -39.857784, 71.680475,         -
     5 -48.794024, 9.9564413, 0.0 /,                                    -
     6              FR1 / 1.0490322, -.31228101,.90103854E-1,-6.7117799,-
     7 18.184363, -13.551560, 0.0, 0.0, 0.0,   1.1329366, -.94702472,   -
     8 .55849455,-.92146834E-1,-.50705935E-1,.17519852E-1,0.0,0.0,0.0,  -
     9 .88808527, -3.9763502, 14.251132, -27.521840, 26.791510,         -
     X -10.436079, 0.0, 0.0, 0.0,    -.14569908, 3.0171600, -5.9999473, -
     A 4.6748398, -1.2742339, 0.0, 0.0, 0.0, 0.0, .37102156, -.13586302,-
     B.44261289E-1,-.78199161E-2,.52479786E-3,0.0, 0.0, 0.0, 0.0,       -
     C .77497574, -2.1673001, 4.0652322, -2.7726303, -1.1814257,        -
     D 1.6918670, 0.0, 0.0, 0.0,   .52865913, -.58894771, .58988212,    -
     E -.42483488, .19163722,-.38356068E-1,0.0, 0.0, 0.0,    .48598990, -
     F -.41125640, .25298705, -.82910932E-1,.13654598E-1, -.89113877E-3,-
     G 0.0, 0.0, 0.0/
C
C
      DATA                   FR2  / 0.0, 1.6627798, 1.1792685,          -
     1 -28.017959, 155.77436, -439.43620, 709.71808, -671.23004,        -
     2 317.22690,   1.5380637, -11.161238, 32.383428, 2.5847158,        -
     3 -196.69668, 370.82431, -218.12898, 0.0, 0.0,   1.3507331,        -
     4 -5.0193304, 6.0404391, 4.1730680, -13.136917, 6.7913235, 0.0,    -
     5 0.0, 0.0,   .42795709, -.56949512, .40404761, -.11638753,        -
     6 -.74634946E-2, .12505798E-1,-.27304295E-2, .19434979E-3, 0.0,    -
     71.3644197, -9.5027751, 34.791129, -68.553220, 69.547355,          -
     8 -28.523442, 0.0, 0.0, 0.0,   .48102262, -.91625506, .62421014,   -
     9 .57730033, -1.0682441, .42044702, 0.0, 0.0, 0.0,   .42220834,    -
     X -.61202419, .44184292, -.15420936,  .18083084E-1,.36418043E-2,   -
     A   -.12611833E-2, .10222056E-3, 0.0 /
C
C
      END
*DECK CFIN
      SUBROUTINE  CFINPT(INP, LTOTAB)
C
C
      COMMON /GDATA/LTOT,J,SYMFCT,IORN,IGTYPE,L
      COMMON /ABDATA/NAB,ALPHA(20),BETA(20),ROL(20),CDELTA(20),QI(20),  -
     1               RI(20),PI(20)
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON/C1    /INORM,ISURF,IX,IY,IZ,U1,UL,V1,VL,CR,CT,CHX,N2,N3,   -
     1    XO,YO,ZO,AP11,AP12,AP13,AP21,AP22,AP23,AP31,AP32,AP33,        -
     2  FLOWC(2),XI(500),YI(500),B(503,2),XKF(503),AA(2477),            -
     A  XB(4), YB(4), ZB(4),                                            -
     3  NDSET,IABSET,IR,LORG(20),ISR(20),NS,ISFR,IVIS, IFTYP,IFLOW,     -
     4    BX(2,20), BY(2,20), NB ,DUM(4)
C
      DIMENSION                  ELEM(25), LCOND(3), DINFL(6)
      DIMENSION TITLE(15), INP(20), LTOTAB(20)
      DIMENSION TITLEM(10),IMTAB(9),LOAB(20),TITLES(10),TITLEA(10),     -
     1  TITLER(10),E4(12),E2(13),DAT(6),                  IDTYP(5),     -
     3   E3(17), ISF(5), FDATA(34), XP(4,6)
C
      INTEGER ERROR,PAGE,CASE,SYMFCT
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      EQUIVALENCE  (FDATA(1), LCOND(1)), (FDATA(4), ELEM(1)),           -
     1  (FDATA(29), DINFL(1))
      DATA RC/0.1745329E-1/
C
      WRITE(TAPEOT,5)
    5 FORMAT(1H1,45HPREVIOUSLY SAVED SURFACE DATA WILL BE USED TO,      -
     1            17H CALCULATE FORCES)
C  FOR CHECKOUT SET IPRINT = 1
      IPRINT = 0
C
C
C  BEGIN ALPHA-BETA CYCLE
      REWIND TAPEF
      DO 2000 IAB = 1,NAB
      ICT = 0
      ISYM = 1
      IF (INP(IAB)   .EQ. 1)  GO TO 2000
C
C  INPUT REGION ID INFO AND NORMALIZATION FLAGS
   10 READ (TAPEIN,20) LASTR,NDSET,IABSET,IR,INORM,ISURF,IPF,           -
     1  (ISR(I),I=1,10), ISF
   20  FORMAT (I1,3I2,3I1,   10I2,5I1)
C
      WRITE (TAPEOT,32) LASTR,NDSET,IABSET,IR,INORM,ISURF,              -
     1    IPF, (ISR(I),I=1,10), ISF
   32  FORMAT (1H0,5X,6HLASTR=,I2,4X,6HNDSET=,I2,4X,7HIABSET=,I2,4X,    -
     1 4HIR =,I2,             4X,6HINORM=,I2,4X,6HISURF=,I2,4X,         -
     2    /1H , 4HIPF=, I2, 4X4HISR=, 10I3, 4X4HISF=, 5I2/)
C
C  READ BOUNDARY POINTS FOR NORMALIZATION
      DO 38 I=1,4
   38 READ (TAPEIN,50) XB(I),YB(I),ZB(I)
   50  FORMAT (3F10.0)
C
C  READ IN MASTER DIRECTORY
      ITAG10 = 1
      CALL READMS (10,TITLEM,10,ITAG10)
C     READ(10'ITAG10) TITLEM
      ITAG10 = 2
      CALL READMS (10,IMTAB,9,ITAG10)
C     READ(10'ITAG10) IMTAB
C
C  CHECK DATA SET NUMBER
      IF (IMTAB(1) .GE. NDSET)  GO TO 40
      WRITE (TAPEOT,39) NDSET,IMTAB(1)
   39  FORMAT (1H0,9H**NDSET =,I2,31H IS GREATER THAN THE NUMBER OF ,   -
     1 44HDATA SETS ACTUALLY ON UNIT 10. PROGRAM HALT.  )
      STOP
C
C
C  READ IN FLOW DATA SET DIRECTORY
   40 ITAG10 = IMTAB(NDSET + 4)
      CALL READMS (10,E4,12,ITAG10)
C     READ (10'ITAG10) E4
      DO 41 I=1,10
   41 TITLES(I) = E4(I)
      MACH = E4(11)
      NABS = E4(12)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,LOAB,20,ITAG10)
C     READ(10'ITAG10)  LOAB
C
C  READ IN FLOW REGION DIRECTORY FOR REQUESTED ALPHA-BETA SET
      ITAG10 = LOAB(IABSET)
      CALL READMS (10,E2,13,ITAG10)
C     READ (10'ITAG10) E2
      DO 42 I=1,10
   42 TITLEA(I) = E2(I)
      ALPHAS = E2(11)
      BETAS = E2(12)
      NREG = E2(13)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,LORG,20,ITAG10)
C     READ(10'ITAG10)  LORG
C
C
C
C
C  READ IN REQUESTED FLOW REGIONS
C
C
C
      ITAG10 = LORG(IR)
      CALL READMS (10,E3,17,ITAG10)
C     READ (10'ITAG10) E3
      DO 91 I=1,10
   91 TITLER(I) = E3(I)
      DO 92 I=1,5
      IDTYP(I) = E3(I+10)
   92 CONTINUE
      IFTYP = IDTYP(1)
      IFLOW = IDTYP(2)
      IVIS = 0
C
C  THIS ROUTINE HAS BEEN TAKEN FROM A GENERAL PROGRAM
C  AND SPECIALIZED FOR SKIN FRICTION INTERPOLATION.
C  A CHECK IS MADE TO DETERMINE IF CF HAS BEEN
C  STORED.  IF NOT, RUN IS HALTED.
C
      IF (IFTYP .EQ. 4)  GO TO 93
      WRITE(TAPEOT, 90)
   90 FORMAT(1H1,45H***** SKIN FRICTION DATA HAS NOT BEEN STORED ,      -
     1 25HWITH THE STREAMLINE DATA./1H0,5X25H A REQUEST TO INTERPOLATE, -
     2 45H FOR CF AT ELEMENT CENTROIDS CANNOT BE MADE. /1H0, 5X,        -
     3 15H RUN STOPPED.  )
      STOP
C
   93 CONTINUE
      IVIS = 1
      IPF = 1
      IF (ISF(1) .GT. 0)  GO TO 94
      ISF (1) = 1
      ISF(2) = 2
      ISF(3) = 3
      ISF(4) = 4
      ISF(5) = 0
   94 NSREG = E3(16)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,DAT, 6,ITAG10)
C     READ (10'ITAG10) DAT
      XO     = DAT( 1)
      YO     = DAT( 2)
      ZO     = DAT( 3)
      PSIO     = DAT( 4)
      THETO     = DAT( 5)
      PHIO     = DAT( 6)
C
      SINT = SIN(THETO*RC)
      COST = COS(THETO*RC)
      COSPS = COS(PSIO*RC)
      SINPS = SIN(PSIO*RC)
      SINP = SIN(PHIO*RC)
      COSP = COS(PHIO*RC)
      AP11 = COST*COSPS
      AP12 = COST*SINPS
      AP13 =-SINT
      AP21 =-COSP*SINPS + SINP*SINT*COSPS
      AP22 = COSP*COSPS + SINP*SINT*SINPS
      AP23 = SINP*COST
      AP31 = SINP*SINPS + COSP*SINT*COSPS
      AP32 =-SINP*COSPS + COSP*SINT*SINPS
      AP33 = COSP*COST
C
C  SET INDICES FOR NORMALIZING DATA
      IF(INORM .LE. 0)  GO TO 100
      GO TO (110,130,140,150),INORM
C
C  NORMALIZE W.R.T.  A,R
  100 IX = 4
      IY = 5
      IZ = 6
      GO TO 190
C
C  NORMALIZE W.R.T.  X,Y
  110 IX = 1
      IY = 2
      IZ = 3
      GO TO 190
C
C  NORMALIZE W.R.T.  X,Z
  130 IX = 1
      IY = 3
      IZ = 2
      GO TO 190
C
C  NORMALIZE W.R.T.  Y,Z
  140 IX = 2
      IY = 3
      IZ = 1
      GO TO 190
C
C  NORMALIZE W.R.T.  A,PHI
  150 IX = 4
      IY = 6
      IZ = 5
      GO TO 190
C
C  CALCULATE NORMALIZING LENGTHS
  190 CONTINUE
      DO 95 I = 1,4
      XX =XB(I) - XO
      YY =YB(I) - YO
      ZZ =ZB(I) - ZO
      XP(I,1) = XX*AP11 + YY*AP12 + ZZ*AP13
      XP(I,2) = XX*AP21 + YY*AP22 + ZZ*AP23
      XP(I,3) = XX*AP31 + YY*AP32 + ZZ*AP33
      XP(I,4)  =  XP(I,1)
      XP(I,5)  =  SQRT(XP(I,2)**2 + XP(I,3)**2)
      IF (XP(I,2) .EQ. 0.0)  GO TO 194
      XP(I,6)  =  ATAN2(XP(I,2), -XP(I,3))
      IF(XP(I,6).LT.0.0) XP(I,6) = 6.283185308 + XP(I,6)
      GO TO 95
  194 XP(I,6)  =  0.0
      IF (XP(I,3) .GT. 0.0)  XP(I,6) = 3.141592654
   95 CONTINUE
C
C
      U1 = XP(1,IX)
      UL = XP(2,IX) - U1
      CR = UL
      IF (ISURF  .EQ. 1)  GO TO 96
      V1 = XP(3,IY)
      VL = XP(4,IY) - V1
      GO TO 97
C
   96 UL = XP(3,IX)
      CT = XP(4,IX) - XP(3,IX)
      V1 = XP(1,IY)
      VL = XP(3,IY) - V1
   97 CONTINUE
C
C
C
C  ESTABLISH SUB-REGION COUNTERS
      IF (ISR(1) .GT. 0)  GO TO 210
      NS = NSREG
      DO 200 I = 1,NS
  200 ISR(I) = I
      GO TO 230
  210 NS = 0
      DO 220 I = 1,10
      IF (ISR(I) .LE. 0)  GO TO 230
  220 NS = NS + 1
C
  230 IF (NS .LE. NSREG)  GO TO 250
      WRITE(TAPEOT,240)  NS,NSREG
  240 FORMAT(1H0,28HSURFACE INTERPOLATION.  THE ,I2,13H SUB-REGIONS ,   -
     1 36HREQUESTED IS GREATER THAN AVAILABLE./1H0, 12HCOUNTER SET ,    -
     2 11HTO NSREG = , I2, 20H AND CASE CONTINUES.)
C
      NS = NSREG
  250 CONTINUE
C
C
      REWIND TAPEE
      INTAPE = TAPEC
      ITAPES = TAPED
C
      I = 0
      ISFR = 0
      ICYCLE = 0
      NTOT = 0
      IF (IPF .NE. 0)  GO TO 1520
 1100 CONTINUE
      ERROR = 0
      CALL  SFNTR3
      IF (ERROR .EQ. 1)  GO TO 1520
C
C  START CYCLE ON THE ELEMENTS
 1110 REWIND INTAPE
      REWIND ITAPES
      ISAVET = ITAPES
      ICYCLE = ICYCLE + 1
      IF (IPRINT .NE. 1)  GO TO 1111
      WRITE(TAPEOT,9030) INTAPE,ITAPES,LTOT
 9030 FORMAT(1H0,23HAT LOOP 1500, INTAPE = ,I3, 5X9HITAPES = ,I3,       -
     1    5X7HLTOT = ,I5)
 1111 CONTINUE
      DO 1500 II = 1,LTOT
      IF (ICYCLE .GT. 1)  GO TO 1050
C     READ(TAPEE,END=1510) IG4,ELEM
      READ(TAPEE) IG4,ELEM
      IF (EOF(TAPEE)) 1510,1012
 1012 LCOND(2) = ELEM(1)
      GO TO 1090
 1050 CONTINUE
C     READ(INTAPE,END=1510)  IG4,FDATA
      READ(INTAPE)  IG4,FDATA
      IF (EOF(INTAPE)) 1510,1080
C
C  CHECK IF ELEMENT ALREADY PROCESSED ON PREVIOUS CYCLE
 1080 IF (LCOND(1) .NE. 0)  GO TO 1200
 1090 CONTINUE
      IF (ISYM .EQ. 1)  GO TO 1095
C  REFLECT ELEMENT TO -Y SIDE AND CHANGE ORDER OF POINTS 2 AND 4
      IG4 = -IG4
      ELEM(5) = -ELEM(5)
      ELEM(8) = -ELEM(8)
      ELEM(15) = -ELEM(15)
      ELEM(16) = -ELEM(16)
      ELEM(17) = -ELEM(17)
      ELEM(18) = -ELEM(18)
      ELT = ELEM(12)
      ELEM(12) = ELEM(14)
      ELEM(14) = ELT
      ELT = ELEM(16)
      ELEM(16) = ELEM(18)
      ELEM(18) = ELT
      ELT = ELEM(20)
      ELEM(20) = ELEM(22)
      ELEM(22) = ELT
C
C  INTERPOLATE FOR SURFACE PROPERTIES AT CENTROIDS.
 1095 CONTINUE
      IC = 0
      IT = 1
      CALL VALU3(1, ELEM(7), ELEM(8), ELEM(9), XN, YN, ZN,IC,IT,INR,    -
     1    DINFL(1), DINFL(2), DINFL(3), DINFL(4), DINFL(5), DINFL(6))
C
      LCOND(1) = 0
      IF (INR .EQ. 0)  GO TO 1200
      LCOND(1) = 1
      NTOT = NTOT + 1
C
C  SAVE RESULTS ON TEMPORARY UNIT
 1200 CONTINUE
      WRITE(ITAPES)  IG4,FDATA
C
C  GO TO NEXT ELEMENT
 1500 CONTINUE
 1510 CONTINUE
C
C
 1520 I = I + 1
      IF (I .GT. 5)  GO TO 1600
      ISFR = ISF(I)
      IF (IPRINT .NE. 1)  GO TO 1525
      WRITE(TAPEOT,9010) I,ISFR,ICYCLE,NTOT,ERROR
 9010 FORMAT(1H0, 4HI = ,I3, 5X7HISFR = ,I3, 5X9HICYCLE = ,I3,          -
     1  7HNTOT = ,I5, 5X8HERROR = ,I3)
 1525 CONTINUE
      IF (ISFR .NE. 0)  GO TO 1530
      IF (IVIS .EQ. 1)  GO TO 1520
      GO TO 1600
 1530 CONTINUE
      IF (ICYCLE .EQ. 0)  GO TO 1100
      IF (NTOT .EQ. LTOT)  GO TO 1600
C
C  SWITCH TAPES (ONLY IF ERROR = 0)
      IF (ERROR .NE. 0)  GO TO 1100
      I1 = ITAPES
      ITAPES = INTAPE
      INTAPE = I1
      GO TO 1100
C
C  SAVE RESULTS ON TAPEF
 1600 CONTINUE
      IF (ICYCLE .GT. 0)  GO TO 1560
      WRITE(TAPEOT,1550)
 1550 FORMAT(1H1,47HSURFACE  INTERPOLATION (CFINT) CANNOT BE MADE./     -
     154H0CHECK THAT PROPER FLOW FIELD DATA HAS BEEN SPECIFIED.,        -
     2 16H RUN IS STOPPED.)
      STOP
C
 1560 REWIND ISAVET
      IF (IPRINT .NE. 1)  GO TO 1601
      WRITE(TAPEOT,9020) LTOT,INTAPE,ISAVET
 9020 FORMAT(1H0, 7HLTOT = ,I5, 5X9HINTAPE = ,I3, 5X9HISAVET = ,I3)
 1601 CONTINUE
      DO 1610 L = 1,LTOT
C     READ(ISAVET,END=1620)  IG4,FDATA
      READ(ISAVET)  IG4,FDATA
      IF (EOF(ISAVET))  1620,1605
 1605 WRITE(TAPEF)  IG4,FDATA
      ICT = ICT + 1
      IF (IPRINT .NE. 1)  GO TO 1610
      WRITE(TAPEOT,9000) IG4,LCOND,ELEM,DINFL
 9000 FORMAT(1H0, 6HIG4 = ,I5, 5X8HLCOND = , 3I3/                       -
     1  8H ELEM = , 10E12.4/1H ,7X,10E12.4/1H , 7X,5E12.4/              -
     2  9H DINFL = , 6E12.4)
 1610 CONTINUE
 1620 CONTINUE
C
C  CHECK FOR SYMMETRY REQUIREMENTS
      IF (SYMFCT.EQ.1 .OR. BETAS.EQ.0.0 .OR. ISYM.EQ.2)  GO TO 1900
      REWIND TAPEE
      ISYM = 2
      GO TO 10
C
 1900 LTOTAB(IAB) = ICT
C  END OF ALPHA-BETA LOOP
 2000 CONTINUE
C
      REWIND TAPEE
      REWIND TAPEF
C
      RETURN
      END
*DECK INTE
      SUBROUTINE INTEG
C
C  THIS ROUTINE IS THE MAIN CONTROL ROUTINE FOR THE INTEGRAL BOUNDARY
C  LAYER PROGRAM
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /GDATA/LTOT,J,SYMFCT,IORN,IGTYPE,L
      COMMON /ABDATA/NAB,ALPHA(20),BETA(20),ROL(20),CDELTA(20),QI(20),  -
     1               RI(20),PI(20)
      COMMON /REF/SREF,MAC,SPAN,XCG,YCG,ZCG
      COMMON /FSBS/FS(8),BS(8)
      COMMON/C1/    R,PTZ,TTZ,UPMACH,NST,NVP,NTURB,KPVM,KEM,KSMTH,      -
     1KSPLN,KLE,KATCH,CTHET,DLAM,TLAM,DTURB,TTURB,KPRE,KGRAD,KSDE,KLAM, -
     2KMAIN,KPROF,X(100),Y(100),PRES(100),UE(100),ME(100),POPTZ(100),   -
     3VOVCR(100),TWAL(100),                                             -
     4          PSZ,TSZ,UZ,ASZ,ATZ,RHSZ,RHTZ,MUSZ,MUTZ,NUSZ,NUTZ,CP,    -
     5PR,TC,ARCL,                                                       -
     7                            S(100),SOL(100),AE(100),TSE(100),     -
     8TAWL(100),TAWT(100),TBAR(100),RW(300),SW(100),SUTHL(100),         -
     9RHSW(100),RHSE(100),HEADW(100),HEADE(100),NUW(100),MUBAR(100),    -
     AAAA(100),BB(100),FF(100),DUDS(100),DMDS(100),DMDL(100),           -
     B          THET(100),DELSR(100),DELTA(100),FORM(100),              -
     CFORMI(100),FORMTR(100),RTH(100),RTHI(100),CF(100),                -
     DTAUW(100),NUSS(100),DTDY(100),HTRAN(100),CRN(100),                -
     E          SHAPL(100),SHAPK(100),B2,NS,                            -
     F          FTRAN,FORMS,                                            -
     G          INST,ITRAN,ISEP,                                        -
     H          XTAB(103),YTAB1(103),YTAB2(103),NTAB,                   -
     I          EROR,TRANS,SEPRN
      DIMENSION  TR(10),RE(2),TS(2),RT(2),TWAT(100),ILOC(100)
C
      DIMENSION LORG(20),CMU(20),CPR(20),CTC(20),CFLT(2)
C
      DIMENSION TITLE(15),ISF(5),Z(100)
      DIMENSION TITLEM(10),IMTAB(9),LOAB(20),TITLES(10),TITLEA(10),     -
     1  TITLER(10),E4(12),E2(13),       DATA(12),DATB(25),IDTYP(5),     -
     2  LOFF(5),IFC(5),E3(17),ISTR(10),DATBS(25)
C
C
      REAL MUSZ,MUTZ,NUSZ,NUTZ,MUSLE,MUSLM,ME,NUW,MUBAR
      LOGICAL EROR,TRANS,SEPRN
      INTEGER ERROR,SYMFCT,PAGE,CASE
C
      REAL  MACH,MAC
C
C  DATA FOR MU, PR, AND TC CURVE FITS
C
      DATA CMU(1),CMU(2),CMU(3),CMU(4),CMU(5)/                          -
     1 -.0194517,1.30195,-.345113,.0682778,-.0056659/
      DATA CPR(1),CPR(2),CPR(3),CPR(4),CPR(5)/                          -
     1 .8557,-.234136,.1078624,-.0236214,.0020286/
      DATA CTC(1),CTC(2),CTC(3),CTC(4),CTC(5)/                          -
     1 -.0383932,1.269743,-.3091125,0.087438,-.0096747/
C
C
      WRITE (TAPEOT,5)
    5  FORMAT (1H1,44HINTEGRAL METHOD BOUNDARY LAYER DATA WILL BE ,     -
     1 11HCALCULATED.  )
C
C  INPUT REGION ID INFO AND NORMALIZATION FLAGS
   10 READ (TAPEIN,20) LASTR,NDSET,IABSET,IR
   20  FORMAT (I1,3I2,3I1)
C
      WRITE (TAPEOT,32) LASTR,NDSET,IABSET,IR
   32  FORMAT (1H0,5X,6HLASTR=,I2,4X,6HNDSET=,I2,4X,7HIABSET=,I2,4X,    -
     1 4HIR =,I2)
C
C
C  READ IN MASTER DIRECTORY
      ITAG10 = 1
      CALL READMS (10,TITLEM,10,ITAG10)
C     READ(10'ITAG10) TITLEM
      ITAG10 = 2
      CALL READMS (10,IMTAB,9,ITAG10)
C     READ(10'ITAG10) IMTAB
      NEXT = IMTAB(2)
C
C  CHECK DATA SET NUMBER
      IF (IMTAB(1) .GE. NDSET)  GO TO 40
      WRITE (TAPEOT,39) NDSET,IMTAB(1)
   39  FORMAT (1H0,9H**NDSET =,I2,31H IS GREATER THAN THE NUMBER OF ,   -
     1 44HDATA SETS ACTUALLY ON UNIT 10. PROGRAM HALT.  )
      STOP
C
C
C  READ IN FLOW DATA SET DIRECTORY
   40 ITAG10 = IMTAB(NDSET + 4)
      CALL READMS (10,E4,12,ITAG10)
C     READ (10'ITAG10) E4
      DO 41 I=1,10
   41 TITLES(I) = E4(I)
      EMACH = E4(11)
      NABS = E4(12)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,LOAB,20,ITAG10)
C     READ(10'ITAG10)  LOAB
C
C  READ IN FLOW REGION DIRECTORY FOR REQUESTED ALPHA-BETA SET
      ITAG10 = LOAB(IABSET)
      CALL READMS (10,E2,13,ITAG10)
C     READ (10'ITAG10) E2
      DO 42 I=1,10
   42 TITLEA(I) = E2(I)
      ALPHAS = E2(11)
      BETAS = E2(12)
      NREG = E2(13)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,LORG,20,ITAG10)
C     READ(10'ITAG10)  LORG
C
C
C  READ IN REQUESTED FLOW REGIONS
      ITAG10 = LORG(IR)
      CALL READMS (10,E3,17,ITAG10)
C     READ (10'ITAG10) E3
      DO 91 I=1,10
   91 TITLER(I) = E3(I)
      DO 92 I=1,5
      IDTYP(I) = E3(I+10)
   92 CONTINUE
      IFTYP = IDTYP(1)
C  CHECK IF PROPER STREAMLINE DATA ARE PRESENT
      IF (IFTYP.EQ.3 .OR. IFTYP.EQ.4) GO TO 93
      WRITE (TAPEOT,95)
   95  FORMAT (1H ,41H***STREAMLINE DATA ARE NOT ON UNIT 10 AS ,        -
     1  24HREQUIRED.  PROGRAM STOP.  )
   93 IFLOW = IDTYP(2)
      IVIS = 0
      IF (IFTYP .EQ. 4)  IVIS = 1
   94 NSREG = E3(16)
C
C
C
C
C  READ SKIN FRICTION METHOD CARD
      READ (TAPEIN,100) ISFM,IWT,IPRINT,SURFI6,SURFI7,RETRAN
  100  FORMAT (3I1,7X,3F10.0)
      RETRAN = RETRAN * 1.0E+06
C
C  CHECK IF INTEGRAL METHOD IS TO BE USED FOR SKIN FRICTION
      IF (ISFM .EQ. 1) GO TO 162
C
C
C  INITIALIZE BOUNDARY LAYER CONSTANTS
      R = GASCP*(GAM-1.0)/GAM
      TTOT = 1.0 + (GAM-1.0)/2.0*MACH*MACH
      TTZ = TFS * TTOT
      PTZ = PFS * TTOT**(GAM/(GAM-1.0))
      UPMACH = MACH
      KEM = 0
C
C  INITIALIZE STATIC AND TOTAL PARAMETERS
C
      TSLE= 518.688
      TSLM= 288.160
      MUSLE= 3.711402E-7
      MUSLM= 1.777029E-5
      TCSLE= 3.202206E-3
      TCSLM= 2.561796E-2
      TSZ = TFS
      PSZ = PFS
      RHSZ= PSZ/R/TSZ
      RHTZ= PTZ/R/TTZ
      ASZ= SQRT(GAM*R*TSZ)
      ATZ= SQRT(GAM*R*TTZ)
      UZ= UPMACH*ASZ
      CP = GASCP
      IF (KEM.EQ.1) GO TO 110
      TCON= 198.60
      TR1= TSZ/TSLE
      TR2= TTZ/TSLE
      GO TO 120
  110 TCON= 110.33
      TR1= TSZ/TSLM
      TR2= TTZ/TSLM
  120 CALL CURVFT(CPR,PR,TR1,0,4,0)
      CALL CURVFT(CTC,TC,TR1,0,4,0)
      CALL CURVFT(CMU,MUSZ,TR1,0,4,0)
      CALL CURVFT(CMU,MUTZ,TR2,0,4,0)
      IF (KEM.EQ.1) GO TO 130
      TC= TC*TCSLE
      MUSZ= MUSZ*MUSLE
      MUTZ= MUTZ*MUSLE
      GO TO 140
  130 TC= TC*TCSLM
      MUSZ= MUSZ*MUSLM
      MUTZ= MUTZ*MUSLM
  140 NUSZ= MUSZ/RHSZ
      NUTZ= MUTZ/RHTZ
C
C
C
C  READ INTEGRAL METHOD CONTROL CARD
      READ (TAPEIN,141) NVP,NTURB,KPVM,KSMTH,KSPLN,KLE,KATCH,KPRE,      -
     1  KGRAD,KSDE,KLAM,KMAIN,KPROF,CTHET,DLAM,TLAM,DTURB,TTURB
  141  FORMAT (2I2,1I1,I2,9I1,4X,5F10.0)
C
      WRITE (TAPEOT,142) NVP,NTURB,KPVM,KSMTH,KSPLN,KLE,KATCH,KPRE,     -
     1  KGRAD,KSDE,KLAM,KMAIN,KPROF,CTHET,DLAM,TLAM,DTURB,TTURB
  142 FORMAT (1H0,28HINTEGRAL METHOD CONTROL DATA,/1H ,4HNVP=,I3,3X,    -
     1  6HNTURB=,I3,3X,5HKPVM=,I3,3X,6HKSMTH=,I3,3X,6HKSPLN=,I3,3X,     -
     2  4HKLE=,I3,3X,6HKATCH=,I3,3X,5HKPRE=,I3,/1H ,6HKGRAD=,I3,3X,     -
     3  5HKSDE=,I3,3X,5HKLAM=,I3,3X,6HKMAIN=,I3,3X,6HKPROF=,I3,/1H ,    -
     4  6HCTHET=,F10.5,3X,5HDLAM=,F10.5,3X,5HTLAM=,F10.5,3X,6HDTURB=,   -
     5  F10.5,3X,6HTTURB=,F10.5)
      WRITE (TAPEOT,143) PSZ,TSZ,UZ,ASZ,ATZ,RHSZ,RHTZ,MUSZ,MUTZ,NUSZ,   -
     1  NUTZ,CP,TC
  143 FORMAT (1H0,16HBASIC PARAMETERS,/1H ,3X,6HPSZ  =,F13.5,3X,        -
     1  6HTSZ  =,F13.5,3X,6HUZ   =,F13.5,3X,6HASZ  =,F13.5,3X,6HATZ  =, -
     2  F13.5,/1H ,3X,6HRHSZ =,E13.5,3X,6HRHTZ =,E13.5,3X,6HMUSZ =,     -
     3  E13.5,3X,6HMUTZ =,E13.5,3X,6HNUSZ =,E13.5,/1H ,3X,6HNUTZ =,     -
     4  E13.5,3X,6HCP   =,F13.5,3X,6HTC   =,F13.5)
  162 CONTINUE
C
C  READ STREAMLINE SELECTION CARD
  150 READ (TAPEIN,160) ISTR
  160  FORMAT (10I2)
      WRITE (TAPEOT,144) ISTR
  144 FORMAT (1H0, 28HSTREAMLINES TO BE ANALYZED  , 10I4 )
C
C
C
C  START STREAMLINE DO LOOP
      DO 620 N=1,10
C
      IF (ISTR(N) .EQ. 0) GO TO 630
C
      ISRS = ISTR(N)
      WRITE (TAPEOT,161) ISRS
  161 FORMAT (1H0,28HSTREAMLINE BEING ANALYZED  =,I3)
      ISTRAN = 0
      ITRAN  = 0
      ISEP   = 0
C  CHECK IF STREAMLINE IS ON UNIT 10
      IF (ISRS .LE. NSREG) GO TO 170
      WRITE (TAPEOT,165)
  165  FORMAT (1H0,47H***REQUESTED STREAMLINE NUMBER IS GREATER THAN ,  -
     1  56HTHE NUMBER OF STREAMLINES ACTUALLY STORED ON UNIT 10.  ,     -
     2  13HPROGRAM STOP.  )
  170 CONTINUE
C
      ITAG10 = LORG(IR) + ISRS + 4
      CALL READMS (10,DATB,25,ITAG10)
C     READ (10'ITAG10) DATB
      DO 180 I=1,5
       LOFF(I) = DATB(I)
  180  IFC(I)  =DATB(I+5)
C
C  GET STREAMLINE COORDINATES AND PRESSURE DATA FROM UNIT 10
C
C    NUMBER OF DATA POINTS ON UNIT 10 FOR THIS STREAMLINE
      NST = IFC(1)
      IF (NST .GT. 0) GO TO 182
      WRITE (TAPEOT,181)
  181  FORMAT (1H0,44H***THERE ARE NO STREAMLINES ON UNIT 10. STOP )
      STOP
  182 ITAG10 = LOFF(1)
C********
C  READ IN STREAMLINE DATA POINTS
      GAMR = GAM * R
      ITRC = 0
      DO 190 I=1,NST
      CALL READMS (10,DATA,12,ITAG10)
C     READ (10'ITAG10) DATA
      ILOC(I) = ITAG10
      ITAG10 = ITAG10 + 1
C
      X(I) = DATA(1)
      Y(I) = DATA(2)
      Z(I) = DATA(3)
      S(I) = DATA(4)
      ME(I) = DATA(7)
      PRES(I) = DATA(11)*PFS
      TSE(I) = DATA(12)*TFS
      AE(I) = SQRT(GAMR*TSE(I))
      UE(I) = ME(I) * AE(I)
C
C  CHECK IF INPUT WALL TEMP IS TO BE USED
      IF (ISFM .EQ. 1)  GO TO 183
      IF (IWT .EQ. 2)  GO TO 188
      IF (IWT .EQ. 5)  GO TO 188
      IF (IWT .EQ. 7)  GO TO 188
      IF (IWT .EQ. 9)  GO TO 188
C
C
  183 CONTINUE
      BS(7) = UE(I)
      BS(3) = TSE(I)
      BS(1) = PRES(I)/(R*TSE(I))
      EL = S(I)
      CALL TEMP (EL,TR,RE,TS,IWT,MER,IPRINT,RT,CFLT)
      TWAL(I) = TR(5)
      TWAT(I) = TR(6)
C  SET CF ARRAY TO VALUES CALCULATED BY TEMP ROUTINE
      IF (RE(1) .GT. RETRAN) GO TO 202
      CF(I) = CFLT(1)
      GO TO 190
  202 IF (ITRC .EQ. 1) GO TO 203
      ITRAN = I
      ITRC = 1
  203 CF(I) = CFLT(2)
      GO TO 190
C
  188 TWAL(I) = SURFI6
  190 CONTINUE
C
      IF (ISFM .EQ. 1) GO TO 495
C
C
C  PRELIMINARY CALCULATIONS
      EROR  = .FALSE.
      TRANS = .FALSE.
      SEPRN = .FALSE.
      CALL PRECAL
      IF (EROR) GO TO 1000
C
C  LAMINAR CALCULATIONS
      CALL LAMNAR
      IF (EROR) GO TO 1010
      IF (SEPRN) GO TO 490
      IF (.NOT.TRANS) GO TO 490
C
C  TURBULENT CALCULATIONS
      IF (KEM .EQ. 1) GO TO 210
      TCON = 198.6
      GO TO 215
  210 TCON = 110.33
  215 CONTINUE
      IF (IWT .EQ. 2)  GO TO 221
      IF (IWT .EQ. 5)  GO TO 221
      IF (IWT .EQ. 7)  GO TO 221
      IF (IWT .EQ. 9)  GO TO 221
      DO 220 I=1,NST
      TWAL(I) = TWAT(I)
      TEM1= 1.+.5*(GAM-1.)*ME(I)**2
      RHSW(I)= PRES(I)/R/TWAL(I)
      RHSE(I)= PRES(I)/R/TSE(I)
      HEADW(I)= .5*RHSW(I)*UE(I)**2
      HEADE(I)= .5*RHSE(I)*UE(I)**2
      SW(I)= TWAL(I)/TTZ-1.
      SUTHL(I)= SQRT(TWAL(I)/TTZ)*(TTZ+TCON)/(TWAL(I)+TCON)
      NUW(I) = SUTHL(I)*(1.+SW(I))*NUTZ*RHTZ/RHSW(I)
      RW(I)= UE(I)*S(I)/NUW(I)
      TAWL(I)= TSE(I)*(1.+PR**(1./2.)*(TEM1-1.))
      TAWT(I)= TSE(I)*(1.+PR**(1./3.)*(TEM1-1.))
      TBAR(I)= .5*(TWAL(I)+TSE(I))+.22*PR**(1./3.)*(TTZ-TSE(I))
      MUBAR(I)= MUTZ*SUTHL(I)*TBAR(I)/TTZ
      BB(I) = UE(I)*RHSE(I)/MUTZ
      AAA(I)= BB(I)*TSE(I)/TBAR(I)*(MUBAR(I)/MUTZ)**.268
      FF(I)=1.+.1599*ME(I)**2+.60*SW(I)+.2101*SW(I)*ME(I)**2+.0114*ME(I)-
     1**4+.0180*SW(I)*ME(I)**4+.1825*SW(I)**2+.0735*SW(I)**2*ME(I)**2   -
     2+.0073*SW(I)**2*ME(I)**4
  220 CONTINUE
  221 CONTINUE
      CALL TURBLN
      IF (EROR) GO TO 1020
  490 CONTINUE
      IDSOUT = 0
      LU = 1
      CALL PROFIL (IDSOUT,LU)
C
  495 CONTINUE
C
C  SET UP AND SAVE CF DATA BACK ON UNIT 10
C  INITIALIZE COUNTERS FOR DATA SAVE LOGIC
C     WHEN TRANSITIONAL CAPABILITY IS INCLUDED, REMOVE THE NEXT CARD
      ISTRAN = 0
      IF (ISTRAN .LE. 0) ISTRAN = 9999
      IF (ITRAN  .LE. 0) ITRAN  = 9999
      IF (ISEP   .LE. 0) ISEP   = 9999
      IFC1 = 0
      IFC2 = 0
      IFC3 = 0
      IFC4 = 0
      LOFF1 = 0
      LOFF2 = 0
      LOFF3 = 0
      LOFF4 = 0
      ITAG10 = LOFF(1)
      IF (CF(1) .LE. 0.0 .AND. ISEP .NE. 1)                             -
     1  CF(1) = EXP(ALOG(CF(2)) + (ALOG(CF(2))  - ALOG(CF(3)))          -
     2          *(S(2) - S(1))/(S(3) - S(2)))
C
C  DO LOOP TO STORE SKIN FRICTION FOR ALL DATA POINTS ON STREAMLINE
      DO 600 I=1,NST
C
C  CHECK STATUS OF POINT (LAMINAR,TRANSITIONAL,TURBULENT, OR SEPARATED)
C    CHECK IF NOT SEPARATED
      IF (I   .LT. ISEP) GO TO 520
C    SEPARATED FLOW
       IF (I   .NE. ISEP) GO TO 510
        LOFF4 = ITAG10
        IFC4 = 0
  510   IFC4 = IFC4 + 1
       CF(I) = 0.0
       GO TO 580
C
C    CHECK IF TURBULENT
  520 IF (I   .LT. ITRAN) GO TO 540
C    TURBULENT
       IF (I   .NE. ITRAN) GO TO 530
       LOFF3 = ITAG10
       IFC3 = 0
  530   IFC3 = IFC3 + 1
       GO TO 580
C
C    LAMINAR OR TRANSITIONAL
  540 IF (I   .LT. ISTRAN) GO TO 560
C    TRANSITIONAL
       IF (I   .NE. ISTRAN) GO TO 550
        LOFF2 = ITAG10
        IFC2 = 0
  550   IFC2 = IFC2 + 1
        GO TO 580
C
C    LAMINAR
  560 IF (I   .NE. 1) GO TO 570
       LOFF1 = ITAG10
       IFC1 = 0
  570  IFC1 = IFC1 + 1
C
  580 CONTINUE
C
C  RECALL DATA
      CALL READMS (10,DATA,12,ITAG10)
C     READ (10'ITAG10) DATA
C
C  SAVE SKIN FRICTION COEFFICIENT
      DATA(5) = CF(I)
      CALL WRITMS (10,DATA,12,ITAG10)
C     WRITE (10'ITAG10) DATA
C     WRITE (TAPEOT,900) ITAG10,DATA
  900 FORMAT (1H , 7HITAG10=,I5,6E12.5,/1H ,12X,6E12.5)
C
      ITAG10 = ITAG10 + 1
C
  600 CONTINUE
C
C  RESET REGION DIRECTORY COUNTERS
      DATB(21) = 0.0
      DATB(22) = 0.0
      DATB(23) = 0.0
      DATB(24) = 0.0
      DATB(25) = 0.0
      DO 611 I=1,25
  611  DATBS(I) = 0.0
C
C   CHECK IF LAMINAR FLOW WAS FOUND
      IF (IFC1 .EQ. 0) GO TO 612
      DATB(21) = NEXT
      DATBS(1) = LOFF1
      DATBS(6) = IFC1
      ITAG10 = NEXT
      CALL WRITMS (10,DATBS,25,ITAG10)
C     WRITE (10'ITAG10) DATBS
      NEXT = NEXT + 1
C
C   CHECK IF TRANSITIONAL FLOW WAS FOUND
  612 IF (IFC2 .EQ. 0) GO TO 614
      DATB(22) = NEXT
      DATBS(1) = LOFF2
      DATBS(6) = IFC2
      ITAG10 = NEXT
      CALL WRITMS (10,DATBS,25,ITAG10)
C     WRITE (10'ITAG10) DATBS
      NEXT = NEXT + 1
C
C   CHECK IF TURBULENT FLOW WAS FOUND
  614 IF (IFC3 .EQ. 0) GO TO 616
      DATB(23) = NEXT
      DATBS(1) = LOFF3
      DATBS(6) = IFC3
      ITAG10 = NEXT
      CALL WRITMS (10,DATBS,25,ITAG10)
C     WRITE (10'ITAG10) DATBS
      NEXT = NEXT + 1
C
C   CHECK IF SEPARATED FLOW WAS FOUND
  616 IF (IFC4 .EQ. 0) GO TO 618
      DATB(24) = NEXT
      DATBS(1) = LOFF4
      DATBS(6) = IFC4
      ITAG10 = NEXT
      CALL WRITMS (10,DATBS,25,ITAG10)
C     WRITE (10'ITAG10) DATBS
      NEXT = NEXT + 1
C
C  RESET REGION TABLE
  618 ITAG10 = LORG(IR) + ISRS + 4
      CALL WRITMS (10,DATB,25,ITAG10)
C     WRITE (10'ITAG10) DATB
C
C  STREAMLINE COMPLETE
  620 CONTINUE
C
C  ALL STREAMLINES COMPLETED
  630 CONTINUE
C
C  RESET MASTER DIRECTORY
      IMTAB(2) = NEXT
      ITAG10 = 2
      CALL WRITMS (10,IMTAB,9,ITAG10)
C     WRITE (10'ITAG10) IMTAB
C  CHANGE REGION DIRECTORY TO INDICATE THAT CF HAS BEEN SAVED ON IT
      E3(11) = 4
      ITAG10 = LORG(IR)
      CALL WRITMS (10,E3,17,ITAG10)
C     WRITE (10'ITAG10) E3
C
C
      IF (LASTR .EQ. 0) GO TO 10
      RETURN
C
 1000 STOP
 1010 STOP
 1020 STOP
      END
*DECK PREC
      SUBROUTINE PRECAL
C
C
C    THIS ROUTINE WAS TAKEN FROM NASA TN D-5681 BY W.D. MCNALLY.
C    MODIFIED BY A.E. GENTRY
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON/C1/    R,PTZ,TTZ,UPMACH,NST,NVP,NTURB,KPVM,KEM,KSMTH,      -
     1KSPLN,KLE,KATCH,CTHET,DLAM,TLAM,DTURB,TTURB,KPRE,KGRAD,KSDE,KLAM, -
     2KMAIN,KPROF,X(100),Y(100),PRES(100),UE(100),ME(100),POPTZ(100),   -
     3VOVCR(100),TWAL(100),                                             -
     4          PSZ,TSZ,UZ,ASZ,ATZ,RHSZ,RHTZ,MUSZ,MUTZ,NUSZ,NUTZ,CP,    -
     5PR,TC,ARCL,                                                       -
     7                            S(100),SOL(100),AE(100),TSE(100),     -
     8TAWL(100),TAWT(100),TBAR(100),RW(300),SW(100),SUTHL(100),         -
     9RHSW(100),RHSE(100),HEADW(100),HEADE(100),NUW(100),MUBAR(100),    -
     AAAA(100),BB(100),FF(100),DUDS(100),DMDS(100),DMDL(100),           -
     B          THET(100),DELSR(100),DELTA(100),FORM(100),              -
     CFORMI(100),FORMTR(100),RTH(100),RTHI(100),CF(100),                -
     DTAUW(100),NUSS(100),DTDY(100),HTRAN(100),CRN(100),                -
     E          SHAPL(100),SHAPK(100),B,NS,                             -
     F          FTRAN,FORMS,                                            -
     G          INST,ITRAN,ISEP,                                        -
     H          XTAB(103),YTAB1(103),YTAB2(103),NTAB,                   -
     I          EROR,TRANS,SEPRN
      DIMENSION SDER(100)
      REAL MUSZ,MUTZ,NUSZ,NUTZ,MUSLE,MUSLM,ME,NUW,MUBAR,MACH
      LOGICAL EROR,TRANS,SEPRN
C
C  CALCULATE ARC LENGTH RATIOS
      ARCL = S(NST)
      DO 60 I=1,NST
   60 SOL(I) = S(I)/ARCL
C
C  CALCULATE POPTZ AND VOVCR AT EACH STATION
      GAM1 = (GAM+1.)/(GAM-1.)
      GAM2 = (GAM-1.)/GAM
      PTOTAL = PTZ
      VCR = SQRT(2.0*GAM*R*TTZ/(GAM + 1.0))
      DO 80 I=1,NST
      POPTZ(I) = PRES(I) / PTOTAL
      VOVCR(I) = UE(I)/VCR
   80 CONTINUE
C
  170 WRITE (TAPEOT,1000)
      WRITE (TAPEOT,1020) (I,PRES(I),UE(I),ME(I),POPTZ(I),VOVCR(I),     -
     1              I=1,NST)
C
C  SMOOTH INPUT DATA IF NECESSARY
C
      IF (KSMTH.LT.1) GO TO 200
      KDONE =  0
      GAMR = GAM * R
  180 CALL SMTHNA (ME,NST,0)
      CALL SMTHNA (PRES,NST,0)
      KDONE=KDONE+1
C     RECOMPUTE PRES,ME,POPTZ, AND VOVCR AT EACH STATION
      DO 100 I=1,NST
      TSE(I) = TTZ/(1.0 + 0.5*(GAM - 1.0)*ME(I)**2)
      AE(I) = SQRT(GAMR*TSE(I))
      UE(I) = ME(I) * AE(I)
      IF (I.EQ.1 .AND. UE(I).LT.0.0) UE(I) = 0.0
      IF (I.GT.1 .AND. UE(I).LT.0.0) UE(I) = 0.01*FLOAT(I)
      POPTZ(I) = PRES(I) / PTOTAL
  100 VOVCR(I) = UE(I)/VCR
  190 WRITE (TAPEOT,1040)
      WRITE (TAPEOT,1020) (I,PRES(I),UE(I),ME(I),POPTZ(I),VOVCR(I),     -
     1              I=1,NST)
      IF(KDONE.LT.KSMTH) GO TO 180
C
C  PRINT GEOMETRY PARAMETERS
C
  200 IF (KPRE.NE.1) GO TO 210
      WRITE (TAPEOT,1030) (I,X(I),Y(I),S(I),SOL(I),I=1,NST)
C
C  CALCULATE OTHER NECESSARY PARAMETERS AT EACH STATION
C
  210 CONTINUE
C
C
      IF (KEM .EQ. 1) GO TO 110
      TCON = 198.6
      GO TO 120
  110 TCON = 110.33
  120 CONTINUE
C
C
      DO 220 I=1,NST
      TEM1= 1.+.5*(GAM-1.)*ME(I)**2
      RHSW(I)= PRES(I)/R/TWAL(I)
      RHSE(I)= PRES(I)/R/TSE(I)
      HEADW(I)= .5*RHSW(I)*UE(I)**2
      HEADE(I)= .5*RHSE(I)*UE(I)**2
      SW(I)= TWAL(I)/TTZ-1.
      SUTHL(I)= SQRT(TWAL(I)/TTZ)*(TTZ+TCON)/(TWAL(I)+TCON)
      NUW(I) = SUTHL(I)*(1.+SW(I))*NUTZ*RHTZ/RHSW(I)
      RW(I)= UE(I)*S(I)/NUW(I)
      TAWL(I)= TSE(I)*(1.+PR**(1./2.)*(TEM1-1.))
      TAWT(I)= TSE(I)*(1.+PR**(1./3.)*(TEM1-1.))
      TBAR(I)= .5*(TWAL(I)+TSE(I))+.22*PR**(1./3.)*(TTZ-TSE(I))
      MUBAR(I)= MUTZ*SUTHL(I)*TBAR(I)/TTZ
      BB(I) = UE(I)*RHSE(I)/MUTZ
      AAA(I)= BB(I)*TSE(I)/TBAR(I)*(MUBAR(I)/MUTZ)**.268
C     WRITE (6,9000) I,AAA(I),BB(I)
C9000 FORMAT (26HIN PRECAL - I,AAA(I),BB(I),I4,2F20.6)
      FF(I)=1.+.1599*ME(I)**2+.60*SW(I)+.2101*SW(I)*ME(I)**2+.0114*ME(I)-
     1**4+.0180*SW(I)*ME(I)**4+.1825*SW(I)**2+.0735*SW(I)**2*ME(I)**2   -
     2+.0073*SW(I)**2*ME(I)**4
  220 CONTINUE
C
C  COMPUTE VELOCITY AND MACH NUMBER GRADIENTS ALONG THE SURFACE
C
C  FINITE DIFFERENCE TECHNIQUE
      IF(KSPLN.EQ.1) GO TO 230
      CALL GRADNT(S,UE,NST,DUDS)
      CALL GRADNT(S,ME,NST,DMDS)
      GO TO 240
C  SPLINE CURVE TECHNIQUE
  230 CALL SPLINE(S,UE,NST,DUDS,SDER)
      CALL SPLINE(S,ME,NST,DMDS,SDER)
  240 DO 250 I=1,NST
  250 DMDL(I)= ARCL*DMDS(I)
C
C  PRINT OTHER CALCULATED PARAMETERS
C
      IF(KPRE.NE.1) GO TO 260
      WRITE (TAPEOT,1050) (I,AE(I),TSE(I),TWAL(I),TAWL(I),TAWT(I),      -
     1              TBAR(I),I=1,NST)
      WRITE (TAPEOT,1060) (I,RW(I),SW(I),SUTHL(I),RHSW(I),RHSE(I),      -
     1              HEADW(I),HEADE(I),NUW(I),MUBAR(I),I=1,NST)
  260 IF(KGRAD.NE.1) GO TO 270
      WRITE (TAPEOT,1070)
      WRITE (TAPEOT,1080) (I,DUDS(I),DMDS(I),DMDL(I),I=1,NST)
C
C  CHECK FOR IMPROPER INPUT
C
  270 DO 280 I=2,NST
      IF (UE(I).NE.0.) GO TO 280
      IF (I .EQ. NST) GO TO 280
      EROR= .TRUE.
      WRITE (TAPEOT,1090)
      RETURN
  280 CONTINUE
      RETURN
C
C
C
C
C  FORMAT STATEMENTS
C
 1000 FORMAT(1H1///4X,24HPRELIMINARY CALCULATIONS///)
 1020 FORMAT(/1X,7HSTATION,7X,4HPRES,13X,2HUE,12X,2HME,11X,5HPOPTZ,9X,5H-
     1VOVCR/(2X,I3,5X,F12.5,3X,F12.5,4X,F10.6,4X,F10.6,4X,F10.6))
 1030 FORMAT (///1X,7HSTATION,7X,1HX,12X,1HY,12X,1HS,                   -
     19X,3HSOL/(2X,I3,3X,F12.5,1X,F12.5,1X,F12.5,3X,F9.5                -
     2))
 1040 FORMAT(///1X,64HSMOOTHED SURFACE DISTRIBUTIONS OF PRES, UE, ME, PO-
     1PTZ, AND VOVCR)
 1050 FORMAT(///1X,7HSTATION,5X,2HAE,10X,3HTSE,9X,4HTWAL,8X,4HTAWL,8X,4H-
     1TAWT,8X,4HTBAR/(2X,I3,4X,F9.3,5(4X,F8.3)))
 1060 FORMAT(///1X,7HSTATION,11X,2HRW,6X,2HSW,4X,5HSUTHL,7X,4HRHSW,12X,4-
     1HRHSE,8X,5HHEADW,4X,5HHEADE,9X,3HNUW,12X,5HMUBAR/(2X,I3,3X,F16.1,2-
     2X,F4.1,1X,F7.3,2X,G14.6,2X,G14.6,1X,F8.3,1X,F8.3,2X,G14.6,2X,G14.6-
     3))
 1070 FORMAT(1H1///21X,17HSURFACE GRADIENTS///)
 1080 FORMAT(1X,7HSTATION,13X,4HDUDS,15X,4HDMDS,15X,4HDMDL/(2X,I3,4X,F18-
     1.6,1X,F18.6,1X,F18.6))
 1090 FORMAT(/////10X,83HTHERE IS A STAGNATION POINT AT A STATION OTHER -
     1THAN STATION 1.  THIS IS NOT ALLOWED)
C
C
      END
*DECK SFN3
      SUBROUTINE  SFNTR3
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON/C1    /INORM,ISURF,IX,IY,IZ,U1,UL,V1,VL,CR,CT,CHX,N2,N3,   -
     1    XO,YO,ZO,AP11,AP12,AP13,AP21,AP22,AP23,AP31,AP32,AP33,        -
     2  FLOWC(2),XI(500),YI(500),B(503,2),XKF(503),AA(2477),            -
     A  XB(4), YB(4), ZB(4),                                            -
     3  NDSET,IABSET,IR,LORG(20),ISR(20),NS,ISFR,IVIS, IFTYP,IFLOW,     -
     4    BX(2,20), BY(2,20), NB ,DUM(4)
C
      DIMENSION TITLE(15),E4(12),E4B(12),E1(25),LOSF(5),                -
     1    FLOW(503, 2),            XT(6),        BP(2)
C
      INTEGER ERROR,       PAGE,CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      EQUIVALENCE  (FLOW(1,1), B(1,1))
C
      DATA     NX, MX,     KD                                           -
     1    /                503, 2,    2477/
C  SET CHECKOUT PRINT FLAG
      IPRINT = 1
      IC = 0
      NB = 0
      MM = MX
C
C  INITIALIZE CONSTANT ARRAY FLOWC
      DO 98 I = 1,MX
   98 FLOWC(I) = 0.0
C
C
C  CYCLE ON SUB-REGIONS
      DO 600 II = 1,NS
      ISBR = ISR(II)
      IG10 = LORG(IR) + 4+ ISBR
      CALL READMS(10,E1,25,IG10)
C     READ(10'IG10)  E1
      LOFF = E1(1) + 0.01
      N1 = E1(6) + 0.01
C
      DO 500 J = 1,5
  500 LOSF(J) = E1(J+20) + 0.01
C     WRITE(TAPEOT,2000)  II,ISBR,LOFF,N1,LOSF
C2000 FORMAT(1H0, 5HII = ,I3,5X7HISBR = ,I3, 5X7HLOFF = ,I5,
C    1  5X5HN1 = ,I5,5X7HLOSF = , 5I10)
      IF (ISFR .EQ. 0)  GO TO 510
C
      IF (LOSF(ISFR) .LE. 0)  GO TO 600
C
C  READ IN SECONDARY FLOW POINTERS
      IG10 = LOSF(ISFR)
      CALL READMS(10,E1,25,IG10)
C     READ(10'IG10)  E1
      LOFF = E1(1) + 0.01
      N1 = E1(6) + 0.01
C     WRITE(TAPEOT,2010)  ISFR,LOFF,N1
C2010 FORMAT(1H0, 7HISFR = ,I3, 5X7HLOFF = ,I5, 5X5HN1 = ,I5)
C
C  READ IN THE DATA
  510 ITAG10 = LOFF
      IBSF = 0
      IB = 0
      DO 310 I = 1,N1
      CALL READMS(10,E4,12,ITAG10)
C     READ(10'ITAG10)  E4
C     WRITE (TAPEOT,990) ITAG10,E4
C 990 FORMAT (1H ,7HITAG10=,I5,4H E4=,6E12.5,/1H ,16X,6E12.5)
      ITAG10 = ITAG10 + 1
C
C  TRANSFORM DATA
  301 CONTINUE
      XX = E4(1) - XO
      YY = E4(2) - YO
      ZZ = E4(3) - ZO
C
      XT(1) = XX*AP11 + YY*AP12 + ZZ*AP13
      XT(2) = XX*AP21 + YY*AP22 + ZZ*AP23
      XT(3) = XX*AP31 + YY*AP32 + ZZ*AP33
      XT(4) = XT(1)
      XT(5) = SQRT(XT(2)**2 + XT(3)**2)
      IF (XT(2) .EQ. 0.0)  GO TO 304
      XT(6) = ATAN2(XT(2),-XT(3))
      IF(XT(6).LT.0.0) XT(6) = 6.283185308 + XT(6)
      GO TO 305
  304 XT(6) = 0.0
      IF (XT(3) .GT. 0.0)  XT(6) = 3.141592654
  305 CONTINUE
      IF (IBSF .EQ. 1)  GO TO 523
C
C  NORMALIZE THE DATA
      IC = IC + 1
      IF (IC .LE. 500)  GO TO 303
      WRITE (TAPEOT,302)
  302  FORMAT (1H0,48H*ROUTINE SFNTRP HAS ATTEMPTED TO LOAD MORE DATA , -
     1 62HPOINTS INTO INTERPOLATION ARRAYS THEN WE HAVE SPACE AVAILABLE.-
     2 ,/1H ,52H*CALCULATIONS WILL CONTINUE WITH ONLY THE FIRST 500 ,   -
     3  7HPOINTS.  )
      IC = IC - 1
      GO TO 311
  303 YI(IC) = (XT(IY) - V1)/VL
      IF (ISURF .EQ. 1)  GO TO 306
      XI(IC) = (XT(IX) - U1)/UL
      GO TO 307
  306 CHX = CR + (CT-CR)*YI(IC)
      XLE = U1 + (UL-U1)*YI(IC)
      XI(IC) = (XT(IX) - XLE)/CHX
C
  307 CONTINUE
C  CHECK IF WITHIN SURFACE BOUNDARIES.
      IF (XI(IC) .LT. 0.0)  GO TO 308
      IF (XI(IC) .GT. 1.0)  GO TO 308
      IF (YI(IC) .LT. 0.0)  GO TO 308
      IF (YI(IC) .GT. 1.0)  GO TO 308
C
C  POINT WITHIN SURFACE BOUNDARIES.  SET UP FLOW BOUNDARIES --
C  -- INITIALIZE AS SURFACE BOUNDARIES.
      IF(IB.EQ.1) GO TO 535
      IB = 1
      NB = NB + 1
      BX(1,NB) = 0.0
      BY(1,NB) = YI(IC)
      IF (ISFR .EQ. 0)  GO TO 520
      IF((IVIS .EQ. 1) .AND. (ISFR .EQ. 1))  GO TO 520
      BX(1,NB) = XI(IC)
C
  520 CONTINUE
      IF (IFTYP .EQ. 2)  GO TO 530
C  CYCLE REMAINING SECONDARY FLOWS TO ESTABLISH BOUNDARIES.
      ISF2 = ISFR
  521 ISF2 = ISF2 + 1
      IF (ISF2 .GT. 5)  GO TO 530
      IG10SF = LOSF(ISF2)
      IF (IG10SF .LE. 0)  GO TO 521
      CALL READMS(10,E1,25,IG10SF)
C     READ(10'IG10SF)  E1
      LOFF = E1(1) + 0.01
      CALL READMS(10,E4B,12,LOFF)
C     READ(10'LOFF)  E4B
      E4(1) = E4B(1)
      E4(2) = E4B(2)
      E4(3) = E4B(3)
      IBSF = 1
      GO TO 301
  523 IBSF = 0
      YIB = (XT(IY) - V1)/VL
      IF (ISURF .EQ. 1)  GO TO 526
      XIB = (XT(IX) - U1)/UL
      GO TO 527
  526 CHB = CR + (CT-CR)*YIB
      XLB = U1 + (UL-U1)*YIB
      XIB = (XT(IX) - XLB)/CHB
C
  527 CONTINUE
      BX(2,NB) = XIB
      BY(2,NB) = YIB
      GO TO 535
C
C
C
  530 CONTINUE
      BX(2,NB) = 1.0
      BY(2,NB) = BY(1,NB)
C  POINT WITHIN BOUNDARIES.  SET UP FLOW ARRAYS.
  535 CONTINUE
C
      FLOW(IC,1) = ALOG(E4(5))
      FLOW(IC,2) = 0.0
      GO TO 310
C
C  POINT NOT WITHIN BOUNDARIES.  RESET COUNTER AND GO TO NEXT POINT.
  308 IC = IC - 1
C
  310 CONTINUE
  600 CONTINUE
      IF (IC .GT. 2)  GO TO 311
      WRITE(TAPEOT,1000)  IC
 1000 FORMAT(1H1, 5HONLY ,I3,29H POINTS WERE FOUND IN SFNTR3 ,          -
     1 56HTO BE WITHIN  SURFACE BOUNDARIES.  THIS IS INSUFFICIENT /     -
     2 55H TO USE THE SURFACE SPLINE.  RUN CONTINUES, BUT USER IS,      -
     3 38H CAUTIONED TO CHECK RESULTS CAREFULLY.)
      WRITE(TAPEOT,1005)  NDSET,IABSET,IR,ISR,ISFR
 1005 FORMAT(1H0,40HTHIS APPLIES TO THE FOLLOWING FLOW DATA /           -
     1 12H DATA SET = ,I3, 10X17HALPHA-BETA SET = ,I3,                  -
     2 10X14HFLOW REGION = ,I3/                                         -
     3 15H SUB-REGIONS = , 20I3/                                        -
     4 18H SECONDARY FLOW = ,I3)
      ERROR = 1
      RETURN
C
C  ALL THE SURFACE DATA ARE IN PROPER ARRAYS.
C
  311 N2 = IC
C
C  CHECK BOUNDARY POINTS
      IF (NB .GT. 1)  GO TO 700
      NB = 2
      BX(1,2) = BX(1,1)
      BX(2,2) = BX(2,1)
      BY(1,2) = 1.0
      BY(2,2) = 1.0
C
C  NORMALIZE TO FLOW BOUNDARIES (IN XI ONLY).
C  FIRST ARRANGE BOUNDARY DATA IN ORDER OF ASCENDING YI VALUES
  700 IB = 0
  710 IB = IB + 1
      I1 = 1
  720 YY = BY(IB,I1)
      I2 = I1 + 1
      J = 0
      DO 730 I = I2,NB
      IF (YY .LT. BY(IB,I))  GO TO 730
      J = I
      YY = BY(IB,I)
  730 CONTINUE
C
      IF (J .EQ. 0)  GO TO 740
      BY(IB,J) = BY(IB,I1)
      BY(IB,I1) = YY
C
  740 I1 = I1 + 1
      IF (I1 .LT. NB)  GO TO 720
      IF (IB .EQ. 1)  GO TO 710
C
C  BOUNDARY DATA NOW IN ORDER.  PROCEED WITH NORMALIZATION.
      IF (IPRINT .EQ. 0)  GO TO 770
      WRITE(TAPEOT,750)  NB
  750 FORMAT(1H1,18HBOUNDARY  DATA,   , I3, 8H POINTS./                 -
     1    1H0, 3X1HI, 7X2HX1, 12X2HY1, 12X2HX2, 12X2HY2//)
      WRITE(TAPEOT,760)  (I,BX(1,I),BY(1,I),BX(2,I),BY(2,I), I=1,NB)
  760 FORMAT(1H , I3, 4F14.6)
  770 CONTINUE
      IC = 0
      DO 900 I = 1,N2
      XX = XI(I)
      YY = YI(I)
      IB = 0
  800 IB = IB + 1
C
      DO 810 I1 = 1,NB
      J = I1
      IF (YY .LT. BY(IB,I1))  GO TO 820
  810 CONTINUE
C
  820 IF (J .EQ. 1)  J = 2
      DY = BY(IB,J) - BY(IB,J-1)
      IF (DY .EQ. 0.0)  GO TO 900
      DX = BX(IB,J) - BX(IB,J-1)
      BP(IB) = BX(IB,J-1) + (YY - BY(IB,J-1))*DX/DY
      GO TO (830,840), IB
  830 IF (XX .LT. BP(IB))  GO TO 900
      GO TO 800
  840 IF (XX .GT. BP(IB))  GO TO 900
C
C  POINT WITHIN FLOW BOUNDARIES
      IC = IC + 1
      XI(IC) = XX - BP(1)
      YI(IC) = YY
      IF (IVIS .EQ. 0)  GO TO 850
      XI(IC) = XI(IC)/(BX(2,1) - BX(1,1))
      GO TO 860
  850 XI(IC) = XI(IC)/(BP(2) - BP(1))
  860 FLOW(IC,1) = FLOW(I,1)
      FLOW(IC,2) = FLOW(I,2)
C
      DO 300 II = 1,MM
  300 FLOWC(II) = FLOWC(II) + FLOW(IC,II)
C
  900 CONTINUE
      IF (IC .GT. 2)  GO TO 910
      WRITE(TAPEOT,1010)  IC
 1010 FORMAT(1H1, 5HONLY ,I3, 29H POINTS WERE FOUND IN SFNTR3,          -
     151HTO BE WITHIN FLOW BOUNDARIES.  THIS IS INSUFFICIENT/           -
     2 55H TO USE THE SURFACE SPLINE.  RUN CONTINUES, BUT USER IS,      -
     3 38H CAUTIONED TO CHECK RESULTS CAREFULLY.)
      WRITE(TAPEOT,1005)  NDSET,IABSET,IR,ISR,ISFR
      ERROR = 1
      RETURN
  910 CONTINUE
      N2 = IC
      N3 = N2 + 3
C  PRINT NORMALIZED ARRAYS
      IF (IPRINT .EQ. 0)  GO TO 330
      WRITE(TAPEOT,3060) NDSET, IABSET,IR
 3060 FORMAT(1H1,34HNORMALIZED SURFACE DATA.  NDSET = ,I2, 5X,          -
     1  9HIABSET = ,I2, 5X, 9HREGION = ,I2/1H0, T4,1HI, T13,2HXI,       -
     2  T27,2HYI, T39,4HLGCF, T55,2HT //)
      WRITE(TAPEOT,3070) (I,XI(I), YI(I), (FLOW(I,J),J=1,MX),I=1,N2)
 3070 FORMAT(1H , I3, 4F14.6)
C
C
  330 CONTINUE
C
      DO 350 J = 1,MX
      FLOWC(J) = FLOWC(J)/N2
      DO 340 I = 1,N2
  340 FLOW(I,J) = FLOW(I,J) - FLOWC(J)
  350 CONTINUE
C
C
C  CALCULATE COEFFICIENT ARRAY (SURFACE SPLINE).
      LS = 0
      CALL ROWFM1 (N2,MM,XI,YI,FLOW,XKF,NX,MX,LS,TAPEB)
C
      CALL SOLVIT(AA,N3,MM,KD,TAPEB,TAPEC,TAPED,TAPEB,B,NX,MX,NERR)
      IF (NERR .NE. 0)  WRITE(TAPEOT,220)
  220 FORMAT(1H1, 16HMATRIX SINGULAR.)
C
C  COEFFICIENTS ARE IN ARRAY  B(I,J)
      IF (IPRINT .EQ. 0)  GO TO 400
      WRITE(TAPEOT,3080)
 3080 FORMAT(1H1,42HSURFACE INTERPOLATION COEFFICIENTS  B(I,J)//)
      WRITE(TAPEOT,3090)  (I, (B(I,J), J=1,MX),I=1,N3)
 3090 FORMAT(1H , I5, 2F15.5)
      WRITE(TAPEOT,3100)  FLOWC
 3100 FORMAT(1H0, 5X, 2F15.5)
  400 CONTINUE
C
C
C
C
      RETURN
      END
*DECK VAL3
      SUBROUTINE VALU3(N,X,Y,Z,XN,YN,ZN,IC,IT,INT,EMT,EMX,EMY,EMZ,POP,  -
     1    TOT)
C
      COMMON/C1    /INORM,ISURF,IX,IY,IZ,U1,UL,V1,VL,CR,CT,CHX,N2,N3,   -
     1    XO,YO,ZO,AP11,AP12,AP13,AP21,AP22,AP23,AP31,AP32,AP33,        -
     2  FLOWC(2),XI(500),YI(500),B(503,2),XKF(503),AA(2477),            -
     A  XB(4), YB(4), ZB(4),                                            -
     3  NDSET,IABSET,IR,LORG(20),ISR(20),NS,ISFR,IVIS, IFTYP,IFLOW,     -
     4    BX(2,20), BY(2,20), NB ,DUM(4)
C
      DIMENSION X(N),Y(N),Z(N),INT(N),EMT(N),EMX(N),EMY(N),EMZ(N),      -
     1    POP(N),TOT(N),VT(6),XT(6),FI(7), BP(2)
C
C
      MM = 7
      IF (IVIS .EQ. 1)  MM = 2
      DO 500 I = 1,N
      IF (IC .EQ. 1)  GO TO 70
C
C  TRANSFORM COORDS
      XX = X(I) - XO
      YY = Y(I) - YO
      ZZ = Z(I) - ZO
C
      XT(1) = XX*AP11 + YY*AP12 + ZZ*AP13
      XT(2) = XX*AP21 + YY*AP22 + ZZ*AP23
      XT(3) = XX*AP31 + YY*AP32 + ZZ*AP33
      XT(4)  =  XT(1)
      XT(5)  =  SQRT(XT(2)**2 + XT(3)**2)
      IF (XT(2) .EQ. 0.0)  GO TO 40
      XT(6)  =  ATAN2(XT(2),-XT(3))
      IF(XT(6).LT.0.0) XT(6) = 6.283185308 + XT(6)
      GO TO 50
   40 XT(6) = 0.0
      IF (XT(3) .GT. 0.0)  XT(6) = 3.141592654
   50 CONTINUE
C
C  NORMALIZE COORDS
      YN = (XT(IY) - V1)/VL
      IF (ISURF .EQ. 1)  GO TO 60
      XN = (XT(IX) - U1)/UL
      GO TO 70
   60 CHX = CR + (CT-CR)*YN
      XLE = U1 + (UL-U1)*YN
      XN = (XT(IX) - XLE)/CHX
C
C  CHECK IF WITHIN SURFACE BOUNDARIES
   70 IF (XN .LT. 0.0)  GO TO 80
      IF (XN .GT. 1.0)  GO TO 80
      IF (YN .LT. 0.0)  GO TO 80
      IF (YN .GT. 1.0)  GO TO 80
C
C  CHECK IF WITHIN FLOW BOUNDARIES
      IB = 0
  800 IB = IB + 1
      DO 810 I1 = 1,NB
      J = I1
      IF (YN .LT. BY(IB,I1))  GO TO 820
  810 CONTINUE
C
  820 IF (J .EQ. 1)  J = 2
      DY = BY(IB,J) - BY(IB,J-1)
      IF (DY .EQ. 0.0)  GO TO 80
      DX = BX(IB,J) - BX(IB,J-1)
      BP(IB) = BX(IB,J-1) + (YN - BY(IB,J-1))*DX/DY
      GO TO (830,840), IB
  830 IF (XN .LT. BP(IB))  GO TO 80
      GO TO 800
  840 IF (XN .GT. BP(IB))  GO TO 80
C
C  POINT WITHIN FLOW BOUNDARIES
      XN = XN - BP(1)
      IF (IVIS .EQ. 0)  GO TO 850
      XN = XN/(BX(2,1) - BX(1,1))
      GO TO 860
  850 XN = XN/(BP(2) - BP(1))
  860 CONTINUE
C
C  POINT WITHIN BOUNDARIES.  CALCULATE VALUES.
      XKF(1) = 1.0
      XKF(2) = XN
      XKF(3) = YN
      J3 = 3
C
      DO 250 J = 1,N2
      J3 = J3 + 1
      UIJ = 0.0
      TR1 = 0.0
      TR2 = 0.0
      IF (XN .EQ. XI(J))  GO TO 210
      TR1 = (XN - XI(J))**2
  210 IF (YN .EQ. YI(J))  GO TO 220
      TR2 = (YN - YI(J))**2
  220 RBIJ = TR1 + TR2
      IF (RBIJ .EQ. 0.0)  GO TO 230
      UIJ = RBIJ*ALOG(RBIJ)
  230 XKF(J3) = UIJ
  250 CONTINUE
C
C
      DO 300 K = 1,MM
      FI(K) = FLOWC(K)
      DO 290 J = 1,N3
      FI(K) = FI(K) + XKF(J)*B(J,K)
  290 CONTINUE
  300 CONTINUE
C
      INT(I) = 1
      IF (IVIS .EQ. 0)  GO TO 305
      EMT(I) = EXP(FI(1))
      EMX(I) = FI(2)
      EMY(I) = 0.0
      EMZ(I) = 0.0
      POP(I) = 0.0
      TOT(I) = 0.0
      GO TO 500
  305 CONTINUE
      EMT(I) = FI(1)
      FT = SQRT(FI(2)**2 + FI(3)**2 + FI(4)**2)
      IF (FT .EQ. 0.0)  FT = 1.0
      FI(2) = FI(2)/FT
      FI(3) = FI(3)/FT
      FI(4) = FI(4)/FT
      EMX(I) = FI(2)/CR
      EMY(I) = FI(3)/VL
      POP(I) = FI(5)
      TOT(I) = FI(6)
      ZN = FI(7)
C
C  TRANSFORM XN, YN, ZN  COORDS BACK TO (X, Y, Z)
      IF (IVIS .EQ. 0)  GO TO 310
      XN = XN*(BX(2,1) - BX(1,1))
      GO TO 320
  310 XN = XN*(BP(2) - BP(1))
  320 XN = XN + BP(1)
      XT(IY) = YN*VL + V1
      XT(IZ) = ZN
      IF (ISURF .EQ. 1)  GO TO 75
   75 XT(IX) = XN*(CR+(CT-CR)*YN) + U1 + (UL-U1)*YN
      GO TO 76
      XT(IX) = XN*UL + U1
   76 CONTINUE
      IF (INORM .LE. 0)  GO TO 79
      GO TO (81, 82, 83, 84),  INORM
C
C  INORM = 0     IX =4,  IY = 5,  IZ = 6
   79 XX = XT(IX)
      SINPH = SIN(XT(IZ))
      COSPH = COS(XT(IZ))
      YY =  XT(IY)*SINPH
      ZZ = -XT(IY)*COSPH
      VT(1) = FI(2)
      VT(2) = FI(3)*SINPH + FI(4)*COSPH
      VT(3) = FI(4)*SINPH - FI(3)*COSPH
      GO TO 90
C
C  INORM = 1     IX = 1,  IY = 2,  IZ = 3
   81 XX = XT(IX)
      YY = XT(IY)
      ZZ = XT(IZ)
  110 VT(1) = FI(2)
      VT(2) = FI(3)
      VT(3) = FI(4)
      GO TO 90
C
C  INORM = 2     IX = 1,  IY = 3,  IZ = 2
   82 XX = XT(IX)
      YY = XT(IZ)
      ZZ = XT(IY)
  111 VT(1) = FI(2)
      VT(2) = FI(4)
      VT(3) = FI(3)
      GO TO 90
C
C  INORM = 3     IX = 2,  IY = 3,  IZ = 1
   83 XX = XT(IZ)
      YY = XT(IX)
      ZZ = XT(IY)
  112 VT(1) = FI(4)
      VT(2) = FI(2)
      VT(3) = FI(3)
      GO TO 90
C
C  INORM = 4     IX = 4,  IY = 6,  IZ = 5
   84 XX = XT(IX)
      SINPH = SIN(XT(IY))
      COSPH = COS(XT(IY))
      YY = XT(IZ)*SINPH
      ZZ =-XT(IZ)*COSPH
      EMY(I) = EMY(I)/ZN
  113 VT(1) = FI(2)
      VT(2) = FI(4)*SINPH + FI(3)*COSPH
      VT(3) =-FI(4)*COSPH + FI(3)*SINPH
C
   90 IF (IC .EQ. 0)  GO TO 100
      X(I) = XO + XX*AP11 + YY*AP21 + ZZ*AP31
      Y(I) = YO + XX*AP12 + YY*AP22 + ZZ*AP32
      Z(I) = ZO + XX*AP13 + YY*AP23 + ZZ*AP33
C
C  CHECK COORDINATE SYSTEM FOR DIRECTION COSINES
  100 IF (IT .EQ. 1)  GO TO 500
  120 EMX(I) = VT(1)*AP11 + VT(2)*AP21 + VT(3)*AP31
      EMY(I) = VT(1)*AP12 + VT(2)*AP22 + VT(3)*AP32
      EMZ(I) = VT(1)*AP13 + VT(2)*AP23 + VT(3)*AP33
      GO TO 500
C
C  POINT NOT WITHIN BOUNDARIES.  SET FLAG AND GO TO NEXT POINT.
   80 INT(I) = 0
C
C
  500 CONTINUE
C
C
      RETURN
      END
*DECK LAMN
      SUBROUTINE LAMNAR
C
C
C    THIS ROUTINE WAS TAKEN FROM NASA TN D-5681 BY W.D. MCNALLY.
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON/C1/    R,PTZ,TTZ,UPMACH,NST,NVP,NTURB,KPVM,KEM,KSMTH,      -
     1KSPLN,KLE,KATCH,CTHET,DLAM,TLAM,DTURB,TTURB,KPRE,KGRAD,KSDE,KLAM, -
     2KMAIN,KPROF,X(100),Y(100),PRES(100),UE(100),ME(100),POPTZ(100),   -
     3VOVCR(100),TWAL(100),                                             -
     4          PSZ,TSZ,UZ,ASZ,ATZ,RHSZ,RHTZ,MUSZ,MUTZ,NUSZ,NUTZ,CP,    -
     5PR,TC,ARCL,                                                       -
     7                            S(100),SOL(100),AE(100),TSE(100),     -
     8TAWL(100),TAWT(100),TBAR(100),RW(300),SW(100),SUTHL(100),         -
     9RHSW(100),RHSE(100),HEADW(100),HEADE(100),NUW(100),MUBAR(100),    -
     AAAA(100),BB(100),FF(100),DUDS(100),DMDS(100),DMDL(100),           -
     B          THET(100),DELSR(100),DELTA(100),FORM(100),              -
     CFORMI(100),FORMTR(100),RTH(100),RTHI(100),CF(100),                -
     DTAUW(100),NUSS(100),DTDY(100),HTRAN(100),CRN(100),                -
     E          SHAPL(100),SHAPK(100),B,NS,                             -
     F          FTRAN,FORMS,                                            -
     G          INST,ITRAN,ISEP,                                        -
     H          XTAB(103),YTAB1(103),YTAB2(103),NTAB,                   -
     I          EROR,TRANS,SEPRN
      DIMENSION CORLN(100),CORML(100),SHEAR(100),DTH(100)
      DIMENSION CCN(20),CRCR(20),CDIF(20),CSHR(20),CCRN(20),CDTH(20)
      DIMENSION STAB(103),CTAB1(103),CTAB2(103)
      DIMENSION CSHRE(16),CCRNE(16),CDTHE(16)
      REAL MUSZ,NUSZ,MUTZ,NUTZ,ME,NUW,MUBAR,NUSS,NURW,KBAR,INT1,INT2
      LOGICAL EROR,TRANS,SEPRN
      EXTERNAL FUNCT,INT1,INT2
C
      EQUIVALENCE (CSHRE(1),CSHR(1))
      EQUIVALENCE (CCRNE(1),CCRN(1))
      EQUIVALENCE (CDTHE(1),CDTH(1))
C
C  READ DATA FOR CORLN(1), RCRIT, DIFF, SHEAR, CRN, AND DTH CURVE FITS
      DATA CCN(1),CCN(2),CCN(3),CCN(4),CCN(5),CCN(6)/                   -
     1 -.08178,.0667,-.03143,.00873,.01657,-.01052/
      DATA CRCR(1),CRCR(2),CRCR(3),CRCR(4),CRCR(5),CRCR(6)/             -
     1 5.47073,43.6053,227.198,-2067.04,-27172.7,13691.2/
      DATA CDIF(1),CDIF(2),CDIF(3),CDIF(4),CDIF(5),CDIF(6)/             -
     1 903.785,26365.0,3.85695E+5,1.11044E+6,-4.53853E+7,-7.70276E+7/
      DATA    CSHRE       /.224488,-1.91539,-9.894,-68.13488,           -
     1-.001512,-1.4768,-10.52925,-152.2781,-.002406,-.015629,           -
     1-1.45743,-126.23395,.000752,.005385,.917838,-39.40644/
      DATA    CCRNE       /2.02056,-19.7211,-24.0495,-1400.002,         -
     1-.050979,-10.88012,62.4419,-5081.76,-.014343,2.279845,            -
     1129.7008,-6257.848,.0270567,-1.677051,57.4397,-2552.266/
      DATA    CDTHE       /8.02829,-4.30978,88.8244,36.4336,            -
     12.71101,-7.42259,242.293,-16.293, -.16394,-7.61942,286.9795,      -
     164.11186,-.16758,-3.70289,130.8107,111.3276/
      FUNCY(XI,X1,X2,Y1,Y2) = (XI-X1)*(Y2-Y1)/(X2-X1) + Y1
C
C  INITIALIZE PARAMETERS
C
      INST = 0
      ITRAN = 0
      ISEP = 0
      CF(1)= 0.
      TAUW(1)= 0.
      NUSS(1)= 0.
      DTDY(1)= 0.
      HTRAN(1)= 0.
      CRN(1)= 0.
      RTRAN= 0.
C
C  CHECK CONSISTENCY OF INITIAL VALUES
C
      IF (DLAM.GE.0..AND.TLAM.GE.0..AND.DTURB.GE.0..AND.TTURB.GE.0.)    -
     1GO TO 10
      EROR = .TRUE.
      WRITE (TAPEOT,1000)
      RETURN
  10  IF (NTURB.NE.1) GO TO 30
      ITRAN = 1
      IF (DTURB.GT.0..AND.TTURB.GT.0.) GO TO 20
      EROR = .TRUE.
      WRITE (TAPEOT,1010)
      RETURN
   20 IF (UE(1).GT.0.) GO TO 240
      EROR = .TRUE.
      WRITE (TAPEOT,1020)
      RETURN
C
C  BEGIN CALCULATION IN LAMINAR REGION - CHECK FOR INITIAL VALUES
C  CALCULATE INITIAL CORRELATION NUMBER
C
   30 IF (DLAM.EQ.0..AND.TLAM.EQ.0.) GO TO 70
      IF (UE(1).GT.0.) GO TO 40
      EROR = .TRUE.
      WRITE (TAPEOT,1030)
      RETURN
   40 IF (TLAM.EQ.0.) GO TO 50
C  INITIAL MOMENTUM THICKNESS WAS GIVEN
      TEM1= 1.+.5*(GAM-1.)*ME(1)**2
      CORML(1) = -ATZ*TLAM**2/(NUTZ*SUTHL(1)*ARCL)*PRES(1)/PTZ          -
     1         *TEM1**1.5
      CORLN(1) = CORML(1)*DMDL(1)
      GO TO 90
C  INITIAL DISPLACEMENT THICKNESS WAS GIVEN
   50 IF (ABS(DMDL(1)).GE..0001) GO TO 60
      CORLN(1)= 0.
      TEM1= 1.+.5*(GAM-1.)*ME(1)**2
      FORM(1)= 2.38411*(1.+(2.79-1.78*PR**.5)*((1.+SW(1))*TEM1-1.))+(4.6-
     15*PR**(1./3.)-3.65*PR*.5)*PR**.5*(TEM1-1.)
      THET(1)= DLAM/FORM(1)
      CORML(1) = -ATZ*THET(1)**2/(NUTZ*SUTHL(1)*ARCL)*PRES(1)/PTZ       -
     1         *TEM1**1.5
      GO TO 90
   60 IF (DMDL(1).GT.0.) CALL ROOT(-1.,0.,DLAM,FUNCT,.5E-5,CORLN(1),SL)
      IF (DMDL(1).LT.0.) CALL ROOT( 0.,.2,DLAM,FUNCT,.5E-5,CORLN(1),SL)
      CORML(1) = CORLN(1)/DMDL(1)
      GO TO 90
C
C  NO INITIAL LAMINAR VALUES GIVEN
C  CALCULATE INITIAL CORRELATION NUMBER
C
C  SHARP LEADING EDGE
   70 IF(KLE.NE.1.AND.ABS(DMDL(1)).GE..0001) GO TO 80
      CORLN(1)= 0.
      CORML(1)= 0.
      GO TO 90
C  STAGNATION POINT
   80 CALL CURVFT(CCN,CORLN(1),SW(1),0,5,0)
      CORML(1)= CORLN(1)/DMDL(1)
      IF (CORML(1).LT.0.) GO TO 90
      EROR= .TRUE.
      WRITE (TAPEOT,1040)
      RETURN
C
C  SOLVE LAMINAR DIFFERENTIAL EQUATION
C  CALCULATE CORRELATION NUMBERS ALONG THE SURFACE
C
   90 TEM1= 1.+.5*(GAM-1.)*ME(1)**2
      TEM2= (3.*GAM-1.)/(2.*GAM-2.)
      DEL = 0.002 * ARCL
      NSTEP = 0
      SS= -DEL
      NTAB=1
      CTAB1(1)= CORLN(1)
      CTAB2(1)= CORML(1)
      STAB(1)= 0.
      CTAB1N = CTAB1(1)
      CTAB2N = CTAB2(1)
      IF (KSDE .NE. 1)  GO TO 100
      WRITE(TAPEOT,1060)
      WRITE(TAPEOT,1070) NSTEP,STAB(1),CTAB1N,SW(1),ME(1),ME(1),        -
     1    DMDL(1),CF(1),TEM1
  100 SS= SS+DEL
      SSDEL = SS+DEL
      IF (SS .LT. S(2)) GO TO 101
      CALL LGRNGE(S,SW,NST,SS,ANS1)
      CALL LGRNGE(S,ME,NST,SS,ANS2)
      CALL LGRNGE(S,PRES,NST,SS,ANSP1)
      GO TO 102
  101 ANS1 = FUNCY (SS,S(1),S(2),SW(1),SW(2))
      ANS2 = FUNCY (SS,S(1),S(2),ME(1),ME(2))
      ANSP1 = FUNCY(SS,S(1),S(2),PRES(1),PRES(2))
  102 IF (SSDEL .LT. S(2)) GO TO 103
      CALL LGRNGE(S,ME,NST,SSDEL,ANS3)
      CALL LGRNGE(S,DMDL,NST,SSDEL,ANS4)
      CALL LGRNGE(S,PRES,NST,SSDEL,ANSP2)
      GO TO 104
  103 ANS3 = FUNCY (SSDEL,S(1),S(2),ME(1),ME(2))
      ANS4 = FUNCY (SSDEL,S(1),S(2),DMDL(1),DMDL(2))
      ANSP2 = FUNCY(SSDEL,S(1),S(2),PRES(1),PRES(2))
  104 CONTINUE
      A1= 0.43631-0.00367*ANS1+0.00481*ANS1**2+0.00651*ANS1**3
      A2= 5.43220+2.25400*ANS1-0.06672*ANS1**2-0.20637*ANS1**3
      A3= 4.51903-10.49775*ANS1-12.71732*ANS1**2-2.95270*ANS1**3
      A4= 19.01831+62.76597*ANS1+115.00986*ANS1**2+62.53113*ANS1**3
      A = A1 - A3*CTAB1N**2 - 2.*A4*CTAB1N**3
      B = A2 + 2.*A3*CTAB1N + 3.*A4*CTAB1N**2
      K1= 0
      SOL1 = SS/ARCL
      SOL2 = SSDEL/ARCL
      TEM3 = SIMPS1(SOL1,SOL2,INT1,K1)
      IF (TEM3.EQ.0..OR.K1.EQ.0) GO TO 110
      EROR= .TRUE.
      WRITE (TAPEOT,1050)
      RETURN
  110 IF (SS .GT. 0.0)  TEM4 = ANS2**(-B)*SQRT(TEM1)*PTZ/ANSP1
      TEM1= 1.+.5*(GAM-1.)*ANS3**2
      TEM5 = ANS3**(-B)*SQRT(TEM1)*PTZ/ANSP2
      TEM6= -A*TEM5*TEM3
      TEM7 = 0.0
      IF (SS .GT. 0.0)  TEM7 = TEM5/TEM4*CTAB2N
      CTAB2N = TEM6 + TEM7
      CTAB1N = CTAB2N*ANS4
      NSTEP = NSTEP + 1
      IF (KSDE .EQ. 1)  WRITE(TAPEOT,1070) NSTEP,SSDEL,CTAB1N,          -
     1  ANS1,ANS2,ANS3,ANS4,B,TEM1,TEM3,TEM4,TEM5,TEM6,TEM7
      IF (CTAB1N .GT. -0.32)  GO TO 122
      WRITE(TAPEOT,121) NSTEP,SSDEL,CTAB1N
  121 FORMAT(1H0,51H**CTAB1 IS BEING USED BELOW THE RANGE OF THE CURVE ,-
     1 11HFIT.  NTAB=,I3,3X, 5HSTAB=,F10.5,3X, 6HCTAB1=,F10.5,/1H ,     -
     2 21H CTAB1 IS SET = -0.32  )
      CTAB1N = -0.32
  122 CONTINUE
      IF (NSTEP .NE. 5) GO TO 100
      NSTEP = 0
      NTAB= NTAB+1
      CTAB2(NTAB)= CTAB2N
      CTAB1(NTAB)= CTAB2N*ANS4
      STAB(NTAB)= SSDEL
      IF (CTAB1(NTAB) .GT. 0.16) GO TO 120
      IF (NTAB .GE. 101) GO TO 120
      IF (SS.LT.ARCL) GO TO 100
  120 CONTINUE
C
C  CALCULATE LAMINAR BOUNDARY LAYER PARAMETERS AT EACH STATION
C
  130 IF (KLAM.NE.1) GO TO 140
      WRITE (TAPEOT,1080)
  140 I= 0
  150 I= I+1
      IF (I.EQ.NTURB) ITRAN=-1
      IF (S(I).LE.STAB(NTAB)) GO TO 160
      IF (CTAB1(NTAB) .GT. 0.16) GO TO 155
      EROR= .TRUE.
      WRITE (TAPEOT,1090)
      RETURN
  155 WRITE (TAPEOT,156) NTAB,CTAB1(NTAB)
  156 FORMAT (1H0,41HCORRELATION NUMBER (CTAB1) IS .GT. 0.16. ,         -
     1  34H  LAMINAR SEPARATION HAS OCCURRED.,3X, 5HNTAB=,I3,           -
     2     3X, 6HCTAB1=,F10.5)
  160 CALL LGRNGE(STAB,CTAB1,NTAB,S(I),CORLN(I))
      CALL LGRNGE(STAB,CTAB2,NTAB,S(I),CORML(I))
C  OBTAIN SHEAR, CRN, AND DTH FROM CURVE FITS VS CORLN AND SW
      CALL CURVFT(CSHR,SHEAR(I),CORLN(I),SW(I),3,3)
      CALL CURVFT(CCRN,CRN(I),CORLN(I),SW(I),3,3)
      CALL CURVFT(CDTH,DTH(I),CORLN(I),SW(I),3,3)
C  CALCULATE OTHER LAMINAR BOUNDARY LAYER PARAMETERS
      TEM1 = 1.0 + 0.5*(GAM-1.0)*ME(I)*ME(I)
      THET(I) = (-CORML(I)*NUTZ*SUTHL(I)*ARCL*PTZ/                      -
     1         (ATZ*PRES(I)*TEM1**1.5))
      IF (THET(I) .LT. 0.0) THET(I) = 0.0
      THET(I) = SQRT(THET(I))
      FORM(I)= (-1.1138*CORLN(I)+2.38411)*(1.+(2.79-1.78*PR**.5)*((1.+  -
     1SW(I))*TEM1-1.))+(4.65*PR**(1./3.)-3.65*PR**.5)*PR**.5*(TEM1-1.)
      DELSR(I)= THET(I)*FORM(I)
      RTH(I)= UE(I)*THET(I)/NUW(I)
      FORMI(I)= (FORM(I)-SQRT(PR)*(TEM1-1.))/((1.+SW(I))*TEM1)
      FORMTR(I)= FORMI(I)*(1.+SW(I))
      DELTA(I)= THET(I)*(DTH(I)+(TEM1-1.)*(FORMTR(I)+1.))
      SHAPL(I)= DELTA(I)**2/NUW(I)*DUDS(I)
      IF (I.EQ.1) GO TO 180
      CFRW= 2.*SHEAR(I)*SQRT(-SOL(I)/ME(I)/CORML(I))
      CF(I)= CFRW/SQRT(RW(I))
      TAUW(I)= CF(I)*HEADW(I)
      NURW= CFRW*PR**.3/CRN(I)
      NUSS(I)= NURW*SQRT(RW(I))
      DTDY(I)= NUSS(I)*(TAWL(I)-TWAL(I))/S(I)
      HTRAN(I)= TC*DTDY(I)
      IF (S(I).GT.STAB(NTAB) .AND. CTAB1(NTAB).GT.0.16) GO TO 161
      IF (TAUW(I).GT.0.) GO TO 180
  161 IF (KATCH.NE.0) GO TO 170
      ISEP= I
      SEPRN= .TRUE.
      RETURN
  170 ITRAN= -2
      GO TO 270
  180 IF (I.EQ.1.AND.ABS(UE(1)).LE..0000001) GO TO 190
      SHAPK(I)= NUTZ*RTH(I)**2*SUTHL(I)**2*(1.+SW(I))**4/ATZ/ME(I)**2/  -
     1FF(I)/ARCL*DMDL(I)*TEM1**(1./(GAM-1.))
      GO TO 200
  190 SHAPK(I)= 0.07
  200 RTHI(I)= RTH(I)*SUTHL(I)*(1.+SW(I))**2/FF(I)/SQRT(TEM1)
      IF (RTHI(I) .GT. 1.0E 8) WRITE (TAPEOT,202) I,RTH(I),SUTHL(I),    -
     1    FF(I),TEM1,UE(I),THET(I),NUW(I),ANS3
  202 FORMAT (1H0,17HRTHI IS TOO LARGE,3X,2HI=,I3,3X,4HRTH=,F10.5,3X,   -
     1  6HSUTHL=,F10.5,3X,3HFF=,F10.5,3X,5HTEM1=,F10.5,/1H ,20X,        -
     2  9HUE=,F10.5,3X,5HTHET=,F10.5,3X,4HNUW=,F10.5,3X,5HANS3=,F10.5)
C
C  CALCULATE RCRIT TO CHECK FOR INSTABILITY AND TRANSITION
C
      IF (SHAPK(I) .GT. 0.07) SHAPK(I) = 0.07
      CALL CURVFT(CRCR,RCRIT,SHAPK(I),0,5,0)
      RCRIT= EXP(RCRIT)
      IF(INST.NE.0) GO TO 210
C
C  CHECK FOR INSTABILITY
C
      IF(RTHI(I).LT.RCRIT) GO TO 270
      RINS= RTHI(I)
      INST= I
      GO TO 270
C
C  CHECK FOR TRANSITION
C
  210 K1= 0
      NS= I
      TEM= SIMPS1(SOL(INST),SOL(I),INT2,K1)
      IF (TEM.EQ.0..OR.K1.EQ.0) GO TO 220
      EROR= .TRUE.
      WRITE (TAPEOT,1100)
      RETURN
  220 KBAR= TEM/(SOL(I)-SOL(INST))
      CALL CURVFT(CDIF,DIFF,KBAR,0,5,0)
      RTRAN= RINS+DIFF
      IF(RTHI(I).LT.RTRAN) GO TO 270
      IF (I.LT.NTURB) GO TO 270
      ITRAN= -1
      GO TO 270
  230 ITRAN= I
C
C  COMPUTE INITIAL VALUES FOR TURBULENT SOLUTION
C
  240 TRANS= .TRUE.
      IF (DTURB.EQ.0..AND.TTURB.EQ.0.) GO TO 260
      IF (DTURB.GT.0..AND.TTURB.GT.0.) GO TO 250
      EROR= .TRUE.
      WRITE (TAPEOT,1110)
      RETURN
  250 THET(ITRAN)= TTURB
      FORM(ITRAN)= DTURB/TTURB
      TEM1= 1.+.5*(GAM-1.)*ME(ITRAN)**2
      FORMI(ITRAN)= (FORM(ITRAN)-PR**(1./3.)*(TEM1-1.))/((1.+SW(ITRAN)) -
     1*TEM1)
  260 IF (CTHET.GT.0..AND.DTURB.EQ.0..AND.TTURB.EQ.0.) THET(ITRAN)=     -
     1CTHET*THET(ITRAN)
      THETTR = THET(ITRAN)*SQRT(TTZ/TSE(ITRAN))*PRES(ITRAN)/PTZ
      FTRAN= (ME(ITRAN)*ATZ*THETTR/NUTZ)**1.268
      IF (RTRAN.LE.0.) RTRAN=1000.
      FORMS= FORMI(ITRAN)-0.59389-0.06591*ALOG(RTRAN)+0.001272*(ALOG(RTR-
     1AN))**2
C     WRITE (6,9000) FTRAN,FORMS,ME(ITRAN),ATZ,THETTR,NUTZ,THET(ITRAN),
C    1  TSE(ITRAN),TTZ
C9000 FORMAT (1H0,49HIN LAMNAR - FTRAN, FORMS, ME(ITRAN), ATZ, THETTR,
C    134H NUTZ, THET(ITRAN), TSE(ITRAN),TTZ,/1H ,5F20.6,/1H ,4F20.6)
      IF (DTURB.GT.0..AND.TTURB.GT.0.) FORMS=FORMI(ITRAN)
      IF (FORMS .LT. 176.0) GO TO 265
      WRITE (TAPEOT,261)
  261 FORMAT (1H0,47HIN LAMNAR, FORMS .GE. 176.0 WILL CAUSE TROUBLE ,   -
     1 50HIN RUNKUT WHEN CALLED BY TURBLN.  SET FORMS=176.0. )
      FORMS = 176.0
  265 CONTINUE
      RETURN
C
C  PRINT OUTPUT
C
  270 IF (KLAM.NE.1) GO TO 280
      IF (INST.EQ.0 .OR. INST.EQ.I) WRITE (TAPEOT,1120) I,CORLN(I),     -
     1  SHEAR(I),DTH(I),FORMTR(I),SHAPL(I),RTHI(I),SHAPK(I),RCRIT
      IF (INST.NE.0 .AND. INST.NE.I) WRITE (TAPEOT,1130) I,CORLN(I),    -
     1  SHEAR(I),DTH(I),FORMTR(I),SHAPL(I),RTHI(I),KBAR,DIFF,RTRAN
      IF (ITRAN .EQ. -2) WRITE (TAPEOT,1140)
  280 IF(ITRAN.EQ.-1.OR.ITRAN.EQ.-2) GO TO 230
      IF (I.EQ.NST) RETURN
      GO TO 150
C
C  FORMAT STATEMENTS
C
 1000 FORMAT(/////,10X,60HA NEGATIVE INITIAL VALUE HAS BEEN GIVEN. THIS -
     1IS NOT ALLOWED)
 1010 FORMAT(/////,10X,75HINITIAL VALUES WERE NOT GIVEN FOR THE TURBULEN-
     1T BOUNDARY LAYER AT STATION 1)
 1020 FORMAT(/////,10X,80HINITIAL VALUES WERE GIVEN FOR THE TURBULENT BO-
     1UNDARY LAYER AT A STAGNATION POINT)
 1030 FORMAT(/////,10X,94HINITIAL VALUES OTHER THAN ZERO WERE FIVEN FOR -
     1THE LAMINAR BOUNDARY LAYER AT A STAGNATION POINT)
 1040 FORMAT(/////,10X,106HFOR THIS INPUT DATA STATION 1 IS ASSUMED TO B-
     1E A STAGNATION POINT, SINCE NO INITIAL THICKNESSES ARE GIVEN./    -
     210X,118HIN THIS CASE PRESSURE SHOULD DECREASE INITIALLY.  EITHER G-
     3IVE AN INITIAL VALUE FOR DISPLACEMENT OR MOMENTUM THICKNESS,/     -
     410X,60HOR BEGIN WITH A SHORT REGION OF FAVORABLE PRESSURE GRADIENT-
     5.)
 1050 FORMAT(/////,10X,37HERROR IN COMPUTING INTEGRAL FOR CORLN)
 1060 FORMAT (1H1///7X,45HLAMINAR DIFFERENTIAL EQUATION - SOLUTION FOR ,-
     1   5HCORLN,/,1H0,9HNTAB STAB,3X,5HCTAB1,5X,4HANS1,3X,4HANS2,5X,   -
     2  4HANS3,5X,4HANS4,3X,4H B  ,5X,4HTEM1,5X,4HTEM3,7X,4HTEM4,7X,    -
     3  4HTEM5,5X,4HTEM6,5X,4HTEM7)
 1070 FORMAT (1H ,I3,F7.4,F8.4,F7.3,3F9.4,2F7.4,F11.6,2F11.4,2F9.4)
 1080 FORMAT(1H1///1X,59HLAMINAR CALCULATION OF INSTABILITY AND TRANSITI-
     1ON LOCATIONS///1X,7HSTATION,2X,5HCORLN,5X,5HSHEAR,5X,3HDTH,6X,6HFO-
     2RMTR,4X,5HSHAPL,9X,4HRTHI,6X,5HSHAPK,9X,5HRCRIT,6X,4HKBAR,10X,4HDI-
     3FF,9X,5HRTRAN)
 1090 FORMAT(/////,10X,65HLAMINAR SOLUTION HAS PROCEEDED BEYOND THE RANG-
     1E WHERE IT IS VALID)
 1100 FORMAT(/////,10X,36HERROR IN COMPUTING INTEGRAL FOR KBAR)
 1110 FORMAT(/////,10X,64HIF INITIAL TURBULENT VALUES ARE GIVEN, THEY BO-
     1TH MUST BE NONZERO)
 1120 FORMAT(I4,1X,5F10.4,1X,F12.1,1X,F10.5,1X,F12.1)
 1130 FORMAT(I4,1X,5F10.4,1X,F12.1,24X,F12.5,1X,F12.1,1X,F12.1)
 1140 FORMAT(/////,10X,85HLAMINAR SEPARATION HAS OCCURRED. ASSUMED TO BE-
     1 TRANSITION TO TURBULENT BOUNDARY LAYER)
      END
*DECK PROF
      SUBROUTINE PROFIL (IDSOUT,LU)
C
C
C    THIS ROUTINE WAS TAKEN FROM NASA TN D-5681 BY W.D. MCNALLY.
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON/C1/    R,PTZ,TTZ,UPMACH,NST,NVP,NTURB,KPVM,KEM,KSMTH,      -
     1KSPLN,KLE,KATCH,CTHET,DLAM,TLAM,DTURB,TTURB,KPRE,KGRAD,KSDE,KLAM, -
     2KMAIN,KPROF,X(100),Y(100),PRES(100),UE(100),ME(100),POPTZ(100),   -
     3VOVCR(100),TWAL(100),                                             -
     4          PSZ,TSZ,UZ,ASZ,ATZ,RHSZ,RHTZ,MUSZ,MUTZ,NUSZ,NUTZ,CP,    -
     5PR,TC,ARCL,                                                       -
     7                            S(100),SOL(100),AE(100),TSE(100),     -
     8TAWL(100),TAWT(100),TBAR(100),RW(300),SW(100),SUTHL(100),         -
     9RHSW(100),RHSE(100),HEADW(100),HEADE(100),NUW(100),MUBAR(100),    -
     AAAA(100),BB(100),FF(100),DUDS(100),DMDS(100),DMDL(100),           -
     B          THET(100),DELSR(100),DELTA(100),FORM(100),              -
     CFORMI(100),FORMTR(100),RTH(100),RTHI(100),CF(100),                -
     DTAUW(100),NUSS(100),DTDY(100),HTRAN(100),CRN(100),                -
     E          SHAPL(100),SHAPK(100),B,NS,                             -
     F          FTRAN,FORMS,                                            -
     G          INST,ITRAN,ISEP,                                        -
     H          XTAB(103),YTAB1(103),YTAB2(103),NTAB,                   -
     I          EROR,TRANS,SEPRN
      REAL ME,NUSS
C
C  PRINT LOCATIONS OF INSTABILITY, TRANSITION, AND SEPARATION
C
      IF (KMAIN.NE.1) GO TO 60
      WRITE (TAPEOT,1000)
      IF(INST.EQ.0) GO TO 10
      WRITE (TAPEOT,1010) INST
      GO TO 20
   10 WRITE (TAPEOT,1020)
   20 IF (ITRAN.LE.1) GO TO 30
      WRITE (TAPEOT,1030) ITRAN
      GO TO 40
   30 WRITE (TAPEOT,1040)
   40 IF(ISEP.EQ.0) GO TO 50
      WRITE (TAPEOT,1050) ISEP
      GO TO 60
   50 WRITE (TAPEOT,1060)
C
C  PRINT LOCATIONS OF LAMINAR AND TURBULENT BOUNDARY LAYERS
C
   60 IEND = ITRAN-1
      IF (IEND.EQ.-1.OR.IEND.EQ.0) IEND=ISEP
      IF (IEND.EQ.0) IEND=NST
      IF (KMAIN.NE.1) GO TO 70
      IF (ITRAN .EQ. 1) WRITE (TAPEOT,1070)
      IF (ITRAN .NE. 1) WRITE (TAPEOT,1080) IEND
      IF (ITRAN .EQ. 0) WRITE (TAPEOT,1090)
      IF (ITRAN .EQ. 1) WRITE (TAPEOT,1100) ITRAN,IEND
   70 IF (ITRAN.LE.1) GO TO 80
      IEND = ISEP
      IF(IEND.EQ.0) IEND=NST
      IF (KMAIN.NE.1) GO TO 90
      WRITE (TAPEOT,1100) ITRAN,IEND
C
C  PRINT CALCULATED BOUNDARY LAYER PARAMETERS
C
   80 IF (KMAIN.NE.1) GO TO 90
      WRITE (TAPEOT,1110)
      WRITE (TAPEOT,1120) (I,X(I),S(I),DELSR(I),THET(I),DELTA(I),       -
     1  FORM(I),FORMI(I),I=1,IEND)
      WRITE (TAPEOT,1130)
      WRITE (TAPEOT,1140) (I,CF(I),TAUW(I),RTH(I),DTDY(I),NUSS(I),      -
     1  HTRAN(I),CRN(I),I=1,IEND)
C
C  COMPUTE BOUNDS ON VELOCITY PROFILES
C
   90 IF (KPROF.NE.1) GO TO 170
      WRITE (TAPEOT,1150)
      IF(ITRAN.NE.0) GO TO 100
      IL1= 2
      IL2= IEND
      IT1= 0
      IT2= 0
      GO TO 110
  100 IL1= 2
      IL2= ITRAN-1
      IT1= ITRAN
      IT2= IEND
      IF (IT1.EQ.1) IT1=2
C
C  CALCULATE AND PRINT LAMINAR BOUNDARY LAYER VELOCITY PROFILES
C
  110 NVP1= NVP+1
      IF (IL2.LT.IL1) GO TO 140
      DO 130 I=IL1,IL2
      WRITE (TAPEOT,1160) I
      AAAA= 2.+SHAPL(I)/6.
      BBB= -.5*SHAPL(I)
      CCC= -2.+.5*SHAPL(I)
      DDD= 1.-SHAPL(I)/6.
      DEL= DELTA(I)/FLOAT(NVP)
      YP= -DEL
      DO 120 J=1,NVP1
      YP= YP+DEL
      ETA= YP/DELTA(I)
      YXMAX= YP/X(NST)
      UUE=AAAA*ETA+BBB*ETA**2+CCC*ETA**3+DDD*ETA**4
      U= UUE*UE(I)
  120 WRITE (TAPEOT,1180) ETA,YP,YXMAX,U,UUE
  130 CONTINUE
C
C  CALCULATE AND PRINT TURBULENT BOUNDARY LAYER VELOCITY PROFILES
C
  140 IF(IT1.EQ.0) GO TO 170
      DO 160 I=IT1,IT2
      POWER= DELTA(I)/DELSR(I)-1.
      WRITE (TAPEOT,1170) I,POWER
      DEL= DELTA(I)/FLOAT(NVP)
      YP= -DEL
      DO 150 J=1,NVP1
      YP= YP+DEL
      ETA= YP/DELTA(I)
      YXMAX= YP/X(NST)
      UUE= ETA**(1./POWER)
      U= UUE*UE(I)
  150 WRITE (TAPEOT,1180) ETA,YP,YXMAX,U,UUE
  160 CONTINUE
C
C  SAVE DELTA-STAR DATA FOR ITERATION IF REQUIRED
 170  IF (IDSOUT .EQ. 0) GO TO 220
      IF (IEND .EQ. NST) GO TO 190
      DO 180 I=IEND,NST
 180  DELSR(I) = DELSR(IEND)
C  REVERSE ORDER OF DELTA-STAR ARRAY TO MATCH X-Y DATA ORDER IF THIS
C  IS A LOWER SURFACE
 190  IF (LU .EQ. 1) GO TO 210
      IMAX = NST/2
       N2 = NST + 1
      DO 200 I=1,IMAX
       II = N2 - I
      DELSAV = DELSR(II)
      DELSR(II) = DELSR(I)
 200  DELSR(I) = DELSAV
 210  WRITE (IDSOUT) (DELSR(I),I=1,NST)
 220  RETURN
C
C  FORMAT STATEMENTS
C
 1000 FORMAT(1H1///1X,36HPRINCIPAL BOUNDARY LAYER INFORMATION///)
 1010 FORMAT (/10X,31HINSTABILITY OCCURS AT STATION  ,I3)
 1020 FORMAT (/10X,26HINSTABILITY DOES NOT OCCUR)
 1030 FORMAT (/10X,30HTRANSITION OCCURS AT STATION  ,I3)
 1040 FORMAT (/10X,25HTRANSITION DOES NOT OCCUR)
 1050 FORMAT (/10X,30HSEPARATION OCCURS AT STATION  ,I3)
 1060 FORMAT (/10X,25HSEPARATION DOES NOT OCCUR)
 1070 FORMAT (/10X,37HLAMINAR BOUNDARY LAYER DOES NOT OCCUR)
 1080 FORMAT (/10X,42HLAMINAR BOUNDARY LAYER - STATIONS  1  TO  ,I3)
 1090 FORMAT (/10X,39HTURBULENT BOUNDARY LAYER DOES NOT OCCJR///)
 1100 FORMAT (/10X,35HTURBULENT BOUNDARY LAYER - STATIONS,2X,           -
     1I3,6H  TO  ,I3///)
 1110 FORMAT(/1X,7HSTATION,8X,1HX,12X,1HS,12X,5HDELSR,10X,4HTHET,11X,   -
     15HDELTA,11X,4HFORM,10X,5HFORMI)
 1120 FORMAT(2X,I3,3X,2F13.6,F14.6,1X,F14.6,1X,F14.6,1X,2F14.4)
 1130 FORMAT(///1X,7HSTATION,6X,2HCF,13X,4HTAUW,11X,3HRTH,14X,4HDTDY,   -
     113X,4HNUSS,10X,5HHTRAN,12X,3HCRN)
 1140 FORMAT(I5,F14.5,2X,F14.5,1X,F12.1,5X,F14.2,2X,F14.2,1X,           -
     1F14.4,2X,F13.3)
 1150 FORMAT(1H1///1X,17HVELOCITY PROFILES///)
 1160 FORMAT (/1X,7HSTATION,1X,I5,2X,7HPROFILE/3X,7HY/DELTA,9X,         -
     11HY,12X,6HY/XMAX,10X,1HU,12X,4HU/UE)
 1170 FORMAT (/1X,7HSTATION,1X,I5,2X,7HPROFILE,28X,2HN=,1X,F6.2/3X,7HY/D-
     1ELTA,9X,1HY,12X,6HY/XMAX,10X,1HU,12X,4HU/UE)
 1180 FORMAT(1X,F8.4,2X,2G15.6,2X,F9.2,6X,F8.4)
      END
*DECK TURB
      SUBROUTINE TURBLN
C    MODIFIED BY A.E. GENTRY
C
C    THIS ROUTINE WAS TAKEN FROM NASA TN D-5681 BY W.D. MCNALLY.
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON/C1/    R,PTZ,TTZ,UPMACH,NST,NVP,NTURB,KPVM,KEM,KSMTH,      -
     1KSPLN,KLE,KATCH,CTHET,DLAM,TLAM,DTURB,TTURB,KPRE,KGRAD,KSDE,KLAM, -
     2KMAIN,KPROF,X(100),Y(100),PRES(100),UE(100),ME(100),POPTZ(100),   -
     3VOVCR(100),TWAL(100),                                             -
     4          PSZ,TSZ,UZ,ASZ,ATZ,RHSZ,RHTZ,MUSZ,MUTZ,NUSZ,NUTZ,CP,    -
     5PR,TC,ARCL,                                                       -
     7                            S(100),SOL(100),AE(100),TSE(100),     -
     8TAWL(100),TAWT(100),TBAR(100),RW(300),SW(100),SUTHL(100),         -
     9RHSW(100),RHSE(100),HEADW(100),HEADE(100),NUW(100),MUBAR(100),    -
     AAAA(100),BB(100),FF(100),DUDS(100),DMDS(100),DMDL(100),           -
     B          THET(100),DELSR(100),DELTA(100),FORM(100),              -
     CFORMI(100),FORMTR(100),RTH(100),RTHI(100),CF(100),                -
     DTAUW(100),NUSS(100),DTDY(100),HTRAN(100),CRN(100),                -
     E          SHAPL(100),SHAPK(100),B,NS,                             -
     F          FTRAN,FORMS,                                            -
     G          INST,ITRAN,ISEP,                                        -
     H          XTAB(103),YTAB1(103),YTAB2(103),NTAB,                   -
     I          EROR,TRANS,SEPRN
      REAL MUSZ,NUSZ,MUTZ,NUTZ,ME,NUW,MUBAR,NUSS
      LOGICAL EROR,TRANS,SEPRN
C
C  SOLVE TURBULENT BOUNDARY LAYER DIFFERENTIAL EQUATIONS
C  USING RUNGA-KUTTA
      CALL RUNKUT
      IF (EROR) GO TO 40
      IF (KSDE.NE.1) GO TO 10
      WRITE (TAPEOT,1000)
      WRITE (TAPEOT,1010) (XTAB(I),YTAB1(I),YTAB2(I),I=1,NTAB)
C
C  CALCULATE TURBULENT BOUNDARY LAYER PARAMETERS AT EACH STATION
C
   10 DO 30 I=ITRAN,NST
      IF (S(I).LE.XTAB(NTAB)) GO TO 20
      ISEP = I-1
      SEPRN= .TRUE.
      RETURN
   20 TEM1 = 1.+.5*(GAM-1.)*ME(I)**2
      CALL LGRNGE(XTAB,YTAB1,NTAB,S(I),F)
      THETTR= NUTZ*F**.7886/ME(I)/ATZ
      THET(I) = THETTR*SQRT(TSE(I)/TTZ)*PTZ/PRES(I)
      RTH(I)= UE(I)*THET(I)/NUW(I)
      CALL LGRNGE(XTAB,YTAB2,NTAB,S(I),FORMI(I))
      FORMTR(I)= FORMI(I)*(1.+SW(I))
      FORM(I)= FORMTR(I)*TEM1+PR**(1./3.)*(TEM1-1.)
      DELSR(I)= THET(I)*FORM(I)
      POWER= 2.0/(FORMI(I)-1.0)
      IF (FORMI(I).LT.1.02) POWER=100.
      DELTA(I)= (1.+POWER)*DELSR(I)
      CF(I) = 0.246*EXP(-1.561*FORMI(I))*F**(-0.2113)                   -
     1        *TSE(I)/TBAR(I)*(MUBAR(I)/MUTZ)**0.268
      TAUW(I)= CF(I)*HEADE(I)
      IF (I.EQ.1) GO TO 30
      HTRAN(I)= CF(I)/2./PR**(2./3.)*RHSE(I)*UE(I)*CP*(TAWT(I)-TWAL(I))
      DTDY(I)= HTRAN(I)/TC
      NUSS(I)= S(I)*DTDY(I)/(TAWT(I)-TWAL(I))
      CRN(I)= CF(I)*RW(I)/NUSS(I)
   30 CONTINUE
   40 RETURN
 1000 FORMAT(1H1///5X,62HTURBULENT DIFFERENTIAL EQUATIONS - SOLUTION FOR-
     1  F  AND  FORMI///4(31H      S         F       FORMI  )//)
 1010 FORMAT((4(F10.5,2X,F8.1,2X,F7.4,2X)))
      END
*DECK RUNK
      SUBROUTINE RUNKUT
C
C
C
C  RUNKUT SOLVES SIMULTANEOUS FIRST ORDER INITIAL VALUE
C  ORDINARY DIFFERENTIAL EQUATIONS
C
C    THIS ROUTINE WAS TAKEN FROM NASA TN D-5681 BY W.D. MCNALLY.
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON/C1/    R,PTZ,TTZ,UPMACH,NST,NVP,NTURB,KPVM,KEM,KSMTH,      -
     1KSPLN,KLE,KATCH,CTHET,DLAM,TLAM,DTURB,TTURB,KPRE,KGRAD,KSDE,KLAM, -
     2KMAIN,KPROF,X(100),Y(100),PRES(100),UE(100),ME(100),POPTZ(100),   -
     3VOVCR(100),TWAL(100),                                             -
     4          PSZ,TSZ,UZ,ASZ,ATZ,RHSZ,RHTZ,MUSZ,MUTZ,NUSZ,NUTZ,CP,    -
     5PR,TC,ARCL,                                                       -
     7                            S(100),SOL(100),AE(100),TSE(100),     -
     8TAWL(100),TAWT(100),TBAR(100),RW(300),SW(100),SUTHL(100),         -
     9RHSW(100),RHSE(100),HEADW(100),HEADE(100),NUW(100),MUBAR(100),    -
     AAAA(100),BB(100),FF(100),DUDS(100),DMDS(100),DMDL(100),           -
     B          THET(100),DELSR(100),DELTA(100),FORM(100),              -
     CFORMI(100),FORMTR(100),RTH(100),RTHI(100),CF(100),                -
     DTAUW(100),NUSS(100),DTDY(100),HTRAN(100),CRN(100),                -
     E          SHAPL(100),SHAPK(100),B,NS,                             -
     F          FTRAN,FORMS,                                            -
     G          INST,ITRAN,ISEP,                                        -
     H          XTAB(103),YTAB1(103),YTAB2(103),NTAB,                   -
     I          EROR,TRANS,SEPRN
      LOGICAL EROR,TRANS,SEPRN
      DIMENSION YY(2),RY(2),YINC(2),DOT(2),RUK(2,4)
C     DOUBLE PRECISION XX,RX,YY,RY,RUK,DEL,DOT,
C    1TEM1,TEM2,TEM3,TEM4,TEM5,TEM6
      REAL ME,NUW,MUBAR
      FUNCY(XI,X1,X2,Y1,Y2) = (XI-X1)*(Y2-Y1)/(X2-X1) + Y1
C
C  THE VALUE OF THE INCOMPRESSIBLE FORM FACTOR
C  (FORMS, YY(2))  IS LIMITED TO THE FLAT PLATE
C  VALUE, FORMFP.  A VALUE OF 1.3 IS USED (SUGGESTED
C  BY RESHOTKO + TUCKER,  NACA TN-4154).
+
      FORMFP = 1.3
+
C  SET DEL SPACING AND STORE INITIAL VALUES
C
      DEL = 0.002 * ARCL
      NSTEP = 0
   10 YY(1)=FTRAN
      YY(2)= FORMS
      IF (YY(2) .LT. FORMFP)  YY(2) = FORMFP
      XX= S(ITRAN)
      NV=2
      NTAB = 1
      YTAB1(1)= YY(1)
      YTAB2(1)= YY(2)
      XTAB(1)= XX
C
C  SOLVE FOR YY(1) AND YY(2) AT NEXT XX INCREMENT
C
C  SAVE PREVIOUS YY(1) AND YY(2)
   20 DO 30 J=1,NV
   30 RY(J)= YY(J)
      RX= XX
C
C  CALCULATE NEW YY(1) AND YY(2)
C
      DO 90 L=1,4
C  PUT DIFFERENTIAL EQUATIONS IN THE FORM OF
C  FIRST DERIVATIVE = REMAINDER OF EQUATION
      IF (XX .LT. S(2)) GO TO 35
      CALL LGRNGE(S,ME,NST,XX,ANS1)
      CALL LGRNGE(S,SW,NST,XX,ANS2)
      CALL LGRNGE(S,AAA,NST,XX,ANS3)
      CALL LGRNGE(S,BB,NST,XX,ANS4)
      CALL LGRNGE(S,DMDS,NST,XX,ANS5)
      CALL LGRNGE(S,TBAR,NST,XX,ANS6)
      GO TO 36
   35 ANS1 = FUNCY (XX,S(1),S(2),ME(1),ME(2))
      ANS2 = FUNCY (XX,S(1),S(2),SW(1),SW(2))
      ANS3 = FUNCY (XX,S(1),S(2),AAA(1),AAA(2))
      ANS4 = FUNCY (XX,S(1),S(2),BB(1),BB(2))
      ANS5 = FUNCY (XX,S(1),S(2),DMDS(1),DMDS(2))
      ANS6 = FUNCY (XX,S(1),S(2),TBAR(1),TBAR(2))
   36  CONTINUE
      TEM1= 1.+(1.+ANS2)*YY(2)
C     TEM2= 0.123D+0*DEXP(-1.561D+0*YY(2))*ANS3
      TEM2= 0.123 * EXP(-1.561*YY(2))*ANS3
      DOT(1)= 1.268*(-YY(1)/ANS1*ANS5*TEM1+TEM2)
      TEM3= YY(2)*(YY(2)+1.)**2*(YY(2)-1.)
      TEM4= 1.+ANS2*(YY(2)*YY(2)+4.*YY(2)-1.)/((YY(2)+1.)*(YY(2)+3.))
      TEM5= (YY(2)*YY(2)-1.)*YY(2)/YY(1)*TEM2
C     IF (YY(1) .LE. 0.0D0) GO TO 110
      IF (YY(1) .LE. 0.0) GO TO 110
      TEM6= (YY(2)*YY(2)-1.)/YY(1)**(.7886)*(.011*(YY(2)+1.)*(YY(2)-1.) -
     1**2/YY(2)**2*TTZ/ANS6)*ANS4
      DOT(2)= -ANS5*.5/ANS1*TEM3*TEM4+TEM5-TEM6
C  APPLY THE RUNGA-KUTTA SCHEME
      IF ((RX+DEL) .GT. S(NST)) DEL = S(NST) - RX
      DO 40 J=1,NV
   40 RUK(J,L) = DEL*DOT(J)
      GO TO (50,50,70,90), L
   50 DO 60 J=1,NV
   60 YY(J)= RY(J)+RUK(J,L)/2.
      IF (YY(2) .LT. FORMFP)  YY(2) = FORMFP
      XX= RX+DEL/2.
      GO TO 85
   70 DO 80 J=1,NV
   80 YY(J)= RY(J)+RUK(J,L)
      IF (YY(2) .LT. FORMFP)  YY(2) = FORMFP
      XX= RX+DEL
C 85  IF (YY(2) .LE. 176.0D+0) GO TO 90
   85 IF (YY(2) .LE. 176.0) GO TO 90
      WRITE (TAPEOT,86) YY(2)
   86 FORMAT (1H ,18H**IN RUNKUT YY(2)=,F12.5,21H AND HAS BEEN SET TO , -
     1  30H176.0 TO PREVENT PROGRAM HALT. )
C     YY(2) = 176.0D+0
      YY(2) = 176.0
   90 CONTINUE
C  INCREMENT THE DEPENDENT VARIABLES TO OBTAIN NEW YY(1) AND YY(2)
      DO 100 J=1,NV
      YINC(J) = (RUK(J,1)+2.*RUK(J,2)+2.*RUK(J,3)+RUK(J,4))/6.
  100 YY(J)= RY(J)+YINC(J)
      IF (YY(2) .LT. FORMFP)  YY(2) = FORMFP
C  CHECK FOR SEPARATION (HI .GT. 2.8)
      IF (YY(2) .LE. 2.8) GO TO 101
      YTAB1(NTAB+1) = YY(1)
      YTAB2(NTAB+1) = YY(2)
      XTAB(NTAB+1) = XX
      RETURN
C
C  STORE NEW COMPUTED VALUES IN A TABLE
C
  101 NSTEP = NSTEP + 1
      IF (NSTEP .NE. 5) GO TO 20
      NSTEP = 0
      NTAB = NTAB + 1
      YTAB1(NTAB)= YY(1)
      YTAB2(NTAB)= YY(2)
      XTAB(NTAB)= XX
      IF (XX.LT.S(NST)) GO TO 20
      RETURN
  110 EROR = .TRUE.
      WRITE (TAPEOT,120) L,YY(1),YY(2)
  120 FORMAT (1H ,48H***THE PARAMETER YY(1) IS .LE. 0.0 IN THE TEMP6 ,
C    1  13HEQUATION   L=,I2,9H   YY(1)=,D18.10,9H   YY(2)=,D18.10,/1H , -
     1  13HEQUATION   L=,I2,9H   YY(1)=,F10.5, 9H   YY(2)=,F10.5,/1H ,  -
     2  32H  ***THIS CASE IS TERMINATED *** )
      RETURN
      END
*DECK FUNC
      SUBROUTINE FUNCT(XX,FX,DFX,INF)
C
2
C    THIS ROUTINE WAS TAKEN FROM NASA TN D-5681 BY W.D. MCNALLY.
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON/C1/    R,PTZ,TTZ,UPMACH,NST,NVP,NTURB,KPVM,KEM,KSMTH,      -
     1KSPLN,KLE,KATCH,CTHET,DLAM,TLAM,DTURB,TTURB,KPRE,KGRAD,KSDE,KLAM, -
     2KMAIN,KPROF,X(100),Y(100),PRES(100),UE(100),ME(100),POPTZ(100),   -
     3VOVCR(100),TWAL(100),                                             -
     4          PSZ,TSZ,UZ,ASZ,ATZ,RHSZ,RHTZ,MUSZ,MUTZ,NUSZ,NUTZ,CP,    -
     5PR,TC,ARCL,                                                       -
     7                            S(100),SOL(100),AE(100),TSE(100),     -
     8TAWL(100),TAWT(100),TBAR(100),RW(300),SW(100),SUTHL(100),         -
     9RHSW(100),RHSE(100),HEADW(100),HEADE(100),NUW(100),MUBAR(100),    -
     AAAA(100),BB(100),FF(100),DUDS(100),DMDS(100),DMDL(100),           -
     B          THET(100),DELSR(100),DELTA(100),FORM(100),              -
     CFORMI(100),FORMTR(100),RTH(100),RTHI(100),CF(100),                -
     DTAUW(100),NUSS(100),DTDY(100),HTRAN(100),CRN(100),                -
     E          SHAPL(100),SHAPK(100),B,NS,                             -
     F          FTRAN,FORMS,                                            -
     G          INST,ITRAN,ISEP,                                        -
     H          XTAB(103),YTAB1(103),YTAB2(103),NTAB,                   -
     I          EROR,TRANS,SEPRN
      REAL MUSZ,NUSZ,MUTZ,NUTZ,ME,NUW,MUBAR
      INF = 0
      B1= 1.+.5*(GAM-1.)*ME(1)**2
      B2= 1.+(2.79-1.78*PR**.5)*((1.+SW(1))*B1-1.)
      B3= -NUTZ*SUTHL(1)*ARCL/ATZ/DMDL(1)*B1**((3.-GAM)/(2.*GAM-2.))
      B4= -1.1138*B2
      B5= 2.38411*B2+(4.65*PR**(1./3.)-3.65*PR**.5)*PR**.5*(B1-1.)
      FX= (B3*XX)**.5*(B4*XX+B5)
      IF (XX.EQ.0.) GO TO 10
      DFX= .5*(B3*XX)**(-.5)*B3*(B4*XX+B5)+B4*(B3*XX)**.5
      RETURN
   10 INF = 1
      DFX = 1.E10
      RETURN
      END
*DECK INT1
      REAL FUNCTION INT1(XX)
C
C
C    THIS ROUTINE WAS TAKEN FROM NASA TN D-5681 BY W.D. MCNALLY.
C
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON/C1/    R,PTZ,TTZ,UPMACH,NST,NVP,NTURB,KPVM,KEM,KSMTH,      -
     1KSPLN,KLE,KATCH,CTHET,DLAM,TLAM,DTURB,TTURB,KPRE,KGRAD,KSDE,KLAM, -
     2KMAIN,KPROF,X(100),Y(100),PRES(100),UE(100),ME(100),POPTZ(100),   -
     3VOVCR(100),TWAL(100),                                             -
     4          PSZ,TSZ,UZ,ASZ,ATZ,RHSZ,RHTZ,MUSZ,MUTZ,NUSZ,NUTZ,CP,    -
     5PR,TC,ARCL,                                                       -
     7                            S(100),SOL(100),AE(100),TSE(100),     -
     8TAWL(100),TAWT(100),TBAR(100),RW(300),SW(100),SUTHL(100),         -
     9RHSW(100),RHSE(100),HEADW(100),HEADE(100),NUW(100),MUBAR(100),    -
     AAAA(100),BB(100),FF(100),DUDS(100),DMDS(100),DMDL(100),           -
     B          THET(100),DELSR(100),DELTA(100),FORM(100),              -
     CFORMI(100),FORMTR(100),RTH(100),RTHI(100),CF(100),                -
     DTAUW(100),NUSS(100),DTDY(100),HTRAN(100),CRN(100),                -
     E          SHAPL(100),SHAPK(100),B,NS,                             -
     F          FTRAN,FORMS,                                            -
     G          INST,ITRAN,ISEP,                                        -
     H          XTAB(103),YTAB1(103),YTAB2(103),NTAB,                   -
     I          EROR,TRANS,SEPRN
      REAL ME,NUW,MUBAR
      CALL LGRNGE(SOL,ME,NST,XX,ANS)
      CALL LGRNGE(SOL,AE,NST,XX,ANSAE)
      CALL LGRNGE(SOL,PRES,NST,XX,ANSPE)
      IF (ANS .LT. 0.0) ANS = ME(1) + 0.0001
      INT1 = ANS**(B-1.)*ANSAE*ANSPE/(ATZ*PTZ)
      RETURN
      END
*DECK INT2
      REAL FUNCTION INT2(XX)
C
C
C    THIS ROUTINE WAS TAKEN FROM NASA TN D-5681 BY W.D. MCNALLY.
C
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON/C1/    R,PTZ,TTZ,UPMACH,NST,NVP,NTURB,KPVM,KEM,KSMTH,      -
     1KSPLN,KLE,KATCH,CTHET,DLAM,TLAM,DTURB,TTURB,KPRE,KGRAD,KSDE,KLAM, -
     2KMAIN,KPROF,X(100),Y(100),PRES(100),UE(100),ME(100),POPTZ(100),   -
     3VOVCR(100),TWAL(100),                                             -
     4          PSZ,TSZ,UZ,ASZ,ATZ,RHSZ,RHTZ,MUSZ,MUTZ,NUSZ,NUTZ,CP,    -
     5PR,TC,ARCL,                                                       -
     7                            S(100),SOL(100),AE(100),TSE(100),     -
     8TAWL(100),TAWT(100),TBAR(100),RW(300),SW(100),SUTHL(100),         -
     9RHSW(100),RHSE(100),HEADW(100),HEADE(100),NUW(100),MUBAR(100),    -
     AAAA(100),BB(100),FF(100),DUDS(100),DMDS(100),DMDL(100),           -
     B          THET(100),DELSR(100),DELTA(100),FORM(100),              -
     CFORMI(100),FORMTR(100),RTH(100),RTHI(100),CF(100),                -
     DTAUW(100),NUSS(100),DTDY(100),HTRAN(100),CRN(100),                -
     E          SHAPL(100),SHAPK(100),B,NS,                             -
     F          FTRAN,FORMS,                                            -
     G          INST,ITRAN,ISEP,                                        -
     H          XTAB(103),YTAB1(103),YTAB2(103),NTAB,                   -
     I          EROR,TRANS,SEPRN
      REAL ME,NUW,MUBAR
      IF (NS.LT.4) GO TO 10
      CALL LGRNGE(SOL,SHAPK,NS,XX,INT2)
      RETURN
   10 DO 20 J=2,NS
      IF (SOL(J).LT.XX) GO TO 20
      INT2= SHAPK(J-1)+(SHAPK(J)-SHAPK(J-1))*(XX-SOL(J-1))/(SOL(J)-SOL(J-
     1-1))
      RETURN
   20 CONTINUE
      RETURN
      END
*DECK LGRN
      SUBROUTINE LGRNGE(X,Y,N,ARG,ANS)
C
C  LGRNGE PERFORMS 4 POINT LAGRANGIAN INTERPOLATION
C
C    THIS ROUTINE WAS TAKEN FROM NASA TN D-5681 BY W.D. MCNALLY.
C
      DIMENSION X(N),Y(N),XX(4),YY(4)
      FUNCY(XI,X1,X2,Y1,Y2) = (XI-X1)*(Y2-Y1)/(X2-X1) + Y1
      IF (N .LT. 4) GO TO 90
      IF (ARG-X(2)) 10,10,20
   10 MM = 1
      GO TO 70
   20 IF (ARG-X(N-1)) 40,40,30
   30 MM = N-3
      GO TO 70
   40 N1 = N-1
      DO 60 I=2,N1
      IF (ARG-X(I)) 50,50,60
   50 MM = I-2
      GO TO 70
   60 CONTINUE
   70 DO 80 I=1,4
      MMM = MM+I-1
      XX(I) = X(MMM)
   80 YY(I) = Y(MMM)
      C1 = ((ARG-XX(2))*(ARG-XX(3))*(ARG-XX(4)))/                       -
     1(XX(1)-XX(2))/(XX(1)-XX(3))/(XX(1)-XX(4))
      C2 = ((ARG-XX(1))*(ARG-XX(3))*(ARG-XX(4)))/                       -
     1(XX(2)-XX(1))/(XX(2)-XX(3))/(XX(2)-XX(4))
      C3 = ((ARG-XX(1))*(ARG-XX(2))*(ARG-XX(4)))/                       -
     1(XX(3)-XX(1))/(XX(3)-XX(2))/(XX(3)-XX(4))
      C4 = ((ARG-XX(1))*(ARG-XX(2))*(ARG-XX(3)))/                       -
     1(XX(4)-XX(1))/(XX(4)-XX(2))/(XX(4)-XX(3))
      ANS = C1*YY(1)+C2*YY(2)+C3*YY(3)+C4*YY(4)
      RETURN
C
C  LESS THAN 4 POINTS - USE LINEAR INTERPOLATION
   90 IF (ARG - X(2)) 110,100,120
  100  ANS = Y(2)
      GO TO 150
  110 ANS = FUNCY(ARG,X(1),X(2),Y(1),Y(2))
      GO TO 150
  120 ANS = FUNCY(ARG,X(2),X(3),Y(2),Y(3))
  150 RETURN
      END
*DECK ROOT
      SUBROUTINE ROOT(A,B,Y,FUNCT,TOLERY,X,DFX)
C
C  ROOT FINDS A ROOT FOR (FUNCT-Y) IN THE INTERVAL (A,B)
C
C    THIS ROUTINE WAS TAKEN FROM NASA TN D-5681 BY W.D. MCNALLY.
C
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      X1= A
      X2= B
      CALL FUNCT(X1,FX1,DFX,INF)
   10 DO 30 I=1,20
      X= (X1+X2)/2.
      CALL FUNCT(X,FX,DFX,INF)
      IF ((FX1-Y)*(FX-Y).GT.0.) GO TO 20
      X2= X
      GO TO 30
   20 X1= X
      FX1= FX
   30 CONTINUE
      IF (ABS(Y-FX).LT.TOLERY) RETURN
      WRITE (TAPEOT,1000) A,B,Y
      STOP
 1000 FORMAT(////4X,49HROOT HAS FAILED TO CONVERGE IN THE GIVEN INTERVAL-
     1/4X,3HA =,G14.6,10X,3HB =,G14.6,10X,3HY =,G14.6)
      END
*DECK CURV
      SUBROUTINE CURVFT(COEF,ANS,X,Y,NX,NY)
C
C  EVALUATE THE POLYNOMIAL FUNCTION, ANS=F(X,Y), USING COEFFICIENTS, COE
C
C    THIS ROUTINE WAS TAKEN FROM NASA TN D-5681 BY W.D. MCNALLY.
C
      DIMENSION COEF(20)
      NX1 = NX+1
      NY1 = NY+1
      ANS = COEF(1)
      IF (X.EQ..0.AND.Y.EQ..0) RETURN
      IF (Y.EQ..0) GO TO 10
      IF (X.EQ..0) GO TO 30
      GO TO 50
   10 DO 20 I=2,NX1
   20 ANS = ANS+COEF(I)*X**(I-1)
      RETURN
   30 DO 40 I=2,NY1
      K = (I-1)*NX1+1
   40 ANS = ANS+COEF(K)*Y**(I-1)
      RETURN
   50 ANS = .0
      DO 60 I=1,NY1
      DO 60 J=1,NX1
      K = (I-1)*NX1+J
   60 ANS = ANS+COEF(K)*Y**(I-1)*X**(J-1)
      RETURN
      END
*DECK GRAD
      SUBROUTINE GRADNT(X,FX,N,DFDX)
C
C  GRADNT CALCULATES THE GRADIENT OF FX WITH RESPECT TO X
C  USING FINITE DIFFERENCE TECHNIQUES
C
C    THIS ROUTINE WAS PREPARED BY D.N. SMYTH.
C
      DIMENSION X(N),FX(N),DFDX(N)
      DIMENSION SL(2),DIST(2)
      N1= N-1
      SL(1) = (FX(2)-FX(1)) / (X(2)-X(1))
      DFDX(1) = SL(1)
      DIST(1) = SQRT ((FX(2)-FX(1))**2 + (X(2)-X(1))**2)
      DO 20 I=2,N1
      SL(2)= (FX(I+1)-FX(I))/(X(I+1)-X(I))
      DIST(2)= SQRT((FX(I+1)-FX(I))**2+(X(I+1)-X(I))**2)
      DFDX(I) = (SL(2)*DIST(1) + SL(1)*DIST(2)) / (DIST(1) + DIST(2))
      SL(1) = SL(2)
      DIST(1) = DIST(2)
   20 CONTINUE
      SL(1) = (FX(N1)-FX(N1-1))/(X(N1) - X(N1-1))
      DIST(1) = SQRT((FX(N1)-FX(N1-1))**2 + (X(N1)-X(N1-1))**2)
      DFDX(N) = SL(2) + (SL(2) - SL(1))*DIST(2) / (DIST(2) + DIST(1))
      RETURN
      END
*DECK SMTH
      SUBROUTINE SMTHNA (Y,N,K)
C
C
C    THIS ROUTINE WAS PREPARED BY D.N. SMYTH.
C
C  SMOOTH IS A SIMPLE DATA SMOOTHING ROUTINE.
C  IF K=1, THE END POINTS ARE ALSO SMOOTHED.
C
      DIMENSION Y(N)
      N1 = N - 1
      Y1 = Y(1)
      Y2 = Y(2)
      Y3 = Y(3)
      IF (K .EQ. 1) Y(1) = (Y1 + 2.*Y2 - Y3) / 2.0
      DO 10 I=2,N1
      Y(I) = (Y1 + 2.*Y2 + Y3) / 4.0
      Y1 = Y2
      Y2 = Y3
      Y3 = Y(I+1)
   10 CONTINUE
      IF (K .EQ. 1) Y(N) = (Y3 + 2.*Y2 - Y1) / 2.0
      RETURN
      END
*DECK SIMP
      FUNCTION  SIMPS1(X1,X2,FUNC,KSIG)
C
C  THIS ROUTINE CALCULATES THE INTEGRAL OF FUNC USING SIMPSONS RULE
C  BETWEEN LIMITS X1 AND X2,  TO BE LESS THAN A
C  SPECIFIED TOLERANCE  (EPS).
C
C  THIS ROUTINE WRITTEN BY D. N. SMYTH.
C
C
      DATA EPS,NMAX/1.0E-5, 400/
C
C  N IS THE NUMBER OF INTERVALS,  H IS THE INTERVAL SPACING.
C
      N = 2
      DX = X2 - X1
   10 H = DX/N
      K = N/2
      X = X1
      C = FUNC(X)
      ANS = 0.0
      DO 30 I = 1,K
      A = C
      X = X + H
      B = FUNC(X)
      X = X + H
      C = FUNC(X)
      ANS = ANS + H*(A + 4.*B + C)
   30 CONTINUE
C
C
      IF (K - 2)  31,32,33
C
C
   31 R1 = ANS
      N = 4
      GO TO 10
C
C
   32 E = (ANS - R1)/(15.*ANS)
      R1 = ANS
      IF (ABS(E) .LE. EPS)  GO TO 60
      H = H*(EPS/ABS(E))**0.25
      IF (H .LT. 0.0025*DX)  H = 0.0025*DX
      N = 0.5*DX/H
      N = (N + 1)*2
      IF (N .GT. NMAX)  N = NMAX
      GO TO 10
C
C
   33 E = (ANS - R1)/(15.*ANS)
C
C
   60 KSIG = 0
      SIMPS1 = ANS*(1.0 + E)/3.0
      RETURN
      END
*DECK SPLI
      SUBROUTINE SPLINE(X,Y,N,H,D2YDX2)
C
C  SPLINE FITS A SPLINE CURVE TO X AND Y
C  AND CALCULATES FIRST AND SECOND DERIVATIVES AT THE SPLINE POINTS
C  END POINT SECOND DERIVATIVES EQUAL THOSE AT ADJACENT POINTS
C
      DIMENSION X(N),Y(N),H(N),D2YDX2(N)
      DIMENSION G(100)
      G(1)= -1.
      H(1)= 0.
      N1= N-1
      IF (N1.LT.2) GO TO 20
      DO 10 I=2,N1
      A= (X(I)-X(I-1))/6.
      B= (X(I+1)-X(I))/6.
      C= 2.*(A+B)-A*G(I-1)
      D= (Y(I+1)-Y(I))/(X(I+1)-X(I))-(Y(I)-Y(I-1))/(X(I)-X(I-1))
      G(I)= B/C
   10 H(I)= (D-A*H(I-1))/C
   20 D2YDX2(N)= H(N1)/(1.+G(N1))
      DO 30 I=2,N
      K= N+1-I
   30 D2YDX2(K)= H(K)-G(K)*D2YDX2(K+1)
      H(1)   = (X(1)-X(2))/6.*(2.*D2YDX2(1)+D2YDX2(2))+(Y(2)-Y(1))/(X(2)-
     1-X(1))
      DO 40 I=2,N
   40 H(I)   = (X(I)-X(I-1))/6.*(2.*D2YDX2(I)+D2YDX2(I-1))+(Y(I)-Y(I-1))-
     1/(X(I)-X(I-1))
      RETURN
      END
*DECK SPEC
      OVERLAY (MARK4,2,5)
      PROGRAM SPEC
C     SUBROUTINE SPEC
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER ERROR,PAGE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      DIMENSION TITLE(15),IPG(20)
C  READ SUB-OPTION CONTROL CARD
      READ (TAPEIN,10) IPG
   10  FORMAT (20I1)
C
      DO 80 I=1,20
       IPROG = IPG(I)
       IF (IPROG .EQ. 0) GO TO 90
      GO TO (30,40), IPROG
C
C  FORCE DATA SUMMATION OPTION
   30 CALL SUM
      GO TO 80
C
C  TRIM OPTION (TO BE ADDED LATER)
   40 CONTINUE
      GO TO 80
C
   80 CONTINUE
C
C  90 RETURN
   90 CONTINUE
      END
*DECK SUM
      SUBROUTINE SUM
C
C  THIS OPTION IS USED TO SUM UP SELECTED FORCE DATA SETS.  IT ALSO
C  MAY BE USED TO PUNCH SELECTED SETS OF FORCE DATA.
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /FLIGHT/MACH,ALT,PSTAG,TSTAG,V,RENO,PFS,TFS,AFS,RHOFS,VIS
      COMMON /GASD/GAM,GASCP,PRAN,IGAS,AV1,AV2,AV3,GTYPE(2)
      COMMON /REF/SREF,MAC,SPAN,XCG,YCG,ZCG
C
      DIMENSION E1(8),E2(11),E4(41),F(11),FF(11),E5(41),E6(41),         -
     1    IPANL(10),IPAN9(10,20),LSUM(41),LCOM(41),E7(11),ICOMP(20),    -
     2  E8(14)
      DIMENSION TITLE(15)
C
      INTEGER ERROR,PAGE,CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL  MACH,MAC
C     DATA TITLE9/4HFORC/
      DATA TITLE9/10HFORCE DATA/
      DATA BLANK/4H    /
C
      DO 5 I = 1,15
    5 TITLE(I) = BLANK
      CASE = 0
C
C  READ MASTER TABLE OF CONTENTS FOR UNIT 9
      IG9 = 1
      CALL READMS (9,E1,8,IG9)
C     READ (9'IG9) E1
C    NUMBER OF COMPONENTS ON UNIT
      NTOT = E1(1)
C    NUMBER OF SUMMATIONS ON UNIT
      NSUM = E1(2)
C    NEXT EMPTY RECORD
      NEXT = E1(3)
C  CHECK IF UNIT HAS VALID DATA
      IF (E1(4) .EQ. TITLE9) GO TO 20
      WRITE (TAPEOT,10)
   10  FORMAT (1H0,47H***UNIT 9 CALLED BY ROUTINE SUM HAS NEVER BEEN ,  -
     1   27HINITIALIZED.  PROGRAM STOP.   )
      STOP
C
   20 CONTINUE
C
      IG9 = 4
      CALL READMS (9,E8,14,IG9)
C     READ  (9'IG9) E8
      MACH = E8(1)
      V    = E8(2)
      RENO = E8(3)
      ALT  = E8(4)
      PSTAG= E8(5)
      TSTAG= E8(6)
      GTYPE(1) = E8(7)
      GTYPE(2) = E8(8)
      SREF = E8(9)
      SPAN = E8(10)
      MAC  = E8(11)
      XCG  = E8(12)
      YCG  = E8(13)
      ZCG = E8(14)
C
C    POINTERS TO FORCE DATA
      IG9 = 2
      CALL READMS (9,E5,41,IG9)
C     READ (9'IG9) E5
      DO 30 I=2,41
   30  LCOM(I-1) = E5(I)
      IFTYPE = E5(1)
C
      IG9 = 3
      CALL READMS (9,E6,41,IG9)
C     READ (9'IG9) E6
      DO 40 I=2,41
   40  LSUM(I-1) = E6(I)
      ISTYPE = E6(1)
      DO 41 I=1,11
   41  E7(I) = 0.0
C
C
C  READ SUMMATION CONTROL CARD
C      ISUM = O (DO NOT SUM)
C           = 1 (SUM COMPONENTS)
C     IPUNCH= 0 (DO NOT PUNCH)
C           =1 (PUNCH SUMMATIONS ONLY)
C           = 2 (PUNCH COMPONENTS PLUS SUMMATIONS)
C     IPRINT= 0 (DO NOT PRINT COMPONENTS, ONLY PRINT FINAL SUMMATION)
C           = 1 (PRINT COMPONENTS PLUS SUMMATION)
   50 READ (TAPEIN,55) LAST,ISUM,ISAVE,IPRINT,IPUNCH,IRUN,ICOMP
   55  FORMAT (5I1,I4,20I2)
C
      IF (ISUM .GT. 0) NSUM = NSUM + 1
      IF (ISUM .GT. 0) LSUM(NSUM) = NEXT
      NEXTS = NEXT
      NSUMS = NSUM
      NEXT = NEXT + 2
C
C  OBTAIN ALPHA-BETA ARRAY FOR FIRST COMPONENT TO BE READ
      L = ICOMP(1)
      IG9 = LCOM(L) + 1
      CALL READMS (9,E4,41,IG9)
C     READ (9'IG9) E4
      NAB = E4(1)
C
C  DO LOOP FOR COMPONENTS SELECTED
      K = 0
   58 K = K + 1
C     COMPONENT NUMBER
       L =  ICOMP(K)
      IF (L .EQ. 0) GO TO 155
      NCT = K
      IG9 = LCOM(L)
      CALL READMS (9,E2,11,IG9)
C     READ (9'IG9) E2
       LL = E2(1)
      IF (LL .EQ. L) GO TO 100
      WRITE (TAPEOT,60)
   60  FORMAT (1H0,45H***COMPONENT NUMBER REQUESTED DOES NOT MATCH ,    -
     1        47HNUMBER ON UNIT 9 IN ROUTINE SUM. PROGRAM STOP.  )
      STOP
C   RECALL PANEL NUMBERS
  100 DO 110 I=1,10
       IPAN9(I,K) = E2(I+1)
  110 CONTINUE
C
C  PRINT OR PUNCH COMPONENTS AS REQUIRED
      IPR = 0
      IF (IPRINT.EQ.0 .AND. IPUNCH.NE.2) GO TO 150
      IF (IPUNCH .EQ. 2) WRITE (TAPEG,121) L
  121  FORMAT (26HCOMPONENT DATA SET NUMBER ,I3)
      IF (IPRINT .EQ. 1) GO TO 195
  122 DO 124 I=1,NAB
      IG9 = LCOM(L) + I*2
      CALL READMS (9,F,11,IG9)
C     READ (9'IG9) F
      IF (IPRINT .EQ. 1) WRITE (TAPEOT,290) F
      IF (IPUNCH .EQ. 2) WRITE (TAPEG,123) F(1),F(6),F(4),F(9),F(5),    -
     1  F(11),F(10),F(7),IRUN
  123  FORMAT (7F9.4,F7.2,1X,I4)
  124 CONTINUE
      IF (IPUNCH .EQ. 2) WRITE (TAPEOT,125)
  125  FORMAT (1H ,5X,33HCOMPONENT DATA HAVE BEEN PUNCHED.  )
  150 IF (K .LT. 20) GO TO 58
  155 CONTINUE
      IPR = 1
      IF (ISUM .EQ. 0) GO TO 440
C
C
C  DO LOOP FOR ALL ALPHA-BETA VALUES
      DO 190 J=1,NAB
C   ZERO OUT FORCE ARRAY
      DO 160 I=1,11
  160  F(I) = 0.0
C
      DO 180 K=1,NCT
       L = ICOMP(K)
      IG9 = LCOM(L) + J*2
      CALL READMS (9,FF,11,IG9)
C     READ (9'IG9) FF
      DO 170 I=2,11
       F(I) = F(I) + FF(I)
  170  CONTINUE
  180  CONTINUE
C
      IF (F(2) .EQ. 0.0) F(2) = 0.000001
      F(8) = F(3) / F(2)
      F(1) = FF(1)
      F(7) = FF(7)
C
      CALL WRITMS (9,F,11,NEXT)
C     WRITE (9'NEXT) F
      NEXT = NEXT + 1
      CALL WRITMS (9,E7,11,NEXT)
C     WRITE (9'NEXT) E7
      NEXT = NEXT + 1
  190 CONTINUE
C
C
C
C***OUTPUT DATA ******
C  WRITE HEADER INFORMATION FOR FORCE OUTPUT PAGE
  195 CALL HEADER
      IF (IPR .EQ. 0) WRITE (TAPEOT,198) L
  198  FORMAT (1H0,26HCOMPONENT DATA SET NUMBER ,I3)
      IF (IPR .NE. 1) GO TO 204
      WRITE (TAPEOT,200) NSUM
  200  FORMAT (1H0,26HSUMMATION DATA SET NUMBER ,I3)
      DO 202 I=1,NCT
      WRITE (TAPEOT,203) (IPAN9(II,I),II=1,10)
  202 CONTINUE
  203  FORMAT (1H ,5X,10I4)
  204 WRITE (TAPEOT,230) MACH,V,RENO
  230 FORMAT (1H0,7H  MACH=F8.3,6H  VEL=F9.1,16H FT/SEC  RE/FT =E13.5 )
      IF (PSTAG .LT. 0.00001) WRITE (6,240) ALT
  240 FORMAT (1H ,7H  ALT =F8.0 )
      IF (PSTAG .GT. 0.00001) WRITE (6,250) PSTAG,TSTAG
  250 FORMAT (1H ,16X7HP STAG=F7.1,16H ATMOS   T STAG=F7.1,6H DEG F )
      WRITE (TAPEOT,260) GTYPE
  260  FORMAT (1H ,2X,2A4)
      WRITE (TAPEOT,270) SREF,SPAN,MAC,XCG,YCG,ZCG
  270 FORMAT (1H0,9H  S REF =F9.2,8H  SPAN =F8.2,8H  MAC  =F8.2,/1H ,   -
     1  9H  X CG  =F9.2,8H  Y CG =F8.2,8H  Z CG =F8.2 )
      WRITE (TAPEOT,280)
  280  FORMAT (1H0,10HFORCE DATA,/1H ,7H  ALPHA,4X,3HC D,7X,3HC L,7X,   -
     1 3HC A,7X,3HC Y,7X,3HC N,/1H ,7H  BETA ,4X,3HL/D,7X,3HC M,7X,     -
     2 4HC LL,6X,4HC LN)
      IF (IPR .EQ. 0) GO TO 122
      IF (IPUNCH .NE. 0) WRITE (TAPEG,285) NSUM
  285  FORMAT (27HSUMMATION COMPONENT NUMBER ,I3)
C
C  RETRIEVE OUTPUT DATA FROM UNIT 9 AND PRINT
      DO 300 I=1,NAB
       IG9 = LSUM(NSUM) + I*2
      CALL READMS (9,F,11,IG9)
C     READ (9'IG9) F
C  WRITE OUTPUT FORCE DATA
      WRITE (TAPEOT,290) F
  290  FORMAT (1H0,F7.2,5F10.5,/1H ,F7.2,4F10.5)
      IF (IPUNCH .NE. 0) WRITE (TAPEG,123) F(1),F(6),F(4),F(9),F(5),    -
     1  F(11),F(10),F(7),IRUN
  300 CONTINUE
      IF (IPUNCH .NE. 0) WRITE (TAPEOT,302)
  302  FORMAT (1H ,5X,25HTHESE DATA WHERE PUNCHED.  )
C**OUTPUT DATA COMPLETED FOR THIS COMPONENT
C
      IF (ISAVE .NE. 0) NEXT = NEXTS
      IF (ISAVE .NE. 0) NSUM = NSUMS
C
C  SAVE COMPONENT INFORMATION IN TABLE OF CONTENTS
      IF (ISAVE .NE. 0) GO TO 440
      DO 191 I=2,11
  191  E2(I) = ICOMP(I-1)
      E2(1) = NSUM
      IG9 = LSUM(NSUM)
      CALL WRITMS (9,E2,11,IG9)
C     WRITE (9'IG9) E2
      IG9 = IG9 + 1
      CALL WRITMS (9,E4,41,IG9)
C     WRITE (9'IG9) E4
C
C  UPDATE MAIN TABLE OF CONTENTS
      E1(1) = NTOT
      E1(2) = NSUM
      E1(3) = NEXT
      IG9 = 1
      CALL WRITMS (9,E1,8,IG9)
C     WRITE (9'IG9) E1
      DO 310 I=2,41
  310  E6(I) = LSUM(I-1)
      E6(1) = 0.0
      IG9 = 3
      CALL WRITMS (9,E6,41,IG9)
C     WRITE (9'IG9) E6
C
C
      WRITE (TAPEOT,430) NSUM
  430  FORMAT (1H0,10X,37HDATA SAVED ON UNIT 9.  SUMMATION SET ,        -
     1   8HNUMBER =,I4)
C
C
C  CHECK IF LAST CASE HAS BEEN COMPLETED
  440 IF (LAST .EQ. 0) GO TO 50
C
      RETURN
      END
*DECK STRE
      OVERLAY (MARK4,2,6)
      PROGRAM STREAM
C     SUBROUTINE STREAM
C
C  THIS ROUTINE CALCULATES STREAMLINES USING THE SURFACE VELOCITY
C  VECTOR DATA GENERATED IN FORCE AND STORED FROM UNIT 4 TO 10 BY
C  ROUTINE FFSURF.  THE STREAMLINE DATA ARE ALSO STORED BACK ON UNIT 10
C  WHEN DESIRED.
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON /SURFNT/INORM,ISURF,IX,IY,IZ,U1,UL,V1,VL,CR,CT,CHX,N2,N3,  -
     1    XO,YO,ZO,AP11,AP12,AP13,AP21,AP22,AP23,AP31,AP32,AP33,        -
     2  FLOWC(7),XI(500),YI(500),B(503,7),XKF(503),AA(14400),           -
     A  XB(4), YB(4), ZB(4),                                            -
     3  NDSET,IABSET,IR,LORG(20),ISR(20),NS,ISFR,IVIS, IFTYP,IFLOW,     -
     4    BX(2,20), BY(2,20), NB
C
      DIMENSION E(25),A(3),F(3),G(12),C(3),INT(1)
      DIMENSION TITLE(15), XP(4,6), ISF(5)
      DIMENSION TITLEM(10),IMTAB(9),LOAB(20),TITLES(10),TITLEA(10),     -
     1  TITLER(10),E4(12),E2(13),DAT(6),DATA(12),DATB(25),IDTYP(5),     -
     2  LOFF(5),LOCD(5),LOSF(5),IFC(5),IFD(5),E3(17)
C
      INTEGER ERROR,PAGE,CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      DATA RC/0.1745329E-1/
C
      WRITE (TAPEOT,5)
    5  FORMAT (1H1,30HSTREAMLINES WILL BE CALCULATED,/1H0)
C
C  INPUT REGION ID INFO AND NORMALIZATION FLAGS
   10 READ (TAPEIN,20) LASTR,NDSET,IABSET,IR,INORM,ISURF,IPF,           -
     1  (ISR(I),I=1,10), ISF
   20  FORMAT (I1,3I2,3I1,   10I2,5I1)
C  READ BOUNDARY POINTS FOR NORMALIZATION
      DO 38 I=1,4
   38 READ (TAPEIN,50) XB(I),YB(I),ZB(I)
   50  FORMAT (3F10.0)
      READ (TAPEIN,25) IRSAVE,NSTR,TITLER
   25  FORMAT (2I2,16X,10A4)
C
      WRITE (TAPEOT,32) LASTR,NDSET,IABSET,IR,    INORM,ISURF,IRSAVE,   -
     1  NSTR,IPF, (ISR(I),I=1,10), ISF, TITLER
   32  FORMAT (1H0,5X,6HLASTR=,I2,4X,6HNDSET=,I2,4X,7HIABSET=,I2,4X,    -
     1 4HIR =,I2,             4X,6HINORM=,I2,4X,6HISURF=,I2,4X,         -
     2 7HIRSAVE=,I2,4X,5HNSTR=,I2,/1H ,4HIPF=,I2,4X4HISR=, 10I3,        -
     3  4X4HISF=,5I2,/1H0, 5X7HTITLER=, 10A4)
C
C
C  READ IN MASTER DIRECTORY
      ITAG10 = 1
      CALL READMS (10,TITLEM,10,ITAG10)
C     READ(10'ITAG10) TITLEM
      ITAG10 = 2
      CALL READMS (10,IMTAB,9,ITAG10)
C     READ(10'ITAG10) IMTAB
C
C  CHECK DATA SET NUMBER
      IF (IMTAB(1) .GE. NDSET)  GO TO 40
      WRITE (TAPEOT,39) NDSET,IMTAB(1)
   39  FORMAT (1H0,9H**NDSET =,I2,31H IS GREATER THAN THE NUMBER OF ,   -
     1 44HDATA SETS ACTUALLY ON UNIT 10. PROGRAM HALT.  )
      STOP
C
C
C  READ IN FLOW DATA SET DIRECTORY
   40 ITAG10 = IMTAB(NDSET + 4)
      CALL READMS (10,E4,12,ITAG10)
C     READ (10'ITAG10) E4
      DO 41 I=1,10
   41 TITLES(I) = E4(I)
      MACH = E4(11)
      NABS = E4(12)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,LOAB,20,ITAG10)
C     READ(10'ITAG10)  LOAB
C
C  READ IN FLOW REGION DIRECTORY FOR REQUESTED ALPHA-BETA SET
      ITAG10 = LOAB(IABSET)
      CALL READMS (10,E2,13,ITAG10)
C     READ (10'ITAG10) E2
      DO 42 I=1,10
   42 TITLEA(I) = E2(I)
      ALPHAS = E2(11)
      BETAS = E2(12)
      NREG = E2(13)
      ITAG10 = ITAG10 + 1
      CALL READMS (10,LORG,20,ITAG10)
C     READ(10'ITAG10)  LORG
C
C
C  CHECK IF THE STREAMLINE REGION WILL WIPE OUT SOME
C  PREVIOUSLY SAVED REGION DIRECTORY
      IF (IRSAVE .EQ. 0) GO TO 52
      IF (IRSAVE .GT. NREG) GO TO 52
      WRITE (TAPEOT,51) IRSAVE,NREG
   51 FORMAT (1H0,39H**STREAMLINE SAVE REGION NUMBER INPUT (,I2,        -
     1 52H) IS LESS THAN THE NUMBER OF REGIONS ALREADY ON THE ,/1H ,    -
     2 22HALPHA-BETA DIRECTORY (,I2,25H). TO AVOID DESTROYING A ,       -
     3 57HPREVIOUSLY SAVED REGION DIRECTORY THE JOB WILL BE HALTED.)
      STOP
   52 CONTINUE
C
C
C  READ IN REQUESTED FLOW REGIONS
C
C
C
      ITAG10 = LORG(IR)
      CALL READMS (10,E3,17,ITAG10)
C     READ (10'ITAG10) E3
      DO 91 I=1,10
   91 TITLER(I) = E3(I)
      DO 92 I=1,5
      IDTYP(I) = E3(I+10)
   92 CONTINUE
      IFTYP = IDTYP(1)
      IFLOW = IDTYP(2)
      IVIS = 0
      IF (IFTYP .EQ. 4)  IVIS = 1
   94 NSREG = E3(16)
C
C  READ IN SURFACE DATA PLANE ORIENTATION RECORD FROM REGION DIRECTORY
      ITAG10 = ITAG10 + 1
      CALL READMS (10,DAT, 6,ITAG10)
C     READ (10'ITAG10) DAT
      XO     = DAT( 1)
      YO     = DAT( 2)
      ZO     = DAT( 3)
      PSIO     = DAT( 4)
      THETO     = DAT( 5)
      PHIO     = DAT( 6)
C
      SINT = SIN(THETO*RC)
      COST = COS(THETO*RC)
      COSPS = COS(PSIO*RC)
      SINPS = SIN(PSIO*RC)
      SINP = SIN(PHIO*RC)
      COSP = COS(PHIO*RC)
      AP11 = COST*COSPS
      AP12 = COST*SINPS
      AP13 =-SINT
      AP21 =-COSP*SINPS + SINP*SINT*COSPS
      AP22 = COSP*COSPS + SINP*SINT*SINPS
      AP23 = SINP*COST
      AP31 = SINP*SINPS + COSP*SINT*COSPS
      AP32 =-SINP*COSPS + COSP*SINT*SINPS
      AP33 = COSP*COST
C
C  SET INDICES FOR NORMALIZING DATA
      IF(INORM .LE. 0)  GO TO 500
      GO TO (510,530,540,550),INORM
C
C  NORMALIZE W.R.T.  A,R
  500 IX = 4
      IY = 5
      IZ = 6
      GO TO 590
C
C  NORMALIZE W.R.T.  X,Y
  510 IX = 1
      IY = 2
      IZ = 3
      GO TO 590
C
C  NORMALIZE W.R.T.  X,Z
  530 IX = 1
      IY = 3
      IZ = 2
      GO TO 590
C
C  NORMALIZE W.R.T.  Y,Z
  540 IX = 2
      IY = 3
      IZ = 1
      GO TO 590
C
C  NORMALIZE W.R.T.  A,PHI
  550 IX = 4
      IY = 6
      IZ = 5
      GO TO 590
C
C  CALCULATE NORMALIZING LENGTHS
  590 CONTINUE
      DO 595 I= 1,4
      XX =XB(I) - XO
      YY =YB(I) - YO
      ZZ =ZB(I) - ZO
      XP(I,1) = XX*AP11 + YY*AP12 + ZZ*AP13
      XP(I,2) = XX*AP21 + YY*AP22 + ZZ*AP23
      XP(I,3) = XX*AP31 + YY*AP32 + ZZ*AP33
      XP(I,4)  =  XP(I,1)
      XP(I,5)  =  SQRT(XP(I,2)**2 + XP(I,3)**2)
      IF (XP(I,2) .EQ. 0.0)  GO TO 594
      XP(I,6)  =  ATAN2(XP(I,2), -XP(I,3))
      IF(XP(I,6).LT.0.0) XP(I,6) = 6.283185308 + XP(I,6)
      GO TO 595
  594 XP(I,6)  =  0.0
      IF (XP(I,3) .GT. 0.0)  XP(I,6) = 3.141592654
  595 CONTINUE
C
C
      U1 = XP(1,IX)
      UL = XP(2,IX) - U1
      CR = UL
      IF (ISURF  .EQ. 1)  GO TO 596
      V1 = XP(3,IY)
      VL = XP(4,IY) - V1
      GO TO 597
C
  596 UL = XP(3,IX)
      CT = XP(4,IX) - XP(3,IX)
      V1 = XP(1,IY)
      VL = XP(3,IY) - V1
  597 CONTINUE
C
C
C
C
C  ESTABLISH SUB-REGION COUNTERS
      IF (ISR(1) .GT. 0)  GO TO 310
      NS = NSREG
      DO 300 I = 1,NS
  300 ISR(I) = I
      GO TO 330
  310 NS = 0
      DO 320 I = 1,10
      IF (ISR(I) .LE. 0)  GO TO 330
  320 NS = NS + 1
C
  330 IF (NS .LE. NSREG)  GO TO 350
      WRITE(TAPEOT,340)  NS,NSREG
  340 FORMAT(1H0,28HSURFACE INTERPOLATION.  THE ,I2,13H SUB-REGIONS ,   -
     1 36HREQUESTED IS GREATER THAN AVAILABLE./1H0, 12HCOUNTER SET ,    -
     2 11HTO NSREG = , I2, 20H AND CASE CONTINUES.)
C
      NS = NSREG
  350 CONTINUE
C
C
      I = 1
      ISFR = 0
      IF (IPF .EQ. 0)  GO TO 400
      ISFR = ISF(I)
      IF (ISFR .GT. 5)  ISFR = 0
C
C  CALCULATE COEFFICIENTS FOR INTERPOLATION
  400 CONTINUE
      CALL SFNTRP
C
      IF (ERROR .NE. 0) GO TO 1000
C
C  INITIALIZE NEW REGION DIRECTORY FOR STREAMLINE DATA
      IF (IRSAVE .EQ. 0) GO TO 49
      LCNEXT = IMTAB(2)
C  SET POINTERS
      DO 163 I=1,5
      LOFF(I) = 0
      LOCD(I) = 0
      LOSF(I) = 0
      IFC(I) = 0
      IFD(I) = 0
      IDTYP(I) = 0
  163 E3(I+10) = IDTYP(I)
      IDTYP(1) = 3
      IDTYP(2) = 2
      ITFLAG   = 0
      DO 48 I=1,10
   48 E3(I) = TITLER(I)
      E3(11) = 3
      E3(12) = 2
      E3(17) = ITFLAG
      IG10 = LCNEXT + NSTR + 4
      LORG(IRSAVE) = LCNEXT
C
C  SET STREAMLINE COUNTER
   49 ISRS = 0
C
C  READ STREAMLINE DATA CARD
   55 READ (TAPEIN,60) IPRINT,ISAVE,ISTART,ISTAG,ISMODE,                -
     1                 IPANL,L,DELTAS,XSI,YSI,ZSI
   60  FORMAT (2I2,3I1,I2,I4,7X,4F10.0)
      IF (IRSAVE .EQ. 0) GO TO 61
      LOFF(1) = IG10 + 1
      DO 59 I=1,12
   59 DATA(I) = 0.0
C
   61 ISRS = ISRS + 1
      IF (ISRS .GT. 1) WRITE (TAPEOT,149)
  149  FORMAT (1H1)
      WRITE (TAPEOT,126) ISRS,IPRINT,ISAVE,ISTART,ISTAG,ISMODE,         -
     1                   IPANL,L,DELTAS,XSI,YSI,ZSI
  126  FORMAT (1H0,18HSTREAMLINE NUMBER ,I2,/1H ,3X,7HIPRINT=,I3,4X,    -
     1  6HISAVE=,I2,4X,7HISTART=,I2,4X,6HISTAG=,I2,4X,7HISMODE=,I2,/1H ,-
     2  3X,7HIPANL =,I3,4X,3HL =,I4,4X,7HDELTAS=,F10.4,4X,4HXSI=,F10.4, -
     3  4X,4HYSI=,F10.4,4X,4HZSI=,F10.4)
      LINE = 0
      IF (ISTART .NE. 0) GO TO 90
C
C  OBTAIN POINTERS AND READ STARTING POINT ELEMENT DATA FROM UNIT 4
      IG4 = 2
      CALL READMS (4,E,25,IG4)
C     READ (4'IG4) E
      NREM = E(4)
      IG4 = IPANL * 5
      CALL READMS (4,E,25,IG4)
C     READ (4'IG4) E
      ISTART = E(3) - NREM
      IG4 = ISTART + NREM*L
      CALL READMS (4,E,25,IG4)
C     READ (4'IG4) E
      LL = E(1)
      IF (LL .EQ. L) GO TO 70
      WRITE (TAPEOT,80) L,LL
   80  FORMAT (1H0,21HINPUT ELEMENT NUMBER ,I4,                         -
     1  45H IS NOT EQUAL TO THE ELEMENT NUMBER ON UNIT 4,I4)
      STOP
   70 XS = E(7)
      YS = E(8)
      ZS = E(9)
      GO TO 110
C
C  USE INPUT STARTING POINT LOCATION
   90 IF (ISTART .NE. 1) GO TO 100
      XS = XSI
      YS = YSI
      ZS = ZSI
C
C  IF ISMODE = 1 DETERMINE ZS FROM INTERPOLATION
C  IF ISMODE = 2 DETERMINE YS FROM INTERPOLATION
C  (ADD LATER)
C
C
      GO TO 110
C  OBTAINE STARTING POINT FROM PREVIOUSLY CALCULATED STREAMLINE
  100 CONTINUE
C
C  (ADD LATER)
C
C
C
  110 CONTINUE
      IF (ISTAG .EQ. 0) GO TO 120
C
C  CALCULATE STAGNATION POINT
C
C  (ADD LATER)
C
C
C
  120 CONTINUE
C
C  INITIALIZE STARTING VARIABLES AND FLAGS
      IS = 0
      IP = IPRINT - 1
      S = 0.0
      ISCT = ISAVE - 1
      IC = 0
C  SET STREAMLINE POINT COUNTER
      ICT = 0
      IF (ISMODE .NE. 0) GO TO 123
C
C  PARAMETRIC INTEGRATION IN NORMALIZED COORDS.
      IT = 1
      M = 2
      X = XS
      Y = YS
      Z = ZS
      GO TO 124
C
C  THREE-VARIABLE INTEGRATION IN REFERENCE COORDS.
  123 IT = 0
      M = 3
      A(1) = XS
      A(2) = YS
      A(3) = ZS
  124 IF (IPRINT .NE. 0) WRITE (TAPEOT,125)
  125  FORMAT (1H0,7X,1HS,11X,1HX,11X,1HY,11X,1HZ,9X,4HMACH,9X,         -
     1  6HP/PINF,6X,6HT/TINF)
C
C  STEP RUNGE-KUTTA CYCLE COUNTER
  130 IS = IS + 1
C
C
C  INTERPOLATE FOR VARIABLES
      IF (ISMODE .NE. 0) GO TO 131
      CALL VALUE (1,X,Y,Z,A(1),A(2),A(3),IC,IT,INT,                     -
     1            EMT,EMX,EMY,EMZ,POP,TOT)
      IC = 1
      GO TO 132
  131 CALL VALUE (1,A(1),A(2),A(3),X,Y,Z,IC,IT,INT,                     -
     1            EMT,EMX,EMY,EMZ,POP,TOT)
C
C  CHECK IF COORDINATES WHERE WITHIN BOUNDS
  132 CONTINUE
      IF (INT(1) .EQ. 1) GO TO 140
C
C  COORDINATES WHERE NOT WITHIN BOUNDS
      WRITE (TAPEOT,133)
  133  FORMAT (1H ,47HNEXT COORDINATE POINT IS OUTSIDE NORMALIZATION ,  -
     1  11HBOUNDARIES.  )
C
C
      GO TO 230
C
C  SET DERIVATIVE ARRAY WITH THE INTERPOLATED DIRECTION COSINES
C  OF THE SURFACE VELOCITY VECTOR
  140 C(1) = EMX
      C(2) = EMY
      C(3) = EMZ
C
C  CHECK IF WE ARE AT THE END OF A DELTAS CYCLE
      IF (IS .NE. 1) GO TO 170
      IF (ISMODE .NE. 0) GO TO 141
      XW = X
      YW = Y
      ZW = Z
      GO TO 142
  141 XW = A(1)
      YW = A(2)
      ZW = A(3)
C
C  CHECK PRINT FLAG AND PRINT IF NECESSARY
  142 IF (IPRINT .EQ. 0) GO TO 160
      IP = IP + 1
      IF (IP .NE. IPRINT) GO TO 160
      IP = 0
      WRITE (TAPEOT,150) S,XW,YW,ZW,EMT,POP,TOT
  150  FORMAT (1H ,7F12.4)
      LINE = LINE + 1
      IF (LINE .GE. 50) WRITE (TAPEOT,149)
      IF (LINE .GE. 50) WRITE (TAPEOT,125)
      IF (LINE .GE. 50) LINE = 0
C
C
C  CHECK IF STREAMLINE DATA ARE TO BE SAVED ON UNIT 10
  160 IF (IRSAVE .EQ. 0) GO TO 170
      ISCT = ISCT + 1
      IF (ISCT .NE. ISAVE) GO TO 170
      ISCT = 0
      DATA(1) = XW
      DATA(2) = YW
      DATA(3) = ZW
      DATA(4) = S
      DATA(7) = EMT
      DATA(11)= POP
      DATA(12)= TOT
      IG10 = IG10 + 1
      CALL WRITMS (10,DATA,12,IG10)
C     WRITE (10'IG10) DATA
      ICT = ICT + 1
C
C
C
  170 GO TO (180,190,200,210), IS
C
C  FIRST RUNGE-KUTTA CYCLE
  180 D = S
      DO 185 I=1,M
      F(I) = A(I)
      G(4*I-3) = C(I)*DELTAS
  185 A(I) = F(I) + G(4*I-3) / 2.0
      GO TO 198
C
C  SECOND RUNGE-KUTTA CYCLE
  190 DO 195 I=1,M
      G(4*I-2) = C(I)*DELTAS
  195 A(I) = F(I) + G(4*I-2) / 2.0
  198 S = D + DELTAS/2.0
      GO TO 220
C
C  THIRD RUNGE-KUTTA CYCLE
  200 DO 205 I=1,M
      G(4*I-1) = C(I) * DELTAS
  205 A(I) = F(I) + G(4*I-1)
      S = D + DELTAS
      GO TO 220
C
C  FOURTH RUNGE-KUTTA CYCLE
  210 DO 215 I=1,M
      G(4*I) = C(I) * DELTAS
      A(I) = G(4*I-3) + 2.0*(G(4*I-2)+G(4*I-1))
  215 A(I) = (A(I) + G(4*I)) / 6.0 + F(I)
      IS = 0
C
  220 CONTINUE
C  END OF RUNGE-KUTTA CODE
      GO TO 130
C
C
C  SET SUBREGION POINTERS IN REGION DIRECTORY IF DATA WHERE SAVED
  230 IF (IRSAVE .EQ. 0) GO TO 235
      IF (ICT .GT. 0) GO TO 233
      WRITE (TAPEOT,232)
  232  FORMAT (1H0,46H***NO STREAMLINE POINTS WHERE CALCULATED. DUMP  )
      I = 100000
      IFC(I) = 0
      STOP
  233 IFC(1) = ICT
      DO 231 I=1,5
      DATB(I) = LOFF(I)    + 0.001
      DATB(I+5) = IFC(I)   + 0.001
      DATB(I+10) = LOCD(I) + 0.001
      DATB(I+15) = IFD(I)  + 0.001
  231 DATB(I+20) = LOSF(I) + 0.001
      ITAG10 = LORG(IRSAVE) + ISRS + 4
      CALL WRITMS (10,DATB,25,ITAG10)
C     WRITE (10'ITAG10) DATB
C  CHECK IF LAST STREAMLINE HAS BEEN REACHED
  235 IF (ISRS .LT. NSTR) GO TO 55
C
      IF (IRSAVE .EQ. 0) GO TO 240
      E3(16) = NSTR
      ITAG10 = LORG(IRSAVE)
      CALL WRITMS (10,E3,17,ITAG10)
C     WRITE (10'ITAG10) E3
C  STORE PLANE ORIENTATION DATA (SAME AS FOR SURFACE DATA)
      ITAG10 = ITAG10 + 1
      CALL WRITMS (10,DAT,6,ITAG10)
C     WRITE (10'ITAG10) DAT
C
C  RE-SET ALPHA-BETA DIRECTORY POINTERS IF DATA WHERE SAVED
      IF (IRSAVE .EQ. 0) GO TO 240
      ITAG10 = LOAB(IABSET)
      E2(13) = NREG
      CALL WRITMS (10,E2,13,ITAG10)
C     WRITE (10'ITAG10) E2
      ITAG10 = ITAG10 + 1
      CALL WRITMS (10,LORG,20,ITAG10)
C     WRITE (10'ITAG10) LORG
C
C
C  CHECK IF LAST REGION HAS BEEN USED
  240 IF (LASTR .EQ. 0) GO TO 10
C  RE-SET MASTER DIRECTORY POINTERS IF DATA WERE SAVED
      IF (IRSAVE .EQ. 0) GO TO 900
      IMTAB(2) = IG10 + 1
      ITAG10 = 2
      CALL WRITMS (10,IMTAB,9,ITAG10)
C     WRITE(10'ITAG10) IMTAB
      GO TO 900
C
 1000 WRITE (TAPEOT,1010)
 1010  FORMAT (1H ,43H***ERROR DETECTED AFTER RETURN FROM SFNTRP.,      -
     1 17H PROGRAM STOP.*** )
      STOP
C
C 900 RETURN
  900 CONTINUE
      END
*DECK SFNT
      SUBROUTINE  SFNTRP
C
C
      COMMON /EXEC/CASE,TITLE,PAGE,ERROR
      COMMON /TAPE/TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,   -
     1             TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      COMMON/SURFNT/INORM,ISURF,IX,IY,IZ,U1,UL,V1,VL,CR,CT,CHX,N2,N3,   -
     1    XO,YO,ZO,AP11,AP12,AP13,AP21,AP22,AP23,AP31,AP32,AP33,        -
     2  FLOWC(7),XI(500),YI(500),B(503,7),XKF(503),AA(14400),           -
     A  XB(4), YB(4), ZB(4),                                            -
     3  NDSET,IABSET,IR,LORG(20),ISR(20),NS,ISFR,IVIS, IFTYP,IFLOW,     -
     4    BX(2,20), BY(2,20), NB
C
      DIMENSION TITLE(15),E4(12),E4B(12),E1(25),LOSF(5),                -
     1    FLOW(503, 7),            XT(6), VT(6), BP(2)
C
      INTEGER ERROR,       PAGE,CASE
      INTEGER  TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,       -
     1         TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      EQUIVALENCE  (FLOW(1,1), B(1,1))
C
      DATA     NX, MX,     KD                                           -
     1    /                503, 7,    2000/
C  SET CHECKOUT PRINT FLAG
      IPRINT = 1
C
C  INITIALIZE CONSTANT ARRAY FLOWC
      DO 98 I = 1,7
   98 FLOWC(I) = 0.0
C
      IC = 0
      NB = 0
C
C  CYCLE ON SUB-REGIONS
      DO 600 II = 1,NS
      ISBR = ISR(II)
      IG10 = LORG(IR) + 4+ ISBR
      CALL READMS(10,E1,25,IG10)
C     READ(10'IG10)  E1
      LOFF = E1(1) + 0.01
      N1 = E1(6) + 0.01
C
      DO 500 J = 1,5
  500 LOSF(J) = E1(J+20) + 0.01
      IF (ISFR .EQ. 0)  GO TO 510
C
      IF (LOSF(ISFR) .LE. 0)  GO TO 600
C
C  READ IN SECONDARY FLOW POINTERS
      IG10 = LOSF(ISFR)
      CALL READMS(10,E1,25,IG10)
C     READ(10'IG10)  E1
      LOFF = E1(1) + 0.01
      N1 = E1(6) + 0.01
C
C  READ IN THE DATA
  510 ITAG10 = LOFF
      IBSF = 0
      IB = 0
      DO 310 I = 1,N1
      CALL READMS(10,E4,12,ITAG10)
C     READ(10'ITAG10)  E4
      ITAG10 = ITAG10 + 1
C
C  TRANSFORM DATA
  301 CONTINUE
      XX = E4(1) - XO
      YY = E4(2) - YO
      ZZ = E4(3) - ZO
C
      XT(1) = XX*AP11 + YY*AP12 + ZZ*AP13
      XT(2) = XX*AP21 + YY*AP22 + ZZ*AP23
      XT(3) = XX*AP31 + YY*AP32 + ZZ*AP33
      XT(4) = XT(1)
      XT(5) = SQRT(XT(2)**2 + XT(3)**2)
      IF (XT(2) .EQ. 0.0)  GO TO 304
      XT(6) = ATAN2(XT(2),-XT(3))
      IF(XT(6).LT.0.0) XT(6) = 6.283185308 + XT(6)
      GO TO 305
  304 XT(6) = 0.0
      IF (XT(3) .GT. 0.0)  XT(6) = 3.141592654
  305 CONTINUE
      IF (IBSF .EQ. 1)  GO TO 523
C
C  NORMALIZE THE DATA
      IC = IC + 1
      IF (IC .LE. 500)  GO TO 303
      WRITE (TAPEOT,302)
  302  FORMAT (1H0,48H*ROUTINE SFNTRP HAS ATTEMPTED TO LOAD MORE DATA , -
     1 62HPOINTS INTO INTERPOLATION ARRAYS THEN WE HAVE SPACE AVAILABLE.-
     2 ,/1H ,52H*CALCULATIONS WILL CONTINUE WITH ONLY THE FIRST 100 ,   -
     3  7HPOINTS.  )
      IC = IC - 1
      GO TO 311
  303 YI(IC) = (XT(IY) - V1)/VL
      IF (ISURF .EQ. 1)  GO TO 306
      XI(IC) = (XT(IX) - U1)/UL
      GO TO 307
  306 CHX = CR + (CT-CR)*YI(IC)
      XLE = U1 + (UL-U1)*YI(IC)
      XI(IC) = (XT(IX) - XLE)/CHX
C
  307 CONTINUE
C  CHECK IF WITHIN SURFACE BOUNDARIES.
      IF (XI(IC) .LT. 0.0)  GO TO 308
      IF (XI(IC) .GT. 1.0)  GO TO 308
      IF (YI(IC) .LT. 0.0)  GO TO 308
      IF (YI(IC) .GT. 1.0)  GO TO 308
C
C  POINT WITHIN SURFACE BOUNDARIES.  SET UP FLOW BOUNDARIES --
C  -- INITIALIZE AS SURFACE BOUNDARIES.
      IF (IB .EQ. 1)  GO TO 535
      IB = 1
      NB = NB + 1
      BX(1,NB) = 0.0
      BY(1,NB) = YI(IC)
      IF (ISFR .EQ. 0)  GO TO 520
      BX(1,NB) = XI(IC)
C
  520 CONTINUE
      IF (IFTYP .EQ. 2)  GO TO 530
      IF (ISFR .EQ. 5)   GO TO 530
      IG10SF = LOSF(ISFR+1)
      IF (IG10SF .LE. 0)  GO TO 530
      CALL READMS(10,E1,25,IG10SF)
C     READ(10'IG10SF)  E1
      LOFF = E1(1) + 0.01
      CALL READMS(10,E4B,12,LOFF)
C     READ(10'LOFF)  E4B
      E4(1) = E4B(1)
      E4(2) = E4B(2)
      E4(3) = E4B(3)
      IBSF = 1
      GO TO 301
  523 IBSF = 0
      YIB = (XT(IY) - V1)/VL
      IF (ISURF .EQ. 1)  GO TO 526
      XIB = (XT(IX) - U1)/UL
      GO TO 527
  526 CHB = CR + (CT-CR)*YIB
      XLB = U1 + (UL-U1)*YIB
      XIB = (XT(IX) - XLB)/CHB
C
  527 CONTINUE
      BX(2,NB) = XIB
      BY(2,NB) = YIB
      GO TO 535
C
C
C
  530 CONTINUE
      BX(2,NB) = 1.0
      BY(2,NB) = BY(1,NB)
C  POINT WITHIN BOUNDARIES.  SET UP FLOW ARRAYS.
  535 CONTINUE
C
C  TRANSFORM FLOW DIRECTION COSINES
      VTT = E4(8)*E4(8) + E4(9)*E4(9) + E4(10)*E4(10)
      IF (VTT.LT.0.999 .OR. VTT.GT.1.001) GO TO 308
      VT(1) = E4(8)*AP11 + E4(9)*AP12 + E4(10)*AP13
      VT(2) = E4(8)*AP21 + E4(9)*AP22 + E4(10)*AP23
      VT(3) = E4(8)*AP31 + E4(9)*AP32 + E4(10)*AP33
      SINPH =  SIN(XT(6))
      COSPH =  COS(XT(6))
      VT(4) =  VT(1)
      VT(5) =  VT(2)*SINPH - VT(3)*COSPH
      VT(6) =  VT(2)*COSPH + VT(3)*SINPH
      FLOW(IC,1)  =  E4(7)
      FLOW(IC,2)  =  VT(IX)
      FLOW(IC,3)  =  VT(IY)
      FLOW(IC,4)  =  VT(IZ)
      FLOW(IC,5)  =  E4(11)
      FLOW(IC,6)  =  E4(12)
      FLOW(IC,7) = XT(IZ)
      GO TO 310
C
C  POINT NOT WITHIN BOUNDARIES.  RESET COUNTER AND GO TO NEXT POINT.
  308 IC = IC - 1
C
  310 CONTINUE
  600 CONTINUE
      IF (IC .GT. 2)  GO TO 311
      WRITE(TAPEOT,1000)  IC
 1000 FORMAT(1H1, 5HONLY ,I3,29H POINTS WERE FOUND IN SFNTRP ,          -
     1 56HTO BE WITHIN  SURFACE BOUNDARIES.  THIS IS INSUFFICIENT /     -
     2 55H TO USE THE SURFACE SPLINE.  RUN CONTINUES, BUT USER IS,      -
     3 38H CAUTIONED TO CHECK RESULTS CAREFULLY.)
      WRITE(TAPEOT,1005)  NDSET,IABSET,IR,ISR,ISFR
 1005 FORMAT(1H0,40HTHIS APPLIES TO THE FOLLOWING FLOW DATA /           -
     1 12H DATA SET = ,I3, 10X17HALPHA-BETA SET = ,I3,                  -
     2 10X14HFLOW REGION = ,I3/                                         -
     3 15H SUB-REGIONS = , 20I3/                                        -
     4 18H SECONDARY FLOW = ,I3)
      ERROR = 1
      RETURN
C
C  ALL THE SURFACE DATA ARE IN PROPER ARRAYS.
C
  311 N2 = IC
C
C  CHECK BOUNDARY POINTS
      IF (NB .GT. 1)  GO TO 700
      NB = 2
      BX(1,2) = BX(1,1)
      BX(2,2) = BX(2,1)
      BY(1,2) = 1.0
      BY(2,2) = 1.0
C
C  NORMALIZE TO FLOW BOUNDARIES (IN XI ONLY).
C  FIRST ARRANGE BOUNDARY DATA IN ORDER OF ASCENDING YI VALUES
  700 IB = 0
  710 IB = IB + 1
      I1 = 1
  720 YY = BY(IB,I1)
      I2 = I1 + 1
      J = 0
      DO 730 I = I2,NB
      IF (YY .LT. BY(IB,I))  GO TO 730
      J = I
      YY = BY(IB,I)
  730 CONTINUE
C
      IF (J .EQ. 0)  GO TO 740
      BY(IB,J) = BY(IB,I1)
      BY(IB,I1) = YY
C
  740 I1 = I1 + 1
      IF (I1 .LT. NB)  GO TO 720
      IF (IB .EQ. 1)  GO TO 710
C
C  BOUNDARY DATA NOW IN ORDER.  PROCEED WITH NORMALIZATION.
      IF (IPRINT .EQ. 0)  GO TO 770
      WRITE(TAPEOT,750)  NB
  750 FORMAT(1H1,18HBOUNDARY  DATA,   , I3, 8H POINTS./                 -
     1    1H0, 3X1HI, 7X2HX1, 12X2HY1, 12X2HX2, 12X2HY2//)
      WRITE(TAPEOT,760)  (I,BX(1,I),BY(1,I),BX(2,I),BY(2,I), I=1,NB)
  760 FORMAT(1H , I3, 4F14.6)
  770 CONTINUE
      IC = 0
      DO 900 I = 1,N2
      XX = XI(I)
      YY = YI(I)
      IB = 0
  800 IB = IB + 1
C
      DO 810 I1 = 1,NB
      J = I1
      IF (YY .LT. BY(IB,I1))  GO TO 820
  810 CONTINUE
C
  820 IF (J .EQ. 1)  J = 2
      DY = BY(IB,J) - BY(IB,J-1)
      IF (DY .EQ. 0.0)  GO TO 900
      DX = BX(IB,J) - BX(IB,J-1)
      BP(IB) = BX(IB,J-1) + (YY - BY(IB,J-1))*DX/DY
      GO TO (830,840), IB
  830 IF (XX .LT. BP(IB))  GO TO 900
      GO TO 800
  840 IF (XX .GT. BP(IB))  GO TO 900
C
C  POINT WITHIN FLOW BOUNDARIES
      IC = IC + 1
      XI(IC) = XX - BP(1)
      YI(IC) = YY
      IF (IVIS .EQ. 0)  GO TO 850
      XI(IC) = XI(IC)/(BX(2,1) - BX(1,1))
      GO TO 860
  850 XI(IC) = XI(IC)/(BP(2) - BP(1))
  860 FLOW(IC,1) = FLOW(I,1)
      FLOW(IC,2) = FLOW(I,2)
      FLOW(IC,3) = FLOW(I,3)
      FLOW(IC,4) = FLOW(I,4)
      FLOW(IC,5) = FLOW(I,5)
      FLOW(IC,6) = FLOW(I,6)
      FLOW(IC,7) = FLOW(I,7)
C
      DO 300 II = 1,7
  300 FLOWC(II) = FLOWC(II) + FLOW(IC,II)
C
  900 CONTINUE
      IF (IC .GT. 2)  GO TO 910
      WRITE(TAPEOT,1010)  IC
 1010 FORMAT(1H1, 5HONLY ,I3, 29H POINTS WERE FOUND IN SFNTRP,          -
     151HTO BE WITHIN FLOW BOUNDARIES.  THIS IS INSUFFICIENT/           -
     2 55H TO USE THE SURFACE SPLINE.  RUN CONTINUES, BUT USER IS,      -
     3 38H CAUTIONED TO CHECK RESULTS CAREFULLY.)
      WRITE(TAPEOT,1005)  NDSET,IABSET,IR,ISR,ISFR
      ERROR = 1
      RETURN
  910 CONTINUE
      N2 = IC
      N3 = N2 + 3
C  PRINT NORMALIZED ARRAYS
      IF (IPRINT .EQ. 0)  GO TO 330
      WRITE(TAPEOT,3060) NDSET, IABSET,IR
 3060 FORMAT(1H1,34HNORMALIZED SURFACE DATA.  NDSET = ,I2, 5X,          -
     1  9HIABSET = ,I2, 5X, 9HREGION = ,I2/1H0, T4,1HI, T13,2HXI,       -
     2  T27,2HYI, T39,4HMACH, T55,2HMX, T69,2HMY, T83,2HMZ,             -
     3   T95,4HP/P1, T106,4HT/T1, T125,2HZI//)
      WRITE(TAPEOT,3070) (I,XI(I), YI(I), (FLOW(I,J),J=1,7), I=1,N2)
 3070 FORMAT(1H , I3, 9F14.6)
C
C
  330 CONTINUE
C
      DO 350 J = 1,7
      FLOWC(J) = FLOWC(J)/N2
      DO 340 I = 1,N2
  340 FLOW(I,J) = FLOW(I,J) - FLOWC(J)
  350 CONTINUE
C
C
C  CALCULATE COEFFICIENT ARRAY (SURFACE SPLINE).
      LS = 0
      CALL ROWFM1 (N2,MX,XI,YI,FLOW,XKF,NX,MX,LS,TAPEB)
C
      CALL SOLVIT(AA,N3,MX,KD,TAPEB,TAPEC,TAPED,TAPEB,B,NX,MX,NERR)
      IF (NERR .NE. 0)  WRITE(TAPEOT,220)
  220 FORMAT(1H1, 16HMATRIX SINGULAR.)
C
C  COEFFICIENTS ARE IN ARRAY  B(I,J)
      IF (IPRINT .EQ. 0)  GO TO 400
      WRITE(TAPEOT,3080)
 3080 FORMAT(1H1,42HSURFACE INTERPOLATION COEFFICIENTS  B(I,J)//)
      WRITE(TAPEOT,3090)  (I, (B(I,J), J=1,7), I=1,N3)
 3090 FORMAT(1H , I5, 7F15.5)
      WRITE(TAPEOT,3100)  FLOWC
 3100 FORMAT(1H0, 5X, 7F15.5)
  400 CONTINUE
C
C
C
C
      RETURN
      END
*DECK VALU
      SUBROUTINE VALUE(N,X,Y,Z,XN,YN,ZN,IC,IT,INT,EMT,EMX,EMY,EMZ,POP,  -
     1    TOT)
C
      COMMON/SURFNT/INORM,ISURF,IX,IY,IZ,U1,UL,V1,VL,CR,CT,CHX,N2,N3,   -
     1    XO,YO,ZO,AP11,AP12,AP13,AP21,AP22,AP23,AP31,AP32,AP33,        -
     2  FLOWC(7),XI(500),YI(500),B(503,7),XKF(503),AA(14400),           -
     A  XB(4), YB(4), ZB(4),                                            -
     3  NDSET,IABSET,IR,LORG(20),ISR(20),NS,ISFR,IVIS, IFTYP,IFLOW,     -
     4    BX(2,20), BY(2,20), NB
C
      DIMENSION X(N),Y(N),Z(N),INT(N),EMT(N),EMX(N),EMY(N),EMZ(N),      -
     1    POP(N),TOT(N),VT(6),XT(6),FI(7), BP(2)
C
C
      DO 500 I = 1,N
      IF (IC .EQ. 1)  GO TO 70
C
C  TRANSFORM COORDS
      XX = X(I) - XO
      YY = Y(I) - YO
      ZZ = Z(I) - ZO
C
      XT(1) = XX*AP11 + YY*AP12 + ZZ*AP13
      XT(2) = XX*AP21 + YY*AP22 + ZZ*AP23
      XT(3) = XX*AP31 + YY*AP32 + ZZ*AP33
      XT(4)  =  XT(1)
      XT(5)  =  SQRT(XT(2)**2 + XT(3)**2)
      IF (XT(2) .EQ. 0.0)  GO TO 40
      XT(6)  =  ATAN2(XT(2),-XT(3))
      IF(XT(6).LT.0.0) XT(6) = 6.283185308 + XT(6)
      GO TO 50
   40 XT(6) = 0.0
      IF (XT(3) .GT. 0.0)  XT(6) = 3.141592654
   50 CONTINUE
C
C  NORMALIZE COORDS
      YN = (XT(IY) - V1)/VL
      IF (ISURF .EQ. 1)  GO TO 60
      XN = (XT(IX) - U1)/UL
      GO TO 70
   60 CHX = CR + (CT-CR)*YN
      XLE = U1 + (UL-U1)*YN
      XN = (XT(IX) - XLE)/CHX
C
C  CHECK IF WITHIN SURFACE BOUNDARIES
   70 IF (XN .LT. 0.0)  GO TO 80
      IF (XN .GT. 1.0)  GO TO 80
      IF (YN .LT. 0.0)  GO TO 80
      IF (YN .GT. 1.0)  GO TO 80
C
C  CHECK IF WITHIN FLOW BOUNDARIES
      IB = 0
  800 IB = IB + 1
      DO 810 I1 = 1,NB
      J = I1
      IF (YN .LT. BY(IB,I1))  GO TO 820
  810 CONTINUE
C
  820 IF (J .EQ. 1)  J = 2
      DY = BY(IB,J) - BY(IB,J-1)
      IF (DY .EQ. 0.0)  GO TO 80
      DX = BX(IB,J) - BX(IB,J-1)
      BP(IB) = BX(IB,J-1) + (YN - BY(IB,J-1))*DX/DY
      GO TO (830,840), IB
  830 IF (XN .LT. BP(IB))  GO TO 80
      GO TO 800
  840 IF (XN .GT. BP(IB))  GO TO 80
C
C  POINT WITHIN FLOW BOUNDARIES
      XN = XN - BP(1)
      IF (IVIS .EQ. 0)  GO TO 850
      XN = XN/(BX(2,1) - BX(1,1))
      GO TO 860
  850 XN = XN/(BP(2) - BP(1))
  860 CONTINUE
C
C  POINT WITHIN BOUNDARIES.  CALCULATE VALUES.
      XKF(1) = 1.0
      XKF(2) = XN
      XKF(3) = YN
      J3 = 3
C
      DO 250 J = 1,N2
      J3 = J3 + 1
      UIJ = 0.0
      TR1 = 0.0
      TR2 = 0.0
      IF (XN .EQ. XI(J))  GO TO 210
      TR1 = (XN - XI(J))**2
  210 IF (YN .EQ. YI(J))  GO TO 220
      TR2 = (YN - YI(J))**2
  220 RBIJ = TR1 + TR2
      IF (RBIJ .EQ. 0.0)  GO TO 230
      UIJ = RBIJ*ALOG(RBIJ)
  230 XKF(J3) = UIJ
  250 CONTINUE
C
C
      DO 300 K = 1,7
      FI(K) = FLOWC(K)
      DO 290 J = 1,N3
      FI(K) = FI(K) + XKF(J)*B(J,K)
  290 CONTINUE
  300 CONTINUE
C
      INT(I) = 1
      EMT(I) = FI(1)
      FT = SQRT(FI(2)**2 + FI(3)**2 + FI(4)**2)
      IF (FT .EQ. 0.0)  FT = 1.0
      FI(2) = FI(2)/FT
      FI(3) = FI(3)/FT
      FI(4) = FI(4)/FT
      EMX(I) = FI(2)/CR
      EMY(I) = FI(3)/VL
      POP(I) = FI(5)
      TOT(I) = FI(6)
      ZN = FI(7)
C
C  TRANSFORM XN, YN, ZN  COORDS BACK TO (X, Y, Z)
      IF (IVIS .EQ. 0)  GO TO 310
      XN = XN*(BX(2,1) - BX(1,1))
      GO TO 320
  310 XN = XN*(BP(2) - BP(1))
  320 XN = XN + BP(1)
      XT(IY) = YN*VL + V1
      XT(IZ) = ZN
      IF (ISURF .EQ. 1)  GO TO 75
      XT(IX) = XN*UL + U1
      GO TO 76
   75 XT(IX) = XN*(CR+(CT-CR)*YN) + U1 + (UL-U1)*YN
   76 CONTINUE
      IF (INORM .LE. 0)  GO TO 79
      GO TO (81, 82, 83, 84),  INORM
C
C  INORM = 0     IX =4,  IY = 5,  IZ = 6
   79 XX = XT(IX)
      SINPH = SIN(XT(IZ))
      COSPH = COS(XT(IZ))
      YY =  XT(IY)*SINPH
      ZZ = -XT(IY)*COSPH
      VT(1) = FI(2)
      VT(2) = FI(3)*SINPH + FI(4)*COSPH
      VT(3) = FI(4)*SINPH - FI(3)*COSPH
      GO TO 90
C
C  INORM = 1     IX = 1,  IY = 2,  IZ = 3
   81 XX = XT(IX)
      YY = XT(IY)
      ZZ = XT(IZ)
  110 VT(1) = FI(2)
      VT(2) = FI(3)
      VT(3) = FI(4)
      GO TO 90
C
C  INORM = 2     IX = 1,  IY = 3,  IZ = 2
   82 XX = XT(IX)
      YY = XT(IZ)
      ZZ = XT(IY)
  111 VT(1) = FI(2)
      VT(2) = FI(4)
      VT(3) = FI(3)
      GO TO 90
C
C  INORM = 3     IX = 2,  IY = 3,  IZ = 1
   83 XX = XT(IZ)
      YY = XT(IX)
      ZZ = XT(IY)
  112 VT(1) = FI(4)
      VT(2) = FI(2)
      VT(3) = FI(3)
      GO TO 90
C
C  INORM = 4     IX = 4,  IY = 6,  IZ = 5
   84 XX = XT(IX)
      SINPH = SIN(XT(IY))
      COSPH = COS(XT(IY))
      YY = XT(IZ)*SINPH
      ZZ =-XT(IZ)*COSPH
      EMY(I) = EMY(I)/ZN
  113 VT(1) = FI(2)
      VT(2) = FI(4)*SINPH + FI(3)*COSPH
      VT(3) =-FI(4)*COSPH + FI(3)*SINPH
C
   90 IF (IC .EQ. 0)  GO TO 100
      X(I) = XO + XX*AP11 + YY*AP21 + ZZ*AP31
      Y(I) = YO + XX*AP12 + YY*AP22 + ZZ*AP32
      Z(I) = ZO + XX*AP13 + YY*AP23 + ZZ*AP33
C
C  CHECK COORDINATE SYSTEM FOR DIRECTION COSINES
  100 IF (IT .EQ. 1)  GO TO 500
  120 EMX(I) = VT(1)*AP11 + VT(2)*AP21 + VT(3)*AP31
      EMY(I) = VT(1)*AP12 + VT(2)*AP22 + VT(3)*AP32
      EMZ(I) = VT(1)*AP13 + VT(2)*AP23 + VT(3)*AP33
      GO TO 500
C
C  POINT NOT WITHIN BOUNDARIES.  SET FLAG AND GO TO NEXT POINT.
   80 INT(I) = 0
C
C
  500 CONTINUE
C
C
      RETURN
      END
*DECK GRAP
      OVERLAY (MARK4,3,0)
      PROGRAM GRAPH
C     SUBROUTINE GRAPH
C     RETURN
      CONTINUE
      END
*DECK AUXI
      OVERLAY  (MARK4, 4, 0)
      PROGRAM  AUXILI
C     SUBROUTINE  AUXILI
C
C  THIS IS THE EXECUTIVE CONTROL FOR THE AUXILARY ROUTINES
C
C
      COMMON /EXEC/ CASE, TITLE(15), PAGE, ERROR
C
      COMMON /TAPE/ TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,  -
     1              TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      INTEGER       TAPEIN,TAPEOT,TAPEA,TAPEB,TAPEC,TAPED,TAPEE,TAPEF,  -
     1              TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK                       -
     2   ,ERROR, PAGE
C
C
      DIMENSION IAUX(10)
C
C
C  READ AUXILARY CONTROL CARD
      READ(TAPEIN,10)  IAUX
   10 FORMAT(10I1)
C
      DO 70 I = 1,10
      IF (IAUX(I) .EQ. 0)  GO TO 80
      IAX = IAUX(I)
      GO TO (20,30,40,50), IAX
C
C  DATA SET LOAD OPTION
   20 CONTINUE
      GO TO 60
C
C  DATA SET READ AND PRINT OPTION
   30 CONTINUE
      GO TO 60
C
C  DATA EDITING AND MAINTENANCE OPTION
   40 CONTINUE
      GO TO 60
C
C  GENERAL CUTTING PLANE OPTION
   50 CONTINUE
      CALL  GENCUT
      CALL  OUTD
C
C
   60 IF (ERROR .NE. 0)  GO TO 90
   70 CONTINUE
C
   80 GO TO 110
   90 WRITE(TAPEOT,100)  ERROR
  100 FORMAT(1H0,39H*** ERROR IN AUXILARY PROGRAM, ERROR = ,I2)
      STOP
C 110 RETURN
  110 CONTINUE
      END
*DECK GENC
      SUBROUTINE  GENCUT
C
C  GENERALIZED CUTTING PLANE OF MERIDIAN TYPE
C  -- THAT IS, CUTTING PLANE IS PARALLEL TO AXIS
C
C
      INTEGER SYMFCT
      INTEGER ERROR, PAGE
      INTEGER       TI, TO, TAPEA, IUO1, IUO2,TAPED,TAPEE,TAPEF,        -
     1              TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      REAL LR
      INTEGER NREC(40,100)
      DIMENSION NINT(40), XREC(6), XP(4)
C
      DIMENSION  ELEM(22), XN(4), YN(4), ZN(4), YP(4), ZP(4), PHI(37),  -
     1    A(4), MP(4), NPI(10), MPI(10),                                -
     2    XI(10,2), YI(10,2), ZI(10,2), RI(10,2), XA(10,2)              -
     3    ,TITLE(1), COMPID(10), NT(10), NI(10)                         -
     4    ,YPA(40), E(25), EP(25), IPANL(10)
C
      COMMON /TAGS/ ITAG4, ITAG9, ITAG10
C
      EQUIVALENCE (ELEM(11), XN(1)), (ELEM(15), YN(1)),                 -
     1            (ELEM(19), ZN(1))
C
      COMMON /EXEC/ CASE, CTITLE(15), PAGE, ERROR
      COMMON /TAPE/ TI, TO, TAPEA, IUO1, IUO2,TAPED,TAPEE,TAPEF,        -
     1              TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
C
      DATA PI,RC/3.14159265,1.74532925E-2/, NIMX/100/
C
C  READ IN CONFIGURATION TITLE
      READ(TI, 5)  CTITLE
    5 FORMAT(15A4)
      CALL HEADER
      WRITE(TO, 6)
    6 FORMAT(1H0,40H**** GENERAL CUTTING PLANE PROGRAM **** )
C
C
C  READ IN TITLE AND UNIT CONTROLS
      READ(TI,10)TITLE, IORG, INPHI, NPL, ISYM, IPRNT
   10 FORMAT( A4, 25XI1, 4XI1, 3XI2, 4XI1, 9XI1)
      REWIND IUO1
      REWIND IUO2
C
      IF (IORG .NE. 0)  GO TO 20
      XPO = 0.0
      YPO = 0.0
      ZPO = 0.0
      PSIO= 0.0
      THEO= 0.0
      PHIO= 0.0
      GO TO 40
C
C  READ IN CUTTING PLANE ORIGIN AND ORIENTATION
C
C
   20 CONTINUE
      READ(TI,30) XPO,YPO,ZPO,PSIO,THEO,PHIO
   30 FORMAT(6F10.0)
C  CONSTANTS RELATING TO CUTTING PLANE AXIS
   40 CONTINUE
      SINPS = SIN(RC*PSIO)
      COSPS = COS(RC*PSIO)
      COST  = COS(RC*THEO)
      SINT  = SIN(RC*THEO)
      STSPS = SINPS*SINT
      STCPS = COSPS*SINT
      CTCPS = COST*COSPS
      CTSPS = COST*SINPS
C
      JJ = 1
C
      IF (NPL .GT. 36)  NPL = 36
      IF (INPHI .LT. 2)  GO TO 130
C
C  PARALLEL CUTTING PLANES.  READ IN CONSTANT PHI VALUE.
      READ(TI,50)PHICD
   50 FORMAT(F10.6)
      PHI(1) = RC*PHICD
      TANP = TAN(PHI(1))
C
      IF (INPHI .EQ. 3)  GO TO 90
C  EQUAL SPACING,  READ IN END VALUES.
      READ(TI,60) (XN(I),YN(I),ZN(I), I=1,2)
   60 FORMAT(3F10.0)
C
C  FOR EQUAL SPACING, MUST HAVE AT LEAST TWO PLANES
      IF (NPL .LT. 2)  NPL = 2
C
C  PROJECT INTO VIEWING PLANE AND FIND AXIS LOCATIONS.
      DO 70 N = 1,2
      XX = XN(N) - XPO
      YY = YN(N) - YPO
      ZZ = ZN(N) - ZPO
C
      YP(N) = -XX*SINPS + YY*COSPS
      ZP(N) =  XX*STCPS + YY*STSPS + ZZ*COST
   70 YPA(N) = YP(N) + ZP(N)*TANP
      DYPA = (YPA(2) - YPA(1))/(NPL - 1)
C
      NINT(1) = 0
      NPL1 = NPL
      DO 80 N = 2,NPL1
      PHI(N) = PHI(1)
      NINT(N) = 0
   80 YPA(N) = YPA(N-1) + DYPA
      GO TO 110
C
C
C  VARIABLE PLANE SPACING.  READ IN POSITIONS,
C  PROJECT INTO VIEWING PLANE AND FIND AXIS LOCATIONS.
   90 NPL1 = NPL
      DO 100 N = 1,NPL
      READ(TI,60) XN(1), YN(1), ZN(1)
      XX = XN(1) - XPO
      YY = YN(1) - YPO
      ZZ = ZN(1) - ZPO
      YP(1) = -XX*SINPS + YY*COSPS
      ZP(1) =  XX*STCPS + YY*STSPS + ZZ*COST
      YPA(N) = YP(1) + ZP(1)*TANP
      PHI(N) = PHI(1)
      NINT(N) = 0
  100 CONTINUE
  110 IF (IPRNT .EQ. 1)                                                 -
     1WRITE(TO,120)NPL, PHICD, (YPA(N), N = 1,NPL)
  120 FORMAT(1H1, I3, 32H PARALLEL CUTTING PLANES  PHI = , F10.6/       -
     1    1H0, (6F20.6))
      GO TO 180
C
C
C
  130 CONTINUE
      IF (INPHI .EQ. 0)  GO TO 160
      READ(TI,140) (PHI(I), I=1,NPL)
  140 FORMAT(6F10.6)
      DPHI = PHIO*RC
      DO 150 I = 1,NPL
      NINT(I) = 0
      YPA(I) = 0.0
  150 PHI(I) = PHI(I)*RC + DPHI
      NPL1 = NPL
      GO TO 180
  160 CONTINUE
      NPL1 = NPL + 1
      DPHI = 360./(NPL)  *RC
      PHI(1) = PHIO*RC
      NINT(1) = 0
      YPA(1) = 0.0
      DO 170 I = 2,NPL1
      NINT(I) = 0
      YPA(I) = 0.0
  170 PHI(I) = PHI(I-1) + DPHI
C
      PHI(NPL1) = PHI(1)
  180 MPTOT = 0
      DO  190  I = 1,10
  190 NT(I) = 0
C
C
C
C  RETRIEVE ELEMENT DATA FROM STORAGE
      IG4 = 2
      CALL READMS (4,E,25,IG4)
C     READ (4'IG4) E
      NPE  = E(2)
      NPMAX= E(3)
      NREM = E(4)
C
C
C  START OF PANEL CYCLE
      DO 675 JJ=1,10
      NT(JJ) = MPTOT + 1
      READ (TI,210) IPANL(JJ),IPRINT,LAST
  210 FORMAT (I4,5X,I1,4X,I1)
      IF (IPANL(JJ) .EQ. 0) GO TO 680
      IF (IPANL(JJ) .GT. NPE) GO TO 900
      IG4 = IPANL(JJ)*5
      CALL READMS (4,EP,25,IG4)
C     READ (4'IG4) EP
      COMID = EP(2)
      ISTART = EP(3)
      LL = EP(4)
      SYMFCT = EP(6)
      COMPID(JJ) = COMID
      ISTART = ISTART - NREM
C
C  START OF ELEMENT DO LOOP
      DO 670 J=1,LL
      IG4 = ISTART + NREM*J
      CALL READMS (4,ELEM,25,IG4)
C     READ (4'IG4) ELEM
      JE = J
C
C  PROJECT FOUR CORNER POINTS INTO T2,T3 PLANE
C    (IN COORDS RELATIVE TO CUTTING PLANE AXIS).
C  FIRST CHECK IF DUMMY, ZERO AREA ELEMENT - IF SO, SKIP OVER.
      IF (ELEM(10) .LE. 1.0E-5)  GO TO 670
C
C  ALWAYS PROJECT LINES 2-3 AND 3-4
      NII= 2
      NR = 2
      NF = 4
      ICOL = ELEM(2) + 0.01
      IROW = ELEM(3) + 0.01
C  CHECK IF NEW ROW
      IF (IROW .NE. 1)  GO TO 250
      NR = 1
      NF = 1
C  CHECK IF NEW COLUMN
  250 IF (ICOL .NE. 1)  GO TO 260
      NII= 1
      NR = 1
  260 CONTINUE
C
C  PRESET NPI ARRAY
      DO 270 K = 1,10
  270 NPI(K) = 0
C
      IO = 0
      DO 360  N =NR,4
      XX = XN(N) - XPO
      YY = YN(N) - YPO
      ZZ = ZN(N) - ZPO
C
      XP(N) =  XX*CTCPS + YY*CTSPS - ZZ*SINT
      YP(N) = -XX*SINPS + YY*COSPS
      ZP(N) =  XX*STCPS + YY*STSPS + ZZ*COST
C
      MP(N) = 0
      IF (INPHI .GT. 1)  GO TO 290
      IF ((ZP(N).EQ.0.0) .AND. (YP(N).EQ.0.0))  GO TO 350
      IF (JE .GT. LL)  GO TO 280
      IF ((ZP(N).LT.0.0) .AND. (YP(N).EQ.0.0))  GO TO 360
  280 CONTINUE
C
      A(N) = ATAN2(+YP(N),-ZP(N))
      IF (A(N) .LE. 0.0)  A(N) = 2.*PI + A(N)
      IF (INPHI .NE. 0)  GO TO 320
      MP(N) = A(N)/DPHI + 1
      GO TO 360
C
C  MP CALULATIONS FOR PARALLEL PLANES
  290 CONTINUE
      A(N) = YP(N) + ZP(N)*TANP
      IF (INPHI .EQ. 3)  GO TO 300
      PM = (A(N) - YPA(1))/DYPA
      IF (PM .LE. 0.0)  GO TO 360
      MP(N) = PM + 1
      IF (MP(N) .GT. NPL)  MP(N) = NPL
      GO TO 360
C
  300 CONTINUE
      DO 310 K = 1,NPL1
      IP = K
      IF (YPA(K) .GT. A(N))  GO TO 340
  310 CONTINUE
      MP(N) = IP
      GO TO 360
C
C
  320 DO 330 K = 1,NPL1
      IP = K
      IF (PHI(K) .GT. A(N))  GO TO 340
  330 CONTINUE
      IF (JE .GT. LL)  GO TO 360
      IP = IP + 1
  340 MP(N) = IP - 1
      GO TO 360
  350 IO = IO + 1
  360 CONTINUE
C
C  CHECK FOR CONTINUITY IN ANGLE (REFLECTED SYMMETRIC ELEMENTS ONLY).
      IF (JE .LE. LL)  GO TO 380
      DO 370 N = NR,4
      IF (MP(N) .EQ. 1)  MP(N) = NPL1
  370 CONTINUE
  380 CONTINUE
C
C  CHECK FOR ORIGIN POINTS (ASSUMED IN PAIRS)
      IF (IO .EQ. 0)  GO TO 420
      N1 = 1
      N2 = 2
      N3 = 3
      N4 = 4
  390 IF (MP(N1) .NE. 0)  GO TO 410
      IF (MP(N2) .EQ. 0)  GO TO 400
C
      MP(N1) = MP(N2)
      MP(N4) = MP(N3)
      GO TO 420
C
  400 MP(N1) = MP(N4)
      MP(N2) = MP(N3)
      GO TO 420
C
  410 NN = N1
      N1 = N2
      N2 = N3
      N3 = N4
      N4 = NN
      IF (N4 .NE. 4)  GO TO 390
C
  420 CONTINUE
C
C
C  TEST FOR INTERSECTIONS AND FIND THEM IF INDICATED
      MPIN = 1
      NUMP = 1
      ICT  = +1
      MPMAX = 0
      IP1 = NII
C
  430 IP2 = IP1 + 1
      IF (IP2 .GT. 4)  IP2 = 1
C
      IF (MP(IP2) - MP(IP1))460,440,450
C
C  CHECK FOR LAST CORNER POINT
  440 IF (IP2 .EQ.NF)  GO TO 600
C
C  GO TO NEXT CORNER POINT
      IP1 = IP2
      GO TO 430
C
C
C  INTERSECTION OF NMP = MP(IP1) + 1  WITH LINE SEGMENT
  450 NMP = MP(IP1) + 1
      IMP = +1
      GO TO 470
C
C
C  INTERSECTION OF NMP = MP(IP1)  WITH LINE SEGMENT
  460 NMP = MP(IP1)
      IMP = -1
C
C
C  CHECK FOR FIRST INTERSECTION
  470 IF (MPMAX .EQ. 0)  GO TO 540
C
C  PREVIOUS INTERSECTIONS.  CHECK FOR 'TURNING CORNER
C    AND COMING BACK'.
      IF (IMP)480,480,500
C
  480 IF (MP(IP1) - MP(IP1-1))530,490,520
C
  490 IF (MP(IP1-1) - MP(IP1-2))530,520,520
C
  500 IF (MP(IP1) - MP(IP1-1))520,510,530
C
  510 IF (MP(IP1-1) - MP(IP1-2))520,520,530
C
C  YES, REVERSING DIRECTION
  520 ICT = -1
      GO TO 550
C
  530 NUMP = NUMP + ICT
      IF (ICT .GT. 0)  GO TO 540
C
C
C  CHECK FOR INITIAL CUTTING PLANE
      IF (NUMP .GE. MPIN)  GO TO 550
C
C  HAVE COME BACK ACROSS INITIAL PLANE
C  CHANGE SIGN OF ICT AND INCREASE MPMAX
      ICT = +1
      NUMP = MPMAX + 1
      MPIN = NUMP
C
  540 IF (NUMP .GT. MPMAX)  MPMAX = NUMP
C
C
C  CALCULATE INTERSECTION
  550 NPI(NUMP) = NPI(NUMP) + 1
      NP = NPI(NUMP)
      MPI(NUMP) = NMP
      DY = YP(IP2) - YP(IP1)
      DZ = ZP(IP2) - ZP(IP1)
      CSP = COS(PI-PHI(NMP))
      SNP = SIN(PI-PHI(NMP))
C
      LR = 0.0
      RI(NUMP, NP) = 0.0
      DYDZ = DY**2 + DZ**2
      IF (DYDZ .LE. 1.0E-6)  GO TO 560
      DYP = YP(IP1) - YPA(NMP)
      DZP = ZP(IP1)
      RIMAG       = (DZP*DY  -  DYP*DZ)/(CSP*DY - SNP*DZ)
      DPROD =-(ELEM(5)*COSPS - ELEM(4)*SINPS)*SNP                       -
     1    +   (ELEM(4)*STCPS + ELEM(5)*STSPS + ELEM(6)*COST)*CSP
      RI(NUMP,NP) = RIMAG
      IF (INPHI .LT. 2)                                                 -
     1RI(NUMP,NP) = SIGN(RIMAG, DPROD)
      YPI = SNP*RI(NUMP,NP) + YPA(NMP)
      ZPI = CSP*RI(NUMP,NP)
      LR = SQRT(((YPI-YP(IP1))**2 + (ZPI-ZP(IP1))**2)/DYDZ)
      RI(NUMP,NP) =  ABS(RIMAG)
C
  560 CONTINUE
      XA(NUMP,NP) = XP(IP1) + (XP(IP2) - XP(IP1))*LR
      XI(NUMP,NP) = XN(IP1) + (XN(IP2) - XN(IP1))*LR
      YI(NUMP,NP) = YN(IP1) + (YN(IP2) - YN(IP1))*LR
      ZI(NUMP,NP) = ZN(IP1) + (ZN(IP2) - ZN(IP1))*LR
      IF (NINT(NMP) .LT. NIMX)  GO TO 566
      WRITE(TO, 565)  NMP, NIMX
  565 FORMAT(1H0,45H THE NUMBER OF INTERSECTIONS ON CUTTING PLANE, I3,  -
     1 33H  EXCEEDS THE MAXIMUM ALLOWABLE (,I3, 2H)./1H0,               -
     2 54H  RUN CONTINUES BUT FURTHER INTERSECTIONS ARE IGNORED.)
      GO TO 570
C
  566 CONTINUE
      NINT(NMP) = NINT(NMP) + 1
      RJ = JE
      WRITE(IUO1)RJ, XI(NUMP,NP),YI(NUMP,NP),ZI(NUMP,NP),RI(NUMP,NP)    -
     1    , XA(NUMP,NP)
      MPTOT = MPTOT + 1
      NREC(NMP, NINT(NMP)) = MPTOT
C
C
C  CONTINUE TO NEXT INTERSECTION
  570 NMP = NMP + IMP
      IF (IMP)580,580,590
  580 IF (MP(IP2) - NMP)530,440,440
  590 IF (MP(IP2) - NMP)440,530,530
C
C
C  ALL INTERSECTIONS FOUND ON CURRENT ELEMENT.  SAVE THE RESULTS.
  600 CONTINUE
      IF (MPMAX .EQ. 0)  GO TO 650
C
      IF (IPRINT .EQ. 0)  GO TO 650

      WRITE(TO,610)
  610 FORMAT(1H0, 4H  ID, T14, 3HNO., T24, 2HMP, T45,1HX, T65, 1HY,     -
     1    T85, 1HZ, T105, 1HR, T125, 1HA/)
C
      DO 620 K = 1,MPMAX
      NPIK = NPI(K)
  620 WRITE(TO,630) COMPID(JJ), JE, MPI(K),                             -
     1       (XI(K,IP), YI(K,IP), ZI(K,IP), RI(K,IP),                   -
     2   XA(K,IP), IP = 1,NPIK)
  630 FORMAT(1H , 1XA4, 6XI3, 7XI3, 4X,   5F20.6/1H , 28X5F20.6)
C
C
C  RIGHT OUT ELEMENT CORNER POINTS
      WRITE(TO,640) (I, XN(I), YN(I), ZN(I), I=1,4)
  640 FORMAT(1H ,    21XI3, 4X, 3F20.6)
C
C
C  CHECK FOR SYMMETRY
  650 IF (SYMFCT .NE. 0)  GO TO 670
      IF (ISYM .EQ. 0)  GO TO 670
      IF (JE .GT. LL)  GO TO 670
      DO 660 N = NR,4
  660 YN(N) = -YN(N)
      JE = LL + J
      GO TO 260
C
C
  670 CONTINUE
      IF (LAST .NE. 0) GO TO 680
  675 CONTINUE
C  END OF PANEL DO LOOP
C
C
C  ARRANGE INTERSECTIONS AS PER MERIDIAN
C  FIRST CHECK IF ANY INTERSECTIONS FOUND
  680 IF (MPTOT .GT. 0)  GO TO 700
      WRITE(TO,690) TITLE
  690 FORMAT(1H0,41HNO INTERSECTIONS FOUND FOR CONFIGURATION ,          -
     1       A4/1H0,  16HCASE TERMINATED.)
      STOP
C
  700 CONTINUE
      NF = NINT(1)
      IF (INPHI .EQ. 0)  NINT(1) = NINT(NPL1)
      WRITE(IUO2) TITLE, COMPID, JJ, NT, NPL, MPTOT,                    -
     1    PSIO, THEO, PHIO,  XPO, YPO, ZPO, INPHI,                      -
     2    (PHI(I), I=1,NPL), (NINT(I), I=1,NPL),(YPA(I),I=1,NPL)
      NINT(1) = NF
      DO 830 I = 1,NPL
      II = I
  710 NF = NINT(II)
      IF (NF .EQ. 0)  GO TO 820
      K = 0
      K1 = 0
      K2 = 1
      K3 = 0
      REWIND IUO1
C
C  ZERO OUT COMPONENT COUNTERS
      DO 720 L = 1,JJ
  720 NI(L) = 0
C
      DO 810 J = 1,NF
      NN = NREC(II,J)
  730 K = K + 1
C     READ(IUO1,END=830)  XREC
      READ (IUO1) XREC
      IF (EOF(IUO1)) 830,731
  731 IF (K.NE. NN) GO TO 730
      IF (K3 .EQ. 1)  GO TO 780
C
C  CHECK ON COMPONENT
  740 K1 = K1 + 1
      IF (K1 .GT. JJ)  GO TO 810
      NI(K1) = 0
      NT1 = NT(K1)
      IF (NT1 .LE. 0)  GO TO 740
C
  750 K2 = K2 + 1
      IF (K2 .EQ. K1)  GO TO 750
      IF (K2 .LE. JJ)  GO TO 760
      NT2 = MPTOT + 1
      GO TO 770
  760 NT2 = NT(K2)
      IF (NT2 .EQ. 0)  GO TO 750
  770 K3 = 0
C
C  TEST IF RECORD WITHIN RANGE
  780 IF ((NN.GE.NT1).AND.(NN.LT.NT2))  GO TO 790
C
C  NOT IN RANGE - GO TO NEXT COMPONENT
      GO TO 740
C
  790 IF (K3 .EQ. 1)  GO TO 800
      NI(K1) = J
      K3 = 1
C
  800 WRITE(IUO2)  K1, XREC
  810 CONTINUE
C
C  ALL ELEMENTS IN CURRENT MERIDIAN STORED.
C  SAVE COMPONENTS COUNTERS
      WRITE(IUO2)  (NI(L), L=1,JJ)
C
  820 IF (II .NE. 1)  GO TO 830
      IF (INPHI .GT. 1)  GO TO 830
      IF (NF .NE. 0)  GO TO 830
      II = NPL1
      GO TO 710
  830 CONTINUE
C
      RETURN
C
  900 WRITE (TO,910)
  910  FORMAT (1H ,43H**PANEL NUMBER IS GREATER THAN THE MAXIMUM ,      -
     1 34HSTORED ON UNIT 4  ** PROGRAM STOP   )
      STOP
      END
*DECK OUTD
      SUBROUTINE  OUTD
      DIMENSION PHI(40), NINT(40), COMPID(10), NI(10), TITLE(1), NE(10),-
     1    RJ(100),X(100),Y(100),Z(100),R(100),A(100),YPA(40), AX(100),  -
     2    J(100),JX(100),IOR(10), ID(100),DORD(4)
      COMMON /EXEC/ CASE,CTITLE(15), PAGE, ERROR
      COMMON /TAPE/ TI, TO, TAPEA,TAPEB, IUIN,TAPED,TAPEE,TAPEF,        -
     1              TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER       TI, TO, TAPEA,TAPEB, IUIN,TAPED,TAPEE,TAPEF,        -
     1              TAPEG,TAPEH,TAPEI,TAPEJ,TAPEK
      INTEGER PAGE, ERROR
      DATA RC/1.74532925E-2/
      DATA DORD/1HA, 1HX, 1HY, 1HZ/
C
C  READ IN CONTROL CARD
      READ(TI,10) IOR, IOG, COMPB, IOV,             IPRINT
   10 FORMAT(10I1, 3XI2, 5XA4, 5XI1, 24XI1)
C
      DO 20 I = 1,40
      PHI(I) = 0.0
      YPA(I) = 0.0
   20 CONTINUE
      REWIND IUIN
      IT2 = 0
C
C  IOR(I) - FLAG TO ORDER INDIVIDUAL COMPONENT (RANDOM)
C  IOG  -   FLAG TO ORDER COMPONENTS BY GROUPS
C  COMPB - BASE COMPONENT (OTHERS ADDED TO THIS ONE)
C
C  POINTS FOR A PARTICULAR MERIDIAN ARE BROUGHT INTO CORE
C  INDIVIDUAL COMPONENTS ARE THEN ORDERED (IF REQUIRED, NON-ZERO IOR)
C  NEXT, GROUPS ARE ORDERD (IF REQUIRED, NON-ZERO, POSITIVE IOG)
C  NOTE, A NEGATIVE IOG WILL CAUSE RANDOM ORDERING OF THE WHOLE SET.
C
      READ(IUIN) TITLE, COMPID, NC, NE, NPL, MPTOT,                     -
     1    PSIO, THEO, PHIO, XPO, YPO, ZPO, ITYP1,                       -
     2    (PHI(I), I=1,NPL),  (NINT(I), I=1,NPL),(YPA(I),I=1,NPL)
C
      IF (IPRINT .EQ. 1)                                                -
     1WRITE(TO,30) TITLE, NPL, MPTOT,                                   -
     2  PHIO, PSIO, THEO, XPO, YPO, ZPO
   30 FORMAT(1H1, T10,15HCONFIGURATION  , A4, T40,                      -
     1 17HNUMBER OF CUTS = , I2, T80,15HTOTAL POINTS = , I4/1H0,        -
     2  7HPHIO = , F11.6, 5X,    7HPSIO = , F11.6, 5X,                  -
     3  7HTHEO = , F11.6, 5X,      5HXO = , F11.6, 5X,                  -
     4    5HYO = , F11.6, 5X,      5HZO = , F11.6/)
C
      DO 500 KK= 1,NPL
C
C  BRING MERIDIAN DATA INTO CORE
      NF = NINT(KK)
      NT = NF
      PHID = PHI(KK)/RC
      IF (IPRINT .EQ. 1)                                                -
     1WRITE(TO,40)KK,PHID, YPA(KK), NINT(KK)
   40 FORMAT(1H0,13HPLANE NUMBER , I2, T26,6HPHI = , F11.6, 6X,         -
     1  6HYPA = , F11.6,                                                -
     2 T71, 26HNUMBER OF INTERSECTIONS = , I3/)
      IF (NF .EQ. 0)  GO TO 500
      DO 50 I = 1,NF
      J(I) = I
      JX(I) = I
   50 READ(IUIN)ID(I), RJ(I), X(I), Y(I), Z(I), R(I),AX(I)
C
C  READ IN COMPONENT COUNTERS
      READ(IUIN) (NI(I), I=1,NC)
C
C
      IF (IOV .GT. 0)  GO TO (70,90,110), IOV
C
C  ORDERING WILL USE AXIAL COORD.
      DO 60 I = 1,NF
   60 A(I) = AX(I)
      ORD = DORD(1)
      GO TO 130
C
C  ORDERING WILL USE X COORD.
   70 DO 80 I = 1,NF
   80 A(I) =+X(I)
      ORD = DORD(2)
      GO TO 130
C
C  ORDERING WILL USE Y COORD.
   90 DO 100 I = 1,NF
  100 A(I) =-Y(I)
      ORD = DORD(3)
      GO TO 130
C
C  ORDERING WILL USE Z COORD.
  110 DO 120 I = 1,NF
  120 A(I) =-Z(I)
      ORD = DORD(4)
C
C
  130 CONTINUE
C  FIRST ORDER RANDOM SETS (W.R.T.  AXIAL COORD.  A)
      N1 = 1
      I = NC
      IF (IOG .LT. 0)  GO TO 160
      I = 0
  140 I = I + 1
      IF (IOR(I) .EQ. 0)  GO TO 230
      N1 = NI(I)
      IF (N1 .EQ. 0)  GO TO 230
      IF (I - NC)150,160,160
  150 I2 = I
  155 I2 = I2 + 1
      IF (I2 .GT. NC)  GO TO 160
      NT = NI(I2) - 1
      IF (NT)  155, 155, 170
  160 NT = NF
  170 NT1 = NT - 1
      DO 220 L = N1,NT1
      L1 = L + 1
      J1 = J(L)
C
      DO 210 K = L1,NT
      J2 = J(K)
      IF (A(J1) - A(J2))190,180,210
C
C  TWO EQUAL POINTS
  180 GO TO 210
C
  190 KD = K - L
      K1 = K
      DO 200 II = 1,KD
      K2 = K1 - 1
      J(K1) = J(K2)
  200 K1 = K2
C
      J1 = J2
      J(L) = J2
  210 CONTINUE
  220 CONTINUE
  230 IF (I .LT. NC)  GO TO 140
C
C  CHECK IF GROUP ORDERING REQUIRED
      IF (IOG .GT. 0)  GO TO 236
      L = 0
      DO 235 I = 1,NT
      L = L + 1
  235 JX(L) = J(I)
      GO TO 460
C
C
C  NOW ORDER GROUPS
C  FIND BASE COMPONENT
  236 DO 240 I = 1,NC
      IB = I
      IF (COMPID(I) .EQ. COMPB)  GO TO 250
  240 CONTINUE
      IB = 1
C
C  IDENTIFY ELEMENTS OF BASE COMPONENT
  250 N1 = NI(IB)
      IF (N1 .GT. 0)  GO TO 260
      N1 = 1
      GO TO 290
  260 CONTINUE
      IF (IB - NC)270,290,290
  270 IB1 = IB
  280 IB1 = IB1 + 1
      IF (IB1 .GT. NC)  GO TO 290
      N2 = NI(IB1) - 1
      IF (N2 .LE. 0)  GO TO 280
      GO TO 300
  290 N2 = NF
  300 NT = N2 - N1 + 1
      L = 0
      DO 310 I = N1,N2
      L = L + 1
  310 JX(L) = J(I)
      IF (NC .LE. 1)   GO TO 460
      IF (NI(IB) .EQ. 0)  GO TO 460
C
C  NOW CYCLE OTHER COMPONENTS
      DO 450 IC = 1,NC
      IF (IC .EQ. IB)  GO TO 450
      NC1 = NI(IC)
      IF (NC1 .EQ. 0)  GO TO 450
      IF (IC - NC)320,340,340
  320 IC1 = IC
  330 IC1 = IC1 + 1
      IF (IC1 .GT. NC)  GO TO 340
      NC2 = NI(IC1) - 1
      IF (NC2 .LE. 0)  GO TO 330
      GO TO 350
  340 NC2 = NF
C
  350 DO 360 I = NC1,NC2
      L = L + 1
  360 JX(L) = J(I)
      IF (IOG .LE. 0)  GO TO 450
      LT = L
      J1 = J(NC1)
      DO 370 LX= 1,NT
      L1 = LX
      L2 = L1 + 1
      J2 = JX(LX)
      IF (A(J1) - A(J2))370,390,380
  370 CONTINUE
C
C  ELEMENTS DO NOT OVERLAP
      NT = LT
      GO TO 450
C
C  SAVE REMAINING INDICES FROM BASE COMPONENT
  380 L2 = L1
      IF (L2 .GT. NT)  GO TO 410
  390 LJ1 = JX(L2)
      LJ2 = J(NC2)
      IF (A(LJ1) .EQ. A(LJ2))  NC2 = NC2 - 1
      IX = N1 - 1
      DO 400  LX= L2,NT
      IX = IX + 1
  400 J(IX) = JX(LX)
C
C  INSERT ELEMENTS OF COMPONENT IC
  410 DO 420 I = NC1,NC2
      JX(L1) = J(I)
  420 L1 = L1 + 1
C
C  FILL IN REMAINING BASE ELEMENTS
      IF (L2 .GT. NT)  GO TO 440
      DO 430 I = N1,IX
      JX(L1) = J(I)
  430 L1 = L1 + 1
C
C  RESET POINT NUMBERS
  440 L = L1 - 1
      NT = L
C
  450 CONTINUE
  460 CONTINUE
C
      IF (IPRINT .EQ. 1)                                                -
     1WRITE(TO,470) ORD, IOG, (IOR(I), I=1,10)
  470 FORMAT(1H0,19HPOINTS ORDERED FOR , A1,    14H AS PER IOG = , I3,  -
     1 14H AND IOR(I) = , 10I3/1H0, T14, 2HID, 7X1HJ, T42,1HX,          -
     2   T62,1HY, T82,1HZ, T102,1HR, T122,1HA/)
C
      DO 490 L = 1,NT
      I = JX(L)
      JJ= RJ(I)
      IC = ID(I)
      IF (IPRINT .EQ. 1)                                                -
     1WRITE(TO,480)COMPID(IC),JJ,X(I),Y(I),Z(I),R(I),AX(I)
  480 FORMAT(1H , T12,A4, 4XI4, 4X,5F20.6)
  490 CONTINUE
C
C
  500 CONTINUE
C
C
      RETURN
      END
