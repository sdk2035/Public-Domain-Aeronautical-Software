!+
!     COREL II
!     CONICAL RELAXATION
!     BY BERNARD GROSSMAN -GRUMMAN AEROSPACE CORPORATION-(516) 575-2202
!     FOR THEORY DESCRIPTION - SEE AIAA PAPER NO. 78-1213
!
!      (PRESENTLY PROF. OF AERONAUTICS AT VPI, BLACKSBURG,VA.,
!       TELEPHONE (703) 961-6740
!
!    AERODYNAMIC APPLICATIONS ADAPTATION UNDER THE
!    NASA LANGLEY CONTRACT @ A WING CONCEPT FOR SUPERSONIC
!                            MANEUVERING@
!
!    GRUMMAN PROJECT ENGINEER - BILL MASON (516) 575-6019
!
!    LANGLEY CONTRACT MONITOR- DAVE MILLER (804) 827-3181
!
!!!      OVERLAY (COREL,0,0)
      PROGRAM COREL
                    ! Conical Relaxation

!!!      PROGRAM MAIN(INPUT=512,OUTPUT=512,TAPE7=512,TAPE8=512,TAPE10=51
!!!     1     TAPE14=512,TAPE32=512,TAPE99=512,TAPE20=512,
!!!     2     TAPE5=INPUT,TAPE6=OUTPUT)

      COMMON /MODS/ XU1,XU2,XU3,DTCU,XL1,XL2,XL3,DTCL
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON/GEO/ NG,NS,AZ,BZ,CC(5),CT(5),CM(5),LC,LT,LM
      COMMON/TITL/TI1(80),TI2(80)
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      COMMON /DESGN/ CPP(120),EMST(120),CPPEX(120),XCP(120),            &
     & NCP,IDESIN,KDES,KDESMX,YYB1(120),CPP1(120),SUMDCP(50),           &
     & STARTC,BETAM(120),NSTART,WDES
      COMMON /NEWCOM/ W(3),DMIN(3),KMAX(3),KREF
      COMMON /GEOIN/ RRZ(201),THZ(201),X0,Y0,Y1,NM,NGH,NMH
      COMMON /WNGTE/ XROOT,YWNGRT,ZROOT
      REAL LGYRTM

      NAMELIST/INPUT/IC,JC,KMAX,KREF,IPLOT,EMINF,ALP,GAMMA,W            &
     &,DMIN,AZ,BZ,LC,CC,LT,CT,LM,CM,NG,NS,EST,IOUT,IRPTS,IOUT2,IPUNCH   &
     & ,IDESIN,KDESMX,NSHKR,KSHKR,JDRLX,WDES,ETADR,EPSHKI,TESWP,KCCC,   &
     & XORIGC,YORIGC,IMOD,IEQV,XU1,XU2,XU3,DTCU,XL1,XL2,XL3,DTCL        &
     & ,XSTN,IEQV3,XROOT,YWNGRT,ZROOT

 1000 FORMAT(80A1)
 1001 FORMAT(/10X,35HCOREL 2   (VERSION OF SEPT.29,1978),               &
     &41X,29HGRUMMAN AEROSPACE CORPORATION,1X,14HBETHPAGE N.Y.          &
     & //10X,7HCONICAL ,1X,19HRELAXATION SOLUTION,8X,                   &
     &)
 1005 FORMAT(//10X,39HBY B. GROSSMAN, PRESENTLY PROFESSOR OF  ,         &
     & 45HAERONAUTICS - VIRGINIA POLYTECHNIC INSTITUTE,                 &
     & 14HBLACKSBURG,VA.,2X,14H(703) 961-6740//                         &
     & 10X,12HAERODYNAMIC ,36HAPPLICATIONS ADAPTATION BY W. MASON  ,    &
     & 5X,31HGRUMMAN AEROSPACE CORPORATION ,,15HBETHPAGE, N.Y.          &
     & 1X,14H(516) 575-6019 //                                          &
     & ///10X,5HMINF=,F5.3,5X,4HALP=,F6.3//4X,3HIC=,I3,8X,3HJC=,I3,7X,  &
     & 6HKMAX1=,I4,3X,6HKMAX2=,I4,4X,6HKMAX3=,I4,4X,5HKREF=,I1,4X,9X,   &
     & 6HIPLOT=,I2/4X,6HGAMMA=,F4.2,4X,4HWW1=,F5.3,4X,4HWW2=,F5.3,4X,   &
     & 4HWW3=,F5.3,5X,4HEST=,F5.2,5X,6HDMIN1=,E9.2,4X,6HDMIN2=,E9.2,4X, &
     & 6HDMIN3=,E9.2//5X,80A1/5X,80A1//4X,3HAZ=,F6.3,7X,                &
     & 3HBZ=,F6.3,7X,3HNG=,I3,10X,                                      &
     &3HNS=I2,11X,3HLC=,I2,11X,3HLT=,I2,11X,3HLM=,I2/4X,6HCC(1)=,F7.3,  &
     &3X,6HCC(2)=,F6.3,4X,6HCC(3)=,F6.3,4X,6HCT(1)=,F6.3,4X,6HCT(2)=,   &
     & F6.3,4X,6HCT(3)=,F6.3,4X,6HCM(1)=,F6.3,4X,6HCM(2)=,F6.3/4X,5HIOUT&
     &=,I3,8X,7HIDESIN=,I2,7X,7HKDESMX=,I2,7X,6HIRPTS=,I2,8X,6HIOUT2=,  &
     & I1,9X,7HIPUNCH=,I1,8X,6HNSHKR=,I2,8X,6HKSHKR=,I2/4X,             &
     & 6HJDRLX=,I2,8X,5HWDES=,F5.3,6X,6HETADR=,F5.3,5X,7HEPSHKI=,F5.3,  &
     & 4X,6HTESWP=,F5.2,5X,5HKCCC=,I2,9X,7HXORIGC=,F7.4,                &
     & 2X,7HYORIGC=,F7.4)
 1002 FORMAT(4X,5HIMOD=,I2,9X,5HIEQV=,I2,                               &
     & 9X,4HXU1=,F6.3,6X,4HXU2=,F6.3,6X,4HXU3=,F6.3,6X,                 &
     & 5HDCTU=,F6.3,5X,4HXL1=,F6.3,6X,4HXL2=,F6.3/4X,4HXL3=,            &
     & F6.3,6X,5HDTCL=,F6.3,5X,5HXSTN=,F8.3,3X,6HIEQV3=,I3,7X,          &
     & 6HXROOT=,F9.5,1X,6HZROOT=,F9.5,1X,7HYWNGRT=,F9.5/)
 1004 FORMAT(1H1/5X,A8/)
!----------------------------------------------------------------------------
      PI=4.*ATAN(1.)
      PIO2=0.5*PI
      RAD=PI/180.0
!
!      DEFAULT VALUES
!
      LIN=5
      LOUT=6
      IREAD=LIN
      IWRIT=LOUT
!... read two title records .....
      READ(LIN,1000) (TI1(I),I=1,80)
      READ(LIN,1000)(TI2(I),I=1,80)
!
!      PARAMETER INPUTS via namelist INPUT
!
      READ(LIN,INPUT)    
      XLGNO=LGYRTM(YRTM)
      XROOTP=XROOT
      IF(XROOT.GT.0.99E10) XROOTP=0.0
      NG=2*(NG/2)+1
      WRITE(6,1004) XLGNO
      WRITE(LOUT,1001)
      WRITE(LOUT,1005) EMINF,ALP,IC,JC,KMAX,KREF,IPLOT,GAMMA,W,EST,     &
     & DMIN,TI1,TI2,AZ,BZ,NG,NS,LC,LT,LM                                &
     &,CC(1),CC(2),CC(3),CT(1),CT(2),CT(3),CM(1),CM(2),IOUT,IDESIN,     &
     & KDESMX,IRPTS,IOUT2,IPUNCH,NSHKR,KSHKR,JDRLX,WDES,ETADR,          &
     & EPSHKI,TESWP,KCCC,XORIGC,YORIGC
      WRITE(LOUT,1002) IMOD,IEQV,XU1,XU2,XU3,DTCU,XL1,XL2,XL3,DTCL      &
     & ,XSTN,IEQV3,XROOT,ZROOT,YWNGRT
      IF(KCCC.GT.1) GO TO 200

      PI=4.*ATAN(1.)
      PIO2=.5*PI
      RAD=PI/180
      AZ=TAN(AZ*RAD)
      BZ=TAN(BZ*RAD)
      ALP=ALP*RAD
      GA=(GAMMA-1.)*.5
      A02=1./(EMINF*EMINF)+GA
!
!     GEOMETRY
!
!!!      CALL OVERLAY (5HCOREL,1,0)
      CALL Geom
!
!
!      GRID SEQUENCE LOOPS
!
!!!      CALL OVERLAY (5HCOREL,2,0)
      CALL MnSub
!
  200 CONTINUE
      STOP
      END Program Corel


      BLOCK DATA
!
      COMMON /MODS/ XU1,XU2,XU3,DTCU,XL1,XL2,XL3,DTCL
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON/GEO/ NG,NS,AZ,BZ,CC(5),CT(5),CM(5),LC,LT,LM
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      COMMON /DESGN/ CPP(120),EMST(120),CPPEX(120),XCP(120),            &
     & NCP,IDESIN,KDES,KDESMX,YYB1(120),CPP1(120),SUMDCP(50),           &
     & STARTC,BETAM(120),NSTART,WDES
      COMMON /NEWCOM/ W(3),DMIN(3),KMAX(3),KREF
      COMMON /WNGTE/ XROOT,YWNGRT,ZROOT
      DATA IOUT/1/,IOUT2/0/,IPUNCH/0/,IRPTS/0/,IPLOT/1/
      DATA KCCC/0/,IMOD/0/,IEQV/0/,LC/0/,LT/1/,LM/0/
      DATA XORIGC/0./,YORIGC/0./,XU1/0./,XU2/0./,XU3/0./,               &
     &     XL1/0./,XL2/0./,XL3/0./,DTCU/0./,DTCL/0./,TESWP/0./
      DATA WDES/0./,EST/-6./,ETADR/0./,W/1.,1.5,1.5/
      DATA GAMMA/1.4/,EMINF/1.6/,ALP/5./,AZ/33./,BZ/1.5/
      DATA IC/30/,JC/30/,KREF/2/,KMAX/300,150,150/,NS/4/,NG/199/
      DATA DMIN/3*1.E-6/,CC/5*0./,CT/5*0./,CM/5*0./
      DATA IDESIN/0/,KDESMX/0/,KDES/1/,IEQV3/0/
      DATA NSHKR/10/,KSHKR/8/,JDRLX/6/,EPSHKI/1.2/,XSTN/1./
      DATA XROOT/1.0E10/,YWNGRT/-1.0/,ZROOT/0.0/
!
      END


      REAL FUNCTION LGYRTM(YRTM)
      YRTM=79.0
      LGYRTM=4HJOBN      ! ugh
      RETURN
      END Function Lgyrtm

!!!      OVERLAY (COREL,1,0)
!!!      PROGRAM GEOM
      SUBROUTINE Geom
!
!     CAMBERED ELLIPTIC WING
!     THICKNESS NORMAL TO CAMBER LINE
!     MODIFIED THICKNESS DISTRIBUTION
!     CAMBER,LC% 0-NONE, 1-CIRC.ARC, 2-ELLIPT.ARC, 3-CIRC.CAP, 4-OTHER
!     THICKNESS,LT% 0-CIRCULAR, 1-ELLIPTIC, 2-SUPER ELLIPSE
!
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON /MODS/ XU1,XU2,XU3,DTCU,XL1,XL2,XL3,DTCL
      COMMON/GEO/ NG,NS,AZ,BZ,CC(5),CT(5),CM(5),LC,LT,LM
      COMMON /GEOIN/ RRZ(201),THZ(201),X0,Y0,Y1,NM,NGH,NMH
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      COMMON /DESGN/ CPP(120),EMST(120),CPPEX(120),XCP(120),            &
     & NCP,IDESIN,KDES,KDESMX,YYB1(120),CPP1(120),SUMDCP(50),           &
     & STARTC,BETAM(120),NSTART,WDES
      COMMON /WNGTE/ XROOT,YWNGRT,ZROOT
      DIMENSION TITL(20),XSURF(200),YSURF(200)
 1001 FORMAT(20A4)
 1002 FORMAT(/10X,20A4//12X,1HI,10X,1HX,12X,1HY/)
 1003 FORMAT(8F10.5)
 1004 FORMAT(/4X,5HZSYM=,F3.1,5X,6HTHICK=,F10.6,5X,4HFNU=,              &
     & F5.1,5X,4HFNL=,F5.1,5X,7HXKSMTH=,F5.1,5X,6HXSING=,               &
     & F10.6,5X,6HYSING=,F10.6)
 1008 FORMAT(/20X,20A4)
 1005 FORMAT(10X,I3,2X,2F12.6)
 1006 FORMAT(/5X,6HXSING=,F10.5,10X,6HYSING=,F10.5,10X,6HXAREA=,F10.6/)
 1012 FORMAT(8F10.6)
 1014 FORMAT(14H LOWER SURFACE)
 1016 FORMAT(14H UPPER SURFACE)
 1018 FORMAT(36H SPANWISE SECTION GENERATED BY COREL ,A8,4X,            &
     & 4HNO. ,I2)
 1020 FORMAT(13HOFFLINE READ ,1HI,I2,5H SEC ,1X,A8)
 1040 FORMAT(/5X,24HTHICKNESS ENVELOPE INPUT    /)
 1050 FORMAT(/5X,5HFNUT=,F6.2,5X,6HTHICK=,F7.4//12X,1HI,10X,            &
     & 1HX,12X,1HY/)
      DATA IQQQ /1/
!
      RAD=PI/180.
      XSING=0.0
      YSING=0.0
      NG=2*(NG/2)+1
      NM=NG/2+1
      DTH=PI/FLOAT(NG-2)
      EX=2.+CT(3)
      EX1=1.0/(2.0+CT(2))
      AA=1.0
      BB=1.0
      IF(IRPTS.EQ.1) GO TO 200
      IF(IEQV3.EQ.1) GO TO 240
      X0=BZ*SQRT((AZ/BZ)**2-1.)
      X0=X0+CT(1)*(AZ-X0)
      IF(LC.EQ.0) GO TO 10
      CR=CC(1)*RAD
      IF(LC.EQ.3) GO TO 5
      IF(LC.EQ.4) GO TO 15
      IF(CR.EQ.0.0) CR=0.1E-6
      RR=AZ/SIN(CR)
      AA=RR
      BB=RR
      IF(LC.EQ.1) GO TO 20
      CE=CC(2)*RAD
      TCE=TAN(CE)
      AA=AZ*RR*TCE/SQRT((RR*TCE)**2-AZ*AZ)
      BB=AA*AA/RR
      GO TO 20
    5 XC=CC(3)*AZ
      RR=(AZ-XC)/SIN(CR)
      Y0=0.
      IF(X0.GT.XC) Y0=SQRT(RR*RR-(X0-XC)**2)-RR
      Y1=-Y0
      GO TO 30
   10 Y0=0.
      Y1=0.
      GO TO 30
   15 XC=CC(3)*AZ
      XC1=XC+.1*AZ
      RR=(XC1-XC)/SIN(CR)
      IF(CR.LT.0.0) RR=-RR
      IF(CR.EQ.0.0) CR=0.1E-6
      TCR=TAN(CR)
      YC1=SQRT(RR*RR-(XC1-XC)**2)-RR
      Y0=0.
      IF(X0.LE.XC) GO TO 17
      IF(X0.GE.XC1) GO TO 16
      Y0=SQRT(RR*RR-(X0-XC)**2)-RR
      GO TO 17
   16 Y0=-TCR*(X0-XC1)+YC1
   17 Y1=-Y0
      GO TO 30
   20 IF(CR.LT.1.E-5) Y0=0.0
      IF(CR.LT.1.E-5) GO TO 22
      Y0=BB*(SQRT(1.-(X0/AA)**2)-1.)
   22 Y1=-Y0
   30 CONTINUE
   40 CONTINUE
!
!      GENERATE SPAN SECTION INTERNALLY
!
   50 DO 100 I=1,NG
      TH=0.
      IF(I.LT.NM) TH=(I-1)*DTH-PIO2
      IF(I.GT.NM) TH=(I-2)*DTH-PIO2
      STH=SIGN(1.,TH)
      XP=AZ*COS(TH)
      YT=STH*BZ*(1.0-ABS(COS(TH))**EX)**EX1
      IF(IRPTS.NE.2) GO TO 56
      IF(I.LE.NM) II=NM-I+1
      IF(I.GT.NM) II=I-NM+2
   56 CONTINUE
   60 IF(LC.EQ.0) GO TO 80
      IF(LC.EQ.3) GO TO 65
      IF(LC.EQ.4) GO TO 67
      YC=BB*SQRT(1.-(XP/AA)**2)
      YCP=-(BB/AA)**2*XP/YC
      YCC=YC-BB
      GO TO 70
   65 YCC=0.
      YCP=0.
      IF(XP.LE.XC) GO TO 70
      YCC=SQRT(RR*RR-(XP-XC)**2)-RR
      YCP=-(XP-XC)/(YCC+RR)
      GO TO 70
   67 YCC=0.
      YCP=0.
      IF(XP.LE.XC) GO TO 70
      IF(XP.GE.XC1) GO TO 68
      YCC=SQRT(RR*RR-(XP-XC)**2)-RR
      YCP=-(XP-XC)/(YCC+RR)
      GO TO 70
   68 YCC=-TCR*(XP-XC1)+YC1
      YCP=-TCR
   70 THC=ATAN(YCP)
      X=-YT*SIN(THC)+XP
      Y=YT*COS(THC)+YCC
      GO TO 98
   80 X=XP
      Y=YT
   98 THZ(I)=ATAN2(Y,X)
      RRZ(I)=SQRT(X*X+Y*Y)
      XSURF(I)=X
      YSURF(I)=Y
  100 END DO
      IF(IEQV.EQ.1) CALL GEOCUT(XSURF,YSURF)
      CALL MAX(NG,XSURF,IXMAX,XMAX)
      IF(IMOD.GE.1) CALL ORDMOD(NG,IXMAX,XSURF,YSURF,RRZ,THZ)
      IF(IDESIN.EQ.1) CALL DESX(IREAD,IWRIT,STARTX,NCP,XCP,CPPEX)
!
      XAREA=AREA(NG,XSURF,YSURF)
!
      XSGR=X0/AZ
      YSGR=Y0/AZ
      WRITE(IWRIT,1006) XSGR,YSGR,XAREA
      IF(IPUNCH.EQ.1) GO TO 500
      GO TO 600
!
!    INPUT GEOMETRY READ IN HERE IF IRPTS=1
!
  200 CONTINUE
!
      READ(IREAD,1001) TITL
      WRITE(IWRIT,1008) TITL
      READ(IREAD,1003) ZSYM,THICK,FNU,FNL,XKSMTH,XSING,YSING
      IF(THICK.EQ.0.0) THICK=1.0
      WRITE(IWRIT,1004)ZSYM,THICK,FNU,FNL,XKSMTH,XSING,YSING
      ISYM=ZSYM
      XSING=AZ*XSING
      YSING=AZ*YSING
      READ(IREAD,1001) TITL
      WRITE(IWRIT,1002) TITL
      NU=FNU
      NL=FNL
      NM=NL
      IF(ISYM.GE.1) NL=NU
      NG=NU+NL-1
      DO 210 J=1,NU
      JJ=NL+J-1
      READ(IREAD,1003) XU,YU
      WRITE(IWRIT,1005) J,XU,YU
      XU=AZ*XU
      YU=THICK*YU
      YU=AZ*YU
      XSURF(JJ)=XU
      YSURF(JJ)=YU
      THZ(JJ)=ATAN2(YU,XU)
  210 RRZ(JJ)=SQRT(XU*XU+YU*YU)
      IF(ISYM.GE.1) GO TO 230
      READ(IREAD,1001) TITL
      WRITE(IWRIT,1002) TITL
      DO 220 J=1,NL
      JJ=NL-J+1
      READ(IREAD,1003) XL,YL
      WRITE(IWRIT,1005) J,XL,YL
      XL=AZ*XL
      YL=THICK*YL
      YL=AZ*YL
      XSURF(JJ)=XL
      YSURF(JJ)=YL
      THZ(JJ)=ATAN2(YL,XL)
  220 RRZ(JJ)=SQRT(XL*XL+YL*YL)
!
      GO TO 240
  230 DO 235 J=1,NL
      JJ=NL-J+1
      JSYM=NL+J-1
      XSURF(JJ)=XSURF(JSYM)
      YSURF(JJ)=-YSURF(JSYM)
      THZ(JJ)=-THZ(JSYM)
  235 RRZ(JJ)=RRZ(JSYM)
!
  240 CONTINUE
      IF(IEQV.EQ.1) CALL GEOCUT(XSURF,YSURF)
      CALL MAX(NG,XSURF,IXMAX,XMAX)
      IF(IMOD.GE.1) CALL ORDMOD(NG,IXMAX,XSURF,YSURF,RRZ,THZ)
      IF(IDESIN.EQ.1) CALL DESX(IREAD,IWRIT,STARTX,NCP,XCP,CPPEX)
  310 NIN=NM
      IF(XSING.EQ.0.0) CALL PARM(XSURF,YSURF,NG,XSING,YSING,NIN)
      NM=NIN
  320 IF(XSURF(NM).LT.XSING) GO TO 330
      NM=NM-1
      GO TO 320
  330 CONTINUE
      X0=XSING
      Y0=YSING
      Y1=-Y0
!
      XAREA=AREA(NG,XSURF,YSURF)
!
      XSGR=X0/AZ
      YSGR=Y0/AZ
      IF(XSGR.GE.1.0) X0=AZ*0.994
      IF(XSGR.GE.1.0) XSGR=0.994
      WRITE(IWRIT,1006) XSGR,YSGR,XAREA
!
!
      IF(IPUNCH.NE.1) GO TO 600
  500 CONTINUE
!
!    OPTIONALLY PUNCH OUT GENERATED SECTION
!
      IPUN=8
      WRITE(IPUN,1020) IQQQ,XLGNO
      WRITE(IPUN,1018) XLGNO,IQQQ
      ZSYM=0.0
      THICK=1.0
      XKSMTH=0.0
      XSING=X0/AZ
      YSING=Y0/AZ
      FNU=NG-IXMAX+1
      FNL=IXMAX
      WRITE(IPUN,1012) ZSYM,THICK,FNU,FNL,XKSMTH,XSING,YSING
      WRITE(IPUN,1016)
      DO 110 I=IXMAX,NG
      XXMAX=XSURF(I)/XMAX
      YXMAX=YSURF(I)/XMAX
  110 WRITE(IPUN,1012) XXMAX,YXMAX
      WRITE(IPUN,1014)
      DO 120 I=1,IXMAX
      II=IXMAX-I+1
      XXMAX=XSURF(II)/XMAX
      YXMAX=YSURF(II)/XMAX
  120 WRITE(IPUN,1012) XXMAX,YXMAX
!
  600 CONTINUE
      END


      FUNCTION AREA(NG,X,Y)
!
!     COMPUTE THE CROSS-SECTIONAL AREA
!
      DIMENSION X(1),Y(1)
      X(NG+1)=X(1)
      Y(NG+1)=Y(1)
      XA=0.
      DO 10 I=1,NG
   10 XA=XA+(Y(I+1)+Y(I))*(X(I+1)-X(I))
      XA=-0.5*XA
      AREA=XA
      RETURN
      END Function Area


      SUBROUTINE MAX(NG,X,IXMAX,XMAX)
      DIMENSION X(1)
      XMAX=0
      IXMAX=0
      DO 10 I=1,NG
      IF(X(I).GT.XMAX) IXMAX=I
      IF(X(I).GT.XMAX) XMAX=X(I)
   10 END DO
!
      RETURN
      END


      SUBROUTINE DESX(IREAD,IWRIT,STARTX,NCP,XCP,CPPEX)
      DIMENSION XCP(1),CPPEX(1)
      READ(IREAD,1003) CPPTS,STARTC
      WRITE(IWRIT,1001) CPPTS,SARTC
      NCP=CPPTS
      DO 300 N=1,NCP
      READ(IREAD,1003) XX,CPCP
      WRITE(IWRIT,1003) XX,CPCP
      XCP(N)=XX
  300 CPPEX(N)=CPCP
!
 1001 FORMAT(//5X,11HTARGET CP ,3X,6HCPPTS=,F10.5,4X,7HSTARTC=,F10.5/)
 1003 FORMAT(8F10.5)
!
      RETURN
      END


      SUBROUTINE GEOCUT(XSURF,YSURF)
!
!      READ IN HARRIS DATA SET AND GENERATE NON-CONICAL INFO
!
!      IF IEQV3=1    USE FOR CONICAL SOLUTION ALSO
!
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      COMMON/GEO/ NG,NS,AZ,BZ,CC(5),CT(5),CM(5),LC,LT,LM
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON /GEOIN/ RRZ(201),THZ(201),X0,Y0,Y1,NM,NGH,NMH
      COMMON /WNGTE/ XROOT,YWNGRT,ZROOT
      DIMENSION XSURF(1),YSURF(1)
!
      CALL GEOMIN
!
      CALL XPATCH(XSTN)
!
!
      ZAVG=0.0
      IF(XSTN.GT.XROOT) GO TO 20
      CALL XCUT(XSTN,0.0,1,ZOUTU,DNY,DNZ,DNX)
      CALL XCUT(XSTN,0.0,2,ZOUTL,DNY,DNZ,DNX)
!
      ZAVG=(ZOUTU+ZOUTL)/2.0
!
   20 CONTINUE
!
      DALP=ATAN(-ZAVG/(XSTN-XORIGC))
      ALP=ALP+DALP
      CALL TIPLE(XSTN,YLEH,ZLEH,XSIN,YSIN)
!
      DALPD=57.29578*DALP
!
      IF(IOUT2.NE.2) WRITE(LOUT,1000) XSTN,ZAVG,DALPD
      IF(IOUT2.NE.2) WRITE(LOUT,1001)
      IHAR=20
      NGH=61
      NGH=2*(NGH/2)+1
      NMH=NGH/2+1
      DTH=PI/FLOAT(NGH-2)
      DO 100 I=1,NGH
      TH=0.0
      NSFLG=2
!
      DNY=0.0
      DNZ=0.0
      DNX=0.0
      ZOUT=0.0
!
      IF(I.LT.NMH) TH=(I-1)*DTH-PIO2
      IF(I.GT.NMH) TH=(I-2)*DTH-PIO2
      IF(I.GT.NMH) NSFLG=1
!
      YHARL=COS(TH)*YLEH
      YHARL=YORIGC+YHARL
      IF(YHARL.LT.YWNGRT) GO TO 40
      IF(YHARL.LT.0.0) YHARL=0.1E-6
      CALL XCUT(XSTN,YHARL,NSFLG,ZOUT,DNY,DNZ,DNX)
!
   40 CONTINUE
!
      YHARLD=YHARL
      ZOUTD=ZOUT
!
!
      YHARL=YHARL-YORIGC
      ZOUT=ZOUT-ZAVG
!
!
      WRITE(IHAR,1200) XSTN,YHARL,ZOUT,DNY,DNZ,DNX
!
!
      ZOUT=ZOUT/(XSTN-XORIGC)
      YHARL=YHARL/(XSTN-XORIGC)
!
      IF(IEQV3.NE.1) GO TO 80
      THZ(I)=ATAN2(ZOUT,YHARL)
      RRZ(I)=SQRT(ZOUT**2+YHARL**2)
      XSURF(I)=YHARL
      YSURF(I)=ZOUT
!
   80 IF(IOUT2.EQ.2) GO TO 100
      WRITE(LOUT,1100) I,YHARL,ZOUT,DNY,DNZ,DNX,XSTN,YHARLD,ZOUTD
  100 END DO
      IF(IOUT2.NE.2) WRITE(LOUT,1001)
!
      IF(IEQV3.NE.1) RETURN
!
      NG=NGH
      NM=NMH
!
!
 1000 FORMAT(1H1/5X,26HSPANWISE SECTION GEOMETRY  ,                     &
     & 2X,30HFROM CRAIDON GEOMETRY PACKAGE   //                         &
     & 5X,5HXSTN=,F10.5,5X,5HZAVG=,F10.5,5X,5HDALP=,F6.2,8H DEGREES/)
 1001 FORMAT(/9X,1HI,9X,5HYHARL,12X,1HZ,14X,3HDNY,11X,3HDNZ,            &
     & 13X,3HDNX,11X,4HXSTN,12X,2HYD,12X,2HZD/)
 1100 FORMAT(5X,I5,8F15.5)
 1200 FORMAT(6E14.7)
 1300 FORMAT(1H1)
!
      RETURN
      END


      SUBROUTINE ORDMOD(N,IXMAX,X,Y,R,THE)
!
!    MODIFY  COORDINATES VIA BAVITZ NOTES
!
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON /MODS/ XU1,XU2,XU3,DTCU,XL1,XL2,XL3,DTCL
      COMMON/GEO/ NG,NS,AZ,BZ,CC(5),CT(5),CM(5),LC,LT,LM
      DIMENSION X(1),Y(1),R(1),THE(1)
      WRITE(6,340)
      IF(IMOD.EQ.1) GO TO 110
      WRITE(6,310)
      DO 100 I=1,IXMAX
      XX=X(I)/AZ
      XD=0.0
      IF(XX.GT.XL1.AND.XX.LE.XL2) XD=(XX-XL1)/2.0/(XL2-XL1)
      IF(XX.GT.XL2.AND.XX.LE.XL3) XD=(XX+XL3-2.0*XL2)/2.0/(XL3-XL2)
      DDY=-.64*DTCL*XD**3*(XD-1.0)**3
      YOLD=Y(I)/AZ
      YNEW=YOLD+DDY
      Y(I)=YNEW*AZ
      R(I)=SQRT(X(I)**2+Y(I)**2)
      THE(I)=ATAN2(YNEW,XX)
  100 WRITE(6,300) I,XD,DDY,XX,YNEW,YOLD,R(I),THE(I)
  110 IF(IMOD.EQ.2) GO TO 210
      WRITE(6,320)
      WRITE(6,330)
      I1=IXMAX+1
      DO 200 I=I1,N
      XX=X(I)/AZ
      XD=0.0
      IF(XX.GT.XU1.AND.XX.LE.XU2) XD=(XX-XU1)/2.0/(XU2-XU1)
      IF(XX.GT.XU2.AND.XX.LE.XU3) XD=(XX+XU3-2.0*XU2)/2.0/(XU3-XU2)
      DDY=-.64*DTCU*XD**3*(XD-1.0)**3
      YOLD=Y(I)/AZ
      YNEW=YOLD+DDY
      Y(I)=YNEW*AZ
      R(I)=SQRT(X(I)**2+Y(I)**2)
      THE(I)=ATAN2(YNEW,XX)
  200 WRITE(6,300) I,XD,DDY,XX,YNEW,YOLD,R(I),THE(I)
  210 CONTINUE
!
  300 FORMAT(I5,7F10.5)
  310 FORMAT(//10X,13HLOWER SURFACE   /)
  320 FORMAT(//10X,13HUPPER SURFACE  /)
  330 FORMAT(4X,1HI,6X,2HXD,7X,3HDDY,7X,3HXXX,7X,4HYNEW,6X,4HYOLD,      &
     & 8X,1HR,6X,5HTHETA/)
  340 FORMAT(1H1//10X, 39HSPANWISE SECTION MODIFICATION VIA BUMPS //)
!
      RETURN
      END


      SUBROUTINE PARM(X,Y,N,XSING,YSING,IN)
!
!
!     CALCULATES THE SINGULAR POINT
!
      DIMENSION X(1),Y(1)
      RN=100000.
      IMIN=N/4
      IMAX=(3*N)/4
      DO 1 I=IMIN,IMAX
      X2=X(I+1)-X(I)
      Y2=Y(I+1)-Y(I)
      X3=X(I+2)-X(I)
      Y3=Y(I+2)-Y(I)
      R2=X2**2+Y2**2
      R3=X3**2+Y3**2
      D=(X3*Y2-X2*Y3)*2.
      IF(D.EQ.0.0) D=1.E-12
      A=-(Y3*R2-Y2*R3)/D
      B= (X3*R2-X2*R3)/D
      RC=(A**2+B**2)**.5
      IF(RC-RN) 2,1,1
    2 RN=RC
      XC=X(I)+A
      YC=Y(I)+B
      IN=I+1
    1 END DO
!
      XSING=0.5*(XC+X(IN))
      YSING=0.5*(YC+Y(IN))
!
      WRITE(6,1001)
      WRITE(6,1000) X(IN),Y(IN),IN,XC,YC,XSING,YSING
 1000 FORMAT(/5X,6HX(IN)=,F10.5,5X,6HY(IN)=,F10.5,5X,4H IN=,I3/         &
     & 5X,3HXC=,3X,F10.5,5X,3HYC=,3X,F10.5/5X,6HXSING=,F10.5,5X,6HYSING=&
     & F10.5/)
 1001 FORMAT(1H1/5X,21HINTERNALLY GENERATED ,                           &
     & 32HSINGULARITY LOCATION FOR MAPPING    /)
!
      RETURN
      END


      SUBROUTINE XPATCH(X)
!
!     RETURN AND STORE PATCH MATRICES REQUIRED FOR XCUT
!
      COMMON /XSECT/ ABCDE(20),PPL1(3),PPL2(3),PPL3(3),                 &
     &        PLOTSZ,HPAGE,VPAGE,INP,NOU,NOW,ISIDE,IPRIN,               &
     &        KODE,XSTAT,THETR,XMACH
      COMMON /PATBLK/ PATXY(4,600,2)
      COMMON /XPAT/NLE,NXLE(5),NXPAT(5),PATCHX(14400),PATCOR(4,150,2)
      DIMENSION NAME(2),ABC(20),PATCH(4,4,3)
      DIMENSION PNT1(3),PNT2(3),PNT3(3)
      EQUIVALENCE (PNT1(1),PPL1(1)),(PNT2(1),PPL2(1)),(PNT3(1),PPL3(1))
!
      REWIND 14
      READ(14)ABC
      READ(14)H1,H2,H3,H4,H5,H6,NOBJ
      DO 70 J=1,NOBJ
      READ(14)NSURF,JJ,NAME(1),NAME(2),JJ,JJ
      DO 60 N=1,NSURF
      NX=0
      IF (N.EQ.1) NLE=0
      READ(14)ND1,NS1,J3,J4,J5
!
!         READS PATCHES FROM TAPE,
!         SOLVES FOR INTERSECTIONS BY SPECIFIED PLANE
!         AND PLOTS
!
      NPAT=ND1*NS1
      NCOUNT=1
      DO 370 NNPAT=1,NPAT
      READ(14)PATCH
      IF(X.GT.PATXY(2,NNPAT,N).OR.X.LT.PATXY(1,NNPAT,N)) GO TO 371
      NX=NX+1
      IF (NNPAT.EQ.NCOUNT.AND.N.EQ.1) NLE=NLE+1
      IF (NNPAT.EQ.NCOUNT.AND.N.EQ.1) NXLE(NLE)=NX
      IF (NNPAT.EQ.NCOUNT.AND.N.EQ.1) WRITE (6,557) NXLE(NLE),N
  557 FORMAT (10X,36HLEADING EDGE PANEL DETECTED AT NXLE=,I5,11H ON SURF&
     &ACE,I5)
      DO 778 II=1,4
      DO 778 JJ=1,4
      DO 778 KK=1,3
      PATCHX(II+4*(JJ-1)+16*(KK-1)+48*(NX-1)+7200*(N-1))=PATCH(II,JJ,KK)
  778 CONTINUE
      DO 780 IJK=1,4
      PATCOR(IJK,NX,N)=PATXY(IJK,NNPAT,N)
  780 END DO
  371 IF (NNPAT.EQ.NCOUNT) NCOUNT=NCOUNT+NS1
  370 END DO
      NXPAT(N)=NX
      WRITE (6,117) NXPAT(N),N
  117 FORMAT (5X,4H*** ,I5,29H PATCHES FOR XCUT ON SURFACE ,I4,4H ***)
   60 END DO
   70 END DO
      RETURN
      END
      SUBROUTINE XCUT (XIN,YIN,NS,Z,DUM1,DUM2,DUM3)
!
!    FIND Z FOR A GIVEN X AND Y
!
      COMMON /XSECT/ ABCDE(20),PPL1(3),PPL2(3),PPL3(3),                 &
     &        PLOTSZ,HPAGE,VPAGE,INP,NOU,NOW,ISIDE,IPRIN,               &
     &        KODE,XSTAT,THETR,XMACH
      COMMON /XPAT/NLE,NXLE(5),NXPAT(5),PATCHX(14400),PATCOR(4,150,2)
      COMMON /ERROR/ IERR
      DIMENSION PATCH(4,4,3)
      DIMENSION PNT1(3),PNT2(3),PNT3(3),PNT4(3)
      EQUIVALENCE (PNT1(1),PPL1(1)),(PNT2(1),PPL2(1)),(PNT3(1),PPL3(1))
!
      DO 60 N=1,2
      X=XIN
      Y=YIN
      IFLAG=0
      NX=NXPAT(N)
      DO 370 NNPAT=1,NX
      IF (NS.EQ.2.AND.N.EQ.1) GO TO 60
      IF (NS.EQ.0.AND.IFLAG.EQ.1) GO TO 60
      IF (X.GT.PATCOR(2,NNPAT,N).OR.X.LT.PATCOR(1,NNPAT,N)) GO TO 777
      IF (Y.GT.PATCOR(4,NNPAT,N).OR.Y.LT.PATCOR(3,NNPAT,N)) GO TO 777
      DO 800 II=1,4
      DO 800 JJ=1,4
      DO 800 KK=1,3
      PATCH(II,JJ,KK)=PATCHX(II+4*(JJ-1)+16*(KK-1)+48*(NNPAT-1)+        &
     & 7200*(N-1))
  800 CONTINUE
      CALL VSOLV(X,Y,Z,U,W,PATCH,IFLAG,DNX,DNY,DNZ)
  777 CONTINUE
      IERR=IFLAG
      IF (IFLAG.EQ.1.AND.NS.EQ.1) GO TO 500
      IF (IFLAG.EQ.1.AND.NS.EQ.2) GO TO 500
      IF (IFLAG.EQ.1.AND.NS.EQ.0.AND.N.EQ.1) ZUP=Z
      IF (IFLAG.EQ.1.AND.NS.EQ.0.AND.N.EQ.2) ZLO=Z
  370 END DO
      IF(IFLAG.EQ.0) WRITE(6,373) XIN,YIN
  373 FORMAT(/10X,21H*** ERROR MESSAGE ***   ,4HXIN=,F10.6,3X,          &
     &    4HYIN=,F10.6,3X,7HIN XCUT//)
   60 END DO
      IF(NS.NE.0) WRITE(6,378)
  378 FORMAT(/5X,22HERROR IN XCUT AFTER 60/)
      B=.5*(ZUP-ZLO)
      ZMEAN=.5*(ZUP+ZLO)
      Z=ZMEAN
      DUM1=B
      DUM2=ZUP
      DUM3=ZLO
      GO TO 600
  500 DUM1=DNY
      DUM2=DNZ
      DUM3=DNX
  600 RETURN
!
!         END OF XCUT
!
      END


      SUBROUTINE VSOLV (XIN,YIN,Z,U,W,PATCH,IFLAG,NX,NY,NZ)
!
!      USE NEWTONS METHOD TO GET U,W GIVEN X,Y
!        AND THEN COMPUTE Z( SIMULTANEOUSLY)
!
      REAL NX,NY,NZ
      DIMENSION VEC(4,3),VECU(4,3),PATCH(4,4,3),V(3),VU(3),VW(3)
!
      ITMAX=400
      RELAX=0.1
      ITER=0
      X=XIN
      Y=YIN
      U=.5
      W=.5
!
  200 DO 10 J4=1,4
      DO 10 K3=1,3
      VEC(J4,K3)=((U*PATCH(1,J4,K3)+PATCH(2,J4,K3))*U+PATCH(3,J4,K3))*U+&
     &PATCH(4,J4,K3)
      VECU(J4,K3)=3.*(U**2)*PATCH(1,J4,K3)+2.*U*PATCH(2,J4,K3)          &
     &+PATCH(3,J4,K3)
   10 CONTINUE
!
      DO 20 K3=1,3
      V(K3)=((W*VEC(1,K3)   +VEC(2,K3))*W+VEC(3,K3))*W+VEC(4,K3)
      VU(K3)=(W**3)*VECU(1,K3)+(W**2)*VECU(2,K3)+W*VECU(3,K3)+VECU(4,K3)
      VW(K3)=3.*(W**2)*VEC(1,K3)+2.*W*VEC(2,K3)+VEC(3,K3)
   20 END DO
      DET=VU(1)*VW(2)-VW(1)*VU(2)
      IF (ABS(DET).LT.1.E-10) IFLAG=0
      IF (ABS(DET).LT.1.E-10) RETURN
!
      DEL=((V(2)-Y)*VW(1)-(V(1)-X)*VW(2))/DET
      EPS=((V(1)-X)*VU(2)-(V(2)-Y)*VU(1))/DET
!
      UN=U+RELAX*DEL
      WN=W+RELAX*EPS
!
      IF (ABS(X-V(1)).LT.1.E-8.AND.ABS(Y-V(2)).LT.1.E-8.AND.ABS(U-UN).LT&
     &.1.E-8.AND.ABS(W-WN).LT.1.E-8) GO TO 100
      U=UN
      W=WN
      ITER=ITER+1
      IF(ITER.GT.ITMAX) ERRZ=ABS(X-V(1))
      IF(ITER.GT.ITMAX) ERRX=ABS(Y-V(2))
      IF(ITER.GT.ITMAX.AND.ABS(X-V(1)).LT.1.E-3.AND.ABS(Y-V(2)).LT.     &
     & 1.E-3) GO TO 100
      IF(ITER.GT.ITMAX) IFLAG=0
      IF(ITER.GT.ITMAX) RETURN
      GO TO 200
  100 IF (U.GT.1.0001.OR.U.LT.-1.E-4.OR.W.GT.1.0001.OR.W.LT.-1.E-4)     &
     &IFLAG=0
      IF (U.GT.1.0001.OR.U.LT.-1.E-4.OR.W.GT.1.0001.OR.W.LT.-1.E-4)     &
     &RETURN
!
      X=V(1)
      Y=V(2)
      Z=V(3)
      NX=VU(2)*VW(3)-VW(2)*VU(3)
      NY=VU(3)*VW(1)-VW(3)*VU(1)
      NZ=VU(1)*VW(2)-VU(2)*VW(1)
      XMAG=SQRT(NX**2+NY**2+NZ**2)
      NX=NX/XMAG
      NY=NY/XMAG
      NZ=NZ/XMAG
      IFLAG=1
      RETURN
      END
!
!         D3400 (SPADE) - SURFACE PATCH DEFINITION EQUATIONS
!             (CONVERTS A SURFACE POINT DESCRIPTION
!             TO THREE DIMENSIONAL SURFACE PATCH EQUATIONS)
!         PROGRAMER - CHARLOTTE B. CRAIDON
!


      SUBROUTINE GEOMIN
      COMMON /PATPLT/ XMIN,XMAX,YMIN,YMAX,ZMIN,ZMAX,NOBJ
      COMMON /PATBLK/ PATXY(4,600,2)
      COMMON /XSECT/ ABCDE(20),PPL1(3),PPL2(3),PPL3(3),                 &
     &        PLOTSZ,HPAGE,VPAGE,INP,NOU,NOW,ISIDE,IPRIN,               &
     &        KODE,XSTAT,THETR,XMACH
      COMMON /XPAT/NLE,NXLE(5),NXPAT(5),PATCHX(14400),PATCOR(4,150,2)
      COMMON /ERROR/ IERR
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      DIMENSION ADATA(19)
      DATA AEND/4HEND /,AER/4HAERO/
!
!
      WRITE (6,20)
   20 FORMAT (1H110X,24HPROGRAM 03400 (SPADE) - ,34HSURFACE PATCH DEFINI&
     &TION EQUATIONS///)
!
!         INPUT SURFACE POINT DESCRIPTION AND PROCESS
!         FOR TAPE 10 AND FOR LABLED COMMON PATPLT
!
   30 CONTINUE
      CALL START
      WRITE (6,99)
   99 FORMAT (10X,50H*** INPUT DATA FOR AIRCRAFT HAS BEEN COMPLETED ***)
!
!
!      SET UP THE REST OF THE DATA SET FOR W12SC3
!
      ALPD=0.0
      ITAPEX=32
      IF(KCCC.EQ.1) GO TO 14
    4 READ(ITAPEX,80) AIN,ADATA
      IF(AIN.EQ.AER) GO TO 6
      GO TO 4
    6 CONTINUE
   10 READ(IREAD,60) AIN1,AIN2,ADATA
      WRITE(ITAPEX,60) AIN1,AIN2,ADATA
      IF(AIN2.EQ.AEND) GO TO 12
      GO TO 10
   12 CONTINUE
!
   60 FORMAT(A2,A4,A2,18A4)
   70 FORMAT(5F7.4)
   80 FORMAT(20A4)
!
      READ(IREAD,70) XDUM1,XDUM2,CLBAR,XCP
      WRITE(ITAPEX,70) EMINF,ALPD,CLBAR,XCP
!
   14 CONTINUE
!
!
!         COMPUTE AND STORE PATCH EQUATIONS
!
      CALL SURF
      WRITE (6,101)
  101 FORMAT(1X,53H*** SPLINE AND SURFACE PATCHES HAS BEEN COMPLETED ***&
     &)
!
      CALL PACHXY
      WRITE(6,103)
  103 FORMAT(1H1)
!
      RETURN
!
!         END OF 03400
!
      END


      SUBROUTINE SURF
!
!         CALLS A SUBROUTINE TO COMPUTE PATCHES
!         AND CONTROLS WRITING OF PATCH TAPE
!
      COMMON /PATPLT/ XMIN,XMAX,YMIN,YMAX,ZMIN,ZMAX,NOBJ
      DIMENSION ABC(20)
      REWIND 14
      REWIND 10
      READ (10) ABC
      WRITE(14)ABC
      WRITE(14)XMIN,XMAX,YMIN,YMAX,ZMIN,ZMAX,NOBJ
      DO 20 I=1,NOBJ
      READ (10) NSURF,J2,J3,J4,J5,J6
      WRITE(14)NSURF,J2,J3,J4,J5,J6
      DO 10 N=1,NSURF
      READ (10) NCOL,NROW,N3,N4,N5
      CALL PACH (NCOL,NROW,N3,N4,N5)
   10 END DO
   20 END DO
      END FILE 14
      RETURN
      END


      SUBROUTINE PACH (NLD,NLS,L1,L2,L3)
!
!         CONSTRUCTS SURFACE PATCHES WITH THE COMPONENTS
!         EXPRESSED AS CUBIC FUNCTIONS OF TWO PARAMETEKS (U AND W)
!         AND WRITES ON TAPE
!
      DIMENSION PATCH(4,4,3),COEF1(31,4,3),COEF2(31,4,3)
      DIMENSION SLOPE(31,31,3),XMAT(4,4),ALINE(31,3),ELEN(31),PAT(4,4)
!     DATA XMAT/2.,-2.,1.,1.,-3.,3.,-2.,-1.,0.,0.,1.,0.,1.,0.,0.,0./
      DATA XMAT/2.,-3.,0.,1.,-2.,3.,0.,0.,1.,-2.,1.,0.,1.,-1.,0.,0./
      DATA MAXN/31/,EPS/.0000001/
      N1=NLD-1
      N2=NLS-1
      WRITE(14)N1,N2,L1,L2,L3
!
!         COMPUTE PARAMETRIC SLOPES IN W DIRECTION
!
      DO 70 N=1,NLS
      READ (10) ((ALINE(NN,N3),NN=1,NLD),N3=1,3)
!
!         CHECK IF CUBIC FAIRING POSSIBLE
!
      IF (NLD.LT.3) GO TO 20
!
!         CHECK FOR A POINT
!
      NL=NLD-1
      DO 10 NN=1,NL
      E1=ABS(ALINE(NN,1)-ALINE(NN+1,1))
      E2=ABS(ALINE(NN,2)-ALINE(NN+1,2))
      E3=ABS(ALINE(NN,3)-ALINE(NN+1,3))
      IF (E1+E2+E3.LE.EPS) GO TO 20
   10 END DO
      GO TO 40
!
!         COMPUTE LINEAR SLOPES
!
   20 DO 30 NN=1,NLD
      DO 30 N3=1,3
      SLOPE(NN,N,N3)=ALINE(2,N3)-ALINE(1,N3)
   30 CONTINUE
      GO TO 70
!
!         COMPUTE CUBIC SPLINE SLOPES
!
   40 CONTINUE
      CALL SPFIT (MAXN,NLD,ALINE,ELEN,COEF1,I1,0,I2,EK,CP,I3,I4)
      NL=NLD-1
      DO 50 NN=1,NL
      DO 50 N3=1,3
      SLOPE(NN,N,N3)=COEF1(NN,3,N3)
   50 CONTINUE
      DO 60 N3=1,3
      SLOPE(NLD,N,N3)=3.*COEF1(NLD-1,1,N3)+2.*COEF1(NLD-1,2,N3)+COEF1(NL&
     &D-1,3,N3)
   60 END DO
   70 END DO
!
!         COMPUTE PARAMETRIC SLCPES IN U DIRECTION
!         FORM PATCHES AND WRITE TAPE
!
      READ (10) ((ALINE(NN,N3),NN=1,NLS),N3=1,3)
!
!         CHECK IF CUBIC FAIRING POSSIBLE
!
      IF (NLS.LT.3) GO TO 90
!
!         CHECK FOR A POINT
!
      NL=NLS-1
      DO 80 NN=1,NL
      E1=ABS(ALINE(NN,1)-ALINE(NN+1,1))
      E2=ABS(ALINE(NN,2)-ALINE(NN+1,2))
      E3=ABS(ALINE(NN,3)-ALINE(NN+1,3))
      IF (E1+E2+E3.LE.EPS)GO TO 90
   80 END DO
      GO TO 110
!
!         COMPUTE LINEAR SLOPES
!
   90 DO 100 NN=1,NLS
      DO 100 N3=1,3
      COEF1(NN,3,N3)=ALINE(2,N3)-ALINE(1,N3)
      COEF1(NN,4,N3)=ALINE(NN,N3)
  100 CONTINUE
      GO TO 130
  110 CONTINUE
!
!         COMPUTE CUBIC SPLINE SLOPES
!
      CALL SPFIT (MAXN,NLS,ALINE,ELEN,COEF1,K1,0,K2,EP,CP,K3,K4)
      DO 120 N3=1,3
      COEF1(NLS,3,N3)=3.*COEF1(NLS-1,1,N3)+2*COEF1(NLS-1,2,N3)+COEF1(NL &
     &S-1,3,N3)
      COEF1(NLS,4,N3)=COEF1(NLS-1,1,N3)+COEF1(NLS-1,2,N3)+COEF1(NLS-1,3,&
     &N3)+COEF1(NLS-1,4,N3)
  120 END DO
  130 CONTINUE
      DO 290 N=2,NLD
      READ (10) ((ALINE(NN,N3),NN=1,NLS),N3=1,3)
      IF (NLS.LT.3) GO TO 150
      NL=NLS-1
      DO 140 NN=1,NL
      E1=ABS(ALINE(NN,1)-ALINE(NN+1,1))
      E2=ABS(ALINE(NN,2)-ALINE(NN+1,2))
      E3=ABS(ALINE(NN,3)-ALINE(NN+1,3))
      IF (E1+E2+E3.LE.EPS) GO TO 150
  140 END DO
      GO TO 170
  150 DO 160 NN=1,NLS
      DO 160 N3=1,3
      COEF2(NN,3,N3)=ALINE(2,N3)-ALINE(1,N3)
      COEF2(NN,4,N3)=ALINE(NN,N3)
  160 CONTINUE
      GO TO 190
  170 CALL SPFIT (MAXN,NLS,ALINE,ELEN,COEF2,K1,0,K2,EP,CP,K3,K4)
      DO 180 N3=1,3
      COEF2(NLS,3,N3)=3.*COEF2(NLS-1,1,N3)+2.*COEF2(NLS-1,2,N3)+COEF2(NL&
     &S-1,3,N3)
      COEF2(NLS,4,N3)=COEF2(NLS-1,1,N3)+COEF2(NLS-1,2,N3)+COEF2(NLS-1,3,&
     &N3)+COEF2(NLS-1,4,N3)
  180 END DO
!
!         STORE PATCHES
!
  190 DO 270 L=2,NLS
      DO 210 N3=1,3
      DO 200 M=1,2
      MM=MOD(M,2)
      LL=L-MM
      PATCH(M,1,N3)=COEF1(LL,4,N3)
      PATCH(M,2,N3)=COEF2(LL,4,N3)
      PATCH(M,3,N3)=SLOPE(N-1,LL,N3)
      PATCH(M,4,N3)=SLOPE(N,LL,N3)
      PATCH(M+2,1,N3)=COEF1(LL,3,N3)
      PATCH(M+2,2,N3)=COEF2(LL,3,N3)
      PATCH(M+2,3,N3)=0.
      PATCH(M+2,4,N3)=0.
  200 END DO
  210 END DO
!
!         COMPUTE PATCH IN FORM OF S=MBM(TRANSPOSE) AND WRITE ON TAPE
!
      DO 260 N3=1,3
      DO 230 I4=1,4
      DO 230 J4=1,4
      SUM=0.
      DO 220 K4=1,4
  220 SUM=SUM+XMAT(I4,K4)*PATCH(K4,J4,N3)
  230 PAT(I4,J4)=SUM
!
      DO 250 I4=1,4
      DO 250 J4=1,4
      SUM=0.
      DO 240 K4=1,4
  240 SUM=SUM+PAT(I4,K4)*XMAT(J4,K4)
  250 PATCH(I4,J4,N3)=SUM
  260 END DO
      WRITE(14)PATCH
  270 END DO
!
!         MOVE COEFFICIENTS
!
      DO 280 N3=1,3
      DO 280 N4=1,4
      DO 280 NN=1,NLS
      COEF1(NN,N4,N3)=COEF2(NN,N4,N3)
  280 CONTINUE
  290 END DO
      RETURN
      END


      SUBROUTINE SPFIT (MAXN,N,PNT,ELEN,COEF,NFIT,MAXSP,II,EPS,CPT,K1,K2&
     &)
!
!         COMPUTES PARAMETRIC CUBIC SPLINE COEFICIENTS TO
!         APPROXIMATE A SMOOTH CURVE THROUGH A 30 SET OF INPUT
!         POINTS AND OPTIONALLY COMPUTES AN ENRICHED CURVE
!         MAXN IS THE MAXIMUM NUMBER OF INPUT POINTS ALLOWED
!         N IS THE ACTUAL NO. OF INPUT POINTS
!         NFIT IS THE NUMBER OF DESIRED SPLINED POINTS BETWEEN GIVEN
!              POINTS
!         MAXSP IS THE MAXIMUM NUMBER OF SPLINED POINTS ALLOWED,
!              MAXSP=(MAXN-1)*(MAX,NF1T+1)+1 FOR EPS OF 0.
!              MAXSP=0 OMITS COMPUTATION OF ENRICHED CURVE
!         11 IS THE NO. OF POINTS IN THE ENRICHED CURVE
!         K1 IS AN INTEGER SUPPLIED BY THE USER
!              K1=1,RETAIN ALL INPUT POINTS
!              K1=2,INCLUDE INPUT POINTS IN SECOND DERIVATIVE TEST
!         K2 IS AN INTEGER SUPPLIED BY SPFIT AS AN ERROR CODE
!              K2=1,NORMAL RETURN
!              K2=2,INCUMPLETE FAIRED CURVE WHEN MAXSP IS EXCEEDED
!
!         PROGRAMER - CHARLUTTE CRAIDON   2-1-71
!
      DIMENSION PNT(MAXN,3),ELEN(MAXN),COEF(MAXN,4,3),CPT(MAXSP,3)
      DIST(X1,Y1,Z1,X2,Y2,Z2)=SQRT((X2-X1)**2+(Y2-Y1)**2+(Z2-Z1)**2)
          N1=N-1
!
!         COMPUTE CHORD LENGHTS
!
      DO 10 NN=2,N
      ELEN(NN-1)=DIST(PNT(NN-1,1),PNT(NN-1,2),PNT(NN-1,3),PNT(NN,1),PNT(&
     &NN,2),PNT(NN,3))
   10 END DO
!
!         SETUP COEFFICIENT MATRIX WITH UNCLAMPED END POINTS
!         (NU DER=U. AT PL AND PN)
!
      COEF(1,1,1)=0.
      COEF(1,1,2)=2.
      COEF(1,1,3)=1.
      COEF(N,1,1)=1.
      COEF(N,1,2)=2.
      COEF(N,1,3)=0.
      DO 20 NN=2,N1
      COEF(NN,1,1)=ELEN(NN)
      COEF(NN,1,2)=2.*(ELEN(NN-1)+ELEN(NN))
      COEF(NN,1,3)=ELEN(NN-1)
   20 END DO
!
!         SOLVE FOR SLOPES
!
      DO 60 I=1,3
      COEF(1,4,1)=(3./ELEN(1))*(PNT(2,I)-PNT(1,I))
      COEF(N,4,1)=(3./ELEN(N-1))*(PNT(N,I)-PNT(N-1,I))
      DO 30 NN=2,N1
      COEF(NN,4,1)=(3./(ELEN(NN-1)*ELEN(NN)))*(ELEN(NN-1)**2*(PNT(NN+1,I&
     &)-PNT(NN,I))+ELEN(NN)**2*(PNT(NN,I)-PNT(NN-1,I)))
   30 END DO
!
!         SOLVE TRIDIAGONAL MATRIX
!
      COEF(1,2,1)=COEF(1,1,3)/COEF(1,1,2)
      COEF(1,3,I)=COEF(1,4,1)/COEF(1,1,2)
      DO 40 K=2,N
      KM1=K-1
      TEMP=COEF(K,1,2)-COEF(K,1,1)*COEF(KM1,2,1)
      COEF(K,2,1)=COEF(K,1,3)/TEMP
      COEF(K,3,I)=(COEF(K,4,1)-COEF(K,1,1)*COEF(KM1,3,I))/TEMP
   40 END DO
      DO 50 K=1,N1
      KK=N-K
      COEF(KK,3,I)=COEF(KK,3,I)-COEF(KK,2,1)*COEF(KK+1,3,I)
   50 END DO
   60 END DO
!
!         COMPUTE CUBIC COEFFICIENTS FOR EACH SEGMENT
!
      DO 70 NN=1,N1
      EL=1./ELEN(NN)
      EL2=EL*EL
      EL3=EL*EL2
      DO 70 I=1,3
      COEF(NN,4,I)=PNT(NN,I)
      E=PNT(NN+1,I)-PNT(NN,I)
      COEF(NN,2,I)=E*EL2*3.-EL*(2.*COEF(NN,3,I)+COEF(NN+1,3,I))
      COEF(NN,1,I)=-E*EL3*2.+EL2*(COEF(NN,3,I)+COEF(NN+1,3,I))
!
!         REFERENCE LENGTH TO 1.
!
      COEF(NN,1,I)=COEF(NN,1,I)/EL3
      COEF(NN,2,I)=COEF(NN,2,I)/EL2
      COEF(NN,3,I)=COEF(NN,3,I)/EL
   70 CONTINUE
      IF (MAXSP.EQ.0) RETURN
      IF (K1.EQ.0) K1=1
      II=0
!
!         COMPUTE ENRICHED POINTS
!
      IFIT=NFIT+1
      XFIT=IFIT
      DELT=1./XFIT
      DO 110 NN=1,N1
      DO 100 NF=1,IFIT
      E=NF-1
      T=DELT*E
      IF (NN.EQ.1.AND.NF.EQ.1) GO TO 80
      IF (NF.EQ.1.AND.K1.EQ.1) GO TO 80
      T6=6.*T
      EX=ABS(T6*COEF(NN,1,1)+2.*COEF(NN,2,1))
      EY=ABS(T6*COEF(NN,1,2)+2.*COEF(NN,2,2))
      EZ=ABS(T6*COEF(NN,1,3)+2.*COEF(NN,2,3))
      EE=(EX+EY+EZ)/(ELEN(NN)*ELEN(NN))
      IF (EE.LT.ESP) GO TO 100
   80 II=II+1
      IF (II.GT.MAXSP) GO TO 130
      T2=T*T
      T3=T*T2
      DO 90 I=1,3
   90 CPT(II,I)=T3*COEF(NN,1,I)+T2*COEF(NN,2,I)+T*COEF(NN,3,I)+COEF(NN,4&
     &,I)
  100 END DO
  110 END DO
      II=II+1
      IF (II.GT.MAXSP) GO TO 130
      DO 120 I=1,3
  120 CPT(II,I)=PNT(N,I)
      K2=1
      RETURN
  130 K2=2
      RETURN
      END


      SUBROUTINE START
!
!         INPUTS AIRCRAFT SURFACE DESCRIPTION.
!         FORMS INTO DESCRIPTIVE LINES WRITTEN ON TAPE 10,
!         AND COMPUTES MINIMUMS AND MAXIMUMS
!
      COMMON /PATPLT/ XMIN,XMAX,YMIN,YMAX,ZMIN,ZMAX,NOBJ
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
!
      DIMENSION BLOCK(7500)
!
      DIMENSION XAF(30),WAFORG(20,4),WAFORD(20,3,30),TZORD(20,30)
      EQUIVALENCE (BLOCK(1),XAF(1)),(BLOCK(31),WAFORG(1,1)),            &
     &(BLOCK(111),WAFORD(1,1,1)),(BLOCK(1911),TZORD(1,1))
!
      DIMENSION XFUS(30,4),ZFUS(30,4),FUSARD(30,4),FUSRAD(30,4)
      DIMENSION SFUS(30,30,8)
      EQUIVALENCE (BLOCK(1),XFUS(1,1)),(BLOCK(121),ZFUS(1,1)),(BLOCK(241&
     &),FUSARD(1,1)),(BLOCK(361),FUSRAD(1,1)),(BLOCK(241),SFUS(1,1,1))
!
      DIMENSION PODORG(9,3),XPOD(9,30),PODORD(9,30),XPOD1(9,30)
      EQUIVALENCE (BLOCK(1),PODORG(1,1)),(BLOCK(28),XPOD(1,1)),(BLOCK(29&
     &8),PODORD(1,1)),(BLOCK(568),XPOD1(1,1))
!
      DIMENSION FINORG(6,2,4),XFIN(6,10),FINORD(6,2,10)
      DIMENSION FINX2(6,2,10),FINX3(6,2,10)
      EQUIVALENCE (BLOCK(1),FINORG(1,1,1)),(BLOCK(49),XFIN(1,1)),(BLOCK(&
     &109),FINORD(1,1,1)),(BLOCK(229),FINX2(1,1,1)),(BLOCK(349),FINX3(1,&
     &1,1))
!
      DIMENSION CANORG(2,2,4),XCAN(2,10),CANORD(2,2,10)
      DIMENSION CANOR1(2,2,10),CANORX(2,2,10)
      EQUIVALENCE (BLOCK(1),CANORG(1,1,1)),(BLOCK(17),XCAN(1,1)),(BLOCK(&
     &37),CANORD(1,1,1)),(BLOCK(77),CANOR1(1,1,1)),(BLOCK(117),CANORX(1,&
     &1,1))
!
      DIMENSION ABC(20),ABCD(20),ANSIN(30),ANCOS(30),NAME(2)
      DIMENSION NRADX(4),NFORX(4)
      DIMENSION ALRT (31,3),ADATA(19)
      DATA PI/3.14159265/
      DATA NAME(1),NAME(2)/4HWING,4H    /,AER/4HAERO/,                  &
     &NAM2,NAM3,NAM4,NAM5/4HFUSE,4HPODS,4HFINS,4HCANA/
      INTEGER:: errCode
!----------------------------------------------------------------------------
      ITAPEX=32
      REWIND ITAPEX
    4 READ(IREAD,10,IOSTAT=errCode) AIN,ADATA
      WRITE(ITAPEX,10) AIN,ADATA

      IF (errCode < 0) GO TO 6
!      IF(EOF(IREAD)) 6,6666
 6666 CONTINUE
      IF(AIN.EQ.AER) GO TO 6
      GO TO 4
    6 CONTINUE
      REWIND ITAPEX
!
      REWIND 10
   10 FORMAT (20A4)
   20 FORMAT (1X,20A4)
   30 FORMAT (10F7.0)
   31 FORMAT (1X,10F7.3)
   32 FORMAT(1X,10F7.4)
!
!         READ ID CARD AND CARD OF CONTROL INTEGERS
!
      READ (ITAPEX,10) ABC
      WRITE (IWRIT,50) ABC
   50 FORMAT (23X,34HAIRCRAFT CONFIGURATION DESCRIPTION//1X,20A4/)
      READ(ITAPEX,70)          J0,J1,J2,J3,J4,J5,J6,NWAF,NWAFOR,NFUS,   &
     &(NRADX(I),NFORX(I),I=1,4),NP,NPODOR,NF,NFINOR,NCAN,NCANOR
      WRITE(IWRIT,71)         J0,J1,J2,J3,J4,J5,J6,NWAF,NWAFOR,NFUS,    &
     &(NRADX(I),NFORX(I),I=1,4),NP,NPODOR,NF,NFINOR,NCAN,NCANOR
   70 FORMAT (24I3)
   71 FORMAT (24I3/)
!
      WRITE (10) ABC
      NOBJ=0
!
!         REFERENCE AREA
!
      IF (J0.NE.1) GO TO 80
      READ (ITAPEX,10) ABCD
      IF(IOUT2.NE.2) WRITE (IWRIT,20) ABCD
!
!         WING
!
   80 JJ=IABS(J1)
      IF (JJ.NE.1) GO TO 290
      N=IABS(NWAFOR)
      NREC=(N+9)/10
      I1=-9
      I2=0
      DO 90 NN=1,NREC
      I1=I1+10
      I2=I2+10
      READ(ITAPEX,30)          (XAF(I),I=I1,I2)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (XAF(I),I=I1,I2)
   90 END DO
      DO 100 I=1,NWAF
      READ(ITAPEX,30)          (WAFORG(I,J),J=1,4)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (WAFORG(I,J),J=1,4)
  100 END DO
      IF (J1.LT.0) GO TO 130
      DO 120 NN=1,NWAF
      I1=-9
      I2=0
      DO 110 N1=1,NREC
      I1=I1+10
      I2=I2+10
      READ(ITAPEX,30)          (TZORD(NN,I),I=I1,I2)
      IF(IOUT2.NE.2) WRITE(IWRIT,32)(TZORD(NN,I),I=I1,I2)
  110 END DO
  120 END DO
      GO TO 150
  130 DO 140 I=1,NWAF
      DO 140 K=1,N
  140 TZORD(I,K)=0.
  150 L=1
      IF (NWAFOR.LT.0) L=2
      DO 170 NN=1,NWAF
      DO 170 K=1,L
      I1=-9
      I2=0
      DO 160 NI=1,NREC
      I1=I1+10
      I2=I2+10
      READ(ITAPEX,30)          (WAFORD(NN,K,I),I=I1,I2)
      IF(IOUT2.NE.2) WRITE(IWRIT,32)(WAFORD(NN,K,I),I=I1,I2)
  160 END DO
  170 CONTINUE
      IF(IOUT2.NE.2) WRITE (IWRIT,17)
   17 FORMAT (10X,27H*** END OF AIRFOIL DATA ***)
      IF (NWAFOR.LT.0) GO TO 190
      DO 180 NN=1,NWAF
      DO 180 K=1,N
  180 WAFORD(NN,2,K)=WAFORD(NN,1,K)
  190 CONTINUE
      NWAFOR=IABS(NWAFOR)
      NW=NWAFOR
      J1=IABS(J1)
!
!         CHANGE TO ACTUAL UNITS,COMPUTE MINIMUMS AND MAXIMUMS
!
      DO 210 I=1,NWAF
      E=.01*WAFORG(I,4)
      E3=WAFORG(I,3)
      DO 200 J=1,NWAFOR
      WAFORD(I,1,J)=E*WAFORD(I,1,J)+E3+TZORD(I,J)
      WAFORD(I,2,J)=-E*WAFORD(I,2,J)+E3+TZORD(I,J)
      WAFORD(I,3,J)=WAFORG(I,1)+E*XAF(J)
  200 END DO
  210 END DO
      XMIN=WAFORG(1,1)
      XMAX=WAFORG(1,1)
      YMAX=WAFORG(1,2)
      YMIN=WAFORG(1,2)
      ZMIN=WAFORD(1,1,1)
      ZMAX=WAFORD(1,1,1)
      DO 230 N=1,NWAF
      XMAX=AMAX1(XMAX,WAFORD(N,3,NW))
      XMIN=AMIN1(XMIN,WAFORD(N,3,1))
      YMAX=AMAX1(YMAX,WAFORG(N,2))
      YMIN=AMIN1(YMIN,WAFORG(N,2))
      DO 220 NN=1,NW
      ZMAX=AMAX1(ZMAX,WAFORD(N,1,NN))
      ZMIN=AMIN1(ZMIN,WAFORD(N,2,NN))
  220 END DO
  230 END DO
!
!         WRITE LINE TAPE
!
      NN=2
      NCOMP=1
      WRITE (10) NN,NCOMP,NAME,NN,NN
      NOBJ=NOBJ+1
      DO 280 I=1,2
      WRITE (10) NWAF,NWAFOR,NN,NN,NN
      KKK=0
      KK=1
!
!         SETUP SPANWISE LINES
!
      DO 250 K=1,NWAFOR
      NN=KKK+KK*K
      DO 240 N=1,NWAF
      ALRT(N,1)=WAFORD(N,3,NN)
      ALRT(N,2)=WAFORG(N,2)
      ALRT(N,3)=WAFORD(N,I,NN)
  240 END DO
      WRITE (10) ((ALRT(N,N3),N=1,NWAF),N3=1,3)
  250 END DO
!
!         SETUP STREAMWISE LINES
!
      DO 270 NN=1,NWAF
      DO 260 K=1,NWAFOR
      N=KKK+KK*K
      ALRT(K,1)=WAFORD(NN,3,N)
      ALRT(K,2)=WAFORG(NN,2)
      ALRT(K,3)=WAFORD(NN,I,N)
  260 END DO
      WRITE (10) ((ALRT(N,N3),N=1,NW),N3=1,3)
  270 END DO
  280 END DO
!
!         FUSELAGE
!
  290 JJ=IABS(J2)
      IF (JJ.NE.1) GO TO 590
      J2TEST=3
      IF (J2.EQ.-1.AND.J6.EQ.-1) J2TEST=1
      IF (J2.EQ.-1.AND.J6.EQ.0) J2TEST=2
      IF (J6.EQ.1) J2TEST=1
      J2=1
      DO 410 NFU=1,NFUS
      NRAD=NRADX(NFU)
      NFUSOR=NFORX(NFU)
      N=NFUSOR
      NREC=(N+9)/10
      I1=-9
      I2=0
      DO 300 N1=1,NREC
      I1=I1+10
      I2=I2+10
      READ(ITAPEX,30)          (XFUS(I,NFU),I=I1,I2)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (XFUS(I,NFU),I=I1,I2)
  300 END DO
      IF (J2TEST.NE.2) GO TO 320
      I1=-9
      I2=0
      DO 310 N1=1,NREC
      I1=I1+10
      I2=I2+10
      READ(ITAPEX,30)          (ZFUS(I,NFU),I=I1,I2)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (ZFUS(I,NFU),I=I1,I2)
  310 END DO
      GO TO 340
  320 DO 330 I=1,N
  330 ZFUS(I,NFU)=0.
  340 IF (J2TEST.NE.3) GO TO 380
      NCARD=(NRAD+9)/10
      DO 370 LN=1,N
      DO 360 K=1,2
      KK=K+(NFU-1)*2
      II=10
      I1=-9
      I2=0
      DO 350 NN=1,NCARD
      IF (NN.EQ.NCARD) II=MOD(NRAD,10)
      IF (II.EQ.0) II=10
      I1=I1+10
      I2=I2+II
      READ(ITAPEX,30)          (SFUS(I,LN,KK),I=I1,I2)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (SFUS(I,LN,KK),I=I1,I2)
  350 END DO
  360 END DO
  370 END DO
      GO TO 410
  380 I1=-9
      I2=0
      DO 390 N1=1,NREC
      I1=I1+10
      I2=I2+10
      READ(ITAPEX,30)          (FUSARD(I,NFU),I=I1,I2)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (FUSARD(I,NFU),I=I1,I2)
  390 END DO
      DO 400 I=1,N
      FUSRAD(I,NFU)=SQRT(FUSARD(I,NFU)/PI)
  400 END DO
!
  410 END DO
!
!         FUSELAGE MIN AND MAX
!
      IF (J1.NE.0) GO TO 430
      XMIN=XFUS(1,1)
      XMAX=XFUS(1,1)
      IF (J2TEST.EQ.3) GO TO 420
      YMIN=FUSRAD(1,1)
      YMAX=FUSRAD(1,1)
      ZMIN=-FUSRAD(1,1)+ZFUS(1,1)
      ZMAX=FUSRAD(1,1)+ZFUS(1,1)
      GO TO 430
  420 YMAX=SFUS(1,1,1)
      YMIN=SFUS(1,1,1)
      ZMIN=SFUS(1,1,2)
      ZMAX=SFUS(1,1,2)
  430 DO 470 N=1,NFUS
      NRAD=NRADX(N)
      NFUSOR=NFORX(N)
      XMIN=AMIN1(XMIN,XFUS(1,N))
      XMAX=AMAX1(XMAX,XFUS(NFUSOR,N))
      DO 460 NN=1,NFUSOR
      IF (J2TEST.EQ.3) GO TO 440
      YMAX=AMAX1(YMAX,FUSRAD(NN,N))
      YMIN=AMIN1(YMIN,FUSRAD(NN,N))
      ZMAX=AMAX1(ZMAX,FUSRAD(NN,N)+ZFUS(NN,N))
      ZMIN=AMIN1(ZMIN,-FUSRAD(NN,N)+ZFUS(NN,N))
      GO TO 460
  440 KK=1+(N-1)*2
      DO 450 NR=1,NRAD
      YMIN=AMIN1(YMIN,SFUS(NR,NN,KK))
      YMAX=AMAX1(YMAX,SFUS(NR,NN,KK))
      ZMIN=AMIN1(ZMIN,SFUS(NR,NN,KK+1))
  450 ZMAX=AMAX1(ZMAX,SFUS(NR,NN,KK+1))
  460 END DO
  470 END DO
!
!         WRITE LINE TAPE
!
      JJN=2
      N1=1
      NAME(1)=NAM2
      NOBJ=NOBJ+NFUS
      DO 580 NFU=1,NFUS
      NRAD=NRADX(NFU)
      NFUSOR=NFORX(NFU)
      WRITE (10) N1,JJN,NAME,N1,N1
      WRITE (10) NFUSOR,NRAD,N1,N1,N1
      NAN=NRAD
      IF (J2TEST.EQ.3) GO TO 490
      FANG=(NRAD-1)*2
      DELE=6.2831853/FANG
      DO 480 N=1,NAN
      E=N-1
      ANSIN(N)=SIN(E*DELE+4.712389)
      ANCOS(N)=COS(E*DELE+4.712389)
  480 END DO
  490 CONTINUE
      KK=1+(NFU-1)*2
!
!         SETUP STRAMWISE LINES
!
      DO 530 N=1,NAN
      DO 520 NN=1,NFUSOR
      ALRT(NN,1)=XFUS(NN,NFU)
      IF (J2TEST.EQ.3) GO TO 500
      ALRT(NN,2)=FUSRAD(NN,NFU)*ANCOS(N)
      ALRT(NN,3)=FUSRAD(NN,NFU)*ANSIN(N)+ZFUS(NN,NFU)
      GO TO 510
  500 ALRT(NN,2)=SFUS(N,NN,KK)
      ALRT(NN,3)=SFUS(N,NN,KK+1)
  510 CONTINUE
  520 END DO
      WRITE (10) ((ALRT(M,N3),M=1,NFUSOR),N3=1,3)
  530 END DO
!
!         SETUP LINES AROUND BODY
!
      DO 570 N=1,NFUSOR
      DO 560 NN=1,NAN
      ALRT(NN,1)=XFUS(N,NFU)
      IF (J2TEST.EQ.3) GO TO 540
      ALRT(NN,2)=FUSRAD(N,NFU)*ANCOS(NN)
      ALRT(NN,3)=FUSRAD(N,NFU)*ANSIN(NN)+ZFUS(N,NFU)
      GO TO 550
  540 ALRT(NN,2)=SFUS(NN,N,KK)
      ALRT(NN,3)=SFUS(NN,N,KK+1)
  550 CONTINUE
  560 END DO
      WRITE (10) ((ALRT(M,N3),M=1,NAN),N3=1,3)
  570 END DO
  580 END DO
!
!         NACELLES
!
  590 CONTINUE
      IF(IOUT2.NE.2) WRITE (IWRIT,18)
   18 FORMAT (10X,28H*** END OF FUSELAGE DATA ***)
      IF (J3.NE.1) GO TO 730
      N=NPODOR
      NREC=(N+9)/10
      DO 620 NN=1,NP
      I1=-9
      I2=0
      READ(ITAPEX,30)          (PODORG(NN,I),I=1,3)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (PODORG(NN,I),I=1,3)
      DO 600 N1=1,NREC
      I1=I1+10
      I2=I2+10
      READ(ITAPEX,30)          (XPOD(NN,I),I=I1,I2)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (XPOD(NN,I),I=I1,I2)
  600 END DO
      I1=-9
      I2=0
      DO 610 N1=1,NREC
      I1=I1+10
      I2=I2+10
      READ(ITAPEX,30)          (PODORD(NN,I),I=I1,I2)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (PODORD(NN,I),I=I1,I2)
  610 END DO
  620 END DO
      IF(IOUT2.NE.2) WRITE (IWRIT,19)
   19 FORMAT (10X,25H***  END OF POD DATA  ***)
!
!         COMPUTE ACTUAL X,MINIMUM,MAXIMUM
!
      DO 630 N=1,NP
      DO 630 NN=1,NPODOR
  630 XPOD1(N,NN)=XPOD(N,NN)+PODORG(N,1)
      IF (J1.NE.0.OR.J2.NE.0) GO TO 640
      XMIN=XPOD1(1,1)
      XMAX=XPOD1(1,NPODOR)
      YMIN=PODORG(1,2)+PODORD(1,1)
      YMAX=PODORG(1,2)+PODORD(1,1)
      ZMIN=PODORG(1,3)-PODORD(1,1)
      ZMAX=PODORG(1,3)+PODORD(1,1)
  640 DO 660 N=1,NP
      XMIN=AMIN1(XMIN,XPOD1(N,1))
      XMAX=AMAX1(XMAX,XPOD1(N,NPODOR))
      DO 650 NN=1,NPODOR
      YMIN=AMIN1(YMIN,PODORD(N,NN)+PODORG(N,2))
      YMAX=AMAX1(YMAX,PODORD(N,NN)+PODORG(N,2))
      ZMIN=AMIN1(ZMIN,PODORG(N,3)-PODORD(N,NN))
  650 ZMAX=AMAX1(ZMAX,PODORG(N,3)+PODORD(N,NN))
  660 END DO
      DATA NAN2/4/,PIPL/4.712389/
      NANG1=NAN2+1
      NANG2=2*NAN2+1
      FANG=NAN2*2
      DELE=6.2831853/FANG
      DO 670 N=1,NANG2
      E=N-1
      EE=E*DELE
      ANSIN(N)=SIN(EE+PIPL)
  670 ANCOS(N)=COS(EE+PIPL)
!
!         WRITE LINE TAPE
!
      JJN=3
      NAME(1)=NAM3
      NOBJ=NOBJ+NP
      DO 720 NP1=1,NP
      I=2
      IF (PODORG(NP1,2).EQ.0.) I=1
      WRITE (10) I,JJN,NAME,I,I
      DO 720 I=1,2
      IF(I.EQ.2.AND.PODORG(NP1,2).EQ.0.) GO TO 720
      WRITE(10) NPODOR,NANG1,I,I,I
!
!         SETUP STREAMWISE LINES
!
      DO 690 K=1,NANG1
      NN=(I-1)*NAN2+K
      DO 680 N=1,NPODOR
      ALRT(N,1)=XPOD(NP1,N)+PODORG(NP1,1)
      ALRT(N,2)=PODORD(NP1,N)*ANCOS(NN)+PODORG(NP1,2)
      ALRT(N,3)=PODORD(NP1,N)*ANSIN(NN)+PODORG(NP1,3)
  680 END DO
      WRITE (10)((ALRT(N,N3),N=1,NPODOR),N3=1,3)
  690 END DO
!
!         SETUP LINES AROUND PODS
!
      DO 710 N=1,NPODOR
      DO 700 K=1,NANG1
      NN=(I-1)*NAN2+K
      ALRT(K,1)=XPOD(NP1,N)+PODORG(NP1,1)
      ALRT(K,2)=PODORD(NP1,N)*ANCOS(NN)+PODORG(NP1,2)
      ALRT(K,3)=PODORD(NP1,N)*ANSIN(NN)+PODORG(NP1,3)
  700 END DO
      WRITE (10) ((ALRT(K,N3),K=1,NANG1),N3=1,3)
  710 END DO
  720 CONTINUE
!
!         FINS
!
  730 CONTINUE
      IF (J4.NE.1) GO TO 890
      N=NFINOR
      DO 740 NN=1,NF
      READ(ITAPEX,30)          ((FINORG(NN,I,J),J=1,4),I=1,2)
      IF(IOUT2.NE.2) WRITE(IWRIT,31) ((FINORG(NN,I,J),J=1,4),I=1,2)
      READ(ITAPEX,30)          (XFIN(NN,I),I=1,N)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (XFIN(NN,I),I=1,N)
      READ(ITAPEX,30)          (FINORD(NN,1,J),J=1,N)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (FINORD(NN,1,J),J=1,N)
  740 END DO
!
!         CHANGE TO ACTUAL UNITS, COMPUTE MININUMS AND MAXIMUMS
!
      DO 760 LQ=1,NF
      DO 760 I=1,2
      J=3-I
      E=.01*FINORG(LQ,J,4)
      E2=FINORG(LQ,J,2)
      DO 750 K=1,NFINOR
      EE=FINORD(LQ,1,K)*E
      FINORD(LQ,J,K)=E2+EE
      FINX2(LQ,J,K)=E2-EE
  750 FINX3(LQ,J,K)=FINORG(LQ,J,1)+E*XFIN(LQ,K)
  760 CONTINUE
!
      IF (J1.NE.0.OR.J2.NE.0.OR.J3.NE.0) GO TO 770
      XMIN=FINORG(1,1,1)
      XMAX=FINORG(1,1,1)
      YMIN=FINORG(1,1,2)
      YMAX=FINORG(1,1,2)
      ZMIN=FINORG(1,1,3)
      ZMAX=FINORG(1,1,3)
  770 DO 780 N=1,NF
      ZMIN=AMIN1(ZMIN,FINORG(N,1,3))
      ZMAX=AMAX1(ZMAX,FINORG(N,2,3))
      DO 780 N2=1,2
      XMIN=AMIN1(XMIN,FINORG(N,N2,1))
      XMAX=AMAX1(XMAX,FINX3(N,N2,NFINOR))
      DO 780 NN=1,NFINOR
      YMIN=AMIN1(YMIN,FINX2(N,N2,NN))
      YMAX=AMAX1(YMAX,FINORD(N,N2,NN))
  780 CONTINUE
!
!         WRITE LINE TAPE
!
      JJN=4
      NAME(1)=NAM4
      NOBJ=NOBJ+NF
      NK2=2
      DO 880 NF1=1,NF
      I=2
      IF (FINORG(NF1,1,2).EQ.0.) I=1
      WRITE (10) I,JJN,NAME,I,I
      DO 870 NN2=1,2
      IF (NN2.EQ.2.AND.FINORG(NF1,1,2).EQ.0.) GO TO 870
      WRITE (10) NFINOR,NK2,I,I,I
      I1=1
      I2=2
      IF (NN2.EQ.1) GO TO 790
      I1=2
      I2=1
  790 CONTINUE
!
!         SETUP HORIZONTAL LINES
!
      DO 810 N=1,NFINOR
      ALRT(N,1)=FINX3(NF1,I1,N)
      ALRT(N,3)=FINORG(NF1,I1,3)
      IF (NN2.EQ.2) GO TO 800
      ALRT(N,2)=FINORD(NF1,I1,N)
      GO TO 810
  800 ALRT(N,2)=FINX2(NF1,I1,N)
  810 END DO
      WRITE (10) ((ALRT(N,N3),N=1,NFINOR),N3=1,3)
      DO 830 N=1,NFINOR
      ALRT(N,1)=FINX3(NF1,I2,N)
      ALRT(N,3)=FINORG(NF1,I2,3)
      IF (NN2.EQ.2) GO TO 820
      ALRT(N,2)=FINORD(NF1,I2,N)
      GO TO 830
  820 ALRT(N,2)=FINX2(NF1,I2,N)
  830 END DO
      WRITE (10) ((ALRT(N,N3),N=1,NFINOR),N3=1,3)
!
!         SETUP VERTICAL LINES
!
      DO 860 NN=1,NFINOR
      ALRT(1,1)=FINX3(NF1,I1,NN)
      ALRT(2,1)=FINX3(NF1,I2,NN)
      ALRT(1,3)=FINORG(NF1,I1,3)
      ALRT(2,3)=FINORG(NF1,I2,3)
      IF (NN2.EQ.2) GO TO 840
      ALRT(1,2)=FINORD(NF1,I1,NN)
      ALRT(2,2)=FINORD(NF1,I2,NN)
      GO TO 850
  840 ALRT(1,2)=FINX2(NF1,I1,NN)
      ALRT(2,2)=FINX2(NF1,I2,NN)
  850 WRITE (10) ((ALRT(N,N3),N=1,2),N3=1,3)
  860 END DO
  870 END DO
  880 END DO
      IF(IOUT2.NE.2) WRITE (IWRIT,22)
   22 FORMAT (10X,23H*** END OF FIN DATA ***)
!
!         CANARDS
!
  890 CONTINUE
      IF (J5.NE.1) GO TO 1080
      N=IABS(NCANOR)
      DO 920 NN=1,NCAN
      READ(ITAPEX,30)          ((CANORG(NN,I,J),J=1,4),I=1,2)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)   ((CANORG(NN,I,J),J=1,6),I=1,2)
      READ(ITAPEX,30)          (XCAN(NN,I),I=1,N)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (XCAN(NN,I),I=1,N)
      READ(ITAPEX,30)          (CANORD(NN,1,J),J=1,N)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (CANORD(NN,1,J),J=1,N)
      IF (NCANOR.LT.0) GO TO 910
      DO 900 J=1,N
  900 CANOR1(NN,1,J)=CANORD(NN,1,J)
      GO TO 920
  910 READ(ITAPEX,30)          (CANOR1(NN,1,J),J=1,N)
      IF(IOUT2.NE.2) WRITE(IWRIT,31)         (CANOR1(NN,1,J),J=1,N)
  920 END DO
      NCANOR=IABS(NCANOR)
      NC=NCANOR
      IF(IOUT2.NE.2) WRITE (IWRIT,23)
   23 FORMAT (10X,26H*** END OF CANARD DATA ***)
!
!         CHANGE TO ACTUAL UNITS, COMPUTE MINIMUMS AND MAXIMUMS
!
      DO 950 NN=1,NCAN
      DO 940 K=1,2
      I=3-K
      E=.01*CANORG(NN,1,4)
      E3=CANORG(NN,I,3)
      DO 930 J=1,NCANOR
      CANORD(NN,I,J)=E*CANORD(NN,1,J)+E3
      CANOR1(NN,I,J)=-E*CANOR1(NN,1,J)+E3
  930 CANORX(NN,I,J)=CANORG(NN,I,1)+E*XCAN(NN,J)
  940 END DO
  950 END DO
      IF (J1.NE.0.OR.J2.NE.0.OR.J3.NE.0.OR.J4.NE.0) GO TO 960
      XMIN=CANORX(1,1,1)
      XMAX=CANORX(1,1,NCANOR)
      YMIN=CANORG(1,2,2)
      YMAX=CANORG(1,2,2)
      ZMIN=CANOR1(1,1,1)
      ZMAX=CANORD(1,1,1)
  960 DO 990 NCA=1,NCAN
      YMIN=AMIN1(YMIN,CANORG(NCA,1,2))
      YMAX=AMAX1(YMAX,CANORG(NCA,2,2))
      DO 980 N2=1,2
      XMIN=AMIN1(XMIN,CANORX(NCA,N2,I))
      XMAX=AMAX1(XMAX,CANORX(NCA,N2,NCANOR))
      DO 970 NN=1,NCANOR
      ZMIN=AMIN1(ZMIN,CANOR1(NCA,N2,NN))
  970 ZMAX=AMAX1(ZMAX,CANORD(NCA,N2,NN))
  980 END DO
  990 END DO
!
!         WRITE LINE TAPE
!
      JJN=5
      NAME(1)=NAM5
      NOBJ=NOBJ+NCAN
      NK2=2
      DO 1070 NCA=1,NCAN
      WRITE (10) NK2,JJN,NAME,NK2,NK2
      DO 1060 I=1,2
      WRITE (10) NK2,NC,NK2,NK2,NK2
      KKK=(I-1)*(NC+1)
      KX=(-1)**(I+1)
!
!         SETUP SPANWISE LINES
!
      DO 1020 K=1,NC
      NN=KKK+KK*K
      DO 1010 N2=1,2
      ALRT(N2,1)=CANORX(NCA,N2,NN)
      ALRT(N2,2)=CANORG(NCA,N2,2)
      IF (I.EQ.2) GO TO 1000
      ALRT(N2,3)=CANORD(NCA,N2,NN)
      GO TO 1010
 1000 ALRT(N2,3)=CANOR1(NCA,N2,NN)
 1010 END DO
      WRITE (10) ((ALRT(N2,N3),N2=1,2),N3=1,3)
 1020 END DO
!
!         SETUP TWO STREAMWISE LINES
!
      DO 1050 N2=1,2
      DO 1040 N=1,NC
      J=KKK+KK*N
      ALRT(N,1)=CANORX(NCA,N2,J)
      ALRT(N,2)=CANORG(NCA,N2,2)
      IF (I.EQ.2) GO TO 1030
      ALRT(N,3)=CANORD(NCA,N2,J)
      GO TO 1040
 1030 ALRT(N,3)=CANOR1(NCA,N2,J)
 1040 END DO
      WRITE (10) ((ALRT(N,N3),N=1,NC),N3=1,3)
 1050 END DO
 1060 END DO
 1070 END DO
 1080 CONTINUE
      RETURN
!
!         END OF START
!
      END


      SUBROUTINE PACHXY
!
!
!      COMPUTE CORNER POINTS OF ALL PATCHES ANND STORE
!      MIN AND MAX VALUES OF EACH SET
!
!
      COMMON /XSECT/ ABCDE(20),PPL1(3),PPL2(3),PPL3(3),                 &
     &        PLOTSZ,HPAGE,VPAGE,INP,NOU,NOW,ISIDE,IPRIN,               &
     &        KODE,XSTAT,THETR,XMACH
      COMMON /PATBLK/ PATXY(4,600,2)
      DIMENSION NAME(2),ABC(20),PATCH(4,4,3),VCOR(4,3),VEC(4,3)
      DIMENSION PNT1(3),PNT2(3),PNT3(3)
      EQUIVALENCE (PNT1(1),PPL1(1)),(PNT2(1),PPL2(1)),(PNT3(1),PPL3(1))
!
!
!         BEGIN COMPUTING AND PLOTTING LINES OF INTERSECTION
!
      REWIND 14
      READ(14)ABC
      READ(14)H1,H2,H3,H4,H5,H6,NOBJ
      WRITE (6,82) NOBJ
   82 FORMAT (10X,5HNOBJ=,I5)
      DO 70 J=1,NOBJ
      READ(14)NSURF,JJ,NAME(1),NAME(2),JJ,JJ
      WRITE (6,50) NAME
   50 FORMAT (1X5A4)
      WRITE (6,83) NSURF
   83 FORMAT (10X,6HNSURF=,I5)
      DO 60 N=1,NSURF
      READ(14)ND1,NS1,J3,J4,J5
!
!         READS PATCHES FROM TAPE,
!         SOLVES FOR INTERSECTIONS BY SPECIFIED PLANE
!         AND PLOTS
!
      NPAT=ND1*NS1
      WRITE (6,555) NPAT
  555 FORMAT (10X,18HNUMBER OF PATCHES=,I5)
      DO 370 NNPAT=1,NPAT
      READ(14)PATCH
      U=0.
      W=0.
      DO 3 KC=1,4
      DO 1 J4=1,4
      DO 1 K3=1,3
      VEC(J4,K3)=((U*PATCH(1,J4,K3)+PATCH(2,J4,K3))*U+PATCH(3,J4,K3))*U+&
     &PATCH(4,J4,K3)
    1 CONTINUE
      DO 2 K3=1,3
      VCOR(KC,K3)=((W*VEC(1,K3)   +VEC(2,K3))*W+VEC(3,K3))*W+VEC(4,K3)
    2 END DO
      IF (KC.EQ.1) U=1.
      IF (KC.EQ.2) U=0.
      IF (KC.EQ.2) W=1.
      IF (KC.EQ.3) U=1.
    3 END DO
      XMIN=VCOR(1,1)
      XMAX=VCOR(1,1)
      YMIN=VCOR(1,2)
      YMAX=VCOR(1,2)
      DO 4 KC=1,4
      IF (VCOR(KC,1).LT.XMIN) XMIN=VCOR(KC,1)
      IF (VCOR(KC,1).GT.XMAX) XMAX=VCOR(KC,1)
      IF (VCOR(KC,2).LT.YMIN) YMIN=VCOR(KC,2)
      IF (VCOR(KC,2).GT.YMAX) YMAX=VCOR(KC,2)
    4 END DO
      PATXY(1,NNPAT,N)=XMIN
      PATXY(2,NNPAT,N)= XMAX
      PATXY(3,NNPAT,N)=YMIN
      PATXY(4,NNPAT,N)=YMAX
  370 END DO
   60 END DO
   70 END DO
      WRITE (6,889)
  889 FORMAT (10X,79H*** CORNER POINTS OF PATCHES HAVE BEEN COMPUTED AND&
     & STORED AS COMMON PATBLK ***)
      RETURN
!
!
      END


      SUBROUTINE TIPLE (XTIPIN,YTIP,ZTIP,YSIN,ZSIN)
!
!      FIND LEADING EDGE LOCATION AND FOCUS OF ELLIPSE
!
      COMMON /XSECT/ ABCDE(20),PPL1(3),PPL2(3),PPL3(3),                 &
     &        PLOTSZ,HPAGE,VPAGE,INP,NOU,NOW,ISIDE,IPRIN,               &
     &        KODE,XSTAT,THETR,XMACH
      COMMON /XPAT/NLE,NXLE(5),NXPAT(5),PATCHX(14400),PATCOR(4,150,2)
      COMMON /ERROR/ IERR
      DIMENSION A(3,3),NAME(2),ABC(20),PATCH(4,4,3)
      DIMENSION XPRM(3),PNT1(3),PNT2(3),PNT3(3),PNT4(3)
      EQUIVALENCE (PNT1(1),PPL1(1)),(PNT2(1),PPL2(1)),(PNT3(1),PPL3(1))
!
      XTIP=XTIPIN
!
      N=1
      IFLAG=0
      NX=NLE
      DO 370 NPATX=1,NX
      NNPAT=NXLE(NPATX)
      IF (XTIP.GT.PATCOR(2,NNPAT,N).OR.XTIP.LT.PATCOR(1,NNPAT,N)) GO TO &
     &777
      DO 800 II=1,4
      DO 800 JJ=1,4
      DO 800 KK=1,3
      PATCH(II,JJ,KK)=PATCHX(II+4*(JJ-1)+16*(KK-1)+48*(NNPAT-1)+        &
     & 7200*(N-1))
  800 CONTINUE
      CALL TSOLV(XTIP,YTIP,ZTIP,U,W,PATCH,IFLAG)
  777 IF (IFLAG.EQ.1) WRITE (6,779) XTIP,YTIP,ZTIP
  779 FORMAT (10X,5HXTIP=,F10.5,2X,5HYTIP=,F10.5,2X,5HZTIP=,F10.5)
      IF (IFLAG.EQ.1) GO TO 400
      IF (IFLAG.EQ.1) IERR=1
      IF (IFLAG.EQ.0) IERR=0
  370 END DO
      WRITE (6,701)
  701 FORMAT (1X,26HSEARCH FOR LE PATCH FAILED)
  400 CONTINUE
      RETURN
      END


      SUBROUTINE TSOLV (XIN,Y,Z,U,W,PATCH,IFLAG)
!
!      SOLVES FOR V(U=0,W) FROM PATCH EQUATION
!
      DIMENSION PATCH(4,4,3)
      IFLAG=1
      ITER=0
      U=0.
      WT=0.
      X=XIN
      CALL UWSOLV (XT,YT,ZT,U,WT,PATCH)
      WTN=1.
  500 CALL UWSOLV (XTN,YTN,ZTN,U,WTN,PATCH)
!     WRITE (6,501) XT,XTN
  501 FORMAT (10X,3HXT=,F10.5,2X,4HXTN=,F10.5)
      IF (ABS(YTN-YT) .LT.1.E-8.AND.ABS(XTN-XT).LT.1.E-8) GO TO 600
      WTNN=WTN+((WTN-WT)/(XTN-XT))*(X-XTN)
      ITER=ITER+1
      IF (ITER.GT.100) IFLAG=0
      IF (ITER.GT.100) WRITE (6,883)
  883 FORMAT (10X,32H*** ITERATION AT L.E. FAILED ***)
      IF (IFLAG.EQ.0) RETURN
      WT=WTN
      XT=XTN
      YT=YTN
      WTN=WTNN
      GO TO 500
  600 X=XTN
      IF(WTN.GT.1.0.OR.WTN.LT.0.0) IFLAG=0
      Y=YTN
      Z=ZTN
      RETURN
      END


      SUBROUTINE UWSOLV (X,Y,Z,U,W,PATCH)
!
!      SOLVES FOR W GIVEN U FROM PATCH EQUATION
!
      DIMENSION VEC(4,3),PATCH(4,4,3),V(3)
      DO 10 J4=1,4
      DO 10 K3=1,3
      VEC(J4,K3)=((U*PATCH(1,J4,K3)+PATCH(2,J4,K3))*U+PATCH(3,J4,K3))*U+&
     &PATCH(4,J4,K3)
   10 CONTINUE
      DO 20 K3=1,3
      V(K3)=((W*VEC(1,K3)   +VEC(2,K3))*W+VEC(3,K3))*W+VEC(4,K3)
   20 END DO
      X=V(1)
      Y=V(2)
      Z=V(3)
      RETURN
      END


!!!      OVERLAY (COREL,2,0)
!!!      PROGRAM MNSUB
      SUBROUTINE MnSub
!
!      MAIN PROGRAM FOR NUMERICAL SOLUTION
!
      COMMON /NEWCOM/ W(3),DMIN(3),KMAX(3),KREF
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON /DESGN/ CPP(120),EMST(120),CPPEX(120),XCP(120),            &
     & NCP,IDESIN,KDES,KDESMX,YYB1(120),CPP1(120),SUMDCP(50),           &
     & STARTC,BETAM(120),NSTART,WDES
      COMMON/TITL/TI1(80),TI2(80)
      COMMON /BLK2/ F(60,60),H(60,60),X(115),Y(115),B(115),             &
     &       BPR(115),BSEC(115),C(115),CPR(115),CSEC(115)
      COMMON/MAP/S0,S1,S2,PII,CSCAL
      COMMON /BLK3/ VI(60,60),UI(60,60),WI(60,60)
      COMMON /FF/ FFS(60,60),COTH(115),SINTH(115),P0,Q0,ELO2
      COMMON/PLO/XXB(120),YYB(120)
      COMMON /FOR/AF,FM,ELI(120),DRI(120),XXS(120),YYS(120)
      COMMON/VELOC/RHOV(120),OMEGV(120),PSIV(120),PSIRV(120),PSITV(120)
      COMMON /SARC/ S(115),SPHI(115),SPSI(115),SMAX,XMAX,DYSTR(115)
      COMMON /VELCPT/ UCART(115),VCART(115),WCART(115),UCYL(115),       &
     &                VCYL(115) ,WCYL(115) ,USHER(115),VSHER(115),      &
     &                WSHER(115),USURF(115),VSURF(115),WSURF(115)
      COMMON /INT/ L(401),D(401)
      COMMON /INTIVE/ D2(129),L2(129)
      COMMON /LDRG/ CCLCA(80),ETASPN(80),ISPNXX,EDRAG
      COMMON /WNGTE/ XROOT,YWNGRT,ZROOT
      COMPLEX S0,S1,S2
!
!
      IF(IPLOT.EQ.1) CALL STRPLT
!
      DO 100 K=1,KREF
      DELMIN=DMIN(K)
      WW=W(K)
      KT=KMAX(K)
   60 CONTINUE
      CALL INIT(K)
      CALL STRECH
      WRITE(LOUT,200) K
      CALL RELAX
      CALL OUTP(K)
!
!     DESIGN OPTION
!
      IF (IDESIN.EQ.1.AND.K.EQ.KREF) GOTO 80
      GOTO 100
   80 IF (KDES.GT.KDESMX) GOTO 100
      KDES=KDES+1
      GOTO 60
!
  100 END DO
!
      IF(IPLOT.EQ.1) CALL ENDPLT
!
  200 FORMAT(/3X,39HSLOR SOLUTION ITERATION BEGINS ON MESH ,I1)
      END


      SUBROUTINE AXIS
      RETURN
      END


      SUBROUTINE PLOT
      RETURN
      END


      SUBROUTINE PLOTS
      RETURN
      END


      SUBROUTINE LINE
      RETURN
      END


      SUBROUTINE SYMBL4
      RETURN
      END


      SUBROUTINE EPLOT
      RETURN
      END


       SUBROUTINE RELAX
!     F=0 OUTSIDE BOW SHOCK
!     RING AND COLLUMN RELAXATION
!     ROTATED DIFFERENCES
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON /BLK2/ F(60,60),H(60,60),X(115),Y(115),B(115),             &
     &       BPR(115),BSEC(115),C(115),CPR(115),CSEC(115)
      COMMON /BLK3/ VI(60,60),UI(60,60),WI(60,60)
      COMMON /FF/ FFS(60,60),COTH(115),SINTH(115),P0,Q0,ELO2
      COMMON/GEO/ NG,NS,AZ,BZ,CC(5),CT(5),CM(5),LC,LT,LM
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      COMMON/MAP/S0,S1,S2,PII,CSCAL
      COMPLEX S0,S1,S2
      DIMENSION GAM(115),DEL(115),FO(115),FOO(115),JSH(115),DFO(115),   &
     &          OMJD(115),FP(115),FPP(115),ERR(400),RSD(400)
      DATA LK/0/
 1000 FORMAT(//1X,5H ITER,5X,5HDELMX,6X,1HI,3X,1HJ,6X,6HDELAVG,10X,     &
     & 5HRESMX,6X,1HI,3X,1HJ,6X,6HRESAVG,7X,4HKSUP,4X,4HNPVD,3X,        &
     & 6HJSHMAX,2X,6HISHMAX,2X,6HJSHMIN,2X,6HISHMIN //)
 1001 FORMAT(I5,E14.4,2I4,E14.4,E16.4,2I4,E14.4,6(4X,I4))
 1002 FORMAT(//10X,43HNO. OF POINTS VIOLATING DIADGONAL DOMINENCE,      &
     & I3//10X,3HJC=,I3,5X,7HJSHMAX=,I3,5X,7HJSHMIN=,I3/)
      LL=1
      JSHMAX=JC-2
      JLIMXP=JC-1
      ISHMAX=0
      JSHMIN=0
      ISHMIN=0
      LK=LK+1
      ICP=IC+1
      ICM=IC-1
      JCC=JC-2
      JCCP=JCC+1
      D2X=.5/DX
      D2Y=.5/DY
      DX2=1./(DX*DX)
      DY2=1./(DY*DY)
      DXY4=.25/(DX*DY)
      Q1=1./WW
      TOT=(IC-1)*(JCC-1)
      JD=JDRLX
!
!       RING RELAXATION ONLY FOR JD=2
!       IF JD GT 2, RING AND COLUMN RELAXATION - TYP. JD=7
!       IF KSUB GT 0  RERUN WITH JD=7
!       EST=-6. IS A GOOD NOMINAL VALUE
!
      JD1=JD-1
      IF(IOUT2.NE.2) WRITE(6,1000)
      DO 5 I=2,IC
    5 JSH(I)=JCC
      DO 290 K=1,KT
      KOUNT=K
      ADELMX=0.
      ARESMX=0.
      AVDEL=0.
      AVRES=0.
      KSUP=0
      KSUB=0
      JLIMX=MIN0(JSHMAX+2,JCC)
      JLIMXP=JLIMX+1
      DO 10 I=1,ICP
      DFO(I)=0.
      FOO(I)=F(I,JLIMXP+1)
   10 FO(I)=F(I,JLIMXP)
      DO 90 JJ=JD,JLIMX
      J=JLIMX-JJ+JD
      DO 70 I=2,IC
!
!      TRANSFORMATION DERIVATIVES
!
      YRHO=1./(C(I)-B(I))
      YRHOTH=-(CPR(I)-BPR(I))*YRHO*YRHO
      YTH=-(BPR(I)+Y(J)*(CPR(I)-BPR(I)))*YRHO
      YTHTH=-(BSEC(I)+Y(J)*(CSEC(I)-BSEC(I))+2.*YTH*(CPR(I)-BPR(I)))    &
     &*YRHO
      RHO1=YRHO/(Y(J)+B(I)*YRHO)
      RHO=1./RHO1
      FF=FFS(I,J)
      HH=H(I,J)*FF
!
!      NUMERICAL DERIVATIVE
!
      FX=F(I+1,J)-F(I-1,J)
      FY=FO(I)-F(I,J-1)
      HX=H(I+1,J)-H(I-1,J)
      HY=H(I,J+1)-H(I,J-1)
      FFRHO=(RHO-.5*(P0*COTH(I)+Q0*SINTH(I)))/FF
      FFTHE=RHO*.5*(P0*SINTH(I)-Q0*COTH(I))/FF
      HWRHO=YRHO*HY*D2Y
      HWTHE=HX*D2X+YTH*HY*D2Y
      HRHO=FF*HWRHO+H(I,J)*FFRHO
      HTHE=FF*HWTHE+H(I,J)*FFTHE
      FXX=F(I+1,J)-2.*F(I,J)+F(I-1,J)
      FYY=F(I,J+1)-2.*F(I,J)+F(I,J-1)
      FXY=F(I+1,J+1)-F(I-1,J+1)-F(I+1,J-1)+F(I-1,J-1)
!
!      VELOCITIES
!
      VS=YRHO*FY*D2Y/HH
      US=(FX*D2X+YTH*FY*D2Y)*RHO1/HH
      V=VS+VI(I,J)
      U=US+UI(I,J)
      W=F(I,J)+WI(I,J)
      Q2=V*V+U*U
      QT2=Q2+W*W
!
!      SOUND SPEED
!
      A2=-GA*QT2+A02
      A2=AMAX1(1.E-08,A2)
!
!      EQUATION COEFFICIENTS
!
      AA1=(A2-U*U)*RHO1*RHO1*DX2
      AA2=((A2-U*U)*2.*RHO1*YTH-2.*U*V*YRHO)*DXY4*RHO1
      AA3=((A2-V*V)*YRHO*YRHO-2.*U*V*YRHO*YTH*RHO1                      &
     &+(A2-U*U)*YTH*YTH*RHO1*RHO1)*DY2
      AA4=(-2.*U*V*RHO1*(YRHOTH-YTH*RHO1)+(A2-U*U)                      &
     &*RHO1*(YTHTH*RHO1+YRHO))*D2Y
      AA5=+2.*U*V*RHO1*RHO1*D2X
      AA6=(2.*A2-Q2)*HH*HH
      AA7=(V*V-U*U)*(VS*HRHO-US*RHO1*HTHE)                              &
     &+2.*U*V*(US*HRHO+VS*RHO1*HTHE)
      RHS=AA4*FY+AA5*FX+AA6*F(I,J)+AA7
!
!      ROTATED DIFFERENCES
!
      U1=U*RHO1
      V2=V*RHO1
      V1=V*YRHO+U*RHO1*YTH
      VV1=-ABS(V1)
      U2=U*YRHO-V*RHO1*YTH
      IS=1
      IF(U.LT.0.) IS=-1
      IM1=I-IS
      K11=(1+IS)/2
      K22=(1-IS)/2
      UU2=ABS(U2)
      CC4=VV1*UU2*DY2
      CC5=U1*UU2*4.*DXY4
      IF(Q2.GT.A2) GO TO 20
!
!      SUBSONIC LOOP - TRIDIAGONAL COEFFICIENTS
!
      DD=.5/(AA1+AA3*Q1+.5*EST*(CC4-IS*CC5))
      AL1=AA1*DD
      AL2=EST*CC5*DD
      ALP1=AL1+K22*AL2
      ALP2=AL1-K11*AL2
      DUM=ABS(ALP1)+ABS(ALP2)
      IF(DUM.GT.1.) KSUB=KSUB+1
      RDEL=AA1*FXX+AA2*FXY+AA3*FYY+RHS
      BET=RDEL*DD+EST*CC4*DFO(I)*DD
      GO TO 30
!
!      SUPERSONIC LOOP - TRIDIAGONAL COEFFICIENTS
!
   20 KSUP=KSUP+1
      BB1=U1*U1*DX2
      BB2P=8.*U1*V1*DXY4
      BB2=8.*U1*VV1*DXY4
      BB3=V1*V1*DY2
      CC1=V2*V2*DX2
      CC2=-2.*U2*V2*DXY4
      CC3=U2*U2*DY2
      DD=.5/((Q2-A2)*(BB1-IS*BB2+BB3)+A2*(CC1+.5*CC3)                   &
     &+EST*A2*.5*(CC4-IS*CC5))
      ALP11=A2*CC1*DD
      ALP22=((Q2-A2)*(2.*BB1-IS*BB2)+A2*CC1)*DD-IS*EST*A2*CC5*DD
      IM2=IM1-IS
      IF(IM2.EQ.0) IM2=4
      IF(IM2.EQ.ICP+1) IM2=ICM-1
      FXXB=F(I,J)-2.*F(IM1,J)+F(IM2,J)
      FXYB=IS*(F(I,J+1)-FO(IM1)-F(I,J)+F(IM1,J))
      FYYB=F(I,J)-2.*F(I,J+1)+FOO(I)
      FSS=BB1*FXXB+BB2P*FXYB+BB3*FYYB
      FNN=CC1*FXX+CC2*FXY+CC3*FYY
      RDEL=((A2-Q2)*FSS+A2*FNN)/Q2+RHS
      ALP1=K11*ALP11+K22*ALP22
      ALP2=K11*ALP22+K22*ALP11
      DUM=ABS(ALP1)+ABS(ALP2)
      IF(DUM.GT.1.) KSUB=KSUB+1
      BET=RDEL*DD*Q2+EST*A2*DD*DFO(I)*CC4
!
!      GAUSSIAN ELIMINATION - FORWARD SWEEP
!
   30 IF(I.NE.2) GO TO 40
      GAM(2)=ALP1+ALP2
      DEL(2)=BET
      GO TO 50
   40 D=1./(1.-ALP2*GAM(I-1))
      GAM(I)=ALP1*D
      DEL(I)=(ALP2*DEL(I-1)+BET)*D
   50 ARES=ABS(RDEL)
      IF(J.GE.JSH(I)) GO TO 60
      AVRES=AVRES+ARES
      IF(ARES.LT.ARESMX) GO TO 60
      RESMX=RDEL
      ARESMX=ARES
      IRX=I
      JRX=J
   60 IF(I.NE.IC) GO TO 70
      A1IC=ALP1
      A2IC=ALP2
      BETIC=BET
   70 END DO
      GAM(IC)=0.
      DEL(IC)=((A1IC+A2IC)*DEL(ICM)+BETIC)/(1.-(A1IC+A2IC)*GAM(ICM))
      DELF=0.
!
!      GAUSSIAN ELIMINATION - BACKWARD SUBSTITUTUIN
!
      DO 80 II=2,IC
      I=IC-II+2
      DELF=GAM(I)*DELF+DEL(I)
      FOO(I)=FO(I)
      FO(I)=F(I,J)
      DFO(I)=DELF
!
!      POTENTIAL UPDATE
!
      F(I,J)=F(I,J)+DELF
      IF(J.GE.JSH(I)) GO TO 80
      ADELF=ABS(DELF)
      AVDEL=AVDEL+ADELF
      IF(ADELF.LT.ADELMX) GO TO 80
      DELMX=DELF
      ADELMX=ADELF
      IMX=I
      JMX=J
   80 END DO
      F(1,J)=F(3,J)
      F(ICP,J)=F(ICM,J)
   90 END DO
      IF(JD.EQ.2) GO TO 200
!
!      COLUMN RELAXATION
!
      DO 105 I=2,IC
      FP(I)=FO(I)
      FPP(I)=FOO(I)
  105 OMJD(I)=DFO(I)
      FP(1)=FP(3)
      FPP(1)=FPP(3)
      FP(ICP)=FP(ICM)
      FPP(ICP)=FPP(ICM)
      DO 110 J=1,JD
      DFO(J)=0.
      FOO(J)=F(4,J)
  110 FO(J)=F(3,J)
      DO 190 I=2,IC
      DO 170 J=2,JD1
!
!      TRANSFORMATION DERIVATIVES
!
      YRHO=1./(C(I)-B(I))
      YRHOTH=-(CPR(I)-BPR(I))*YRHO*YRHO
      YTH=-(BPR(I)+Y(J)*(CPR(I)-BPR(I)))*YRHO
      YTHTH=-(BSEC(I)+Y(J)*(CSEC(I)-BSEC(I))+2.*YTH*(CPR(I)-BPR(I)))    &
     &*YRHO
      RHO1=YRHO/(Y(J)+B(I)*YRHO)
      FPI=F(I,J+1)
      FPIP=F(I+1,J+1)
      IF(J.EQ.JD1) FPI=FP(I)
      IF(J.EQ.JD1) FPIP=FP(I+1)
!
!      NUMERICAL DERIVATIVES
!
      FX=F(I+1,J)-FO(J)
      FY=FPI-F(I,J-1)
      RHO=1./RHO1
      FF=FFS(I,J)
      HH=H(I,J)*FF
      HX=H(I+1,J)-H(I-1,J)
      HY=H(I,J+1)-H(I,J-1)
      FFRHO=(RHO-.5*(P0*COTH(I)+Q0*SINTH(I)))/FF
      FFTHE=RHO*.5*(P0*SINTH(I)-Q0*COTH(I))/FF
      HWRHO=YRHO*HY*D2Y
      HWTHE=HX*D2X+YTH*HY*D2Y
      HRHO=FF*HWRHO+H(I,J)*FFRHO
      HTHE=FF*HWTHE+H(I,J)*FFTHE
      FXX=F(I+1,J)-2.*F(I,J)+F(I-1,J)
      FYY=FPI-2.*F(I,J)+F(I,J-1)
      FXY=FPIP-F(I-1,J+1)-F(I+1,J-1)+F(I-1,J-1)
!
!      VELOCITIES
!
      VS=YRHO*FY*D2Y/HH
      US=(FX*D2X+YTH*FY*D2Y)*RHO1/HH
      V=VS+VI(I,J)
      U=US+UI(I,J)
      W=F(I,J)+WI(I,J)
      Q2=V*V+U*U
      QT2=Q2+W*W
!
!      SOUND SPEED
!
      A2=-GA*QT2+A02
!
!      EQUATION COEFFICIENTS
!
      A2=AMAX1(1.E-08,A2)
      AA1=(A2-U*U)*RHO1*RHO1*DX2
      AA2=((A2-U*U)*2.*RHO1*YTH-2.*U*V*YRHO)*DXY4*RHO1
      AA3=((A2-V*V)*YRHO*YRHO-2.*U*V*YRHO*YTH*RHO1                      &
     &+(A2-U*U)*YTH*YTH*RHO1*RHO1)*DY2
      AA4=(-2.*U*V*RHO1*(YRHOTH-YTH*RHO1)+(A2-U*U)                      &
     &*RHO1*(YTHTH*RHO1+YRHO))*D2Y
      AA5=+2.*U*V*RHO1*RHO1*D2X
      AA6=(2.*A2-Q2)*HH*HH
      AA7=(V*V-U*U)*(VS*HRHO-US*RHO1*HTHE)                              &
     &+2.*U*V*(US*HRHO+VS*RHO1*HTHE)
      RHS=AA4*FY+AA5*FX+AA6*F(I,J)+AA7
!
!      ROTATED DIFFERENCES
!
!
      U1=U*RHO1
      V2=V*RHO1
      V1=V*YRHO+U*RHO1*YTH
      U2=U*YRHO-V*RHO1*YTH
      JS=1
      IF(V1.GT.0.) JS=-1
      JM1=J+JS
      K11=(1-JS)/2
      K22=(1+JS)/2
      VV2=ABS(V2)
      CC4=V1*VV2*4.*DXY4
      CC5=ABS(U1)*VV2*DX2
      IF(Q2.GT.A2) GO TO 120
!
!      SUBSONIC LOOP - TRIDIAGONAL COEFFICIENTS
!
      DD=.5/(AA3+AA1*Q1-.5*EST*(-JS*CC4+CC5))
      AL1=AA3*DD
      AL2=EST*CC4*DD
      ALP1=AL1+K22*AL2
      ALP2=AL1-K11*AL2
      DUM=ABS(ALP1)+ABS(ALP2)
      IF(DUM.GT.1.) KSUB=KSUB+1
      RDEL=AA1*FXX+AA2*FXY+AA3*FYY+RHS
      BET=RDEL*DD-EST*CC5*DFO(J)*DD
      GO TO 130
  120 KSUP=KSUP+1
!
!      SUPERSONIC LOOP - TRIDIAGONAL COEFFICIENTS
!
      BB1=U1*U1*DX2
      BB2=8.*U1*V1*DXY4
      BB3=V1*V1*DY2
      CC1=V2*V2*DX2
      CC2=-2.*U2*V2*DXY4
      CC3=U2*U2*DY2
      DD=.5/((Q2-A2)*(BB1-JS*BB2+BB3)+A2*(CC3+.5*CC1)                   &
     &-EST*A2*.5*(-JS*CC4+CC5))
      ALP11=A2*CC3*DD
      ALP22=((Q2-A2)*(2.*BB3+JS*BB2)+A2*CC3)*DD-JS*EST*A2*CC4*DD
      JM2=JM1+JS
      FJM2=0.
      IF(JM2.GT.0) FJM2=F(I,JM2)
      FJM1=F(I,JM1)
      FOJM1=FO(JM1)
      IF(J.NE.JD1) GO TO 125
      IF(JS.NE.1) GO TO 125
      FJM1=FP(I)
      FJM2=FPP(I)
      FOJM1=FP(I-1)
  125 CONTINUE
      FYYB=F(I,J)-2.*FJM1+FJM2
      FXYB=-JS*(F(I,J)-F(I-1,J)-FJM1+FOJM1)
      FXXB=F(I,J)-2.*F(I-1,J)+FOO(J)
      FSS=BB1*FXXB+BB2*FXYB+BB3*FYYB
      FNN=CC1*FXX+CC2*FXY+CC3*FYY
      RDEL=((A2-Q2)*FSS+A2*FNN)/Q2+RHS
      ALP1=K11*ALP11+K22*ALP22
      ALP2=K11*ALP22+K22*ALP11
      DUM=ABS(ALP1)+ABS(ALP2)
      IF(DUM.GT.1.) KSUB=KSUB+1
      BET=RDEL*DD*Q2-EST*A2*DD*DFO(I)*CC5
!
!      GAUSSIAN ELIMINATION - FORWARD SWEEP
!
  130 IF(J.NE.2) GO TO 140
      GAM(2)=ALP1+ALP2
      DEL(2)=BET
      GO TO 150
  140 D=1./(1.-ALP2*GAM(J-1))
      GAM(J)=ALP1*D
      DEL(J)=(ALP2*DEL(J-1)+BET)*D
  150 ARES=ABS(RDEL)
      AVRES=AVRES+ARES
      IF(ARES.LT.ARESMX) GO TO 170
      RESMX=RDEL
      ARESMX=ARES
      IRX=I
      JRX=J
  170 END DO
      DELF=OMJD(I)
!
!        GAUSSIAN ELIMINATION - BACKWARD SUBSTSITUTUIN
!
      DO 180 JJ=2,JD1
      J=JD1-JJ+2
      DELF=GAM(J)*DELF+DEL(J)
      FOO(J)=FO(J)
      FO(J)=F(I,J)
      DFO(J)=DELF
!
!      POTENTIAL UPDATE
!
      F(I,J)=F(I,J)+DELF
      ADELF=ABS(DELF)
      AVDEL=AVDEL+ADELF
      IF(ADELF.LT.ADELMX) GO TO 180
      DELMX=DELF
      ADELMX=ADELF
      IMX=I
      JMX=J
  180 END DO
      FO(1)=F(I,1)
      FF=FFS(I,2)
      HH=H(I,2)*FF
      F(I,1)=F(I,3)-(BPR(I)*(F(I+1,2)-F(I-1,2))*D2X+HH*B(I)*(BPR(I)     &
     &*UI(I,2)-B(I)*VI(I,2)))*(C(I)-B(I))/(D2Y*(B(I)*B(I)+BPR(I)        &
     &*BPR(I)))
  190 END DO
      DO 195 J=1,JLIMX
      F(1,J)=F(3,J)
  195 F(ICP,J)=F(ICM,J)
      GO TO 220
  200 DO 210 I=2,IC
      FF=FFS(I,2)
      HH=H(I,2)*FF
      F(I,1)=F(I,3)-(BPR(I)*(F(I+1,2)-F(I-1,2))*D2X+HH*B(I)*(BPR(I)     &
     &*UI(I,2)-B(I)*VI(I,2)))*(C(I)-B(I))/(D2Y*(B(I)*B(I)+BPR(I)        &
     &*BPR(I)))
  210 END DO
  220 AVRES=AVRES/TOT
      AVDEL=AVDEL/TOT
      IF(LL.EQ.0) GO TO 270
!
!      SET F=0 OUTSIDE BOW SHOCK WAVE
!
      IF(K.LT.50) GO TO 270
      DO 240 I=2,IC
      DO 230 JJ=2,JLIMX
      J=JLIMX-JJ+2
      YRHO=1./(C(I)-B(I))
      YTH=-(BPR(I)+Y(J)*(CPR(I)-BPR(I)))*YRHO
      RHO1=YRHO/(Y(J)+B(I)*YRHO)
      FF=FFS(I,J)
      HH=H(I,J)*FF
      FX=F(I+1,J)-F(I-1,J)
      FY=F(I,J+1)-F(I,J-1)
      VS=YRHO*FY*D2Y/HH
      US=(FX*D2X+YTH*FY*D2Y)*RHO1/HH
      V=VS+VI(I,J)
      U=US+UI(I,J)
      W=F(I,J)+WI(I,J)
      Q2=V*V+U*U
      A2=-GA*(Q2+W*W)+A02
      A2=AMAX1(1.E-08,A2)
      IF(Q2.LE.A2) GO TO 240
      JSH(I)=J
      F(I,J)=0.
  230 END DO
  240 END DO
      DO 250 J=2,JLIMX
      F(1,J)=F(3,J)
  250 F(ICP,J)=F(ICM,J)
      TOT=0.
      JSHMAX=0
      JSHMIN=200
      DO 260 I=2,IC
      JSHSHK=JSH(I)
      IF(JSHSHK.GT.JSHMAX) ISHMAX=I
      IF(JSHSHK.LT.JSHMIN) ISHMIN=I
      JSHMAX=MAX0(JSHSHK,JSHMAX)
      JSHMIN=MIN0(JSHSHK,JSHMIN)
  260 TOT=TOT+JSHSHK-1
  270 CONTINUE
      ERR(K)=ALOG10(ABS(DELMX))
      RSD(K)=ALOG10(ABS(RESMX))
      IF(IOUT2.NE.2) WRITE(6,1001)K,DELMX,IMX,JMX,AVDEL,RESMX,IRX,JRX,  &
     & AVRES,KSUP,KSUB,JSHMAX,ISHMAX,JSHMIN,ISHMIN
!
!      CONVERGENCE CHECK
!
      IF(ADELMX.LT.DELMIN) GO TO 300
      IF(ADELMX.GT.1.0E10) WRITE(6,360)
      IF(ADELMX.GT.1.0E10) GO TO 300
      IF(LK.EQ.1.AND.K.EQ.200) CALL SHOCKR(JSHMAX)
      IF(LK.EQ.1.AND.K.EQ.200.AND.IOUT2.NE.2) WRITE(6,1000)
  290 END DO
  360 FORMAT(//10X,38H SOLUTION STOPS - ITERATION DIVERGING )
  300 IF(IOUT2.NE.2) WRITE(6,1000)
      IF(IOUT2.NE.2) CALL ERPLOT(KOUNT,ERR,RSD)
      IF(IOUT2.EQ.2) WRITE(6,1002) KSUB,JC,JSHMAX,JSHMIN
      RETURN
      END


      SUBROUTINE ERPLOT(KOUNT,ERR,RSD)
!
!      PRINT OF ITERATION HISTORY
!
      DIMENSION ERR(1),RSD(1)
      DIMENSION LINE(126),IE(6),IR(6)
      DATA IB/1H /,IS/1H*/,IY/1HI/,IX/1H-/,IP/1H+/
      WRITE(6,200)
      ERRO=10.0**ERR(1)
      ERRL=ALOG10(ERRO)
      CE=7.
      IF(ERRL.GT.-2.) CE=CE-AINT(ERRL+1.)
      RSDO=10.0**RSD(1)
      RSDL=ALOG10(RSDO)
      CR=5.
      IF(RSDL.GT.0.) CR=CR-AINT(RSDL+1.)
      WRITE(6,202) ERRO,RSDO
      DO 7 K=1,KOUNT
      ERR(K)=CE+ERR(K)
    7 RSD(K)=CR+RSD(K)
      DO 5 L=1,6
      IE(L) = L-1-IFIX(CE)
    5 IR(L) = L-1-IFIX(CR)
      WRITE(6,203) (IE(L),IR(L),L=1,6)
!
      NK = KOUNT+1
      DO 100 KKK=1,NK
      K = KKK-1
      DO 10 I=1,126
   10 LINE(I)=IB
      IF(MOD(K,50).NE.0) GO TO 30
      DO 20 I=11,111
   20 LINE(I)=IX
   30 DO 40 I=11,111,20
   40 LINE(I)=IY
      IF (KKK.EQ.1) GO TO 100
      J=11.5+20.*ERR(K)
      IF (J.LT.1) J=1
      IF (J.GT.126) J = 126
      LINE (J)=IS
      J=11.5+20.*RSD(K)
      IF (J.LT.1) J=1
      IF (J.GT.126) J = 126
      LINE(J)=IP
  100 WRITE(6,201) K,LINE
!
      RETURN
  200 FORMAT(1H1/5X,19HCONVERGENCE HISTORY )
  201 FORMAT( 2X,I4,1X,126A1)
  202 FORMAT(10X,21H INITIAL ERROR(*) IS ,E12.4,5X,                     &
     &  23HINITIAL RESIDUAL(+) IS ,E12.4///)
  203 FORMAT(6(15X,I2,1H/,I2))
      END


      SUBROUTINE SHOCKR(JSHMAX)
!
!      RECOMPUTES NEW POSTION OF OUTER BOUNDARY AT NS MESH POINTS
!      OUTSIDE CALCULATED BOW WAVE. THE RESULTING SHAPE C(X) IS
!      SMOOTHED KS TIMES AND THEN NUMERICALLY DIFFERENTIATED
!
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON /BLK2/ F(60,60),H(60,60),X(115),Y(115),B(115),             &
     &       BPR(115),BSEC(115),C(115),CPR(115),CSEC(115)
      COMMON /BLK3/ VI(60,60),UI(60,60),WI(60,60)
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      COMMON /FF/ FFS(60,60),COTH(115),SINTH(115),P0,Q0,ELO2
      DIMENSION CO(201),FN(201)
      NS=NSHKR
      ICM=IC-1
      ICP=IC+1
      JCM=JC-1
      JINER=JSHMAX
      DO 5 I=2,IC
      DO 5 J=JINER,JCM
    5 F(I,J)=0.0
      JSHMAX=JC-2
      JCP=JC+1
      KS=KSHKR
      WRITE(LOUT,4)
!
!      CALCULATION OF BOW WAVE
!
      DO 20 I=2,IC
      DO 10 JJ=2,JCM
      J=JCM-JJ+2
      FY=F(I,J+1)-F(I,J-1)
      FX=F(I+1,J)-F(I-1,J)
      YRHO=1./(C(I)-B(I))
      YTH=-(BPR(I)+Y(J)*(CPR(I)-BPR(I)))*YRHO
      RHO1=YRHO/(Y(J)+B(I)*YRHO)
      HH=H(I,J)*FFS(I,J)
      VS=YRHO*FY/(2.*DY*HH)
      US=(FX*.5/DX+YTH*FY*.5/DY)*RHO1/HH
      V=VS+VI(I,J)
      U=US+UI(I,J)
      W=F(I,J)+WI(I,J)
      Q2C=U*U+V*V
      Q2=Q2C+W*W
      A2=-GA*Q2+A02
      IF(A2.LT.0.) A2=-A2
      EM2=Q2C/A2
      RHO=1./RHO1
      IF(EM2.LT.1.) GO TO 15
      EM2O=EM2
      RHOO=RHO
   10 END DO
      GO TO 200
   15 IF(J.EQ.JCM) GO TO 200
      RHOS=(RHOO-RHO)*(1.-EM2)/(EM2O-EM2)+RHO
      CO(I)=C(I)
!
!      CALCULATION OF OUTER BOUNDARY C(X) AND SUBSEQUENT SMOOTHING
!      AND MAPPING
!
      C(I)=(RHOS-B(I)*NS*DY)/(1.-NS*DY)
   20 END DO
      C(1)=C(3)
      C(ICP)=C(ICM)
      DO 40 KK=1,KS
      CM1=C(1)
      DO 30 I=2,IC
      CM=C(I)
      C(I)=.25*(CM1+2.*CM+C(I+1))
   30 CM1=CM
      C(1)=C(3)
      C(ICP)=C(ICM)
   40 END DO
      C(1)=C(3)
      C(ICP)=C(ICM)
      DO 100 I=2,IC
      CPR(I)=(C(I+1)-C(I-1))*.5/DX
      CSEC(I)=(C(I+1)-2.*C(I)+C(I-1))/(DX*DX)
!
!      INTERPOLATION OF POTENTIAL F AT NEW GRID POINTS
!
      DO 80 J=3,JC
      IF(J.GE.JC-NS) GO TO 70
      RHON=(C(I)-B(I))*Y(J)+B(I)
      DO 50 JJO=2,JC
      JO=JC-JJO+2
      RHOP=(CO(I)-B(I))*Y(JO)+B(I)
      IF(RHOP.LT.RHON) GO TO 60
      RHOPO=RHOP
   50 END DO
   60 EP=(RHON-RHOP)/(RHOPO-RHOP)
      FN(J)=F(I,JO)+EP*(F(I,JO+1)-F(I,JO))
      GO TO 80
   70 FN(J)=0.
   80 END DO
      FN(2)=F(I,2)
      DO 90 J=2,JC
   90 F(I,J)=FN(J)
  100 END DO
      DO 110 J=2,JC
      F(1,J)=F(3,J)
  110 F(ICP,J)=F(ICM,J)
!
!
!       RECOMPUTATION OF MAPPING METRIC AND FREESTREAM VELOCITIES AT
!       NEW GRID POINTS
!
      CALL STRECH
      IF(IOUT2.NE.2) WRITE(6,2)
      IF(IOUT2.NE.2) WRITE(6,3)
      IF(IOUT2.NE.2) WRITE(6,1)(I,C(I),CPR(I),CSEC(I),I=2,IC)
      IF(IOUT2.NE.2) WRITE(6,3)
    1 FORMAT(I5,3E15.6)
    2 FORMAT(1H1//5X,19H NEW SHOCK LOCATION )
    3 FORMAT(/4X,1HI,7X,4HC(I),11X,6HCPR(I),8X,7HCSEC(I) /)
    4 FORMAT(//4X,43HREMAP USING INITIAL COMPUTED SHOCK LOCATION /)
  200 RETURN
      END


      SUBROUTINE STRECH
!
!      MAPPING METRIC AND FREESTREAM VELOCITIES
!
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON /BLK2/ F(60,60),H(60,60),X(115),Y(115),B(115),             &
     &       BPR(115),BSEC(115),C(115),CPR(115),CSEC(115)
      COMMON /BLK3/ VI(60,60),UI(60,60),WI(60,60)
      COMMON/MAP/S0,S1,S2,PII,CSCAL
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      COMMON/PLO/XXB(120),YYB(120)
      COMMON /FF/ FFS(60,60),COTH(115),SINTH(115),P0,Q0,ELO2
      COMMON /FOR/AF,FM,ELI(120),DRI(120),XXS(120),YYS(120)
      COMMON/VELOC/RHOV(120),OMEGV(120),PSIV(120),PSIRV(120),PSITV(120)
      COMMON /SARC/ S(115),SPHI(115),SPSI(115),SMAX,XMAX,DYSTR(115)
      COMPLEX S0,S1,S2
 1000 FORMAT(///3X,1HI,4X,1HJ,7X,3HRHO,12X,3HTHE,12X,3HPSI,12X,4HOMEG,  &
     & 12X,1HH,14X,2HUI,13X,2HVI,13X,2HWI/)
 1001 FORMAT(2I5,8E15.5)
 1004 FORMAT(I5)
 1005 FORMAT(/3X,1HI,10X,3HX/Z,12X,3HY/Z,14X,1HS,11X,5HTHETA,12X,3HPSI, &
     & 7X,10H(X/Z)/XMAX,4X,10H(Y/Z)/XMAX,8X,8HDYBP/DZP//)
 1006 FORMAT(1X,I3,8F15.5)
 1008 FORMAT(//5X,5HSMAX=,F10.5,11X,5HXMAX=,F10.5,10X,10HSMAX/XMAX=,    &
     & F10.5/)
 1010 FORMAT(1H1)
 1012 FORMAT(8F10.6)
 1014 FORMAT(14H LOWER SURFACE )
 1016 FORMAT(14H UPPER SURFACE )
 1018 FORMAT(32H SPANWISE SECTION FROM COREL JOB ,A8,4X,4HNO. ,I2)
 1020 FORMAT(13HOFFLINE READ ,1HI,I1,3HSEC,1X,A8)
 1022 FORMAT(//3X,50H MAPPING METRIC AND FREESTREAM VELOCITIES AT GRID  &
     & ,6HPOINTS)
 1024 FORMAT(/5X,37HSURFACE ARC LENGTH (S) SLOPE (THETA)                &
     & 22H AND CURVATURE (PSI)         )
      DATA IQQQQQ /1/
      AF=0.
      P0=REAL(S0)
      Q0=AIMAG(S0)
      ELO2=(P0**2+Q0**2)/4.0
      D2X=.5/DX
      D2Y=.5/DY
      ICM=IC-1
      ICP=IC+1
      Y(1)=-Y(3)
      IF(IOUT2.NE.2) WRITE(LOUT,1022)
      IF(IOUT2.NE.2) WRITE(LOUT,1000)
!
!      CALCULATION OF MAPPING METRIC H AND FREESTREAM VELOCITIES
!      UI,VI,WI
!
      DO 60 J=1,JC
      DO 50 I=2,IC
      THE=X(I)
      SINTH(I)=SIN(THE)
      COTH(I)=COS(THE)
      RHO=(C(I)-B(I))*Y(J)+B(I)
      CSI=RHO*COTH(I)
      ETA=RHO*SINTH(I)
      CALL RCONF(CSI,ETA,P,Q,HC,SCSI,SETA)
      OMEG=ATAN2(Q,P)
      P2Q2=SQRT(P*P+Q*Q)
      PSI=PI-2.*ATAN(CSCAL/P2Q2)
      HH=SIN(PSI)*HC/P2Q2
      FF=SQRT(RHO*(RHO-P0*COTH(I)-Q0*SINTH(I))+ELO2)
      FFS(I,J)=FF
      H(I,J)=HH/FF
      PSICSI=SCSI/HC
      PSIETA=SETA/HC
      PSIRHO=PSICSI*COTH(I)+PSIETA*SINTH(I)
      PSITHR=-PSICSI*SINTH(I)+PSIETA*COTH(I)
      VI(I,J)=SIN(ALP)*(COS(PSI)*SIN(OMEG)*PSIRHO-COS(OMEG)*PSITHR)     &
     &-COS(ALP)*SIN(PSI)*PSIRHO
      UI(I,J)=SIN(ALP)*(COS(PSI)*SIN(OMEG)*PSITHR+COS(OMEG)*PSIRHO)     &
     &-COS(ALP)*SIN(PSI)*PSITHR
      WI(I,J)=SIN(ALP)*SIN(PSI)*SIN(OMEG)+COS(ALP)*COS(PSI)
      IF(J.NE.2) GO TO 46
      IF(IOUT2.EQ.2) GO TO 40
      WRITE(LOUT,1001) I,J,RHO,THE,PSI,OMEG,HH,UI(I,J),VI(I,J)          &
     &,WI(I,J)
   40 XXB(I-1)=COS(OMEG)*TAN(PSI)
      YYB(I-1)=SIN(OMEG)*TAN(PSI)
      RT=1./COS(PSI)
      VIW=COS(ALP)*(COS(PSI)*SIN(OMEG)*PSIRHO-COS(OMEG)*PSITHR)         &
     &+SIN(ALP)*SIN(PSI)*PSIRHO
      UIW=COS(ALP)*(COS(PSI)*SIN(OMEG)*PSITHR+COS(OMEG)*PSIRHO)
!
!      PARAMETERS USED LATER IN LIFT AND DRAG COEFFICIENT CALCULATION
!
      EN1=B(I)*VI(I,2)-BPR(I)*UI(I,2)
      EN2=B(I)*VIW-BPR(I)*UIW
      DUM=RT*RT*HH
      ELI(I)=-EN2*DUM
      DRI(I)=-EN1*DUM
      AFI=SQRT(B(I)**2+BPR(I)**2)*DUM
      IF(I.NE.2.AND.I.NE.IC) GO TO 45
      AFI=.5*AFI
   45 AF=AF+AFI
   46 IF(J.NE.2) GO TO 50
      RHOV(I)=RHO
      OMEGV(I)=OMEG
      PSIV(I)=PSI
      PSIRV(I)=PSIRHO
      PSITV(I)=PSITHR
   50 END DO
      H(1,J)=H(3,J)
      H(ICP,J)=H(ICM,J)
   60 END DO
!
!      BOUNDARY CONDITION ON INITIAL CONDITIONS
!
      DO 70 I=2,IC
      FF=FFS(I,2)
      HH=H(I,2)*FF
      F(I,1)=F(I,3)-(BPR(I)*(F(I+1,2)-F(I-1,2))*D2X+HH*B(I)*(BPR(I)     &
     &*UI(I,2)-B(I)*VI(I,2)))*(C(I)-B(I))/(D2Y*(B(I)*B(I)+BPR(I)        &
     &*BPR(I)))
!     H(I,1)=H(I,3)
   70 END DO
      F(1,1)=F(3,1)
      F(ICP,1)=F(ICM,1)
      AF=.5*AF*DX
      FM=2./(GAMMA*EMINF**2)
!
!      GENERATE SPAN SECTION ARC LENGTH ,SLOPE,AND CURVATURE DATA
!
      WRITE(6,1010)
      IF(IOUT2.NE.2) WRITE(LOUT,1024)
      IF(IOUT2.NE.2) WRITE(6,1005)
      ICM2=ICM-1
      CALL ARCDRV(2,ICM,XXB,YYB,S,SPHI,SPSI)
      XMAX=0.0
      IXMAX=0
      DO 76 I=1,ICM
      IF(XXB(I).GT.XMAX) IXMAX=I
      IF(XXB(I).GT.XMAX) XMAX=XXB(I)
   76 END DO
      DO 80 I=1,ICM
      XXMAX=XXB(I)/XMAX
      YXMAX=YYB(I)/XMAX
      TANARG=PIO2-1.0E-5
      IF(ABS(PIO2-SPHI(I)).GT.1.0E-05) TANARG=SPHI(I)
      DYSTRM=YYB(I)-XXB(I)*TAN(TANARG)
      DYSTRM=DYSTRM-ALP
      DYSTR(I)=DYSTRM
      SPHID=57.2958*SPHI(I)
   80 IF(IOUT2.NE.2) WRITE(6,1006) I,XXB(I),YYB(I),S(I),SPHID,SPSI(I),  &
     & XXMAX,YXMAX,DYSTRM
      IF(IOUT2.NE.2) WRITE(6,1005)
      SMAX=S(ICM)
      SXMAX=SMAX/XMAX
      IF(IOUT2.NE.2) WRITE(LOUT,1008) SMAX,XMAX,SXMAX
!
      RETURN
      END

!                                                      STRECH
!----- DECK A930  ARCDRV SUBROUTINE  A.VACHRIS DATE 10-1-77
!----- NUMERICAL DIFFERENTIATION OF A TWO-DIMENSIONAL CURVE
!----- ARC-LENGTH PARAMETERIZATION
!----- CALCULATES LOCAL SLOPE AND CURVATURE
!-----                                   REVISION DATE 3-30-78


      SUBROUTINE ARCDRV(MODE,N,X,Y,S,PHI,PSI)
      DIMENSION X(1),Y(1),S(1),PHI(1),PSI(1)
      TWOPI=6.2831853072
      PIHALF=TWOPI/4.
!-----   CALCULATE ARC LENGTH
      IF(MODE.GT.-1) CALL ARCLNG(N,X,Y,S)
      IF(MODE.EQ.0) GO TO 900
!-----   CALCULATE D(X)/D(S)
      CALL SLOPE(N,S,X,PHI)
!-----   CALCULATE D(Y)/D(S)
      CALL SLOPE(N,S,Y,PSI)
      IF(IABS(MODE).EQ.1) GO TO 900
!-----   CALCULATE PHI=ATAN2(D(Y)/D(S),D(X)/D(S))
      DO 50 I=1,N
   50 PHI(I)=ATAN2(PSI(I),PHI(I))
!-----  REMOVE DISCONTINUITY IN ATAN2 FUNCTION
      PHINEW=PHI(1)
      DO 60 I=2,N
      PHIOLD=PHINEW
      PHINEW=PHI(I)
      DEL=PHINEW-PHIOLD
      IF(ABS(DEL).LT.PIHALF) GO TO 60
      PHINEW=PHINEW-TWOPI*SIGN(1.,DEL)
      PHI(I)=PHINEW
   60 END DO
!-----    CALCULATE PSI=D(PHI)/D(S)
      CALL SLOPE(N,S,PHI,PSI)
  900 RETURN
      END

!                                                       ARCDRV
!----- DECK A931 ARCLNG SUBROUTINE A.VACHRIS DATE 10-1-77
!----- CALCULATES ARC-LENGTH FOR TWO-DIMENSIONAL CURVE
!-----                                      REVISION DATE 4-7-78
      SUBROUTINE ARCLNG(N,X,Y,SARC)
      DIMENSION X(1),Y(1),SARC(1)
      ATRI(XA,YA,XB,YB,XC,YC)=.5*((XB-XA)*(YC-YB)+(XB-XC)*(YB-YA))
      XLNGTH(XA,YA,XB,YB)=SQRT((XB-XA)*(XB-XA)+(YB-YA)*(YB-YA))
      IF(N.LE.0) GO TO 999
      SSUM=0.D0
      NM=N-1
      DO 110 I=1,N
  110 SARC(I)=0.
      BLNG=XLNGTH(X(1),Y(1),X(2),Y(2))
      IF(N.GT.2) GO TO 120
      SARC(2)=BLNG
      GO TO 999
!----- CALCULATE LEFT AND RIGHT ESTIMATES OF ARC LENGTH
  120 DO 130 J=2,NM
      I=J-1
      K=J+1
      ALNG=BLNG
      BLNG=XLNGTH(X(J),Y(J),X(K),Y(K))
      CLNG=XLNGTH(X(I),Y(I),X(K),Y(K))
      AARC=ALNG
      BARC=BLNG
      AREA=ABS(ATRI(X(I),Y(I),X(J),Y(J),X(K),Y(K)))
!-----  TEST FOR THREE POINTS CO-LINEAR
      IF(AREA.EQ.0.) GO TO 140
      RADIUS=ALNG*BLNG*CLNG/(4.*AREA)
      BARC=2.*RADIUS*ASIN(.5*BLNG/RADIUS)
      AARC=2.*RADIUS*ASIN(.5*ALNG/RADIUS)
  140 CONTINUE
      SARC(J)=SARC(J)+AARC
      SARC(K)=SARC(K)+BARC
  130 END DO
      IF(N.GT.3) GO TO 150
      SARC(3)=SARC(2)+0.D0+SARC(3)
      GO TO 999
!----- AVERAGE LEFT AND RIGHT ESTIMATES
  150 DO 160 I=3,NM
  160 SARC(I)=.5*SARC(I)
!-----  SUM UP RUNNING ARC LENGTH
      SSUM=SSUM+SARC(2)
      DO 170 I=3,NM
      SSUM=SSUM+SARC(I)
  170 SARC(I)=SSUM
      SARC(N)=SSUM+SARC(N)
  999 RETURN
      END


!----- DECK A943 SLOPE SUBROUTINE AL VACHRIS DATE 10-1-77
!----- NUMERICAL DIFFERENTIATION OF A TABULAR FUNCTION
!----- RUNNING POINT VERSION
!.....                                     REVISION DATE 10-1-77
      SUBROUTINE SLOPE(N,X,Y,T )
      DIMENSION X(1),Y(1),T(1),TT(5),FLAG(5)
      DIMENSION XX(8),YY(8)
      FLINE(XL,YL,XR,YR,X)=(YL*(XR-X)+YR*(X-XL))/(XR-XL)
      NABS=IABS(N)
      DO 10 I=1,3
      XX(I+1)=X(I)
      YY(I+1)=Y(I)
      K=NABS-I+1
      XX(I+5)=X(K)
      YY(I+5)=Y(K)
   10 END DO
      DO 80 K=1,5,4
      XL=XX(K+2)-XX(K+1)
      YL=YY(K+2)-YY(K+1)
      XR=XX(K+3)-XX(K+2)
      YR=YY(K+3)-YY(K+2)
      XC=XX(K+3)-XX(K+1)
      YC=YY(K+3)-YY(K+1)
      XMONO=XR*XL
      YMONO=YR*YL
      IF(XMONO.GT.0..AND.YMONO.GT.0.) GO TO 50
      IF(XMONO.GT.0.) GO TO 60
      IF(YMONO.GT.0.) GO TO 70
      IF(XL.GT.0..AND.YL.GT.0.) GO TO 30
      IF(N.LT.0.AND.ABS(YC).GT.ABS(XC)) GO TO 20
      XX(K)=XX(K+1)-XC
      YY(K)=FLINE(XX(K+1),YY(K+1),XX(K+3),YY(K+3),XX(K))
      GO TO 80
   20 YY(K)=YY(K+1)-YC
      XX(K)=FLINE(YY(K+1),XX(K+1),YY(K+3),XX(K+3),YY(K))
      GO TO 80
   30 IF(N.LT.0.AND.ABS(YC).GT.ABS(XC)) GO TO 40
      XX(K)=XX(K+1)-XL
      YY(K)=FLINE(XX(K+1),YY(K+1),XX(K+2),YY(K+2),XX(K))
      GO TO 80
   40 YY(K)=YY(K+1)-YL
      XX(K)=FLINE(YY(K+1),XX(K+1),YY(K+2),XX(K+2),YY(K))
      GO TO 80
   50 IF(N.LT.0.AND.ABS(YC).GT.ABS(XC)) GO TO 70
   60 XX(K)=XX(K+1)-XR
      YL=FLINE(XX(K+1),YY(K+1),XX(K+2),YY(K+2),XX(K))
      YR=FLINE(XX(K+2),YY(K+2),XX(K+3),YY(K+3),XX(K))
      YY(K)=FLINE(XX(K+1),YL,XX(K+3),YR,XX(K))
      GO TO 80
   70 YY(K)=YY(K+1)-YR
      XL=FLINE(YY(K+1),XX(K+1),YY(K+2),XX(K+2),YY(K))
      XR=FLINE(YY(K+2),XX(K+2),YY(K+3),XX(K+3),YY(K))
      XX(K)=FLINE(YY(K+1),XL,YY(K+3),XR,YY(K))
   80 END DO
      X(N+1)=XX(5)
      Y(N+1)=YY(5)
      XJ=XX(1)
      YJ=YY(1)
      XK=X(1)
      YK=Y(1)
      XR=XK-XJ
      YR=YK-YJ
      DO 1000 J=1,NABS
      XI=XJ
      XL=XR
       YL=YR
      YI=YJ
      XJ=XK
      YJ=YK
      K=J+1
      XK=X(K)
      YK=Y(K)
      XR=XK-XJ
      YR=YK-YJ
      XC=XK-XI
      YC=YK-YI
      SC=SIGN(1000.,YC)
      IF(XC.NE.0.) SC=YC/XC
      T(J)=SC
      IF(XR.EQ.0..AND.XL.EQ.0.) GO TO 1000
      IF(XR.EQ.0..AND.YR.EQ.0.) GO TO 1000
      IF(XL.EQ.0..AND.YL.EQ.0.) GO TO 1000
      IF(XR.EQ.0.) GO TO 1110
      IF(XL.EQ.0.) GO TO 1120
      IF(XC.EQ.0.) GO TO 1130
      DO 100 I=1,5
      TT(I)=0.
      FLAG(I)=1.
  100 END DO
      XMONO=XR*XL
      YMONO=YR*YL
      IF(XMONO.GT.0.) GO TO 200
      IF(YMONO.LT.0.) GO TO 1000
      FLAG(1)=0.
      FLAG(3)=0.
      GO TO 300
  200 IF(YMONO.GT.0.) GO TO 300
      FLAG(2)=0.
      FLAG(3)=0.
  300 SL=YL/XL
      SR=YR/XR
      IF(ABS(SR-SL).LT.1.E-4) GO TO 1000
      SSRSL=SR+SL
      PSRSL=SR*SL
      SMIN=AMIN1(SR,SL)
      SMAX=AMAX1(SR,SL)
!                   FIT  ONE                 X*X =A*X    +  B*Y    +  C
      IF(FLAG(1).EQ.0.) GO TO 1020
      TT(1)=SSRSL-SC
!                   FIT  TWO                 Y*Y =A*X    +  B*Y    +  C
 1020 CONTINUE
      IF(FLAG(2).EQ.0.) GO TO 1030
      DENOM=SSRSL*SC-PSRSL
      IF(DENOM.NE.0.) GO TO 1021
      FLAG(2)=0.
      GO TO 1030
 1021 TT(2)=PSRSL*SC/DENOM
!                   FIT  THREE               X*Y =A*X    +  B*Y    +  C
 1030 CONTINUE
      IF(FLAG(3).EQ.0.) GO TO 1040
      DENOM=SC
      IF(DENOM.NE.0.) GO TO 1031
      FLAG(3)=0.
      GO TO 1040
 1031 TT(3)=PSRSL/DENOM
!                   FIT  FOUR      X*X    +  Y*Y =A*X    +  B*Y    +  C
 1040 CONTINUE
      DENOM=SSRSL*SC+1.-PSRSL
      IF(DENOM.NE.0.) GO TO 1041
      FLAG(4)=0.
      GO TO 1050
 1041 TT(4)=(SSRSL+SC*(PSRSL-1. ))/DENOM
!                   FIT  FIVE      X*X    -  Y*Y =A*X    +  B*Y    +  C
 1050 CONTINUE
      DENOM=1.+PSRSL-SC*SSRSL
      IF(DENOM.NE.0.) GO TO 1051
      FLAG(5)=0.
      GO TO 1060
 1051 TT(5)=(SSRSL-SC*(1.+PSRSL))/DENOM
       GO TO 1060
 1110 T(J)=SL*SC/(SC-SL)
       GO TO 1000
 1120 T(J)=SR*SC/(SC-SR)
       GO TO 1000
 1130 T(J)=SIGN(1000.,SR*SL)
      IF((SL+SR).NE.0.) T(J)=SR*SL/(SL+SR)
      GO TO 1000
 1060 CONTINUE
      SUM=0.
      TSUM=0.
      IF(XMONO.LT.0.) GO TO 1210
      DO 1200 I=1,5
      IF(FLAG(I).EQ.0.) GO TO 1200
      IF(TT(I).LT.SMIN)  GO TO 1200
      IF(TT(I).GT.SMAX)  GO TO 1200
      TSUM=TSUM+TT(I)
      SUM=SUM+1.
 1200 END DO
      GO TO 1400
 1210 DO 1300 I=1,5
      IF(FLAG(I).EQ.0.) GO TO 1300
      IF(TT(I).LT.SMAX) GO TO 1300
      IF(TT(I).GT.SMIN) GO TO 1300
      TSUM=TSUM+TT(I)
      SUM=SUM+1.
 1300 END DO
 1400 IF(SUM.EQ.0.) GO TO 1000
      TSUM=TSUM/SUM
       T(J)=TSUM
 1000 END DO
      RETURN
      END


      SUBROUTINE OUTP(K)
!
!      OUTPUT OF RESULTS
!
      REAL MCMIN
      COMMON /NEWCOM/ W(3),DMIN(3),KMAX(3),KREF
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON /BLK2/ F(60,60),H(60,60),X(115),Y(115),B(115),             &
     &       BPR(115),BSEC(115),C(115),CPR(115),CSEC(115)
      COMMON /BLK3/ VI(60,60),UI(60,60),WI(60,60)
      COMMON/MAP/S0,S1,S2,PII,CSCAL
      COMMON/GEO/ NG,NS,AZ,BZ,CC(5),CT(5),CM(5),LC,LT,LM
      COMMON/PLO/XXB(120),YYB(120)
      COMMON/TITL/TI1(80),TI2(80)
      COMMON /FOR/AF,FM,ELI(120),DRI(120),XXS(120),YYS(120)
      COMMON /LDRG/ CCLCA(80),ETASPN(80),ISPNXX,EDRAG
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      COMMON/VELOC/RHOV(120),OMEGV(120),PSIV(120),PSIRV(120),PSITV(120)
      COMMON /SARC/ S(115),SPHI(115),SPSI(115),SMAX,XMAX,DYSTR(115)
      COMMON /DESGN/ CPP(120),EMST(120),CPPEX(120),XCP(120),            &
     & NCP,IDESIN,KDES,KDESMX,YYB1(120),CPP1(120),SUMDCP(50),           &
     & STARTC,BETAM(120),NSTART,WDES
      COMMON /VELCPT/ UCART(115),VCART(115),WCART(115),UCYL(115),       &
     &                VCYL(115) ,WCYL(115) ,USHER(115),VSHER(115),      &
     &                WSHER(115),USURF(115),VSURF(115),WSURF(115)
      COMMON /FF/ FFS(60,60),COTH(115),SINTH(115),P0,Q0,ELO2
      COMMON /WNGTE/ XROOT,YWNGRT,ZROOT
      COMPLEX S0,S1,S2
      DIMENSION CPU(80),CPL(80),DELTCP(80),XDUM(80),CPDUM(80),          &
     & XXI(115),YYI(115),CPNC(115),                                     &
     & XI1(115),XI2(115),UV(115),VV(115),WV(115),DPSIDO(115),EMM(115)
 1000 FORMAT(///4X,1HI,4X,1HJ,7X,3HRHO,12X,3HTHE,13X,1HF,14X,1HU,14X,   &
     & 1HV,14X,2HMC,13X,1HM,14X,2HCP/)
 1001 FORMAT(2I5,8E15.5)
 1002 FORMAT(4E18.6)
 1003 FORMAT(I5)
 1004 FORMAT(//10X,3HCL=,F8.5//10X,3HCD=,F8.5//10X,3HCN=,F8.5,10X,3HCA= &
     &,F8.5//10X,3HA =,F7.4//10X,6HEMINF=,F7.4,8X,4HALP=,               &
     & F7.4//10X,A8/)
 1005 FORMAT(1X,3E20.7)
 1006 FORMAT(2X,1HI,4X,6HX/XMAX,3X,6HY/XMAX,3X,3HPSI,4X,4HOMEG,         &
     &   6X,2HCP,5X,2HMC,8X,1HU,7X,1HV,7X,1HW,6X,4HBETA,4X,             &
     & 2HVS,6X,2HWS,6X,2HUC,6X,2HVC,6X,2HWC,3X,5HDELTA/)
 1007 FORMAT(I4,2F8.4,2F8.2,5F8.4,3F8.2,3F8.4,F8.2)
 1008 FORMAT(1H1)
 1010 FORMAT(/4X,1HI,6X,2HXX,8X,2HYY,9X,1HZ,9X,1HR,8X,3HAA1,7X,3HAA2,7X,&
     & 5HTHETA,6X,2HCS,8X,2HDZ,6X,4HDSBL,6X,3HSBL,8X,2HQE/)
 1012 FORMAT(1H1/5X,7HIMCMIN=,I3,10X,                                   &
     & 6HMCMIN=,F10.5)
 1014 FORMAT(2X,I3,12F10.5)
 1016 FORMAT(1H1)
 1018 FORMAT(/4X,1HI,6X,1HS,7X,5HPSIBD,5X,5HOMEG,2X,11HDPSIB/DOMEG,     &
     & 4X,2HI2,7X,2HI2,8X,4HUCYL,6X,4HVCYL,6X,4HWCYL,3X,8HDYBP/DZP,     &
     & 2X,13HCP*(DYBP/DZP)/)
 1020 FORMAT(/9X,1HI,4X,6HETASPN,6X,3HCPU,7X,3HCPL,4X,7HDELTACP,        &
     & 4X,6HDCPLIN,4X,6HCCL/CA/)
 1022 FORMAT(5X,I5,6F10.4)
 1024 FORMAT(//10X,21HCN (FROM DELTA CP ) =,F10.4,10X,                  &
     & 21HCN (FROM SPANLOAD) =,F10.4)
 1028 FORMAT(/9X,8H SPAN E=,F8.4/)
 1030 FORMAT(/9X,13H TOTAL ANGLE=,F10.4/)
 1032 FORMAT(80A1)
 1034 FORMAT(8F10.6)
 1036 FORMAT(1H1/5X,13HBASIC RESULTS  /)
 1038 FORMAT(/5X,16HSURFACE RESULTS /)
 1040 FORMAT(/5X,20HMORE SURFACE RESULTS /)
 1042 FORMAT(/5X,21HCROSSFLOW SONIC LINE //5X,                          &
     & 17HNUMBER OF POINTS 1X,I2//                                      &
     & 7X,1HJ,8X,3HXXI,8X,3HYYI /)
 1044 FORMAT(5X,I3,2F12.5)
 1046 FORMAT(/5X,48HDELTA CP , FLAT PLATE LINEAR DCP , AND SPANLOAD   , &
     & 13HDISTRIBUTION   /)
  402 FORMAT(1H1//10X,38HPURE CONICAL FORCE COEFFICIENT RESULTS //)
  404 FORMAT(/10X,36HDELTA CP FROM NON CONICAL CORRECTION   /)
  406 FORMAT(/9X,1HI,4X,6HETASPN,6X,3HCPU,7X,3HCPL,4X,7HDELTACP/)
  408 FORMAT(/10X,25HNON-CONICAL FORCE RESULTS //10X,3HCN=,F10.4//)
      ICM=IC-1
      JCM=JC-1
      GB=-GAMMA/(GAMMA-1.)
      C1=2./(GAMMA*EMINF*EMINF)
      C2=(A02*EMINF*EMINF)**(-GB)
      IF(IOUT2.NE.2) WRITE(LOUT,1036)
      DO 20 J=2,JCM
      IF(IOUT.EQ.1.AND.J.GT.2) GO TO 3
      IF(IOUT2.NE.2) WRITE(LOUT,1000)
    3 CONTINUE
      DO 20 I=2,IC
      FY=F(I,J+1)-F(I,J-1)
      FX=F(I+1,J)-F(I-1,J)
      YRHO=1./(C(I)-B(I))
      YTH=-(BPR(I)+Y(J)*(CPR(I)-BPR(I)))*YRHO
      RHO1=YRHO/(Y(J)+B(I)*YRHO)
      RHO=1.0/RHO1
      FF=FFS(I,J)
      HH=H(I,J)*FF
      VS=YRHO*FY/(2.*DY*HH)
      US=(FX*.5/DX+YTH*FY*.5/DY)*RHO1/HH
      V=VS+VI(I,J)
      U=US+UI(I,J)
      WL=F(I,J)+WI(I,J)
      IF(J.EQ.2) UV(I)=U
      IF(J.EQ.2) VV(I)=V
      IF(J.EQ.2) WV(I)=WL
      Q2C=U*U+V*V
      Q2=Q2C+WL*WL
      A2=-GA*Q2+A02
      EM2=Q2/ABS(A2)
      EM=SQRT(EM2)
      IF(J.EQ.2) EMST(I-1)=EM
      EMC=SQRT(Q2C/AMAX1(0.1E-04,A2))
      CP=C1*(C2*(1.+GA*EM2)**GB-1.)
      IF(A2.LT.0.0) CP=-C1
      RHO=1./RHO1
      IF(IOUT.EQ.1.AND.J.GT.2) GO TO 4
      IF(IOUT2.NE.2) WRITE(LOUT,1001) I,J,RHO,X(I),F(I,J),U,V,EMC,EM,CP
    4 CONTINUE
      IF(J.NE.2) GO TO 5
      CPP(I-1)=CP
      EMM(I-1)=EMC
    5 UI(I,J)=EMC
   10 CONTINUE
   20 CONTINUE
!
      XMAX=0.0
      DO 190 I=2,IC
      IF(XXB(I-1).GT.XMAX) IXMAX=I
      IF(XXB(I-1).GT.XMAX) XMAX=XXB(I-1)
  190 END DO
!
!
      MCMIN=5.0
      IMCMIN=0
      IMCM1=6
      IMCM2=IC-4
      DO 195 I=IMCM1,IMCM2
      IF(EMM(I-1).LT.MCMIN) IMCMIN=I
      IF(EMM(I-1).LT.MCMIN) MCMIN=EMM(I-1)
  195 END DO
!
!
      WRITE(LOUT,1008)
      WRITE(LOUT,1038)
      WRITE(LOUT,1006)
!
!
      DO 200 I=2,IC
!
!
      COEF1=1.0
      RHO=RHOV(I)
      OMEG=OMEGV(I)
      PSI=PSIV(I)
      PSIRHO=PSIRV(I)
      PSITHR=PSITV(I)
!
      A11=COEF1*(COS(PSI)*COS(OMEG)*PSIRHO+SIN(OMEG)*PSITHR)
      A21=COEF1*(COS(PSI)*SIN(OMEG)*PSIRHO-COS(OMEG)*PSITHR)
      A13=SIN(PSI)*COS(OMEG)
      A12=COEF1*(COS(PSI)*COS(OMEG)*PSITHR-SIN(OMEG)*PSIRHO)
      A22=COEF1*(COS(PSI)*SIN(OMEG)*PSITHR+COS(OMEG)*PSIRHO)
      A23=SIN(PSI)*SIN(OMEG)
      A31=-COEF1*SIN(PSI)*PSIRHO
      A32=-COEF1*SIN(PSI)*PSITHR
      A33=COS(PSI)
!
      UC=A11*VV(I)+A12*UV(I)+A13*WV(I)
      VC=A21*VV(I)+A22*UV(I)+A23*WV(I)
      WC=A31*VV(I)+A32*UV(I)+A33*WV(I)
!
      US=UC*SIN(PSI)*COS(OMEG)+VC*SIN(PSI)*SIN(OMEG)+WC*COS(PSI)
      VS=UC*COS(PSI)*COS(OMEG)+VC*COS(PSI)*SIN(OMEG)-WC*SIN(PSI)
      WS=-UC*SIN(OMEG)+VC*COS(OMEG)
!
      DELTA=0.0
      DELTA1=0.0
      DELTA2=0.0
      IF(I.EQ.2.OR.I.EQ.IC) GO TO 198
      IF(WS.EQ.0.0) GO TO 198
!
      DELTA1=SPHI(I-1)-OMEG-PI/2.0
      VI1=VS*COS(DELTA1)+WS*SIN(DELTA1)
      WI1=-VS*SIN(DELTA1)+WS*COS(DELTA1)
      IF(VI1.EQ.0.0) DELTA=DELTA1
      IF(VI1.EQ.0.0) GO TO 198
      DELTA2=ATAN(-VI1/WI1)
      DELTA=DELTA1+DELTA2
!
  198 CONTINUE
      DPSIDO(I)=SIN(PSI)*TAN(DELTA)
!
      U=US
      V=COS(DELTA)*VS+SIN(DELTA)*WS
      WL=-SIN(DELTA)*VS+COS(DELTA)*WS
      BETA=ATAN(WL/U)
      BETAM(I)=BETA
!
      UCART(I)=UC
      VCART(I)=VC
      WCART(I)=WC
!
      UCYL(I)=UC*COS(OMEG)+VC*SIN(OMEG)
      VCYL(I)=-UC*SIN(OMEG)+VC*COS(OMEG)
      WCYL(I)=WC
!
      USHER(I)=US
      VSHER(I)=VS
      WSHER(I)=WS
!
      USURF(I)=U
      VSURF(I)=V
      WSURF(I)=WL
!
      DELTA=57.2958*DELTA
      BETA=57.2958*BETA
      PSID=PSI*57.29577951
      OMEGD=OMEG*57.29577951
      DELTA1=DELTA1*57.29577951
      DELTA2=DELTA2*57.29577951
      XXBAZ=XXB(I-1)/XMAX
      YYBAZ=YYB(I-1)/XMAX
  200 WRITE(LOUT,1007)I,XXBAZ,YYBAZ,PSID,OMEGD,CPP(I-1),EMM(I-1),U      &
     & ,V,WL,BETA,DELTA1,DELTA2,UC,VC,WC,DELTA
      WRITE(LOUT,1006)
!
      DO 230 I=2,IC
      OMEG=OMEGV(I)
      XI1(I)=SIN(OMEG)*TAN(PSIV(I))-DPSIDO(I)*COS(OMEG)/COS(PSIV(I))**2
      XI2(I)=TAN(PSIV(I))**2
      PSID=PSIV(I)*57.29577951
      OMEGD=OMEG*57.29577951
      DYSTRM=DYSTR(I-1)
      CPDYST=CPP(I-1)*DYSTRM
      DPSIDO(I)=DPSIDO(I)*57.2958
      IF(IOUT2.EQ.2) GO TO 230
  230 END DO
!
!
!      TRACK STREAMLINES
!
      IF(IOUT2.NE.2) WRITE(LOUT,1012) IMCMIN,MCMIN
      Z=1.0
      R=SQRT(XXB(IMCMIN-1)**2+YYB(IMCMIN-1)**2+Z**2)
      SBL=0.0
      THETAS=0.0
!
!
      III=IMCMIN+1
      DO 300 I=III,IC
      ZM1=Z
!
      RRIM12=1.0+XXB(I-1)**2+YYB(I-1)**2
      RRIM22=1.0+XXB(I-2)**2+YYB(I-2)**2
!
      RRIM1=SQRT(RRIM12)
      RRIM2=SQRT(RRIM22)
!
      THETA=ACOS((XXB(I-1)*XXB(I-2)+YYB(I-1)*YYB(I-2)+1.0)/             &
     &       (RRIM1*RRIM2))
!
      RM12=(Z*XXB(I-2))**2+(Z*YYB(I-2))**2+Z*Z
      RM1=SQRT(RM12)
      RM2=(Z*XXB(I-1))**2+(Z*YYB(I-1))**2+Z*Z
      RM=SQRT(RM2)
!
!
      CS=SQRT(RM*RM+RM1**2-2.0*RM*RM1*COS(THETA))
      A=0.5*RM*RM1*SIN(THETA)
      HH=2.0*A/CS
!
!     AVERAGE BETA COULD ALSO BE USED
!
!
      BETA=ATAN(WSURF(I-1)/USURF(I-1))
      IF(ABS(BETA).LT.1.E-04.AND.I.NE.III) GO TO 310
      IF(BETA.LT.1.E-4) BETA = 0.075
!
      ARG1=HH/RM1
      ARG=HH/RM
      IF(ABS(ARG1).GT.1.0) ARG1=ABS(ARG1)/ARG1
      IF(ABS(ARG).GT.1.0) ARG=ABS(ARG)/ARG
      AA1=ACOS(ARG1)
      AA2=ACOS(ARG)
!
      DELM1=PI/2.0-AA1
      DELM=PI-(THETA+DELM1)
!
!
      CCC=PI-(DELM1+BETA)
      BBB=PI-DELM
      AAA=PI-(BBB+CCC)
!
      ADS=CS
      BDS=ADS*SIN(BBB)/SIN(AAA)
      CDS=ADS*SIN(CCC)/SIN(AAA)
!
      DSBL=BDS
      RDR=CDS
!
      R=Z*SQRT(1.0+XXB(I-1)**2+YYB(I-1)**2)
      R=R+RDR
      ZNEW2=R**2/(1.0+XXB(I-1)**2+YYB(I-1)**2)
      Z=SQRT(ZNEW2)
      DZ=Z-ZM1
      SBL=SBL+DSBL
!
      XX=XXB(I-1)*Z
      YY=YYB(I-1)*Z
      QE=SQRT(USURF(I)**2+WSURF(I)**2)
!
      THETD=57.29577951*THETA
      THETAS=THETAS+THETD
!
  300 END DO
  310 CONTINUE
!
!     BOW SHOCK
      DO 35 I=2,IC
      DO 30 JJ=2,JCM
      J=JCM-JJ+2
      IF(UI(I,J).LT.1.0) GO TO 31
   30 END DO
   31 RHO1=(C(I)-B(I))*Y(J)+B(I)
      RHO2=(C(I)-B(I))*Y(J+1)+B(I)
      RHO=(RHO2-RHO1)*(1.-UI(I,J))/(UI(I,J+1)-UI(I,J))+RHO1
      THE=X(I)
      CSI=RHO*COS(THE)
      ETA=RHO*SIN(THE)
      CALL RCONF(CSI,ETA,P,Q,HC,SCSI,SETA)
      OMEG=ATAN2(Q,P)
      P2Q2=SQRT(P*P+Q*Q)
      PSI=PI-2.*ATAN(CSCAL/P2Q2)
      XXS(I-1)=COS(OMEG)*TAN(PSI)
      YYS(I-1)=SIN(OMEG)*TAN(PSI)
   35 END DO
!     IMBEDDED SHOCK
      DO 45 J=2,JCM
      JS=J
      DO 40 I=2,IC
      IF(UI(I,J).GT.1.0) GO TO 41
   40 END DO
      GO TO 50
   41 EP=(1.-UI(I-1,J))/(UI(I,J)-UI(I-1,J))
      TH1=(X(I)-X(I-1))*EP+X(I-1)
      B1=(B(I)-B(I-1))*EP+B(I-1)
      C1=(C(I)-C(I-1))*EP+C(I-1)
      I1=I
      DO 42 I=I1,IC
      IF(UI(I,J).LE.1.0) GO TO 43
   42 END DO
   43 EP=(1.-UI(I,J))/(UI(I-1,J)-UI(I,J))
      TH2=(X(I-1)-X(I))*EP+X(I)
      B2=(B(I-1)-B(I))*EP+B(I)
      C2=(C(I-1)-C(I))*EP+C(I)
      R1=(C1-B1)*Y(J)+B1
      R2=(C2-B2)*Y(J)+B2
      VI(1,J)=TH1
      VI(2,J)=TH2
      WI(1,J)=R1
      WI(2,J)=R2
   45 END DO
   50 JS=JS-2
      JSS=2*JS
      IF(JS.EQ.0) GO TO 65
      DO 60 L=1,2
      DO 55 JJ=1,JS
      JS1=JJ+(L-1)*JS
      J=(2-L)*(JJ+1)+(L-1)*(JS-JJ+2)
      RHO=WI(L,J)
      THE=VI(L,J)
      CSI=RHO*COS(THE)
      ETA=RHO*SIN(THE)
      CALL RCONF(CSI,ETA,P,Q,HC,SCSI,SETA)
      OMEG=ATAN2(Q,P)
      P2Q2=SQRT(P*P+Q*Q)
      PSI=PI-2.*ATAN(CSCAL/P2Q2)
      XXI(JS1)=COS(OMEG)*TAN(PSI)
      YYI(JS1)=SIN(OMEG)*TAN(PSI)
   55 END DO
   60 END DO
   65 CONTINUE
      IF(IOUT2.EQ.2) GO TO 70
      IF(JSS.GT.0) WRITE(LOUT,1042) JSS
      IF(JSS.EQ.0) GO TO 70
      DO 68 J=1,JSS
   68 WRITE(LOUT,1044) J,XXI(J),YYI(J)
   70 CONTINUE
!
!
      CALL FORCE(ELC,DRC,EMC,CPP,DX,IC,X,AZ,IXMAX,IOUT2,ETADR)
!
!     COMPUTE DELTA CP
!
      ISPNXX=IC-IXMAX+1
      DO 320 I=IXMAX,IC
      II=IC-I+1
      ETASPN(II)=XXB(I-1)/XMAX
  320 CPU(II)=CPP(I-1)
!
      IMXM1=IXMAX-1
      DO 330 I=1,IMXM1
      XDUM(I)=XXB(I)/XMAX
  330 CPDUM(I)=CPP(I)
      CALL VINTER(CPL,ETASPN,1,ISPNXX,CPDUM,XDUM,1,IMXM1,2,0)
      WRITE(LOUT,1016)
      IF(IOUT2.NE.2) WRITE(LOUT,1046)
      IF(IOUT2.NE.2) WRITE(LOUT,1020)
      DO 340 I=1,ISPNXX
  340 DELTCP(I)=CPL(I)-CPU(I)
!
!      COMPUTE SPANLOAD DISTRIBUTION
!
      ISPNM2=ISPNXX-2
      FI1=0.0
      SUM=0.0
      DO 346 I=1,ISPNM2
      II=ISPNXX-I
      FIM1=FI1
      FI1=DELTCP(II)/ETASPN(II)**2
      DELTAH=ETASPN(II+1)-ETASPN(II)
      DELS2=0.5*DELTAH*(FI1+FIM1)
!
      SS1=DELTCP(II)*(1.0/ETASPN(II)-1.0/ETASPN(II+1))
      SS2=(DELTCP(II+1)-DELTCP(II))*ALOG(ETASPN(II+1)/ETASPN(II))
      DELS1=SS1+SS2
!
      DELTAS=DELS2
      IF(ETASPN(II).LT.0.20) DELTAS=DELS1
!
      SUM=SUM+DELTAS
  346 CCLCA(II)=ETASPN(II)*2.0*SUM
      CCLCA(1)=2.0*DELTCP(1)
      CCLCA(ISPNXX)=0.0
      CALL SIMP(CLCCL,ETASPN,CCLCA,ISPNXX,IERR)
      CALL SIMP(CL,ETASPN,DELTCP,ISPNXX,IERR)
!
      CCLCA(ISPNXX)=0.0
      XLESWP=PIO2-ATAN(AZ)
      XMN=EMINF*COS(XLESWP)
      BETA=SQRT(EMINF**2-1.0)
      DO 350 I=1,ISPNXX
      DELCPL=0.0
      IF(ETASPN(I).LT.1.0) DELCPL=ELC/PIO2/SQRT(1.0-ETASPN(I)**2)
      IF(XMN.LT.1.0) GO TO 348
      XNCP=TAN(XLESWP)/BETA
      DELCPL=ELC/SQRT(1.0-XNCP**2)
      IF(ETASPN(I).LT.XNCP) DELCPL=DELCPL*(1.0-ASIN(XNCP*               &
     & SQRT((1.0-(ETASPN(I)/XNCP)**2)/(1.0-ETASPN(I)**2)))/PIO2)
  348 IF(IOUT2.EQ.2) GO TO 350
      WRITE(LOUT,1022) I,ETASPN(I),CPU(I),CPL(I),DELTCP(I),DELCPL,      &
     & CCLCA(I)
  350 END DO
      IF(IOUT2.NE.2) WRITE(LOUT,1020)
!
      KLUE=2
      IF(IEQV.EQ.1) CALL EQUIV(NG,IXMAX,XXB,YYB,RHO,X,CPNC,KLUE)
!
      IF(IEQV.NE.1) GO TO 391
!
      DO 385 I=IXMAX,IC
      II=IC-I+1
  385 CPU(II)=CPNC(I-1)
      DO 387 I=1,IMXM1
  387 CPDUM(I)=CPNC(I)
      CALL VINTER(CPL,ETASPN,1,ISPNXX,CPDUM,XDUM,1,IMXM1,2,0)
      WRITE(LOUT,1016)
      IF(IOUT2.NE.2) WRITE(LOUT,404)
      IF(IOUT2.NE.2) WRITE(LOUT,406)
      DO 389 I=1,ISPNXX
      DELTCP(I)=CPL(I)-CPU(I)
      IF(IOUT2.NE.2) WRITE(LOUT,1022) I,ETASPN(I),CPU(I),CPL(I),        &
     & DELTCP(I)
  389 END DO
      IF(IOUT2.NE.2) WRITE(LOUT,406)
      CALL SIMP(CNNC,ETASPN,DELTCP,ISPNXX,IERR)
      WRITE(LOUT,408) CNNC
!
!
  391 CONTINUE
!
!
!    PUT OUT SPANWISE DELTA CP@S FOR W12 CALCULATION
!
      IF(K.NE.KREF) GO TO 358
      AZLE=ATAN(AZ)*180.0/3.1415926
      AZLE=90.0-AZLE
      WRITE(32,1032) TI2
      XSPNXX=ISPNXX
      WRITE(32,1034) XSPNXX,AZLE,ETADR,XORIGC,YORIGC
      DO 355 I=1,ISPNXX
  355 WRITE(32,1034) ETASPN(I),DELTCP(I)
  358 CONTINUE
!
      WRITE(LOUT,402)
      WRITE(LOUT,1024) CL,CLCCL
!
!
!      COMPUTE E FROM IVES PROGRAM-LIDRAG
!
      CALL LIDRAG
      WRITE(LOUT,1028) EDRAG
!
      CN=ELC*COS(ALP)+DRC*SIN(ALP)
      CA=-ELC*SIN(ALP)+DRC*COS(ALP)
!
      ALPD=180.0/PI*ALP
      ETATE=YWNGRT/(XMAX*(XSTN-XORIGC))
      ICNT=0
      DO 359 I=1,ICM
      ETA=XXB(I)/XMAX
      IF(ETA.LT.ETATE) GO TO 359
      ICNT=ICNT+1
  359 END DO
      WRITE(LOUT,1004) ELC,DRC,CN,CA,AF,EMINF,ALPD,XLGNO
      IF(IPUNCH.LT.3) GO TO 380
      IF(K.LT.KREF) GO TO 380
      WRITE(7,1032) TI1
      WRITE(7,1034) EMINF,ALPD,XSTN,CN,CNNC
      XICNT=ICNT
      WRITE(7,1034) XICNT
      DO 360 I=1,ICM
      XXBAZ=XXB(I)/XMAX
      YYBAZ=YYB(I)/XMAX
      IF(XXBAZ.LT.ETATE) GO TO 360
      IF(IEQV.NE.1) WRITE(7,1002) XXBAZ,YYBAZ,CPP(I)
      IF(IEQV.EQ.1) WRITE(7,1002) XXBAZ,YYBAZ,CPP(I),CPNC(I)
  360 END DO
  380 CONTINUE
      IF(IPLOT.EQ.0) GO TO 100
   90 XMAX=AZ+.00001
      IF(IPLOT.EQ.2) WRITE(7,1005)(XXB(I),YYB(I),CPP(I),I=1,ICM)
      CALL GRAF(XXB,YYB,CPP,ICM,XXS,YYS,XXI,YYI,JSS,XMAX,               &
     & X,Y,0,TI1,TI2,EMM,ELC,DRC,CPNC)
  100 RETURN
      END




!!! this whole thing must be dealt with .......
      SUBROUTINE GRAF(XB,YB,CP,IM,XS,YS,XI,YI,JS,XMAX,XP,YP,KPLOT,A,B   &
     & ,EMC,CL,CD,CPNC)
      COMMON /DESGN/ CPP(120),EMST(120),CPPEX(120),XCP(120),            &
     & NCP,IDESIN,KDES,KDESMX,YYB1(120),CPP1(120),SUMDCP(50),           &
     & STARTC,BETAM(120),NSTART,WDES
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      DIMENSION XB(1),YB(1),CP(1),XS(1),YS(1),XI(1),YI(1),XP(1),YP(1)
      DIMENSION R(20),BUFFER(512),A(1),B(1),EMC(1),CPNC(1)
 1001 FORMAT(80A1)
 1002 FORMAT(5X,3HCL=,F7.4,5X,3HCD=,F7.4,45X)
!     CP AND GEOM PLOT
    5 CALL PLOT(2.5,1.5,-3)
      DO 7 I=1,IM
      XP(I)=5.*XB(I)/XMAX
    7 YP(I)=5.*YB(I)/XMAX
      CALL LINE(XP,YP,IM,2,2,1,0,0.)
    9 CALL PLOT(0.,4.,-3)
      CALL AXIS(-.5,-4.,2HCP,2,8.,90.,0.,-.1,0)
      CALL AXIS(0.,-5.0,1HX,1,5.,0.,0.,.2,0)
      DO 10 I=1,IM
      XP(I)=5.*XB(I)/XMAX
      YP(I)=-10.*CP(I)
   10 END DO
      CALL LINE(XP,YP,IM,2,2,1,0,0.)
      CP8V=-0.8*2.0/1.4/EMINF**2
      DO 11 I=1,2
      YP(I)=-10.*CP8V
      XP(I)=5.*XB(I)/XMAX
   11 CALL SYMBL4(XP(I),YP(I),0.07,1,0.0,-1)
      IF(IEQV.EQ.0) GO TO 14
      DO 12 I=1,IM
      XP(I)=5.*XB(I)/XMAX
      YP(I)=-10.*CPNC(I)
   12 CALL SYMBL4(XP(I),YP(I),0.07,1,0.0,-1)
   14 CONTINUE
!
!!!      ENCODE(80,1001,R) (A(I),I=1,80)
      CALL SYMBL4(0.,4.,.12,R,0.,80)
!!!      ENCODE(80,1003,R) XLGNO
 1003 FORMAT(30H GROSSMAN@S CONICAL RELAXATION ,5X,3HJOB,A8)
      CALL SYMBL4(0.,4.3,.12,R,0.,80)
!!!      ENCODE(80,1001,R) (B(I),I=1,80)
      CALL SYMBL4(0.,3.76,.12,R,0.,80)
!!!      ENCODE(80,1002,R) CL,CD
      CALL SYMBL4(0.,3.52,.12,R,0.,80)
!     MCROSS AND GEOM PLOT
      CALL PLOT(8.5,-4.,-3)
      DO 17 I=1,IM
      XP(I)=5.*XB(I)/XMAX
   17 YP(I)=5.*YB(I)/XMAX
      CALL LINE(XP,YP,IM,2,2,1,0,0.)
      IF(JS.EQ.0) GO TO 19
      DO 18 I=1,JS
      XP(I)=5.*XI(I)/XMAX
   18 YP(I)=5.*YI(I)/XMAX
      CALL LINE(XP,YP,JS,2,2,1,0,0.)
   19 CALL PLOT(0.,3.,-3)
      CALL AXIS(-.5,-1.,2HMC,2,6.25,90.0,0.4,.4,0)
      CALL AXIS(0.,-4.0,1HX,1,5.,0.,0.,.2,0)
      DO 20 I=1,IM
      XP(I)=5.*XB(I)/XMAX
      EMCPLT=AMIN1(2.4,EMC(I))
   20 YP(I)=2.5*EMCPLT-1.0
      CALL LINE(XP,YP,IM,2,2,1,0,0.)
!!!      ENCODE(80,1001,R) (A(I),I=1,80)
      CALL SYMBL4(0.,5.,.12,R,0.,80)
!!!      ENCODE(80,1001,R) (B(I),I=1,80)
      CALL SYMBL4(0.,4.76,.12,R,0.,80)
!!!      ENCODE(80,1002,R) CL,CD
      CALL SYMBL4(0.,4.52,.12,R,0.,80)
      CALL PLOT(8.5,-4.5,-3)
      IF(KDES.EQ.13) CALL PLOT(0.,0.,999)
      IF(KDES.EQ.28) CALL PLOT(0.,0.,999)
      RETURN
      END


      SUBROUTINE STRPLT
      CALL PLOTS(BUFFER,512)
      CALL SYMBL4(0.,0.,0.7,1,0.,-1)
      RETURN
      END


      SUBROUTINE ENDPLT
      CALL EPLOT
      RETURN
      END


      SUBROUTINE RCONF(CSI,ETA,P,Q,H,SCSI,SETA)
!
!      REVERSE CONFORMAL MAPPING FROM CSI,ETA TO P,Q
!      (MAPPED PLANE TOWARDS PHYSICAL PLANE)
!
      COMMON/MAP/S0,S1,S2,PII,CSCAL
      COMPLEX S,G,G1,S0,S1,S2,SPR
      G=CMPLX(CSI,ETA)
      G1=G+S2
      S=(G1*G1+S0*S1*.25)/(G1-.25*(S0-S1))
      P=REAL(S)
      Q=AIMAG(S)
      SPR=(S-S0)*(S+S1)/((G1-.5*S0)*(G1+.5*S1))
!
!      CONFORMAL MAPPING METRIC
!
      H=CABS(SPR)
      PCSI=REAL(SPR)
      QCSI=AIMAG(SPR)
      D=1./SQRT(P*P+Q*Q)
      SCSI=(P*PCSI+Q*QCSI)*D
      SETA=(-P*QCSI+Q*PCSI)*D
      RETURN
      END


      SUBROUTINE EQUIV(NQ,IXMAX,X,Y,R,THE,CPNCQ,KLUE)
!
!      REDEFINE THE CROSS SECTION TO ANALIZE THE
!      EQUIVALENT CONICAL SECTION
!
      COMMON/GEO/ NG,NS,AZ,BZ,CC(5),CT(5),CM(5),LC,LT,LM
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON /DESGN/ CPP(120),EMST(120),CPPEX(120),XCP(120),            &
     & NCP,IDESIN,KDES,KDESMX,YYB1(120),CPP1(120),SUMDCP(50),           &
     & STARTC,BETAM(120),NSTART,WDES
      COMMON /VELCPT/ UCART(115),VCART(115),WCART(115),UCYL(115),       &
     &                VCYL(115) ,WCYL(115) ,USHER(115),VSHER(115),      &
     &                WSHER(115),USURF(115),VSURF(115),WSURF(115)
      COMMON /GEOIN/ RRZ(201),THZ(201),X0,Y0,Y1,NM,NGH,NMH
      COMMON /SARC/ S(115),SPHI(115),SPSI(115),SMAX,XMAX,DYSTR(115)
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      COMMON /WNGTE/ XROOT,YWNGRT,ZROOT
      DIMENSION X(1),Y(1),R(1),THE(1),CPNCQ(1),ZIN(60),                 &
     & SARCIN(60),SARCH(200)
      DIMENSION YHAR(200),ZOUTH(200),DNYH(200),DNZH(200),DNXH(200),     &
     &          YIN(60),DNY(60),DNZ(60),DNX(60)
      EQUIVALENCE (UCART(1),YHAR(1)),(VCART(85),ZOUTH(1)),              &
     & (UCYL(55),DNYH(1)),(WCYL(25),DNZH(1)),(USHER(110),DNXH(1)),      &
     & (WSHER(80),YIN(1))
!
      IF(IOUT2.NE.2) WRITE(LOUT,320)
      G=GAMMA
      G1=(G-1.0)/2.0
      RADD=180.0/PI
      ICM=IC-1
      ETATE=YWNGRT/(XMAX*(XSTN-XORIGC))
!
      REWIND 20
      DO 220 N=1,NGH
      READ(20,350) XSTN,YHAR(N),ZOUTH(N),DNYH(N),DNZH(N),DNXH(N)
  220 END DO
      CALL ARCLNG(NGH,YHAR,ZOUTH,SARCH)
      DO 225 I=1,ICM
      ZIN(I)=Y(I)*(XSTN-XORIGC)
  225 YIN(I)=X(I)*(XSTN-XORIGC)
!
      ZAVG=-TAN(DALP)
      CALL ARCLNG(ICM,YIN,ZIN,SARCIN)
      CALL VINTER(DNY,SARCIN,1,ICM,DNYH,SARCH,1,NGH,2,0)
      CALL VINTER(DNZ,SARCIN,1,ICM,DNZH,SARCH,1,NGH,2,0)
      CALL VINTER(DNX,SARCIN,1,ICM,DNXH,SARCH,1,NGH,2,0)
!
!
      IF(IOUT2.NE.2) WRITE(LOUT,330)
!
      DO 250 I=1,ICM
!
      CPNCQ(I)=0.0
!
      ETA=X(I)/XMAX
!
      IF(ETA.LE.ETATE) GO TO 250
!
      XMSQ=((1.+G1*EMINF**2)/(1.+G/2.*EMINF**2*CPP(I))**((G-1.)         &
     &     /G)-1.)/G1
      XMCON=SQRT(XMSQ)
      CALL PMA(XMCON,XNUC,0)
!
      FETA=(Y(I)-ZAVG)/XMAX
      FPETA=-DNY(I)/DNZ(I)
      DFDXC=(FETA-ETA*FPETA)*AZ
      DFDXNC=DFDXC
      IF(DNZ(I).NE.0) DFDXNC=-DNX(I)/DNZ(I)
      DELNU=DFDXNC-DFDXC
      IF(I.GT.IXMAX) DELNU=-DELNU
      XNUNC=XNUC+DELNU
      CALL PMA(XMNNC,XNUNC,1)
      CPNC=(1.0+G1*EMINF**2)/(1.0+G1*XMNNC**2)
      CPNC=CPNC**(G/(G-1.0))-1.0
      CPNC=2.0/G/EMINF**2*CPNC
      DELMCH=XMNNC-XMCON
      XNUCD=RADD*XNUC
      XNUNCD=RADD*XNUNC
      DELNUD=RADD*DELNU
!
      CPNCQ(I)=CPNC
!
      IF(IOUT2.EQ.2) GO TO 250
!
      WRITE(LOUT,300) I,XMCON,XNUC,YIN(I),DNY(I),DNZ(I),DNX(I),CPP(I),  &
     & CPNC,DELMCH,DELNUD,ETA
!
  250 END DO
!
      IF(IOUT2.NE.2) WRITE(LOUT,330)
!
  300 FORMAT(5X,I5,12F10.5)
  320 FORMAT(1H1//5X,26HMODIFICATION OF PRESSURES ,                     &
     & 36HTO ACCOUNT FOR NON-CONICAL GEOMETRY  //)
  330 FORMAT(/9X, 1HI,5X,4HMCON,6X,5HNUCON,6X,3HYIN,7X,3HDNY,           &
     & 7X,3HDNZ,7X,3HDNX,7X,3HCPP,6X,4HCPNC,5X,6HDELMCH,4X,6HDELNUD,    &
     & 5X,3HETA/)
  340 FORMAT(//)
  350 FORMAT(6E14.7)
!
      RETURN
      END


      SUBROUTINE PMA(XM,XNU,MODE)
!
!      PRANDTL-MEYER ANGLE
!
!      MODE=0  GIVE MACH  - GET ANGLE
!           1  GIVE ANGLE - GET MACH
!
      EPS=0.1E-6
      G=1.4
      PIO2=1.570796327
      A=SQRT((G+1.0)/(G-1.0))
      XNUMAX=PIO2*(A-1.0)
!
      IF(MODE.EQ.1) GO TO 100
      Q=SQRT(XM**2-1.0)
      XNU=A*ATAN(Q/A)-ATAN(Q)
!
      RETURN
!
  100 CONTINUE
      IF(XNU.LE.0.0) GO TO 140
      IF(XNU.GT.0.38397) EPS=EPS*10.0
      IF(XNU.GE.XNUMAX) GO TO 120
      I=0
      C1=XNU/XNUMAX
      XN=0.56+0.313*C1-0.42*SQRT(C1)
      XM=1.0/(1.0-C1**XN)
      Q=SQRT(XM**2-1.0)
!
!
   50 I=I+1
      IF(I.GT.20) WRITE(6,260) DELTA
  260 FORMAT(/5X,14HI GT 20 IN PMA ,6HDELTA=,F10.6//)
      IF(I.GT.20) GO TO 60
      FQ=XNU-A*ATAN(Q/A)+ATAN(Q)
      FPQ=-A*A/(A*A+Q*Q)+1.0/(1.0+Q*Q)
      QP=Q
      Q=Q-FQ/FPQ
      DELTA=ABS(Q-QP)
  500 FORMAT(I10,4E12.5)
      IF(DELTA.GT.EPS) GO TO 50
   60 XM=SQRT(Q*Q+1.0)
      RETURN
!
  120 XM=100.0
      WRITE(6,220) XNU,XNUMAX
  220 FORMAT(5X,20HXNU GT XNUMAX - XNU+,F10.5,8X,7HXNUMAX=,             &
     & F10.5)
      RETURN
!
  140 XM=1.0
      WRITE(6,240) XNU
      XNU=0.0
  240 FORMAT(/5X,20HXNU LT 0 IN PMA XNU=,F10.4//)
!
      RETURN
!
      END


      SUBROUTINE VINTER(FN,X,K0,KMAX,VF,S,I0,IMAX,LF,IDER)
!
!      INTERPLOLATION - FROM JOE VOLPE
!
!      FN- OUTPUT VECTOR OF FUNCTION OR SLOPE
!      X-  LOCATION OF FN
!      K0- 1ST INDEX VALUE USED IN FN ARRAY
!      KMAX- LAST INDEX VALUE USED IN FN ARRAY
!      VF- INPUT FUNCTION VALUE
!      S-  LOCATION OF INPUT FUNCTION VALUE
!      I0- 1ST INDEX VALUE OF VF USED FOR INTERPOLATION
!      IMAX-LAST INDEX VALUE OF VF USED FOR INTERPOLATION
!      LF- ORDER OF INTERPOLATION =2-LINEAR
!                                 =4-CUBIC
!      IDER=0 FUNCTION VALUE RETURNED
!          #0 SLOPE OF FUNCTION RETURNED
!
      DIMENSION FN(1),X(1),VF(1),S(1)
      K=K0
      LF12=LF/2
    5 I=I0-1
   10 I=I+1
      IF(X(K).LT.S(I0+LF12)) GO TO 12
      IF(X(K).GE.S(IMAX-LF12)) GO TO 13
      IF(X(K).GE.S(I).AND.X(K).LT.S(I+1)) GO TO 14
      GO TO 10
   12 I=I0
      GO TO 20
   13 I=IMAX-LF+1
      GO TO 20
   14 I=I-LF/2+1
   20 FN(K)=0.
   22 L=I-1
   25 L=L+1
      RAT=0.
      N=I-1
      IF(IDER.LE.0) N=IMAX
   27 N=N+1
      M=I-1
      DU=1.
      DD=1.
      IF(N.EQ.L) GO TO 34
   30 M=M+1
      IF(M.EQ.L) GO TO 32
      IF(M.EQ.N) GO TO 31
      DU=DU*(X(K)-S(M))
   31 DD=DD*(S(L)-S(M))
   32 IF(M-I-LF+1) 30,33,33
   33 RAT=RAT+DU/DD
   34 IF(N-I-LF+1) 27,35,35
   35 FN(K)=FN(K)+RAT*VF(L)
      IF(L-I-LF+1) 25,40,40
   40 K=K+1
      IF(K-KMAX) 5,5,50
   50 RETURN
      END


      SUBROUTINE FORCE(CL,CD,EMC,CPP,DX,IC,X,AZ,IMAX,IOUT2,ETADR)
!
!      INTEGRATE PRESSURES ON SURFACE TO GET FORCES
!
      COMMON /FOR/AF,FM,ELI(120),DRI(120),XXS(120),YYS(120)
      COMMON/PLO/XXB(120),YYB(120)
      DIMENSION CPP(1),X(1),XXQ(120)
      FLIN(R,T,ETA,YR,YT)=(ETA-YR)/(YT-YR)*(T-R)+R
      IF(IOUT2.NE.2) WRITE(6,100)
  100 FORMAT(1H1//10X,7HCONICAL ,23H FORCE DISTRIBUTIONS,  ,            &
     & 15HBODY AND SHOCK   ,                                            &
     & 9HLOCATIONS//8X  1HI,5X,4HX(I),8X,2HCL,8X,2HCD,5X,4HOMEG,8X,     &
     & 3HXXB,7X,3HYYB,7X,2HRB,8X,3HXXS,7X,3HYYS,6X,2HRS,6X,5HRS/RB /)
      ELC=0.
      DRC=0.
      XMAX=XXB(IMAX)
      DO 10 I=2,IC
      RB=SQRT(XXB(I-1)**2+YYB(I-1)**2)
      RS=SQRT(XXS(I-1)**2+YYS(I-1)**2)
      RSRB=RS/RB
      XXQ(I)=XXB(I-1)/XMAX
      OMEG=57.29578*X(I)
      IF(I.EQ.2) GO TO 3
      IF(XXQ(I).GE.ETADR.AND.XXQ(I-1).LT.ETADR) INITL=I
      IF(XXQ(I).LE.ETADR.AND.XXQ(I-1).GT.ETADR) IFINL=I
    3 CONTINUE
      PF=.5*CPP(I-1)
      EI=PF*ELI(I)
      DI=PF*DRI(I)
      EIW=EI/AZ
      DIW=DI/AZ
      IF(IOUT2.NE.2) WRITE(6,1) I,X(I),EIW,DIW,OMEG,XXB(I-1),YYB(I-1),  &
     & RB,XXS(I-1),YYS(I-1),RS,RSRB
      IF(I.NE.2.AND.I.NE.IC) GO TO 5
      EI=.5*EI
      DI=.5*DI
    5 ELC=ELC+EI
      DRC=DRC+DI
   10 END DO
      CLL=0.0
      CDL=0.0
      DO 20 I=2,IMAX
      PF=0.5*CPP(I-1)
      EI=PF*ELI(I)
      DI=PF*DRI(I)
      IF(I.NE.2.AND.I.NE.IMAX) GO TO 15
      EI=0.5*EI
      DI=0.5*DI
   15 CLL=CLL+EI
      CDL=CDL+DI
   20 END DO
    1 FORMAT(5X,I4,11F10.4)
      CL=2.0*ELC*DX/AZ
      CD=2.0*DRC*DX/AZ
      CLL=DX/AZ*2.0*CLL
      CDL=DX/AZ*2.0*CDL
      CLU=CL-CLL
      CDU=CD-CDL
      XLD=CL/CD
      XLDU=CLU/CDU
      XLDL=CLL/CDL
!
      WRITE(6,120) CL,CD,CLU,CLL,CDU,CDL,XLD,XLDU,XLDL
      IF(ETADR.EQ.0.0) RETURN
      CLETDR=0.0
      CDETDR=0.0
      ISUM1=INITL+1
      ISUM2=IFINL-1
      DO 30 I=ISUM1,ISUM2
      CLDELT=DX/AZ*(CPP(I-1)*ELI(I)+CPP(I-2)*ELI(I-1))/2.0
      CDDELT=DX/AZ*(CPP(I-1)*DRI(I)+CPP(I-2)*DRI(I-1))/2.0
      CLETDR=CLETDR+CLDELT
   30 CDETDR=CDETDR+CDDELT
!
!      ADD END POINTS
!
      DXI=X(INITL)-FLIN(X(INITL-1),X(INITL),ETADR*XMAX,                 &
     & XXB(INITL-2),XXB(INITL-1))
      XINITL=X(INITL)-DXI
      DXF=FLIN(X(IFINL-1),X(IFINL),ETADR*XMAX,XXB(IFINL-2),             &
     &    XXB(IFINL-1))-X(IFINL-1)
      XFINAL=X(IFINL-1)+DXF
      FIL=FLIN(CPP(INITL-2)*ELI(INITL-1),CPP(INITL-1)*ELI(INITL),       &
     &    XINITL,X(INITL-1),X(INITL))
      FFL=FLIN(CPP(IFINL-2)*ELI(IFINL-1),CPP(IFINL-1)*ELI(IFINL),       &
     & XFINAL,X(IFINL-1),X(IFINL))
      FID=FLIN(CPP(INITL-2)*DRI(INITL-1),CPP(INITL-1)*DRI(INITL),       &
     &     XINITL,X(INITL-1),X(INITL))
      FFD=FLIN(CPP(IFINL-2)*DRI(IFINL-1),CPP(IFINL-1)*DRI(IFINL),       &
     &    XFINAL,X(IFINL-1),X(IFINL))
      XIFIL=DXI/AZ*(CPP(INITL-1)*ELI(INITL)+FIL)/2.0
      XIFFL=DXF/AZ*(FFL+CPP(IFINL-2)*ELI(IFINL-1))/2.0
      XIFID=DXI/AZ*(CPP(INITL-1)*DRI(INITL)+FID)/2.0
      XIFFD=DXF/AZ*(FFD+CPP(IFINL-2)*DRI(IFINL-1))/2.0
      CLETDR=CLETDR+XIFIL+XIFFL
      CDETDR=CDETDR+XIFID+XIFFD
!
      WRITE(6,125) INITL,IFINL,ETADR,CLETDR,CDETDR
!
  120 FORMAT(//5X,4HCL =,F8.4,6X,4HCD =,F8.4//4X,                       &
     &5H CLU=,F8.4,6X,4HCLL=,F8.4//5X,4HCDU=,F8.4,                      &
     & 6X,4HCDL=,F8.4//5X,4HL/D=,F8.3,6X,                               &
     & 11HL/D UPPER =,F8.3,6X,11HL/D LOWER =,F8.4/)
  125 FORMAT(//10X,6HINITL=,I3,10X,6HIFINL=,I3,//10X,                   &
     & 6HETADR=,F6.3,5X,10HCL(ETADR)=,F7.4,5X,10HCD(ETADR)=,F7.4/)
!
      RETURN
      END


!  DECK050 FORTH LIDRAG    VERSION OF 76/05/20 AT 03.59.51  ( 057729)


      SUBROUTINE LIDRAG
!
!      WING SPAN EFFICIENCY [E[ IS COMPUTED BY FOURIER ANALYSIS
!
!     WRITTEN BY DAVE IVES, RESEARCH, X2221, 4-5-72
!
      COMMON /LDRG/ CCLCA(80),ETASPN(80),ISPNXX,EDRAG
      DIMENSION X(80),F(80)
      NOUT=6
      DO 110 J=1,ISPNXX
      X(J)=ETASPN(J)
  110 F(J)=CCLCA(J)
      M=32
      CALL MAST(ISPNXX,M,X,F,SUM,A1,NOUT)
      E = A1**2 / SUM
      EDRAG=E
      RETURN
      END


!  DECK057 FORTH MAST      VERSION OF 76/06/17 AT 16.33.37  ( 029941)
      SUBROUTINE MAST (N,M,X,F,SUM,A1,NOUT)
      DIMENSION X(1),F(1),X2(512),F2(129)
      DIMENSION A(255),B(255),XX(512)
      DIMENSION FX(129),FXX(129),FXXX(129)
      DIMENSION YY(514),Z(1024),W(512)
      EQUIVALENCE (W(1),X2(1)),(Z(1),F2(1)),(Z(130),FX(1)),             &
     &     (Z(259),FXX(1)),(Z(388),FXXX(1))
!     N MUST NOT EXCEED 129
!     THE LARGEST PRIME FACTOR OF M SHOULD NOT EXCEED ELEVEN
!     M=4*N (OR THEREABOUTS) IS RECOMMENDED, WHERE POSSIBLE
!     IF M EXCEEDS 128 IT IS RESET TO 128
!     GAMMA AT THE TIP OF THE WING IS AUTOMATICALLY ZEROED
      IF(M.GT.128) M=128
      IF(N.GT.129) RETURN
      DO 1 I=1,N
    1 XX(I)=-ACOS(X(I))
      F(N)=0.
      CALL FIT2(N,XX,F,FX,FXX,FXXX,1,2,0.0D0,0.0D0)
      DX=(XX(N)-XX(1))/M
      X2(1)=XX(1)
      MP=M+1
      DO 10 I=2,MP
   10 X2(I)=X2(I-1)+DX
      CALL DELTA1(N,XX,MP,X2)
      CALL INTERX(MP,F,FX,FXX,FXXX,F2)
      F2(MP)=0.
      DO 11 I=1,M
      XX(I)=F2(MP-I+1)
      XX(I+M)=F2(I)
      XX(I+2*M)=-F2(MP-I+1)
   11 XX(I+3*M)=-F2(I)
      CALL SERIES(XX,M*4,AZ,A,B,AN,YY,Z,W)
      SUM=0.
      M2M=2*M-1
      DO 12 I=1,M2M
   12 SUM=SUM+I*B(I)**2
      A1=B(1)
      RETURN
      END


!  DECK056 FORTH DELTA1    VERSION OF 76/04/24 AT 06.32.20  ( 055231)
      SUBROUTINE DELTA1 (MI1,X1,MI2,X2)
      DIMENSION X1(1),X2(1)
      COMMON /INTIVE/ D2(129),L2(129)
      MI1M1=MI1-1
      MI2M1=MI2-1
      L2(1)=1
      D2(1)=0.0
      IS=1
      DO 3 I2=2,MI2M1
      DO 1 I1=IS,MI1M1
      IF (X1(I1+1).GT.X2(I2)) GO TO 2
    1 END DO
    2 IS=I1
      L2(I2)=IS
    3 D2(I2)=X2(I2)-X1(IS)
      L2(MI2)=MI1
      D2(MI2)=0.0
      RETURN
      END


!  DECK054 FORTH FIT2      VERSION OF 76/04/24 AT 06.32.20  ( 055231)
      SUBROUTINE FIT2 (N,X,F,FX,FXX,FXXX,K1,KN,END1,ENDN)
      DIMENSION X(1),F(1),FX(1),FXX(1),FXXX(1)
      NM1=N-1
      IF (N.LT.3) X(N+1)=X(N)+1.0
      IF (N.LT.3) F(N+1)=F(N)
      DX2=X(2)-X(1)
      GO TO (1,2,3),K1
    1 FX(1)=0.5
      FXXX(1)=3.*((F(2)-F(1))/DX2-END1)/DX2
      GO TO 4
    2 FX(1)=0.0
      FXXX(1)=END1
      GO TO 4
    3 FX(1)=-1.0
      FXXX(1)=-DX2*END1
    4 DO 5 I=2,NM1
      DX1=X(I)-X(I-1)
      DX2=X(I+1)-X(I)
      FX(I)=.5*DX2/(DX1+DX2-.5*DX1*FX(I-1))
    5 FXXX(I)=(6.*(F(I+1)-F(I))/DX2-6.*(F(I)-F(I-1))/DX1-DX1*FXXX(I-1)) &
     &*FX(I)/DX2
      DX1=X(N)-X(NM1)
      FX(N)=0.0
      GO TO (6,7,8),KN
    6 FXXX(N)=(6.*(ENDN-(F(N)-F(NM1))/DX1)/DX1-FXXX(NM1))/(2.-FX(NM1))
      GO TO 9
    7 FXXX(N)=ENDN
      GO TO 9
    8 FXXX(N)=(ENDN*DX1+FXXX(NM1))/(1.+FX(NM1))
    9 FXX(N)=FXXX(N)
      DO 10 II=1,NM1
      I=N-II
      DX2=X(I+1)-X(I)
      FXX(I)=FXXX(I)-FX(I)*FXX(I+1)
      FXXX(I)=(FXX(I+1)-FXX(I))/DX2
   10 FX(I)=(F(I+1)-F(I))/DX2-DX2*(FXX(I+1)+2.*FXX(I))/6.
      FXXX(N)=FXXX(NM1)
      DX1=X(N)-X(NM1)
      FX(N)=(F(N)-F(NM1))/DX1+DX1*(FXX(NM1)+2.*FXX(N))/6.
      RETURN
      END


!  DECK055 FORTH INTERX    VERSION OF 76/04/24 AT 06.32.20  ( 055231)
      SUBROUTINE INTERX (MI2,F,FX,FXX,FXXX,FO)
      DIMENSION F(1),FX(1),FXX(1),FXXX(1),FO(1)
      COMMON /INTIVE/ D2(129),L2(129)
      DO 1 I=1,MI2
      IS=L2(I)
    1 FO(I)=F(IS)+D2(I)*(FX(IS)+0.5*D2(I)*(FXX(IS)+D2(I)*               &
     &      FXXX(IS)/3.))
      RETURN
      END


!  DECK053 FORTH SERIES    VERSION OF 76/04/24 AT 06.32.20  ( 055231)
      SUBROUTINE SERIES (Y,N2,AZ,A,B,AN,YY,Z,W)
!     DETERMINATION OF COEFFICIENTS IN SERIES BY DAVID IVES, GRUMMAN AER
!     Y(K)..INPUT VALUE OF FUNCTION AT AN ANGLE OF TK=2.*PI*(K-1)/N2
!           FOR K=1 TO K=N2
!     PI....3.14159265358979324.....
!     N2....EVEN NUMBER OF INPUT FUNCTION VALUES
!     N.....N2/2
!     AZ....CONSTANT TERM IN SERIES
!     A.....(N-1) REAL OUTPUT VALUES OF COEFFICIENTS IN COSINE SERIES
!     B.....(N-1) REAL OUTPUT VALUES OF COEFFICIENTS IN SINE SERIES
!     AN....COSINE(N*TK) TERM IN SERIES
!     YY....DUMMY STORAGE OF LENGTH 2*N+2 (REAL)
!     Z.....DUMMY STORAGE OF LENGTH 4*N (REAL)
!     W.....DUMMY STORAGE OF LENGTH 2*N (REAL)
!     ******************************************************************
!             L=N-1
!     Y(K)=AZ+ SUM (A(L)*DCOS(L*TK)+B(L)*DSIN(L*TK))+AN*DCOS(N*TK)
!              L=1
!     ******************************************************************
      DIMENSION Y(1),A(1),B(1),YY(1),Z(1),W(1)
      N=N2/2
      CALL RFAST(Y,YY,N2,Z,W)
      AZ=YY(1)/N2
      DO 1 I=2,N
      A(I-1)=YY(2*I-1)/N
    1 B(I-1)=-YY(2*I)/N
      AN=YY(2*N+1)/N2
      RETURN
      END


!  DECK052 FORTH RFAST     VERSION OF 76/04/24 AT 06.32.20  ( 055231)
      SUBROUTINE RFAST(X,Y,N,Z,W)
!     FAST FOURIER TRANSFORM OF REAL DATA BY DAVID IVES, GRUMMAN AEROSPA
!     X.....N REAL INPUT VALUES
!     Y.....N/2+1 COMPLEX OUTPUT VALUES
!     N.....EVEN NUMBER OF INPUT VALUES
!     Z.....DUMMY STORAGE OF LENGTH 2N (REAL)
!     W.....DUMMY STORAGE OF LENGTH N (REAL)
!     N MUST BE 4 OR MORE
!     THIS PRODUCES @OUTPUT Y@ FROM @INPUT X@, WHERE
!     ******************************************************************
!          K=N
!     Y(J)=SUM X(K)*EXP(-I*2*PI*(J-1)*(K-1)/N)
!          K=1
!     ******************************************************************
!     FOR J=1 TO J=N
!     WITH I=SQRT(-1) AND PI=3.14159........
!     NOTE THAT Y(N-J+2)=CONJ(Y(J)) FOR J=1 TO J=N/2+1
!     THUS ONLY Y(1) TO Y(N/2+1) ARE CALCULATED
!     COMPLEX NUMBERS ARE HANDLED IN FORTRAN 4 CONVENTION, NAMELY THE
!     REAL AND IMAGINARY PARTS ARE STORED IN ALTERNATE CELLS, STARTING
!     WITH THE REAL PART OF Y(1) IN THE FIRST LOCATION, ETC.
      DIMENSION X(1),Y(1),W(1),Z(1)
      N2=N/2
      Y(N+1)=0.
      DO 2 J=2,N,2
    2 Y(N+1)=Y(N+1)+X(J-1)-X(J)
      Y(N+2)=0.
      CALL FAST(X,Y,N2,Z,W)
      DO 1 J=2,N2,2
      SJ=SIN((3.14159265358979324*(J/2))/N2)
      CJ=COS((3.14159265358979324*(J/2))/N2)
      JR=N-J
      Y1=Y(J+1)
      Y2=Y(J+2)
      Y3=Y(JR+1)
      Y4=Y(JR+2)
      Y(J+1)=.5*(Y1+Y3-SJ*(Y1-Y3)+CJ*(Y2+Y4))
      Y(J+2)=.5*(Y2-Y4-CJ*(Y1-Y3)-SJ*(Y2+Y4))
      Y(JR+1)=.5*(Y1+Y3+SJ*(Y1-Y3)-CJ*(Y2+Y4))
    1 Y(JR+2)=.5*(Y4-Y2-CJ*(Y1-Y3)-SJ*(Y2+Y4))
      Y(1)=Y(1)+Y(2)
      Y(2)=0.
      RETURN
      END


!  DECK051 FORTH FAST      VERSION OF 76/04/24 AT 06.32.20  ( 055231)
      SUBROUTINE FAST(X,Y,N,Z,W)
!     FAST FOURIER TRANSFORM OF COMPLEX DATA BY DAVID IVES, GRUMMAN AERO
!     X.....N INPUT VALUES (COMPLEX)
!     Y.....N OUTPUT VALUES (COMPLEX)
!     N.....NUMBER OF VALUES
!     Z.....DUMMY STORAGE OF LENGTH 2N (COMPLEX)
!     W.....DUMMY STORAGE OF LENGTH N (COMPLEX)
!     THIS PRODUCES @OUTPUT Y@ FROM @INPUT X@, WHERE
!     ******************************************************************
!          K=N
!     Y(J)=SUM X(K)*EXP(-I*2*PI*(J-1)*(K-1)/N)
!          K=1
!     ******************************************************************
!     WITH I=SQRT(-1) AND PI=3.14159........
!     COMPLEX NUMBERS ARE HANDLED IN FORTRAN 4 CONVENTION, NAMELY THE
!     REAL AND IMAGINARY PARTS ARE STORED IN ALTERNATE CELLS, STARTING
!     WITH THE REAL PART OF X(1) IN THE FIRST LOCATION, ETC.
!     TO OBTAIN X FROM Y, TAKE THE CONJUGATE OF Y AS THE @INPUT X@,THEN
!     DIVIDE THE CONJUGATE OF THE @OUTPUT Y@ BY @N@ TO OBTAIN X
      DIMENSION X(1),Z(1),W(1),Y(1)
      MOD(K,J)=K-(K/J)*J
      DO 1 I=1,N
      W(2*I-1)=COS((6.28318530717958647/N)*(I-1))
      W(2*I)= -SIN((6.28318530717958647/N)*(I-1))
      Z(2*I-1)=X(2*I-1)
    1 Z(2*I)=X(2*I)
      ID=N
      IS=1
      J=0
    2 DO 3 IX=2,ID
      IF(MOD(ID,IX)) 4,4,3
    3 END DO
    4 ID=ID/IX
      IS=IS*IX
      J=J+1
      DO 5 L1=1,IS
      DO 5 L=1,ID
      JMK=(MOD(L+(L1-1)*ID*IX,N)+MOD(J+1,2)*N)*2
      JPI=(L+(L1-1)*ID+MOD(J,2)*N)*2
      Z(JPI-1)=Z(JMK-1)
      Z(JPI)=Z(JMK)
      DO 5 IH=2,IX
      IG=(MOD((L1-1)*ID*(IH-1),N)+1)*2
      IU=JMK+(IH-1)*ID*2
      Z(JPI-1)=Z(JPI-1)+Z(IU-1)*W(IG-1)-Z(IU)*W(IG)
    5 Z(JPI)=Z(JPI)+Z(IU)*W(IG-1)+Z(IU-1)*W(IG)
      IF(ID-1) 6,6,2
    6 DO 7 I=1,N
      JPI=MOD(J,2)*N+I
      Y(2*I-1)=Z(2*JPI-1)
    7 Y(2*I)=Z(2*JPI)
      RETURN
      END


      SUBROUTINE SIMP(R,X,Y,N,IER)
!
!      INTEGRATION OF ARBITRARILY SPACED TABULATION
!
!      FROM NASA AMES (2ND ORDER-NOT SIMPSON@S RULE)
!
!      R- INTEGRAL OF Y   FROM X(1) TO X(N)
!      X- INDEPENDENT VARIABLE
!      Y- DEPENDENT VARIABLE
!      N- NUMBER OF X@S INPUT
!      IER=1 NORMAL OPERATION
!         =2 N LT OR EQ 1
!         =4 INPUT INDEPENDENT VARIABLE NOT MONOTONIC
!
      DIMENSION X(N),Y(N)
      R=0.0
      IF(N.GT.1) GO TO 1
      IER=2
      RETURN
    1 IF(X(1).EQ.X(2)) GO TO 12
      NM1=N-1
      IF(N.EQ.2) GO TO 13
      IF(X(1).LT.X(2)) GO TO 3
!
!******* TEST FOR X TO BE MONOTONICALLY DECREASING ********************
!
      DO 2 I=2,NM1
      IF(X(I+1).GE.X(I)) GO TO 12
    2 END DO
      GO TO 5
!
!******* TEST FOR X TO BE MONOTONICALLY INCREASING ********************
!
    3 DO 4 I=2,NM1
      IF(X(I+1).LE.X(I)) GO TO 12
    4 END DO
    5 NM2=N-2
      IF(MOD(N,2).EQ.0) GO TO 14
      P=0.0
      N1=1
    6 S1=X(N1+1)-X(N1)
      S2=X(N1+2)-X(N1+1)
      S3=X(NM1)-X(NM2)
      S4=X(N)-X(NM1)
      R=(2.*S1**2+S1*S2-S2**2)/S1*Y(N1)+(2.*S4**2+S3*S4-S3**2)/S4*Y(N)
      N1=N1+1
      DO 7 I=N1,NM1,2
      S1=X(I)-X(I-1)
      S2=X(I+1)-X(I)
    7 R=R+(S1+S2)**3/(S1*S2)*Y(I)
      IF(N.LT.5) GO TO 9
      N1=N1+1
      DO 8 I=N1,NM2,2
      S1=X(I-1)-X(I-2)
      S2=X(I)-X(I-1)
      S3=X(I+1)-X(I)
      S4=X(I+2)-X(I+1)
    8 R=R+((2.*S2**2+S1*S2-S1**2)/S2+(2.*S3**2+S3*S4-S4**2)/S3)*Y(I)
    9 R=R/6.+P
   10 IER=1
      RETURN
   12 IER=4
      RETURN
!
!******* TRAPEZOIDAL RULE FOR N=2 *************************************
!
   13 R=(X(2)-X(1))*(Y(1)+Y(2))/2.0
      GO TO 10
!
!******* FIT POLYNOMIAL THRU FIRST 3 POINTS AND INTEGRATE FROM ********
!******* X(1) TO X(2) *************************************************
!
   14 S1=X(2)-X(1)
      S2=X(3)-X(1)
      S3=Y(2)-Y(1)
      S4=Y(3)-Y(1)
      P=S1/6.*(2.*S3+6.*Y(1)+(S2**2*S3-S1**2*S4)/(S2*(S2-S1)))
      N1=2
      GO TO 6
      END


      SUBROUTINE INIT(K)
!
!      BODY GEOMETRY AND INITIAL OUTER BOUDARY INPUT, MAPPING,
!      SPLINE FIT, AND DERIVATIVES. INITIAL DATA FOR POTENTIAL
!      AND GRID REFINEMENTS
!
      COMMON/BLK1/LIN,LOUT,IC,JC,KT,DX,DY,WW,GA,EMINF,A02,GAMMA         &
     & ,DELMIN,PI,PIO2,ALP,IPLOT,EST,NSHKR,KSHKR,JDRLX,ETADR,EPSHKI,    &
     & TESWP,KCCC,XORIGC,YORIGC,DALP,IMOD,IEQV,XSTN,IEQV3
      COMMON /BLK2/ F(60,60),H(60,60),X(115),Y(115),B(115),             &
     &       BPR(115),BSEC(115),C(115),CPR(115),CSEC(115)
      COMMON/MAP/S0,S1,S2,PII,CSCAL
      COMMON /IODAT/ XLGNO,IREAD,IWRIT,IOUT,IRPTS,IOUT2,IPUNCH
      COMMON/GEO/ NG,NS,AZ,BZ,CC(5),CT(5),CM(5),LC,LT,LM
      COMMON /GEOIN/ RRZ(201),THZ(201),X0,Y0,Y1,NM,NGH,NMH
      COMMON /DESGN/ CPP(120),EMST(120),CPPEX(120),XCP(120),            &
     & NCP,IDESIN,KDES,KDESMX,YYB1(120),CPP1(120),SUMDCP(50),           &
     & STARTC,BETAM(120),NSTART,WDES
      COMPLEX S0,S1,S2
      DIMENSION RRZS(201),RHOB(401),                                    &
     & THEB(401),FP(401),FPP(401),FPPP(401),RHOS(401),THES(401),        &
     & FPS(401),FPPS(401),FPPPS(401)
      EQUIVALENCE (H(1,1),RHOB(1)),(H(41,7),THEB(1)),                   &
     &            (H(22,14),FP(1)),(H(3,21),FPP(1)),                    &
     &            (H(44,27),FPPP(1)),(H(25,34),RHOS(1)),                &
     &            (H(6,41),THES(1)),(H(47,47),FPS(1)),                  &
     &            (H(28,54),RRZS(1))
 1000 FORMAT(//5X,30HMAPPED BODY (B) AND SHOCK (C) ,                    &
     & 51HLOCATIONS - WITH 1ST (PR) AND 2ND (SEC) DERIVATIVES )
 1001 FORMAT(///4X,1HI,8X,1HX,14X,1HB,13X,3HBPR,12X,4HBSEC,12X,1HC,13X, &
     & 3HCPR,12X,4HCSEC/)
 1002 FORMAT(I5,7E15.5)
 1010 FORMAT(//5X,3HX0=,F10.5,6X,3HY0=,F10.6,6X,3HY1=,F10.6,6X,3HNM=,   &
     & I3/)
      IF(KDES.GE.2) GO TO 6
      PII=PI
      CSCAL=AZ*AZ/(SQRT(1.+AZ*AZ)-1.)
!
!      GEOMETRY INPUT
!
      WRITE(LOUT,1010) X0,Y0,Y1,NM
      GO TO 8
    6 CONTINUE
!
!      SINGULARITY CALCULATION AND MAPPING OF INPUT GEOMETRY
!
    8 OMEG0=0.
      IF(X0.NE.0.) OMEG0=ATAN2(Y0,X0)
      PSI0=ATAN(SQRT(X0*X0+Y0*Y0))
      SIG0=CSCAL*TAN(.5*PSI0)
      P0=SIG0*COS(OMEG0)
      Q0=SIG0*SIN(OMEG0)
      PSI1=ATAN(Y1)
      H0=CSCAL*TAN(.5*PSI1)
      Q2=.5*(H0+Q0)
      S0=CMPLX(P0,Q0)
      S1=CMPLX(P0,-Q0)
      S2=CMPLX(0.,Q2)
      CALL CONF(NG,RRZ,THZ,RHOB,THEB,CSCAL,NM,0)
      NCC=2*(NG-1)
      NC1=NG+1
!
!      REFLECTION OF MAPPED GEOMETRY ABOUT SYMMETRY PLANE
!
      DO 10 N=NC1,NCC
      N1=2*NG-N
      RHOB(N)=RHOB(N1)
      THEB(N)=PI-THEB(N1)
   10 END DO
!
!      SPLINE FIT COEFFICIENTS OF MAPPED GEOMETRY
!
      CALL PCS(NCC,RHOB,FP,FPP,FPPP,THEB)
      IF(K.GT.1) GO TO 100
!
!
!
!      INITIAL GUESS FOR OUTER BOUNDARY AND SUBSEQUENT MAPPING,
!      REFLECTION AND SPLINE FIT COEFFICIENTS
!
      CALL SHOCKI(NG,RRZS,RRZ,THZ,EMINF,ALP,EPSHKI)
      CALL CONF(NG,RRZS,THZ,RHOS,THES,CSCAL,NM,1)
      DO 20 N=NC1,NCC
      N1=2*NG-N
      RHOS(N)=RHOS(N1)
      THES(N)=PI-THES(N1)
   20 END DO
      CALL PCS(NCC,RHOS,FPS,FPPS,FPPPS,THES)
      IF(KDES.GE.2) GO TO 200
!
!      INITIALIZATION OF POTENTIAL,K=1
!
      DO 30 J=2,JC
      DO 30 I=2,IC
   30 F(I,J)=0.
      GO TO 200
!
!      MESH REFINEMENT AND ASSOCIATED INTERPOLATION
!
  100 IC=2*(IC-1)
      JC=2*(JC-1)
      NS=2*NS
      DO 110 JJ=2,JC,2
      JN=JC-JJ+2
      JO=JN/2+1
      DO 110 II=2,IC,2
      IN=IC-II+2
      IO=IN/2+1
  110 F(IN,JN)=F(IO,JO)
      DO 120 J=2,JC,2
      DO 120 I=3,IC,2
  120 F(I,J)=.5*(F(I+1,J)+F(I-1,J))
      DO 130 J=3,JC,2
      DO 130 I=2,IC
  130 F(I,J)=.5*(F(I,J+1)+F(I,J-1))
      DO 140 II=2,IC,2
      IN=IC-II+2
      IO=IN/2+1
  140 C(IN)=C(IO)
      DO 150 I=3,IC,2
      CIP3=C(I+3)
      CIM3=C(I-3)
      IF(I.EQ.3) CIM3=C(4)
      IF(I.EQ.IC-1) CIP3=C(IC-2)
  150 C(I)=(9.*(C(I+1)+C(I-1))-(CIP3+CIM3))/16.
  200 DX=PI/FLOAT(IC-2)
      DY=1./FLOAT(JC-2)
      ICM=IC-1
      ICP=IC+1
      D2Y=.5/DY
      D2X=.5/DX
      DO 210 I=1,ICM
  210 X(I)=(I-1)*DX-PIO2
      DO 220 J=1,JC
  220 Y(J)=(J-2)*DY
!
!      PERIODIC CUBIC SPLINE FIT OF MAPPED GEOMETRY AND OUTER
!      BOUNDARY LOCATION
!
      CALL DELTA(NCC,THEB,ICM,X)
      CALL INTERP(ICM,RHOB,FP,FPP,FPPP,B,BPR,BSEC)
      IF(K.NE.1) GO TO 230
      CALL DELTA(NCC,THES,ICM,X)
      CALL INTERP(ICM,RHOS,FPS,FPPS,FPPPS,C,CPR,CSEC)
  230 DO 240 II=2,IC
      I=IC-II+2
      I1=I-1
      B(I)=B(I1)
      BPR(I)=BPR(I1)
      BSEC(I)=BSEC(I1)
      IF(K.NE.1) GO TO 240
      C(I)=C(I1)
      CPR(I)=CPR(I1)
      CSEC(I)=CSEC(I1)
  240 X(I)=X(I1)
!
!      SHIFT OF OUTER BOUNDARY LOCATION NS MESH POINTS FROM INITIAL
!      ESTIMATES
!
      C1=NS*DY
      C2=1./(1.-C1)
      IF(K.NE.1) GO TO 260
      DO 250 I=2,IC
      C(I)=(C(I)-C1*B(I))*C2
      CPR(I)=(CPR(I)-C1*BPR(I))*C2
  250 CSEC(I)=(CSEC(I)-C1*BSEC(I))*C2
  260 B(1)=B(3)
      C(1)=C(3)
      B(ICP)=B(ICM)
      C(ICP)=C(ICM)
!
!      NUMERICAL DERIVATIVES OF MAPPED GEOMETRY  AND OUTER BOUNDARY
!
      DO 270 I=2,IC
      BPR(I)=(B(I+1)-B(I-1))*.5/DX
      CPR(I)=(C(I+1)-C(I-1))*.5/DX
      BSEC(I)=(B(I+1)+B(I-1)-2.*B(I))/(DX*DX)
  270 CSEC(I)=(C(I+1)+C(I-1)-2.*C(I))/(DX*DX)
      IF(IOUT2.EQ.2) GO TO 278
      WRITE(LOUT,1000)
      WRITE(LOUT,1001)
      WRITE(LOUT,1002)(I,X(I),B(I),BPR(I),BSEC(I),C(I),CPR(I),CSEC(I)   &
     &,I=2,IC)
      WRITE(LOUT,1001)
  278 DO 280 J=2,JC
      F(1,J)=F(3,J)
  280 F(ICP,J)=F(ICM,J)
      RETURN
      END


      SUBROUTINE CONF(NT,RZ,OM,RHO,THE,C,NM,KODE)
!
!      COMPLETE TRANSFORMATION FROM PHYSICAL TO MAPPED PLANE
!      INCLUDING CONFORMAL MAPPING,SHERICAL COORDINATES R/Z,
!      OMEGA TO RHO,THETA
!
      COMMON/MAP/S0,S1,S2,PII,CSCAL
      DIMENSION RZ(1),OM(1),RHO(1),THE(1)
      COMPLEX S,SS1,SS2,S0,S1,S2,A,G1,G
      PI=PII
      DO 100 NN=1,NT
      N=NT-NN+1
      SIG=C*TAN(.5*ATAN(RZ(N)))
      IF(CABS(S0).LT.1.E-4) GO TO 30
      P=SIG*COS(OM(N))
      Q=SIG*SIN(OM(N))
      S=CMPLX(P,Q)
      SS1=S-S0
      SS2=S+S1
      R1=CABS(SS1)
      R2=CABS(SS2)
      T2=ATAN2(AIMAG(SS2),REAL(SS2))
      T1=ATAN2(AIMAG(SS1),REAL(SS1))
!     WRITE(6,500) N,SS1,T1
!
!      ROOT SELECTION
!
  500 FORMAT(I5,5E20.5)
      IF(KODE.EQ.1) GO TO 20
      IF(N.LT.NM.AND.T1.GT.0.) T1=T1-2.*PI
   20 CONTINUE
      A=SQRT(R1/R2)*CEXP(CMPLX(0.,1.)*.5*(T1-T2))
      G=.5*(S0+A*S1)/(1.-A)-S2
      RHO(N)=CABS(G)
      THE(N)=ATAN2(AIMAG(G),REAL(G))
!     WRITE(6,500) N,T1,RHO(N),THE(N)
      GO TO 100
   30 RHO(N)=SIG
      THE(N)=OM(N)
  100 END DO
      RETURN
      END


      SUBROUTINE DELTA (MI1,X1,MI2,X2)
!
!      COMPUTE INCREMENTS FOR INTERPOLATOON
!
!      MI1- NO. OF OLD POINTS
!      X1- NEW X LOCATIONS
!      MI2- NO. OF NEW POINTS
!      X2- NEW X LOCATIONS
!
      DIMENSION X1(1),X2(1)
      COMMON /INT/ L(401),D(401)
      MI1M1=MI1-1
      IS=1
      DO 3 I2=1,MI2
      DO 1 I1=IS,MI1M1
      IF(X1(I1+1).GT.X2(I2)) GO TO 2
    1 END DO
      I1=MI1
    2 IS=I1
      L(I2)=IS
    3 D(I2)=X2(I2)-X1(IS)
      RETURN
      END


      SUBROUTINE INTERP(MI2,F,FX,FXX,FXXX,FO,FXO,FXXO)
!
!
!      INTERPOLATE FROM OLD LOCATIONS TO NEW LOCATIONS
!
!      MI2- NO. OF NEW POINTS
!      F,FX,FXX,FXXX OLD FUNCTION AND 1ST,2ND,AND 3RD DERIVATIVES
!      FO,FXO,FXXO- NEW FUNCTION VALUES AND 1ST AND 2ND DERIVATIVES
!
      DIMENSION F(1),FX(1),FXX(1),FXXX(1),FO(1),FXO(1),FXXO(1)
      COMMON /INT/ L(401),D(401)
      DO 1 I=1,MI2
      IS=L(I)
      FO(I)=F(IS)+D(I)*(FX(IS)+.5*D(I)*(FXX(IS)+D(I)*FXXX(IS)/3.))
      FXO(I)=FX(IS)+D(I)*(FXX(IS)+D(I)*.5*FXXX(IS))
    1 FXXO(I)=FXX(IS)+D(I)*FXXX(IS)
      RETURN
      END


      SUBROUTINE PCS(N,Y,FP,FPP,FPPP,X)
!     PERIODIC CUBIC SPLINE -IVES,X2221 - 4-27-71  - EXPLICIT (AHLBERG)
!
!      APPROXIMATE DERIVATIVES FOR CUBIC INTERPOLATION
!
!      N- NO. OF POINTS
!      Y- INPUT VALUE OF FUNCTION F(X)
!      FP,FPP,FPPP- OUTPUT VALUES OF DERIVATIVES
!      X- LOCATION OF FUNCTION AND DERIVATIVES
!
      DIMENSION X(1),Y(1),FP(1),FPP(1),FPPP(1)
      NM=N-1
      NMM=N-2
      PI2=SIGN(1.,X(2)-X(1))*8*ATAN(1.)
      DO 1 I=1,NMM
      FP(I)=(X(I+2)-X(I+1))/(X(I+1)-X(I))
    1 FPPP(I)=((Y(I+2)-Y(I+1))/(X(I+2)-X(I+1))-(Y(I+1)-Y(I))/(X(I+1)-X(I&
     &)))*3./(X(I+1)-X(I))
      FP(NM)=(PI2+X(1)-X(N))/(X(N)-X(NM))
      FPPP(NM)=((Y(1)-Y(N))/(PI2+X(1)-X(N))-(Y(N)-Y(NM))/(X(N)-X(NM)))*3&
     &.    /(X(N)-X(NM))
      FP(N)=(X(2)-X(1))/(PI2+X(1)-X(N))
      FPPP(N)=((Y(2)-Y(1))/(X(2)-X(1))-(Y(1)-Y(N))/(PI2+X(1)-X(N)))*3.  &
     &     /(PI2+X(1)-X(N))
      S1=FPPP(N-1)
      S2=FP(N-1)
      P=2.*(1.+FP(N))
      SZ=FP(1)
      FP(1)=-FP(N)/P
      FPREV=FPPP(1)
      FPPP(1)=2.*FPPP(N)/P
      FPP(1)=-1./P
      DO 11 I=2,N
      P=FP(I-1)+2.*(1.+SZ)
      STO=FP(I)
      FP(I)=-SZ/P
      SZ=STO
      STO=FPPP(I)
      FPPP(I)=(2.*FPREV-FPPP(I-1))/P
      FPREV=STO
   11 FPP(I)=-FPP(I-1)/P
      FPP(N)=1.
      FPPP(N)=0.
      DO 12 I=2,N
      K=N-I+1
      FPP(K)=FP(K)*FPP(K+1)+FPP(K)
   12 FPPP(K)=FP(K)*FPPP(K+1)+FPPP(K)
      FPP(N)=(2.*S1-S2*FPPP(1)-FPPP(N-1))/(S2*FPP(1)+FPP(N-1)+2.*(1.+S2)&
     &)
      DO 13 I=1,NM
   13 FPP(I)=FPP(I)*FPP(N)+FPPP(I)
      DO 7 I=1,NM
    7 FPPP(I)=(FPP(I+1)-FPP(I))/(X(I+1)-X(I))
      FPPP(N)=(FPP(1)-FPP(N))/(PI2+X(1)-X(N))
      DO 8 I=1,NM
      DX=X(I+1)-X(I)
    8 FP(I)=(Y(I+1)-Y(I))/DX-FPP(I)/2.*DX-FPPP(I)/6.*DX**2
      DX=PI2+X(1)-X(N)
      FP(N)=(Y(1)-Y(N))/DX-FPP(N)/2.*DX-FPPP(N)/6.*DX**2
      RETURN
      END


      SUBROUTINE SHOCKI(NC,RS,RB,OM,EM,ALP,EP)
!
!      INITIAL POSITION OF OUTER BOUNDARY - APPROXIMATE WEDGE
!      SOLUTION, ROTATED BY ALPHA.
!
      DIMENSION RS(1),RB(1),OM(1)
      EM2=EM*EM
      EM2F=EM2-1.
      C1=1./SQRT(EM2F)
      C2=EM2/EM2F
      NCX=(NC+1)/2
      TB=C1+C2*RB(NCX)
      DO 10 N=1,NC
      COM=COS(OM(N))
      SOM=SIN(OM(N))
      CAL=COS(ALP)
      SAL=SIN(ALP)
      AA=COM*COM+SOM*SOM*(CAL*CAL-SAL*SAL*TB*TB)
      BB=SOM*SAL*CAL*(1.+TB*TB)
      CC=SAL*SAL-CAL*CAL*TB*TB
      RS(N)=EP*(BB+SQRT(BB*BB-AA*CC))/AA
   10 END DO
      RETURN
      END
