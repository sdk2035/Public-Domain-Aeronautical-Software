      SUBROUTINE ACCOMP
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 J2,J3,J4,J22
C
C    SUBROUTINE ACCOMP SERVES THE PURPOSE OF COMPUTING
C   ACCELERATION VECTOR OF UP TO SIX POINTS ON THE HUB,
C   AND ON THE BOOM TIP.  THE COMMUNICATION ARE VIA COMMON BLOCKS
C
C
C   THE OLD COMMON BLOCKS TO BE USED IN THIS ROUTINE
C
      COMMON/CONSTS/PI,TWOPI,RADIAN
C
      COMMON/CANTNA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3)
C
      COMMON/CNBODY/J2,J3,J4,J22,ZJ20,ZMU,WWO ,FLAT,AEARTH
C
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,
     *NK(10),LK(10),LLK(10)
C
      COMMON/LIBDPR/ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,
     *      ZMDO,ZMDBO,CNV,DECAY
C
      COMMON/MRANG/ ADDOT(10,3),BDDOT(10,3),DOUTDD(10,3),DINDD(10,3)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),
     1OMEG(3),ZLKP(10),ZLKDP(10),CMAT(3,3),
     2 GBAR(3,3),YBCM(3),ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL3/ZMS,YIZM(3,2)
C
      COMMON/RPOOL5/ CKMAT(3,3,10),FM2(3,3)
C
      COMMON/RPOOL6/FM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
C   COMMON BLOCKS FROM THE THRUSTING ROUTINES
C
C
      COMMON/ITCNTL/ IPULSE,ISPLSE,KPULSE,ITSW,IOTSW
C
      COMMON/THRUST/TV(3),TL(3),TT(4),TPAR(4),REF
C
      COMMON/TIMPLS/ TMEAN,TPULSE,TOPLSE,TTSTOP,DELV
C
      COMMON/CSTVAL/TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10)
C
C   THE FOLLOWING ARE NEW COMMON BLOCKS ASSOCIATED WITH
C   THE INPUTS AND OUTPUTS OF THE ACCELERATION COMPUTATIONS
C
      COMMON/ACCHUB/ YHUB(3,6),HUBACC(3,6),ACCRED(6),ALFAEA(6),
     .  BETAEA(6),GAMAEA(6),DKAT(3,3,6)
C
      COMMON/ACCORB/ ACCOB(3),TRTACC(3),VCF(3)
C
      COMMON/NUMACC/NY
C
      COMMON/SEPACC/ CENACC(3,10),CORACC(3,10),DLIACC(3,10),TOTACC(3,10)
      COMMON/IACC/ IACOMP,IHUBAC,ITIPAC,IAFLAG
C
C
      COMMON/SHAPES/ ZXI(10,3),ZXIP(10,3),ZXIPP(10,3),ZZNP(10,3,3)
C
C
C    DIMENSIONAL VARIABLES TO BE USED INTERNALLY IN THE ROUTINE
      DIMENSION BOMEG(3,3),OMEGDT(3),BOMGDT(3,3)
      DIMENSION WDAM(3,3), WDAMD(3,3), BOMEG2(3,3)
      DIMENSION OMGRTS(3,3),CAOMG(3,3),WDAM2(3,3)
C
      DIMENSION AA(3),BB(3),AAD(3),BBD(3),AADD(3),BBDD(3),
     1XSH(3),XSHP(3),XSHPP(3),ZNP(3,3),YM(3),CKAT(3,3),ZB(3)
      DIMENSION XAI(3),XAID(3),XAIDD(3)
      DIMENSION DUM1(3),DUM2(3),DUM3(3),DUM4(3),DUM5(3)
      DIMENSION DDAT(3,3),ARES(3,3),DMY(3,3)
C
      DATA JJ/1/
CC
C   TO CONSTRUCT THE ACCELEROMETER LOCATION AND ORIENTATION MATRIX
C
      IF(JJ.EQ.99) GO TO 5
      DO 2 K=1,NY
      CAL=DCOS(ALFAEA(K)*RADIAN)
      SAL=DSIN(ALFAEA(K)*RADIAN)
      CBE=DCOS(BETAEA(K)*RADIAN)
      SBE=DSIN(BETAEA(K)*RADIAN)
      CGA=DCOS(GAMAEA(K)*RADIAN)
      SGA=DSIN(GAMAEA(K)*RADIAN)
      DKAT(1,1,K)=CGA*CBE+SAL*SGA*SBE
      DKAT(1,2,K)=SGA*CAL
      DKAT(1,3,K)=SGA*SAL*CBE-SBE*CGA
      DKAT(2,1,K)=CGA*SAL*SBE-SGA*CBE
      DKAT(2,2,K)=CAL*CGA
      DKAT(2,3,K)=CGA*SAL*CBE+SBE*SGA
      DKAT(3,1,K)=CAL*SBE
      DKAT(3,2,K)=-SAL
      DKAT(3,3,K)=CAL*CBE
C
C   THE MATRIX DKAT IS ACTUALLY THE INVERSE OF THE MATRIX FROM
C   BODY TO ELEMENT FRAMES
C
 2    CONTINUE
      JJ=99
 5    CONTINUE
C   CONSTRUCT THE REQUIRED QUANTITIES FOR COMPUTATION
C
C
C   TO CONSTRUCT THE BODY INERTIAL RATE SKEW SYMMETRICAL MATRIX
C
      DO 10 I=1,3
      DO 10 J=1,3
 10   BOMEG(I,J)=0.0D0
      BOMEG(1,2)=-OMEG(3)
      BOMEG(1,3)=OMEG(2)
      BOMEG(2,1)=OMEG(3)
      BOMEG(2,3)=-OMEG(1)
      BOMEG(3,1)=-OMEG(2)
      BOMEG(3,2)=OMEG(1)
C
C   CONSTRUCT THE RATE MATRIX OF BOMEG
C
C   TO OBTAIN OMEGDOT
C
      OMEGDT(1)=DERIV(7)
      OMEGDT(2)=DERIV(8)
      OMEGDT(3)=DERIV(9)
      DO 30 I=1,3
      DO 30 J=1,3
 30   BOMGDT(I,J)=0.0D0
      BOMGDT(1,2)=-OMEGDT(3)
      BOMGDT(1,3)=OMEGDT(2)
      BOMGDT(2,1)=OMEGDT(3)
      BOMGDT(2,3)=-OMEGDT(1)
      BOMGDT(3,1)=-OMEGDT(2)
      BOMGDT(3,2)=OMEGDT(1)
C
C   CONSTRUCT THE DAMPER FRAME RATE MATRIX
C
      DO 40 I=1,3
      DO 40 J=1,3
      WDAM(I,J)=0.0D0
 40   WDAMD(I,J)=0.0D0
      IF(IDAMP.EQ.0) GO TO 50
      BED=BETLD*RADIAN
      GMD=GAMLD*RADIAN
      SBED=DSIN(BED)
      CBED=DCOS(BED)
      SGMD=DSIN(GMD)
      CGMD=DCOS(GMD)
C
C   THE DAMPER FRAME RATE SKEW SYMMETRICAL MATRIX
C
      WDAM(1,2)=-PHID*SGMD*SBED
      WDAM(1,3)=PHID*CGMD
      WDAM(2,1)=-WDAM(1,2)
      WDAM(2,3)=PHID*SGMD*CBED
      WDAM(3,1)=-WDAM(1,3)
      WDAM(3,2)=-WDAM(2,3)
C
C   THE RATE MATRIX OF WDAM
C
C   THE RATE OF PHID
C
      PHIDD=DERIV(11)
      WDAMD(1,2)=-PHIDD*SGMD
      WDAMD(1,3)=PHIDD*CGMD
      WDAMD(2,1)=-WDAMD(1,2)
      WDAMD(2,3)=PHIDD*SGMD*CBED
      WDAMD(3,1)=-WDAMD(1,3)
      WDAMD(3,2)=-WDAMD(2,3)
C
C   END THE CONSTRUCTION OF DAMPER PROPERTIES
 50   CONTINUE
C
C   START THE COMPUTATION OF ACCLERATION VECTOR
C
C   COMPUTE THE TWO BODY ORBIT INERTIAL ACCLRATION
C
      RADIUS=0.0D0
      DO 60 I=1,3
 60   RADIUS=RADIUS+XSAT(I)*XSAT(I)
      RADIUS=DSQRT(RADIUS)
      DO 70 I=1,3
 70   ACCOB(I)=-(ZMU*XSAT(I))/(RADIUS**3)
C
C   CONVERT THE ORBIT ACCELERATION FROM KM/SEC 2 TO FT/SEC 2
C
      DO 80 I=1,3
 80   ACCOB(I)=ACCOB(I)*3280.8D0
C
C   END THE ORBIT ACCELERATION COMPUTATION
C
C   START THE COMPUTATION OF ACCELERATION ON THE HUB
C
C     IF(IHUBAC.EQ.0) GO TO 100
      CALL MATMPY(BOMEG,BOMEG,BOMEG2,3,3)
      DO 90 I=1,3
      DO 90 J=1,3
      OMGRTS(I,J)=BOMGDT(I,J)+BOMEG2(I,J)
 90   CONTINUE
      CALL MATMPY(SA,OMGRTS,CAOMG,3,3)
C
      DO 100 K=1,NY
      DO 110 I=1,3
 110  HUBACC(I,K)=0.0D0
      DO 120 II=1,3
      DO 120 J=1,3
      HUBACC(II,K)=HUBACC(II,K)+CAOMG(II,J)*YHUB(J,K)
 120  CONTINUE
C
 100  CONTINUE
C
C   END OF THE HUB ACCELERATION COMPUTATION
C
C   START THE BOOM TIP ACCELERATION COMPUTATION
C
C   ZEROED THE ARRAYS
C
C     IF(ITIPAC.EQ.0) GO TO 150
      DO 130 I=1,3
      AA(I)=0.0D0
      BB(I)=0.0D0
      AAD(I)=0.0D0
      BBD(I)=0.0D0
      AADD(I)=0.0D0
      BBDD(I)=0.0D0
      XSH(I)=0.0D0
      XSHP(I)=0.0D0
      XSHPP(I)=0.0D0
      DO 140 J=1,3
 140  ZNP(I,J)=0.0D0
 130  CONTINUE
C
C   RECEIVE THE TIP DEFLECTION INFORMATIONS
C
C   OBTAIN VALUES FOR EACH ELEMENT
C
      DO 150 K=1,IK
C   OBTAIN THE BOOM LENGTH, DEPLOYMENT RATE AND ACCELERATION
C
      ZLL=ZL0(K)
      ZLD=ZL1(K)
      ZLDD=ZLA(K)
C
      IF(NK(K).NE.0) GO TO 155
      XAI(1)=ZLL
      XAI(2)=0.0D0
      XAI(3)=0.0D0
      XAID(1)=ZLD
      XAID(2)=0.0D0
      XAID(3)=0.0D0
      XAIDD(1)=ZLDD
      XAIDD(2)=0.0D0
      XAIDD(3)=0.0D0
      GO TO 215
 155  CONTINUE
      MODD=NK(K)
      DO 160 J=1,MODD
      AA(J)=A(K,J)
      BB(J)=B(K,J)
      AAD(J)=ADOT(K,J)
      BBD(J)=BDOT(K,J)
      AADD(J)=ADDOT(K,J)
      BBDD(J)=BDDOT(K,J)
      XSH(J)=ZXI(K,J)
      XSHP(J)=ZXIP(K,J)
      XSHPP(J)=ZXIPP(K,J)
      DO 165 I=1,MODD
 165  ZNP(J,I)=ZZNP(K,J,I)
 160  CONTINUE
C
C   CALL SUBROUTINE TIPVEC TO OBTAIN XAI,XAID,XAIDD
C   FOR EACH ELEMENT. THOSE ARE THE POSITION ,VELOCITY
C   AND ACCELERATION VECTORS OF THE BOOM TIP
C   UN ELEMENT FRAME
C
      CALL TIPVEC(      ZLL,ZLD,ZLDD,AA,BB,AAD,BBD,AADD,BBDD,
     *XSH,XSHP,XSHPP,ZNP,XAI,XAID,XAIDD)
C
 215  CONTINUE
C   CONVERT CKMAT MATRIX INTO THE ELEMENT FRAME
C
      DO 170 I=1,3
      DO 170 J=1,3
 170  CKAT(I,J)=CKMAT(I,J,K)
C
C   DAMPER FRAME ORIGIN
C
      DO 180 I=1,3
 180  YM(I)=0.0D0
      IF(IDAMP.EQ.0) GO TO 190
      DO 200 I=1,3
      YM(I)=YIZM(I,1)
 200  CONTINUE
 190  CONTINUE
C
C   ELEMENT FRAME ORIGIN
C
      DO 210 I=1,3
 210  ZB(I)=ZBZK(I,K)
C
C   START COMPUTING ACCELERATION VECTORS
C
C   COMPUTE CENTRIFIGAL ACCELERATION
C
      DO 220 I=1,3
      DUM1(I)=0.0D0
      DUM2(I)=0.0D0
      DUM3(I)=0.0D0
      DUM4(I)=0.0D0
      DUM5(I)=0.0D0
 220  CONTINUE
      CALL DMATVC(CKAT,XAI,DUM1)
      DO 230 I=1,3
 230  DUM1(I)=DUM1(I)+ZB(I)
      CALL DMATVC(FM,DUM1,DUM2)
      DO 240 I=1,3
 240  DUM2(I)=DUM2(I)+YM(I)
      CALL DMATVC(CAOMG,DUM2,DUM3)
      DO 250 I=1,3
 250  CENACC(I,K)=DUM3(I)
C
C   END THE CENTRIFUGAL ACCELERATION COMPUTATION
C
C   COMPUTE CORIOLIS ACCELERATION
C
      CALL DMATVC(CKAT,XAID,DUM4)
      CALL DMATVC(FM,DUM4,DUM3)
      CALL DMATVC(WDAM,DUM1,DUM2)
      CALL DMATVC(FM,DUM2,DUM5)
      DO 260 I=1,3
 260  DUM4(I)=DUM3(I)+DUM5(I)
      CALL DMATVC(BOMEG,DUM4,DUM2)
      CALL DMATVC(SA,DUM2,DUM3)
      DO 270 I=1,3
 270  CORACC(I,K)=2.0D0*DUM3(I)
C
C   END THE COMPUTATION OF CORIOLIS ACCELERATION
C
C   START LINEAR ACCELERATION COMPUTATION
C
      CALL MATMPY(WDAM,WDAM,WDAM2,3,3)
      DO 280 I=1,3
      DO 280 J=1,3
 280  OMGRTS(I,J)=WDAM2(I,J)+WDAMD(I,J)
      CALL DMATVC(OMGRTS,DUM1,DUM2)
      CALL DMATVC(FM,DUM2,DUM3)
C
      CALL DMATVC(CKAT,XAID,DUM1)
      CALL DMATVC(WDAM,DUM1,DUM2)
      CALL DMATVC(FM,DUM2,DUM4)
      DO 290 I=1,3
 290  DUM4(I)=2.0D0*DUM4(I)
C
      CALL DMATVC(CKAT,XAIDD,DUM1)
      CALL DMATVC(FM,DUM1,DUM5)
      DO 300 I=1,3
 300  DUM1(I)=DUM3(I)+DUM4(I)+DUM5(I)
      CALL DMATVC(SA,DUM1,DUM3)
      DO 310 I=1,3
 310  DLIACC(I,K)=DUM3(I)
C
C   END OF LINEAR ACCELERATION COMPUTATION
C
C   COMPUTE THE TOTAL ACCELERATION EXCEPT THE ORBIT
C
      DO 320 I=1,3
 320  TOTACC(I,K)=CENACC(I,K)+CORACC(I,K)+DLIACC(I,K)
C
 150  CONTINUE
C
C   END THE ACCELERATION COMPUTATION FOR BOOM TIPS
C
C   COMPUTE THE ACCELERATION DUE TO THE THRUSTING
C
      DO 370 I=1,3
 370  DUM1(I)=VCF(I)/ZMS
      CALL DMATVC(SA,DUM1,TRTACC)
      IF(IPULSE.NE.0) GO TO 372
      DO 372 I=1,3
      TRTACC(I)=0.0D0
 372  CONTINUE
C
C   END THE COMPUTATION OF THRUSTING
C
C
C   ADDING THRUSTING ACCELERATION TO THE HUB ELEMENT
C
C     IF(IHUBAC.EQ.0) GO TO 395
      DO 390 K=1,NY
      DO 391 I=1,3
      HUBACC(I,K)=HUBACC(I,K)+TRTACC(I)
      DO 391 J=1,3
 391  DDAT(I,J)=DKAT(I,J,K)
      CALL MPYMAT(DDAT,SA,DMY,1,2,ARES,DMY)
      ACCRED(K)=ARES(1,1)*HUBACC(1,K)+ARES(1,2)*HUBACC(2,K)
     .   +ARES(1,3)*HUBACC(3,K)
 390  CONTINUE
C
 395  CONTINUE
C
C   ADDING THRUSTING TO THE BOOM TIP
C     IF(ITIPAC.EQ.0) GO TO 380
      DO 400 K=1,IK
      DO 400 I=1,3
 400  TOTACC(I,K)=TOTACC(I,K)+TRTACC(I)
C
 380  CONTINUE
C
C   END THE COMPUTATION OF ALL ACCELERATION
C
C   DEBUG MESSAGE FOR  ACCELERATION ROUTINE
C
      IF(IOUT.EQ.1) GO TO 410
      WRITE(6,1000)
 1000 FORMAT('      MESSAGE FROM ACCOMP')
      WRITE(6,1110) (ACCOB(I),I=1,3),RADIUS,ZMU
 1110 FORMAT(' ORBIT ',5(E18.10,2X))
      WRITE(6,1100)
 1100 FORMAT('   BOMEG MATRIX')
 1200 FORMAT(' ',2X,1P9E14.6//)
      WRITE(6,1200) ((BOMEG(I,J),J=1,3),I=1,3)
      WRITE(6,1300)
 1300 FORMAT('   BOMGDT MATRIX')
      WRITE(6,1200) ((BOMGDT(I,J),J=1,3),I=1,3)
      WRITE(6,1400)
 1400 FORMAT('   WDAM MATRIX')
      WRITE(6,1200) ((WDAM(I,J),J=1,3),I=1,3)
      WRITE(6,1500)
 1500 FORMAT(' WDAM MATRIX ')
      WRITE(6,1200)((WDAMD(I,J),J=1,3),I=1,3)
      WRITE(6,1600)
 1600 FORMAT('   CAOMG MATRIX')
      WRITE(6,1200) ((CAOMG(I,J),J=1,3),I=1,3)
      DO 420 K=1,NY
      WRITE(6,1700) K
 1700 FORMAT(' INFORMATIONS IN HUB ELEMENT ',I2)
      WRITE(6,1750) ((DKAT(I,J,K),J=1,3),I=1,3)
 1750 FORMAT(' DKAT',2X,1P9E14.6//)
      WRITE(6,1800) (HUBACC(I,K),I=1,3)
 1800 FORMAT('  HUBACC=',2X,1P3E14.6//)
 420  CONTINUE
      DO 430 K=1,IK
      WRITE(6,1900) K
 1900 FORMAT(' INFORMATIONS FOR BOOM TIP ELEMENT ',I2)
      WRITE(6,1200) ((CKMAT(I,J,K),J=1,3),I=1,3)
      WRITE(6,1200) ((FM(I,J),J=1,3),I=1,3)
      WRITE(6,2000) (YM(I),I=1,3)
 2000 FORMAT(' YM ',2X,1P3E14.6//)
      WRITE(6,2100) (ZBZK(I,K),I=1,3)
 2100 FORMAT(' ZB ',2X,1P3E14.6//)
      WRITE(6,2200) (CENACC(I,K),I=1,3)
 2200 FORMAT(' CENACC ',2X,1P3E14.6//)
      WRITE(6,2300) (CORACC(I,K),I=1,3)
 2300 FORMAT(' CORACC ',2X,1P3E14.6//)
      WRITE(6,2400) (DLIACC(I,K),I=1,3)
 2400 FORMAT(' DLIACC ',2X,1P3E14.6//)
      WRITE(6,2500) (TOTACC(I,K),I=1,3)
 2500 FORMAT(' TOTACC ',2X,1P3E14.6//)
C
 430  CONTINUE
      WRITE(6,2600)
 2600 FORMAT(' ACCELERATION DUE TO THRUSTING')
      WRITE(6,2700) (TRTACC(I),I=1,3)
 2700 FORMAT(' ',2X,1P3E14.6//)
C
 410  CONTINUE
      IF(IACOMP.EQ.0) IAFLAG=0
      RETURN
      END
      SUBROUTINE ACNVRT(IDATE,SECOND)
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     ACNVRT CONVERTS A SIX DIGIT INTEGER (YYMMDD) AND SECONDS TO
C     SECONDS FROM START OF THE YEAR
C     NO TAPES AND NO SUBROUTINES ARE REQUIRED
      DIMENSION JULDAY(12)
C
      DATA JULDAY/ 0,31,59,90,120,151,181,212,243,273,304,334/
      IY=IDATE/10000
      IM=(IDATE - IY*10000)/100
      IDAY=MOD(IDATE,100)-1
      IF(MOD(IY,4).EQ.0.AND.IM.GT.2) IDAY=IDAY + 1
      JDAY=JULDAY(IM) + IDAY
      SECOND=DFLOAT(JDAY)*8.64D4 + SECOND
      RETURN
      END
      SUBROUTINE ACTFLT(ITEST,T,ETA)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ACFILT/ACPARM(20),IACFLT(20)
C
      COMMON/ACTOUT/SOUT,VOUT,WOUT
C
      COMMON/CONSTS/PI,TWOPI,RAD
C
      COMMON/CSTVAL/TST
C
      COMMON/CFILTW/TSTART,DVWP(3),DVWM(3),TREF1,TREF2
C
      COMMON/CWHEEL/WSP(3),VWUP(3),VWDN(3)
C
      COMMON/DEBUG2/IOUT,JOUT,KLUGE
C
      COMMON/ITCNTL/IPULSE,ISPLSE,KPULSE,IDV1(3)
C
      COMMON/MOMENT/IDV2(4),IWHEEL,IDV3
C
      COMMON/OUTTHR/SMAGB(3),XMB1(3),RWHEEL(3)
C
      COMMON/PWHEEL/XMOMIN(3),DVW(3),VMOM(3),VW(3)
C
      COMMON/RMGNTC/SMAGI(3)
C
      COMMON/RPOOL1/DUM1(11),SA(3,3),DUM2(19),OMEG(3),DUM3(83)
C
      COMMON/SENVTR/DIY(3),DL2
C
      COMMON/SUNVTR/SLB(3)
C
      COMMON/VARBLS/DEP(150),DER(150)
C
C
      DIMENSION ETA(7),UVEC(3),SPOS(3),ACC(3)
      DIMENSION VWDOT(3)
C
C
      EQUIVALENCE (GAIN,ACPARM(1)),(TAU,ACPARM(2)),(UVEC(1),ACPARM(3))
      EQUIVALENCE (SPOS(1),ACPARM(6))
      EQUIVALENCE (WTAU,ACPARM(9))
      EQUIVALENCE (ACTTD,ACPARM(10))
      EQUIVALENCE (IFLT,IACFLT(1)),(ITYPE,IACFLT(2)),(ISEN,IACFLT(3))
      EQUIVALENCE (IIC,IACFLT(4)),(IFLAG,IACFLT(5)),(NDEP,IACFLT(6))
C
C
C     ITYPE 1 ACTUATES PULSED THRUSTING
C     ITYPE 2 ACTUATES MOMENTUM WHEEL CYCLING
C
C
      IF(ITEST.EQ.1) GO TO 4
      IF(IFLT.EQ.0) RETURN
      GO TO 100
    4 CONTINUE
C
      IF(T.EQ.TST) TSTART=TST
      DO 5 I=1,3
      DIY(I)=SLB(I)
    5 CONTINUE
C
      IF(ISPLSE.NE.2.AND.ISEN.NE.1) GO TO 8
      CALL HAG
      SUM=0.0D0
      DO 6 I=1,3
      SMAGB(I)=SA(1,I)*SMAGI(1)+SA(2,I)*SMAGI(2)+SA(3,I)*SMAGI(3)
      SUM=SUM+SMAGB(I)*SMAGB(I)
    6 CONTINUE
      SUM=DSQRT(SUM)
      DO 7 I=1,3
      DIY(I)=SMAGB(I)/SUM
    7 CONTINUE
C
    8 CONTINUE
C
      IF(IFLT.EQ.0) RETURN
      IF(T.GT.TST) GO TO 10
C
C
      VLP=DEP(NDEP)
      VLAST=VLP
      TLP=T
      TLAST=T
      ISW=0
C
C
       IF(ITYPE.EQ.1) GO TO 90
      IF(WTAU.NE.0.0D0) GO TO 1
      WS=OMEG(3)
      WS=DABS(WS)
      IF(WS.EQ.0.0D0) WS=1.0D0
      WTAU=TWOPI/WS
    1 CONTINUE
C
      DO 2 I=1,3
      DVWP(I)=(VWUP(I)-VWDN(I))/WTAU
      DVWM(I)=-DVWP(I)
    2 CONTINUE
      TREF1=-1.0D0
      DO 3 I=1,3
      IF(DVWP(I).EQ.0.0D0) GO TO 3
      TD=WTAU*(VWUP(I)-VW(I))/(VWUP(I)-VWDN(I))
      IF(TD.GT.TREF1) TREF1=TD
    3 CONTINUE
C
C
      GO TO 90
C
   10 CONTINUE
C
      VNOW=DEP(NDEP)
      TNOW=T
      IF(TNOW.LE.TLAST) GO TO 12
      VLP=VLAST
      TLP=TLAST
C
   12 CONTINUE
C
      VLAST=VNOW
      TLAST=TNOW
      IF(ITYPE.EQ.1) GO TO 90
      IF(ISW.EQ.1) GO TO 20
      IF(VLAST.LE.0.0D0) GO TO 90
      IF(VLP.GT.0.0D0) GO TO 90
      TDIF=TLAST-TLP
      TCROSS=TLP-TDIF*VLP/(VLAST-VLP)
      ISW=1
      TREF2=TCROSS+TREF1+ACTTD
      TREF1=TCROSS+ACTTD
      TSTART=TREF1
      ISIGN=1
      DO 14 I=1,3
      VW(I)=WSP(I)
      VWDOT(I)=DVWP(I)
   14 CONTINUE
C
   20 CONTINUE
C
      IF(TLAST.LT.TREF1) GO TO 95
      DO 22 I=1,3
      DVW(I)=VWDOT(I)
   22 CONTINUE
      IF(TLAST.LT.TREF2) GO TO 95
C
C     SWITCH MOMENTUM WHEEL ACC
C
      IF(ISIGN.LT.0) GO TO 30
C
      DO 25 I=1,3
      VWDOT(I)=DVWM(I)
      VW(I)=WSP(I)
   25 CONTINUE
      TSTART=TREF2
      TREF1=TREF2
      TREF2=TREF2+WTAU
      ISIGN=-1
C
      GO TO 20
C
   30 CONTINUE
C
      DO 35 I=1,3
      VWDOT(I)=DVWP(I)
      VW(I)=WSP(I)
   35 CONTINUE
      TSTART=TREF2
      TREF1=TREF2
      TREF2=TREF2+WTAU
      ISIGN=1
C
      GO TO 20
C
   90 CONTINUE
C
      IF(ITYPE.EQ.2) GO TO 95
C
      WS=DABS(VLAST)
      IF(WS.LT.0.1D0) DIY(1)=0.1D0
      DIY(2)=VLAST
C
   95 CONTINUE
C
C
      RETURN
C
C
  100 CONTINUE
C
      IF(ISEN.GT.1) GO TO 110
C
C     SENSOR MEASURES MAGNETIC FIELD
C
      SOUT=UVEC(1)*SMAGB(1)+UVEC(2)*SMAGB(2)+UVEC(3)*SMAGB(3)
      GO TO 150
C
  110 CONTINUE
C
      IF(ISEN.GT.2) GO TO 120
C
C     SENSOR IS AN ACCELEROMETER
C
      O11=OMEG(1)*OMEG(1)
      O22=OMEG(2)*OMEG(2)
      O33=OMEG(3)*OMEG(3)
      O12=OMEG(1)*OMEG(2)
      O13=OMEG(1)*OMEG(3)
      O23=OMEG(2)*OMEG(3)
      ACC(1)=ETA(1)+ETA(5)*SPOS(3)-ETA(6)*SPOS(2)
     1       -(O22+O33)*SPOS(1)+O12*SPOS(2)+O13*SPOS(3)
      ACC(2)=ETA(2)+ETA(6)*SPOS(1)-ETA(4)*SPOS(3)
     1       +O12*SPOS(1)-(O33+O11)*SPOS(2)+O23*SPOS(3)
      ACC(3)=ETA(3)+ETA(4)*SPOS(2)-ETA(5)*SPOS(1)
     1       +O13*SPOS(1)+O23*SPOS(2)-(O11+O22)*SPOS(3)
      SOUT=ACC(1)*UVEC(1)+ACC(2)*UVEC(2)+ACC(3)*UVEC(3)
      GO TO 150
C
  120 CONTINUE
C
      IF(ISEN.GT.3) GO TO 130
C
C     SENSOR IS A BODY RATE SENSOR ?
C
      SOUT=UVEC(1)*OMEG(1)+UVEC(2)*OMEG(2)+UVEC(3)*OMEG(3)
      GO TO 150
C
  130 CONTINUE
C
C     SENSOR IS A SUN SENSOR
C
      SOUT=UVEC(1)*SLB(1)+UVEC(2)*SLB(2)+UVEC(3)*SLB(3)
C
  150 CONTINUE
C
      IF(IIC.NE.0) GO TO 160
C     PUT IN INITIAL CONDITIONS FOR FILTER
C
C
      DEP(NDEP+1)=0.0D0
      DEP(NDEP)=SOUT*GAIN
      VLAST=DEP(NDEP)
      VLP=VLAST
      TLAST=T
      TLP=T
      IIC=1
      IF(ITYPE.EQ.2) GO TO 160
      DL2=DEP(NDEP)
C
  160 CONTINUE
C
      I2=NDEP+1
      DER(NDEP)=(GAIN*SOUT-DEP(NDEP)-DEP(I2))/TAU
      DER(I2)=DER(NDEP)+DEP(NDEP)/TAU
      VOUT=DEP(NDEP)
      WOUT=DEP(I2)
C
C
      RETURN
C
      END
      SUBROUTINE ADCAL(TIME,TSTART,ITEST)
C
      IMPLICIT REAL * 8 (A-H,O-Z)
      REAL*8 J2,J3,J4,J22,J2R2,J3R3,J4R4
C
      COMMON/CNBODY/ J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAP
C
C
      COMMON/IKPLER/IKPLR
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
C        'ADCAL' DETERMINES THE OBLATE EARTH PERTURBATIVE ACCELERATIONS
C        UPON THE LOCAL VERTICAL FRAME. THIS SUBROUTINE IS USED ONLY
C        FOR THE INTERNAL ORBIT GENERATOR
C
C
C   THIS COMMON BLOCK IS TO READ THE ORBITAL ELEMENT DIRECTLY
C   TO COMPUTE THE POSITION AND VELOCITY COMPONENTS
C   IN INERTIAL FRAME, CODED BY K.Y., DECEMBER, 1973
C
      COMMON/XKPLER/AS,E,GF,GEI,GBW,GW
C     COMMON/XKPLER/AS,E,F,EI,BW,W,BWDOT,WDOT
      DIMENSION ROD(3),VOD(3)
      DIMENSION R2(3),XS1(3),XS2(3)
      DATA DAY,SECOND,SDAY/ 3.65D2,8.64D4,3.652477D2 /
      DATA ANGROT/ 360.9856122808D0 /
C
C     DATA RD2DG/57.2957795131D0/
C
      IF(IORB.NE.0) GO TO 10
      IF(ITEST.EQ.2) GO TO 10
C
      IF(IKPLR.EQ.0) GO TO 1
C   CONVERT DEGREES TO RADIANS
      F=GF*RADIAN
      EI=GEI*RADIAN
      BW=GBW*RADIAN
      W=GW*RADIAN
C     BWDOT=BWDOT/RD2DG
C     WDOT=WDOT/RD2DG
C   MAGNITUDE OF POSITION VECTOR
      R=(AS*(1.0D0-E**2))/(1.0D0+E*DCOS(F))
C   POSITION VECTOR ROD(3) IN ARIES INERTIAL FRAME
      THA=W+F
      ROD(1)=R*(DCOS(BW)*DCOS(THA)-DSIN(BW)*DSIN(THA)*DCOS(EI))
      ROD(2)=R*(DSIN(BW)*DCOS(THA)+DCOS(BW)*DSIN(THA)*DCOS(EI))
      ROD(3)=R*DSIN(THA)*DSIN(EI)
C   QUANTITY ZMU/(ANGULAR MOMENTUN OF ORBIT)
      UPH=DSQRT(ZMU/(AS*(1.0D0-E**2)))
C   VELOCITY VECTOR VOD(3) IN ARIES INERTIAL FRAME
C   INTERMEDIATE TERMS FOR VELOCITY COMPUTATION
      STEW=DSIN(THA)+E*DSIN(W)
      CTEW=DCOS(THA)+E*DCOS(W)
      VOD(1)=UPH*(-DCOS(BW)*STEW-DSIN(BW)*DCOS(EI)*CTEW)
      VOD(2)=UPH*(-DSIN(BW)*STEW+DCOS(BW)*DCOS(EI)*CTEW)
      VOD(3)=UPH*DSIN(EI)*CTEW
C
C   INITIAL POSITION AND VELOCITY VECTOR OUTPUT
      DO 3 I=1,3
      XSAT(I)=ROD(I)
 3    XSATDT(I)=VOD(I)
C   END OF MODIFICATION
C
      IKPLR=0
C
 1    CONTINUE
      EROT=(ANGROT*DAY)/(SDAY*SECOND)
   10 RADIUS=0
C
      DO 20 I=1,3
   20 RADIUS=RADIUS + XSAT(I)*XSAT(I)
      RADIUS=DSQRT(RADIUS)
C
      SL=XSAT(3)/RADIUS
      SL2=SL*SL
      SL3=SL*SL2
      REQOR=AEARTH/RADIUS
      REQOR2=REQOR*REQOR
      REQOR3=REQOR*REQOR2
      REQOR4=REQOR*REQOR3
C
      RM2=RADIUS*RADIUS
      RM3=RADIUS*RM2
      RM4=RADIUS*RM3
      GMOR3=ZMU/RM3
C
C        'WWO' IS THE GHA OF ARIES AT THE INSTANT VERNAL EQUINOX OCCURS
C        IN THE YEAR OF SIMULATION.  USED FOR THE 2,2 TERM IN THE
C        EXPANSION OF THE EARTH'S GRAVITATIONAL MODEL
C
      ARG=2.D0*(WWO + EROT*(TIME-TSTART))*RADIAN
C
      SNWT=DSIN(ARG)
      CSWT=DCOS(ARG)
C
      C1=1.5D0*(5.D0*SL2 - 1.D0)
      C2=2.5D0*(7.D0*SL3 - 3.D0*SL)
      C3=1.875D0*(21.D0*SL2*SL2 - 14.D0*SL2 + 1.D0)
C
      J2R2=J2*REQOR2
      J3R3=J3*REQOR3
      J4R4=J4*REQOR4
C
      CK=J2R2*C1 + J3R3*C2 + J4R4*C3
      C11=3.D0*ZMU*J22*AEARTH*AEARTH/RM3/RM4
      CKGM=CK*GMOR3
C
      DO 30 I=1,3
      R2(I)=XSAT(I)*XSAT(I)
      XS1(I)=XSAT(1)*R2(I)
   30 XS2(I)=XSAT(2)*R2(I)
C
      SUM1=3.D0*XS1(1)
      SUM2=7.D0*XS1(2)
      SUM3=2.D0*XS1(3)
C
      AD(1)=CSWT*(SUM1 - SUM2 - SUM3)
C
      SUM1=2.D0*XS2(2)
      SUM2=2.D0*XS2(3)
      SUM3=8.D0*XS2(1)
C
      AD(1)=AD(1) + SNWT*(SUM1 + SUM2 - SUM3)
C
      AD(1)=AD(1)*C11 + XSAT(1)*CKGM
C
C
C
      SUM1=7.D0*XS2(1)
      SUM2=3.D0*XS2(2)
      SUM3=2.D0*XS2(3)
C
      AD(2)=CSWT*(SUM1 - SUM2 + SUM3)
C
      SUM1=2.D0*XS1(1)
      SUM2=2.D0*XS1(3)
      SUM3=8.D0*XS1(2)
C
      AD(2)=AD(2) + SNWT*(SUM1 - SUM2 - SUM3)
C
      AD(2)=AD(2)*C11 + XSAT(2)*CKGM
C
C
C
      SUM1=3.D0*J2R2*SL
      SUM2=J3R3*C1
      SUM3=J4R4*C2
C
      AD(3)=(SUM1 + SUM2 + SUM3)*ZMU/RM2
C
      SUM1=5.D0*C11*XSAT(3)
      SUM2=CSWT*(R2(1) - R2(2))
      SUM3=2.D0*SNWT*XSAT(1)*XSAT(2)
C
      AD(3)=SUM1*(SUM2 - SUM3) - AD(3)
C
      AD(3)=XSAT(3)*CKGM + AD(3)
C
C
      RETURN
      END
      SUBROUTINE ADDV(VI1,VI2,VO)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      DIMENSION VI1(3),VI2(3),VO(3)
C
      DO 1 I=1,3
      VO(I)=VI1(I)+VI2(I)
    1 CONTINUE
C
      RETURN
C
      END
      SUBROUTINE ADMDUM(N,DELTAT,DEP,DER,UPBND,DNBND,FACTOR,FRQ
     1                 ,TTSTP,LSAVE,T,DELMIT)
C
C     'ADMDUM' COMPUTES STATE VECTOR WITHOUT INTEGRATION IE NO MOTION
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/CENVRN/ GGMOM(3),SPMOM(3),ADMOM(3),HUBSPM(3),HUBADM(3)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CNBODY/ ZJ2,ZJ3,ZJ4,ZJ22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/CSTVAL/ TSTART,ZLDUM(40)
C
      COMMON/IMAIN1/ IDATE,ISAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/INOMOT/ NOINTG,NOIOUT(20)
C
      COMMON/KNERGY/ S,OMC,BT
C
      COMMON/LIBDPR/ ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,ZMDO
     *              ,ZMDBO,CNV,DECAY
C
      COMMON/ORBNEW/ ROD(3),VOD(3),TST
C
      COMMON/OUTTHR/ SMAGB(3)
C
      COMMON/RMGNTC/ SMAGI(3)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DUMRP2(72),SD1(3),DT1,P1,AERO,DTO1,YZK(3)
     .              ,PO1
C
      COMMON/RPOOL6/ FM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
      COMMON/SUNVTR/ SDBODY(3)
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/XIN2  / ALFAE,BETAE,GAMAE,OMBC(3),ITEST2
C
C
C
      DIMENSION S(3,3),ST(3,3),BS(3,3),BT(3,3),OMC(3),SXOMC(3)
     .          ,DEPEND(150),DEP(150),DER(150),UPBND(150),DNBND(150)
     .          ,SSPM(3),SADM(3)
C
      REAL*4 BUFF(450)
C
      IF(NOINTG.NE.0) GO TO 2
C
      CALL ADMIMP(N,DELTAT,DEP,DER,UPBND,DNBND,FACTOR,FRQ
     1           ,TTSTP,LSAVE,T,DELMIT)
C
      DO 1 I=1,3
      SSPM(I)=SPMOM(I) + HUBSPM(I)
      SADM(I)=ADMOM(I) + HUBADM(I)
    1 CONTINUE
C
      RETURN
C
    2 CONTINUE
C
C
      IF(LSAVE.EQ.1) GO TO 100
C
C     INCREASE TIME TO NEXT PRINT TIME
C
      T=T+FRQ
C
      LSAVE=1
C
      IF(INOPT.EQ.1) GO TO 100
C
      CALL XFIND(ROD,VOD,ZMU,TSTART,T,XSAT,XSATDT)
C
      RADIUS=0.D0
      DO 5 I=1,3
    5 RADIUS=RADIUS + XSAT(I)*XSAT(I)
      RADIUS=DSQRT(RADIUS)
C
      ALFAE=ALFAE*RADIAN
      BETAE=BETAE*RADIAN
      GAMAE=GAMAE*RADIAN
C
      SALFAE=DSIN(ALFAE)
      CALFAE=DCOS(ALFAE)
      SBETAE=DSIN(BETAE)
      CBETAE=DCOS(BETAE)
      SGAMAE=DSIN(GAMAE)
      CGAMAE=DCOS(GAMAE)
C
      ANG1=CBETAE*CGAMAE
      ANG2=CBETAE*SGAMAE
      ANG3=SBETAE*SGAMAE
      ANG4=SBETAE*CGAMAE
C
      S(1,1)= ANG1 + SALFAE*ANG3
      S(2,1)=-ANG2 + SALFAE*ANG4
      S(3,1)= CALFAE*SBETAE
C
      S(1,2)= CALFAE*SGAMAE
      S(2,2)= CALFAE*CGAMAE
      S(3,2)=-SALFAE
C
      S(1,3)=-ANG4 + SALFAE*ANG2
      S(2,3)= ANG3 + SALFAE*ANG1
      S(3,3)= CALFAE*CBETAE
C
      DO 10 I=1,3
      DO 10 J=1,3
   10 ST(I,J)=S(J,I)
C
      DO 20 I=1,3
   20 BS(3,I)=XSAT(I)/RADIUS
      YZ=XSAT(2)*XSATDT(3) - XSAT(3)*XSATDT(2)
      ZX=XSAT(3)*XSATDT(1) - XSAT(1)*XSATDT(3)
      XY=XSAT(1)*XSATDT(2) - XSAT(2)*XSATDT(1)
C
      RXVMAG=DSQRT(YZ*YZ + ZX*ZX + XY*XY)
C
      BS(2,1)=YZ/RXVMAG
      BS(2,2)=ZX/RXVMAG
      BS(2,3)=XY/RXVMAG
C
      BS(1,1)=BS(2,2)*BS(3,3)-BS(2,3)*BS(3,2)
      BS(1,2)=BS(2,3)*BS(3,1)-BS(2,1)*BS(3,3)
      BS(1,3)=BS(2,1)*BS(3,2)-BS(2,2)*BS(3,1)
C
      DO 30 I=1,3
      DO 30 J=1,3
   30 BT(I,J)=BS(J,I)
C
      CALL MATMPY(BT,ST,SA,3,3)
C
      DO 40 I=1,3
      DO 40 J=1,3
   40 SAT(I,J)=SA(J,I)
C
C
      ALFAE=ALFAE/RADIAN
      BETAE=BETAE/RADIAN
      GAMAE=GAMAE/RADIAN
C
      L=0
      DO 80 I=1,2
      DO 80 J=1,3
      L=L + 1
   80 DEP(L)  = SA(I,J)
C
C
C
  100 CONTINUE
C
C
      IF(LSAVE.NE.1) GO TO 110
C
      DO 105 I = 1,3
      ROD(I) =  XSAT(I)
      VOD(I) =  XSATDT(I)
  105 CONTINUE
C
      TSTART=T
      TST = TSTART
  110 CONTINUE
C
C
C
      CALL ADMIMP(N,DELTAT,DEP,DER,UPBND,DNBND,FACTOR,FRQ
     1           ,TTSTP,LSAVE,T,DELMIT)
C
C
C
      DO 120 I=1,3
      SSPM(I)=SPMOM(I) + HUBSPM(I)
      SADM(I)=ADMOM(I) + HUBADM(I)
  120 CONTINUE
C
C
C
      RETURN
C
C   *************************************************************
      ENTRY ADMWRP(BUFF,INDEX)
C   *************************************************************
C
C     CALLED FROM GPPLOT
C
      DO 201 I=1,3
      I1=INDEX + I - 1
      I2=I1 + 3
      I3=I2 + 3
      BUFF(I1)=GGMOM(I)
      BUFF(I2)= SSPM(I)
      BUFF(I3)= SADM(I)
  201 CONTINUE
C
C
      RETURN
C
C
C   *************************************************************
      ENTRY ADMPRN
C   *************************************************************
C
C     CALLED FROM GPSOUT
C
      DATA I8/',A8,'/
C
      IF(NOIOUT(1).EQ.0) GO TO 315
C
      DO 310 I=1,3
      CALL SET('GG MOM  ',I,0,GGMOM(I),I8)
  310 CONTINUE
C
  315 CONTINUE
C
      IF(NOIOUT(2).EQ.0) GO TO 325
C
      DO 320 I=1,3
      CALL SET('SP MOM  ',I,0,SSPM(I) ,I8)
  320 CONTINUE
C
  325 CONTINUE
C
      IF(NOIOUT(3).EQ.0) GO TO 335
C
      DO 330 I=1,3
      CALL SET('AD MOM  ',I,0,SADM(I) ,I8)
  330 CONTINUE
C
  335 CONTINUE
C
      RETURN
      END
      SUBROUTINE ADMIMP(NZ,ZDEL,VALUE,DERN,UPBND,DNBND,FACTOR,FREQ,
     .HLIMIT,LZ,ZXINDE,DELMIT)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C        'ADMIMP' IS THE ADAMS-MOULTON INTEGRATOR.  THE FIRST FOUR
C        POINTS ARE CALCULATED USING A RUNGE-KUTTA SCHEME.
C
      COMMON/IAFSD/DELMAX,DELMIN,KCUT(150),NCUT,NUP
C
      COMMON/ICSADM/L
C
      DIMENSION ZBAR(150),DIF(150),VALUE(150),DERNN(150),DERN(150),
     .   DERNM1(150),DERNM2(150),DERNM3(150),VALUEN(150),B0(150),
     .   B1(150),UPBND(150),DNBND(150),SAVD(150),SAVE(150)
C
      N=NZ
      L=LZ
      DEL=ZDEL
      XINDEP=ZXINDE
      IF(DELMIT) 3,2,3
    2 DELMIT=DEL/1000.0D0
    3 CONTINUE
      IF(L) 1210,201,1211
 1210 L=IABS(L)
      GO TO 23
 1211 GO TO (23,204,204,204,24),L
  204 DO 205 JJ=1,N
      DERN(JJ)=SAVD(JJ)
      VALUE(JJ)=SAVE(JJ)
  205 CONTINUE
      XINDEP=SINDEP
      GO TO 24
   23 XFREQ=XINDEP+FREQ
      LL=2
      SAVDEL=DEL
      SINDEP=XINDEP
      ASSIGN 41 TO M
      CALL DEREQ1(VALUE,XINDEP,DERN)
      GO TO 40
   24 GO TO M,(41,42)
   41 DO 62 KK=1,N
      DERNM3(KK)=DERN(KK)
   62 CONTINUE
      DO 43 NN=1,3
      W1=DEL/2.0D0
      DO 44 I=1,N
      B0(I)=0.0D0
   44 CONTINUE
      DO 50 J=1,4
      GO TO (45,46,48,49),J
   45 DIV1=6.0D0
   47 DIV2=2.0D0
      H=W1
      GO TO 60
   46 DIV1=3.0D0
      GO TO 47
   48 DIV1=3.0D0
      DIV2=1.0D0
      H=DEL
      GO TO 60
   49 DIV1=6.0D0
   60 DO 51 I=1,N
      B1(I)=DERN(I)*DEL
      B0(I)=B0(I)+B1(I)/DIV1
      GO TO (52,52,52,53),J
   52 VALUEN(I)=VALUE(I)+B1(I)/DIV2
      TINDEP=XINDEP+H
      GO TO 51
   53 VALUEN(I)=VALUE(I)+B0(I)
   51 CONTINUE
   54 CALL DEREQ1(VALUEN,TINDEP,DERN)
   50 CONTINUE
      DO 61 II=1,N
      GO TO (63,64,65),NN
   63 DERNM2(II)=DERN(II)
      GO TO 65
   64 DERNM1(II)=DERN(II)
   65 VALUE(II)=VALUEN(II)
   61 CONTINUE
      XINDEP=TINDEP
43    CALL RWHOUT
      H1=DEL
      H2=DEL
      H3=DEL
      ASSIGN 42 TO M
      GO TO 9042
   42 CONTINUE
      XFREQ=XFREQ+FREQ
 9042 CONTINUE
      GO TO (1406,1407,1407,1407,1207),L
 1407 IF (DABS(XINDEP-XFREQ)-DABS(DEL)) 1408,1408,1455
 1455 IF(DABS(XINDEP-HLIMIT)-DABS(DEL)) 1408,1408,1406
 1408 CONTINUE
      DO 1410 IJK=1,N
      ZBAR(IJK)=VALUE(IJK)
      DERNN(IJK)=DERN(IJK)
      DERN(IJK)=DERNM1(IJK)
      DERNM1(IJK)=DERNM2(IJK)
      DERNM2(IJK)=DERNM3(IJK)
 1410 CONTINUE
      LL=1
   11 TEMP=DABS(XINDEP-XFREQ)
      IF(TEMP-DABS(DEL)) 16,16,15
   16 L=2
      SINDEP=XINDEP
      SAVDEL=DEL
      TEMP1=DABS(DEL)/DEL
      DEL=TEMP*TEMP1
   15 TEMP=DABS(XINDEP-HLIMIT)
      IF(TEMP-DABS(DEL)) 118,18,17
  118 L=1
   18 L=L+2
      SAVDEL=DEL
      TEMP1=DABS(DEL)/DEL
      DEL=TEMP*TEMP1
   17 GO TO (22,6,6,6,22),L
 1406 CONTINUE
      LL=1
      L=1
 1207 CONTINUE
   12 W1=H1+H2
      W2=W1*W1
      W3=W1+H1
      W4=W1+H3
      W5=W4+W1
      W6=W4+W3
      W7=W3+H3
      W8=W1*H1
      W9=W1*H3
      W10=H2+H3
      W11=H2*H3
      W12=H1*H2
      W16=W2+W9
      GO TO (14,202,202,202,14),L
   14 TEMP=XINDEP+DEL
      DEL=TEMP-XINDEP
      IF(DABS(DEL)-DABS(DELMIT)) 201,202,202
  201 CONTINUE
      L=6
      GO TO 4
  202 XINDEP=XINDEP+DEL
      W13=DEL/2.0D0
      W14=W13*W13*DEL
      W15=DEL*DEL/3.0D0
      W17=H1+DEL
      W18=W1+DEL
      W19=W1*DEL
      W29=W3*DEL
      B0(1)=(DEL/W4)*(W14+W15*W6+W13*(W2+2.0D0*H1*W4+W11)+H1*W16)/W8
      B1(1)=-DEL/W10*(W14+W15*W5+W13*W16)/W12
      B2=DEL*(W14+W15*W7+W13*H1*W4)/(W1*W11)
      B3=-DEL*(W14+W15*W3+W13*W8)/(W4*W10*H3)
      DO 1544 I=1,N
      ZBAR(I) =VALUE(I)+B0(1)*DERN(I)+B1(1)*DERNM1(I)+B2*DERNM2(I)+B3
     . *DERNM3(I)
 1544 CONTINUE
      CALL DEREQ1(ZBAR,XINDEP,DERNN)
      A=(W14+W15*W3+W13*W8)/(W17*W18)
      A0=-(W14+W15*(W3-DEL)+W13*(W8-W29)-DEL*W8)/W8
      A1=DEL*(W14+W15*(W1-DEL)-W13*W19)/(W12*W17)
      A2=DEL*(W14/3.0D0+H1*W15/2.0D0)/(W1*W18*H2)
      DO 13 I=1,N
      VALUEN(I)=VALUE(I)+A*DERNN(I)+A0*DERN(I)+A1*DERNM1(I)+A2*DERNM2(I)
      DIF(I)=DABS(VALUEN(I)-ZBAR(I))
      IF(DIF(I)-UPBND(I)) 13,13,759
  759 XINDEP=XINDEP-DEL
      DEL=DEL-FACTOR*DEL
      IF(DELMIN.GT.DEL) DELMIN=DEL
      KCUT(I)=KCUT(I)+1
      IF(L-5) 7000,14,220
 7000 CONTINUE
      L=1
      LL=1
      GO TO 14
   13 CONTINUE
      IF(L-2) 500,5,500
  500 CONTINUE
      H3=H2
      H2=H1
      H1=DEL
      GO TO (11,5,5,5,22),L
  200 SAVDEL=DEL
      GO TO 21
   22 DO 19 K=1,N
      IF(DIF(K)-DNBND(K)) 19,19,7010
   19 CONTINUE
      DEL=DEL+DEL*FACTOR
      IF(DELMAX.LT.DEL) DELMAX=DEL
      NUP=NUP+1
7010  CALL RWHOUT
      IF(L-5) 6,200,220
    5 CONTINUE
      DO 1040 LLL=1,N
      VALUE(LLL)=ZBAR(LLL)
1040  DERN(LLL)=DERNN(LLL)
   21 LL=2
      GO TO (6,40,40,40,6),L
    6 DO 8 J=1,N
      DERNM3(J)=DERNM2(J)
      DERNM2(J)=DERNM1(J)
      DERNM1(J)=DERN(J)
      DERN(J)=DERNN(J)
      VALUE(J)=ZBAR(J)
    8 CONTINUE
   40 CONTINUE
      GO TO (212,208,208,208,209),L
  212 CONTINUE
      GO TO (1407,1206),LL
 1206 L=2
      GO TO 206
  208 CONTINUE
      GO TO (206,4),LL
  206 CONTINUE
      DO 203 JJJ=1,N
      SAVD(JJJ)=DERN(JJJ)
      SAVE(JJJ)=VALUE(JJJ)
  203 CONTINUE
  209 CONTINUE
      GO TO (12,4),LL
    4 DEL=SAVDEL
  220 NZ=N
      LZ=L
      ZDEL=DEL
      ZXINDE=XINDEP
      RETURN
      END
      SUBROUTINE AIRDRG(ITEST)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      REAL*8 J2,J3,J4,J22,METERS
C
      COMMON/CENVRN/ GGMOM(3),SPMOM(3),ADMOM(3),HUBSPM(3),HUBADM(3)
C
      COMMON/CNBODY/ J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/DRGCOM/ ER(3),HUBCDA(3),HUBCP(3),UJD0,HUBF(3),HUBM(3),IDRAG
C
      COMMON/DRPROT/ STAGP,RMAG,UNADR(3)
C
      COMMON/RPOOL1/ RHOK(10),TIME,DUM(113)
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON/RPOOL6/ FM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
      COMMON/SUNVTR/ SLB(3)
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      DIMENSION USAT(3),USUN(3),VAT(3),HUBAD(3),HUBSP(3)
C
      DATA METERS/3.28083333333333D3/,RHZERO/0.0019399774D0/
C
      DATA ESQ/6.69454D-3/
C
C
      RSQ=XSAT(1)*XSAT(1)+XSAT(2)*XSAT(2)+XSAT(3)*XSAT(3)
      RMAG=DSQRT(RSQ)
C
      IF(RMAG.LT.1.0D-6) RMAG=1.0D-6
      UNADR(1)=-XSAT(1)/RMAG
      UNADR(2)=-XSAT(2)/RMAG
      UNADR(3)=-XSAT(3)/RMAG
C
C     CALCULATE HEIGHT OF SPACECRAFT
C
      H=RMAG-AEARTH
C
C     IDRAG 1 STANDARD 1962 ATMOS. - IDRAG 2 JACCHIA ROBERTS MODEL
C
      IF(IDRAG.GT.1) GO TO 15
      H=H*METERS
      CALL ATMO62(H,RHO,ASOUND,TEMP,PRES)
C
      GO TO 50
C
   15 CONTINUE
      DO 20 I=1,3
      USAT(I)=XSAT(I)/RMAG
      USUN(I)=-SD(I)
   20 CONTINUE
C
      T=UJD0+TIME/86400.0D0
C
      CALL JACROB(ESQ,H,T,USAT,USUN,RHO)
C
C     JACROB GIVES DENSITY IN KG/KM**3
      RHO=RHO*1.0D-9
C
   50 CONTINUE
      RHO1=RHO*RHZERO
C
C     CALCULATE RELATIVE VELOCITY OF ATMOSPHERE TO VEHICLE
C
      VAT(1)=XSATDT(1)+XSAT(2)*ER(3)-XSAT(3)*ER(2)
      VAT(2)=XSATDT(2)+XSAT(3)*ER(1)-XSAT(1)*ER(3)
      VAT(3)=XSATDT(3)+XSAT(1)*ER(2)-XSAT(2)*ER(1)
C
      VSQ=VAT(1)*VAT(1)+VAT(2)*VAT(2)+VAT(3)*VAT(3)
      VMAG=DSQRT(VSQ)
C
      STAGP=0.5D0*RHO1*VSQ*METERS*METERS
      P1=STAGP*AERO
C
      IF(ITEST.EQ.2) GO TO 100
C
      DO 55 I=1,3
      SD1(I)=-VAT(I)/VMAG
   55 CONTINUE
C
C     TRANSFORM FLOW VECTOR TO BODY FRAME
C
      DO 56 I=1,3
      DIY1(I)=SAT(I,1)*SD1(1)+SAT(I,2)*SD1(2)+SAT(I,3)*SD1(3)
   56 CONTINUE
C
C     CALCULATE HUB DRAG FORCE AND MOMENT
C
      DO 60 I=1,3
      HUBF(I)=HUBCDA(I)*(STAGP*DIY1(I)+PO*SLB(I))
      HUBAD(I)=HUBCDA(I)*STAGP*DIY1(I)
      HUBSP(I)=HUBCDA(I)*PO*SLB(I)
   60 CONTINUE
C
      HUBM(1)=HUBF(3)*HUBCP(2)-HUBF(2)*HUBCP(3)
      HUBADM(1)=HUBAD(3)*HUBCP(2)-HUBAD(2)*HUBCP(3)
      HUBSPM(1)=HUBSP(3)*HUBCP(2)-HUBSP(2)*HUBCP(3)
      HUBM(2)=HUBF(1)*HUBCP(3)-HUBF(3)*HUBCP(1)
      HUBADM(2)=HUBAD(1)*HUBCP(3)-HUBAD(3)*HUBCP(1)
      HUBSPM(2)=HUBSP(1)*HUBCP(3)-HUBSP(3)*HUBCP(1)
      HUBM(3)=HUBF(2)*HUBCP(1)-HUBF(1)*HUBCP(2)
      HUBADM(3)=HUBAD(2)*HUBCP(1)-HUBAD(1)*HUBCP(2)
      HUBSPM(3)=HUBSP(2)*HUBCP(1)-HUBSP(1)*HUBCP(2)
C
  100 CONTINUE
C
      IF(IOUT.NE.1) WRITE(6,6012) IDRAG,RHO,P1,STAGP
 6012 FORMAT(' **AIRDRG** ',I2,1P3E14.6)
C
      RETURN
C
      END
      SUBROUTINE ALLMAG(MODEL,TM,RKM,ST,CT,SPH,CPH,BR,BT,BP,B)
C ****  GEOCENTRIC VERSION OF GEOMAGNETIC FIELD ROUTINE
C ****  SHORT DECK, USES SUBSCRIPTED VARIABLES AND DO LOOPS
C ****  EXECUTION TIME PER CALL 3 TIMES GREATER THAN LONG DECK
C ****  PROGRAM DESIGNED AND TESTED BY E G STASSINOPOULOS AND G D MEAD,
C ****  CODE 641, NASA GODDARD SPACE FLT CTR, GREENBELT, MD 20771
C  *****  INPUT  MODEL    CHOICE OF 7 MODELS - SEE BELOW
C  *****         RKM      GEOCENTRIC DISTANCE IN KILOMETERS
C  *****         TM       TIME IN YEARS FOR DESIRED FIELD
C  *****         ST,CT    SIN & COS OF GEOCENTRIC COLATITUDE
C  *****         SPH,CPH  SIN & COS OF EAST LONGITUDE
C  ***** OUTPUT  BR,BT,BP GEOCENTRIC FIELD COMPONENTS IN GAUSS
C  *****         B        FIELD MAGNITUDE IN GAUSS
C  *****  NOTE  FOR GREATEST EFFICIENCY, COMPLETE ALL CALCULATIONS WITH
C               ONE MODEL AND ONE TIME BEFORE CHANGING MODELS OR TIME.
      IMPLICIT REAL*8(A-H,O-Z)
C     REAL*8 LABEL(4,7) /  'HENDRICKS&CAIN 99-TERM GSFC 9/65 CAIN ET.AL.
C    A 120-TERM GSFC 12/66 CAIN&LANGEL 143-TERM POGO 10/68 CAIN&SWEENEY
C    B120-TERM POGO 8/69    IGRF 1965.0 80-TERM 10/68    LEATON MALIN EV
C    CANS 80-TERM 1965   HURWITZ US C&GS 168-TERM 1970'/
      DIMENSION T0(7),NMX(7),ISUM(7,3),G(13,13)
      DATA T0/4*1960.,2*1965.,1970./,NMX/10,11,12,11,9,9,13/
      INTEGER LSUM(7,3)/-1646106,-1795169,-1865298,-1777057,-158472,
     A-156856,-2191704,-62661,-96778,-181519,-83555,-9569,-9599,
     B-8593,1,-10618,5*1/
      INTEGER*4 G1(13,13),GT1(13,13),GTT1(13,13),G2(13,13),GT2(13,13),
     1 GTT2(13,13),G3(13,13),GT3(13,13),GTT3(13,13),G4(13,13),
     2 GT4(13,13),GTT4(13,13),G5(13,13),GT5(13,13),GTT5(13,13),
     3 G6(13,13),GT6(13,13),GTT6(13,13),G7(13,13),GT7(13,13),GTT7(13,13)
     4 ,LG(13,13,7),LGT(13,13,7),LGTT(13,13,7)
      REAL*4     GG(13,13,7),GGT(13,13,7),GGTT(13,13,7),SHMIT(13,13)
      EQUIVALENCE (G1(1),GG(1),LG(1)), (GT1(1),GGT(1),LGT(1)),
     A     (GTT1(1),GGTT(1),LGTT(1)),
     B (G2(1),LG(1,1,2)), (GT2(1),LGT(1,1,2)), (GTT2(1),LGTT(1,1,2)),
     C (G3(1),LG(1,1,3)), (GT3(1),LGT(1,1,3)), (GTT3(1),LGTT(1,1,3)),
     D (G4(1),LG(1,1,4)), (GT4(1),LGT(1,1,4)), (GTT4(1),LGTT(1,1,4)),
     E (G5(1),LG(1,1,5)), (GT5(1),LGT(1,1,5)), (GTT5(1),LGTT(1,1,5)),
     F (G6(1),LG(1,1,6)), (GT6(1),LGT(1,1,6)), (GTT6(1),LGTT(1,1,6)),
     G (G7(1),LG(1,1,7)), (GT7(1),LGT(1,1,7)), (GTT7(1),LGTT(1,1,7))
C  ***** THE FOLLOWING DATA CARDS CONTAIN THE FIELD COEFFICIENTS
C  ***** FOR THE FOLLOWING SEVEN MODELS
C  *****  G1,GT1  HENDRICKS & CAIN      99-TERM  GSFC  9/65  EPOCH 1960.
C  *****  G2,GT2,GTT2  CAIN ET. AL.    120-TERM  GSFC 12/66  EPOCH 1960.
C  *****  G3,GT3  CAIN & LANGEL        143-TERM  POGO 10/68  EPOCH 1960.
C  *****  G4,GT4  CAIN & SWEENEY       120-TERM  POGO  8/69  EPOCH 1960.
C  *****  G5,GT5  IGRF 1965.0           80-TERM       10/68  EPOCH 1965.
C  *****  G6,GT6  LEATON MALIN & EVANS 1965        80-TERM   EPOCH 1965.
C  *****          FOR MODEL 6 (LME 1965) SET RKM = 6371.2 + ALTITUDE
C  *****  G7,GT7  HURWITZ US COAST & GEODETIC S.  168-TERM   EPOCH 1970.
      DATA G1 / 10, -304249,-15361,13009,9576,-2277,498,709,48,99,3*0,
     A 57748,-21616,30002,-19870,8028,3595,607,-572,67,29,3*0,-19498,
     B 2043,15853,12904,5026,2313,45,56,-88,74,3*0,-4310,2308,-1300,8712
     C ,-3940,-312,-2417,75,-138,-156,3*0,1520,-2684,29,-2505,2714,
     D -1573,-12,-244,-33,114,3*0,86,1212,-1160,-1104,799,-652,5,-15,71,
     E 111,3*0,-119,1028,609,-272,-124,-116,-1091,141,-56,10,3*0,-540,
     F -244,-91,22,276,-211,-201,58,117,4*0,69,-122,58,-170,26,236,-25,
     G -160,64,16,3*0,-220,156,51,-35,-18,96,121,2,-25,15,42*0 /
      DATA GT1 / 100, 2059,-2907,266,-86,255,-70,6*0,-394,602,121,-1003,
     H 194,-8,99,6*0,-1369,-1578,-70,163,-117,153,85,6*0,649,293,-924,
     I -130,-54,-42,211,6*0,-177,-154,318,-548,-417,-72,157,6*0,304,288,
     J -186,125,80,164,-9,6*0,-139,12,153,-73,-6,45,6,84*0/
      DATA GTT1 /1,168*0/
      DATA G2 / 10, -304012,-15401,13071,9493,-2335,492,722,85,104,-29,
     A 2*0,57782,-21638,29979,-19889,8035,3557,575,-537,65,58,-9,
     B 2*0,-19320,2029,15903,12768,5029,2284,-8,79,-93,75,-22,2*0,-4254,
     C 2278,-1338,8812,-3977,-288,-2383,156,-96,-151,8,2*0,1603,-2743,
     D 23,-2466,2665,-1579,-15,-243,-61,121,-28,2*0,51,1178,-1148,-1089,
     E 824,-622,-20,-36,55,47,64,2*0,-121,1044,566,-234,-148,-133,-1089,
     F 155,-81,2,47,2*0,-537,-274,-81,70,243,-225,-214,36,130,16,-2,2*0,
     G 54,-117,42,-153,46,219,-7,-171,74,9,18,2*0,-224,138,63,-30,-19,
     H 90,115,1,-15,2,20,2*0,-1,45,-10,26,-44,-13,-36,40,10,-20,11,28*0/
      DATA GT2 / 100, 1403,-2329,-93,145,161,-42,-57,35,-10,-1,2*0,-371,
     I 876,-9,-1062,90,60,82,-34,50,-13,-13,2*0,-1431,-1662,-456,231,
     J -175,334,82,-144,170,-120,88,2*0,520,253,-698,-589,66,-4,235,-90,
     K -11,8,-18,2*0,-219,-14,188,-652,-301,-60,83,3,34,-8,17,2*0,224,
     L 159,-261,50,-12,176,1,-60,-7,-39,-2,2*0,5,9,255,-119,33,84,23,-17
     M ,43,-36,5,2*0,-96,1,43,75,-33,49,90,-64,-15,47,17,2*0,-50,-21,3,
     N -79,5,10,-36,-43,-42,37,16,2*0,66,54,3,35,-3,-1,45,-5,75,-46,31,
     O 2*0,-61,-64,2,5,-63,-7,7,-3,-2,-45,-23,28*0/
      DATA GTT2 /1000,-62,-154,-123,1,45,-6,-14,6,-5,-3,2*0,-43,114,-18,
     P-27,-44,1,15,-6,8,-1,-3,2*0,54,-16,-253,28,17,75,10,-34,39,-27,20,
     Q 2*0,95,-7,79,-183,7,8,50,-4,-8,5,-8,2*0,4,56,-35,-47,-97,15,-11,
     R -6,15,-7,7,2*0,-46,7,-7,1,-24,56,26,-27,-2,-6,1,2*0,20,-11,15,
     S -29,29,-10,23,-1,5,-9,1,2*0,-14,16,14,5,-8,16,11,-4,-8,6,1,2*0,
     T -15,-12,5,-11,0,-3,-9,-3,-7,5,5,2*0,22,7,-2,9,6,-1,9,-4,19,-9,4,
     U 2*0,-12,-14,1,1,-11,-1,1,-1,1,-6,-2,28*0/
      DATA G3 / 10, -304650,-15414,13258,9591,-2343,491,759,74,110,-26,
     A 23,0,57910,-21633,29763,-19837,8196,3577,545,-524,60,66,-20,-18,
     B 0,-19772,1566,16075,13169,4864,2339,48,80,-81,18,10,-21,0,-4453,
     C 2334,-949,8420,-3724,-210,-2491,100,-92,-125,-55,55,0,1354,-2667,
     D 207,-2415,2562,-1471,17,-367,-8,158,-7,-15,0,169,1133,-1287,-1151
     E ,1303,-452,-37,-83,91,17,75,24,0,-96,1064,568,-272,-149,-43,-916,
     F 66,-114,26,78,-35,0,-579,-250,-8,63,95,-117,-376,-227,79,87,17,
     G -13,0,101,-130,115,-164,55,223,-49,-262,351,51,-53,25,0,-204,144,
     H 6,-15,14,34,148,24,-9,-24,13,-12,0,11,9,-3,75,-23,14,-5,43,80,
     I -137,-27,127,0,-8,44,-1,-39,-6,18,-32,8,-59,-17,105,50,14*0/
      DATA GT3 / 100,2542,-2390,-559,-62,272,-61,-89,61,-24,-1,3,0,-466,
     J 988,350,-1152,-251,48,106,-21,-12,30,-9,11,0,-707,-1070,-214,-441
     K ,-122,317,62,-108,87,4,12,5,0,848,68,-1489,287,-296,-246,396,70,
     L -33,4,19,-30,0,345,-39,-87,-652,86,-89,-94,107,-14,-40,-20,1,0,5,
     M 300,32,311,-635,-315,149,96,-85,-28,-2,-34,0,-26,-48,258,-80,50,
     N 82,-167,101,99,-57,-43,48,0,-87,-46,-102,25,188,-243,232,523,81,
     O -132,-33,52,0,-15,-10,-122,-26,15,-37,29,91,-498,-14,103,-19,0,
     P -38,16,67,-14,-83,130,-33,-38,99,50,22,-3,0,21,5,54,-26,-30,-3,
     Q -39,-2,-104,79,46,-165,0,35,-26,-17,17,18,-50,23,-34,37,22,-155,
     R -40,14*0/
      DATA GTT3 /1,168*0/
      DATA G4 / 10,-304708,-15425,13334,9647,-2375,448,793,99,96,-17,
     A 2*0,57571,-21702,29893,-19826,8108,3566,594,-516,32,93,-22,2*0,
     B -19793,2661,15559,12922,5068,2498,-37,-3,-56,31,13,2*0,-4249,
     C 2417,-1740,8336,-3978,-143,-2324,89,-165,-120,16,2*0,1344,-3037,
     D 194,-2764,2247,-1497,96,-335,-33,153,-22,2*0,51,1080,-1073,-1083,
     E 1171,-757,20,-33,50,7,94,2*0,-76,1181,583,-181,-270,1,-831,100,
     F -120,8,87,2*0,-544,-212,-87,55,151,-236,-278,39,102,4,3,2*0,98,
     G -162,99,-189,106,206,-2,-207,187,62,-24,2*0,-254,128,31,-25,-21,
     H 73,127,47,7,-38,-1,2*0,29,35,-7,66,-50,10,-28,21,42,-88,53,28*0/
      DATA GT4 / 100,2682,-2366,-724,-157,359,12,-160,19,17,-3,2*0,225,
     I 1003,150,-1142,-118,58,38,-26,27,-8,-8,2*0,-684,-2832,792,84,
     J -536,-27,235,72,33,-46,17,2*0,449,-96,177,327,102,-326,128,86,83,
     K -9,-87,2*0,369,564,-109,-205,834,-108,-277,84,42,-37,-12,2*0,234,
     L 401,-424,63,-503,504,8,-57,0,-3,-33,2*0,-65,-238,249,-170,234,
     M -259,-130,101,49,-48,-33,2*0,-168,-114,58,123,94,40,60,-140,73,
     N 54,-21,2*0,1,39,-106,-9,-49,56,-67,-8,-148,-13,27,2*0,48,42,17,
     O -41,-22,21,1,-113,16,33,49,2*0,-14,-37,51,-2,4,-19,7,40,-53,31,
     P -75,28*0/
      DATA GTT4 /1,168*0/
      DATA G5 / 1, -30339,-1654,1297,958,-223,47,71,10,4*0,5758,-2123,
     A 2994,-2036,805,357,60,-54,9,4*0,-2006,130,1567,1289,492,246,4,0,
     B -3,4*0,-403,242,-176,843,-392,-26,-229,12,-12,4*0,149,-280,8,-265
     C ,256,-161,3,-25,-4,4*0,16,125,-123,-107,77,-51,-4,-9,7,4*0,-14,
     D 106,68,-32,-10,-13,-112,13,-5,4*0,-57,-27,-8,9,23,-19,-17,-2,12,
     E 4*0,3,-13,5,-17,4,22,-3,-16,6,56*0/
      DATA GT5 / 10, 153,-244,2,-7,19,-1,-5,1,4*0,-23,87,3,-108,2,11,-3,
     F -3,4,4*0,-118,-167,-16,7,-30,29,11,-7,6,4*0,42,7,-77,-38,-1,6,19,
     G -5,5*0,-1,16,29,-42,-21,0,-4,3,5*0,23,17,-24,8,-3,13,-4,0,-1,4*0,
     H-9,-4,20,-11,1,9,-2,-2,3,4*0,-11,3,4,2,4,2,3,-6,-3,4*0,1,-2,-3,-2,
     I -3,-4,-3,-3,-5,56*0/
      DATA GTT5 /1,168*0/
      DATA G6 / 1, -30375,-1648,1164,930,-179,42,77,11,4*0,5769,-2087,
     A 2954,-2033,811,357,55,-56,23,4*0,-1995,116,1579,1299,490,248,12,
     B 8,-6,4*0,-389,230,-141,880,-402,-20,-239,5,-17,4*0,142,-276,5,
     C -264,262,-171,16,-35,5,4*0,30,135,-123,-100,84,-64,8,-16,20,4*0,
     D -18,101,60,-32,-27,-12,-110,9,-1,4*0,-47,-35,-9,2,27,-17,-24,2,
     E 12,4*0,5,-7,3,-20,8,26,10,-12,7,56*0/
      DATA GT6 / 10, 155,-266,0,6,8,7*0,6,83,-13,-95,10,4,-5,6*0,-114,
     F -182,13,-19,-22,16,18,6*0,32,16,-85,-6,2,-3,14,6*0,30,-7,27,-27,
     G -30,-11,6,6*0,19,23,-18,14,5,17,2,6*0,-22,2,9,-21,-1,-2,-22,84*0/
      DATA GTT6 /1,168*0/
      DATA G7/10,-302059,-17917,12899,9475,-2145,460,734,121,107,-39,16,
     A -4,57446,-20664,29971,-20708,8009,3595,651,-546,77,57,-26,-31,30,
     B -20582,430,16086,12760,4579,2490,95,46,-32,23,7,-36,5,-3699,2456,
     C -1880,8334,-3960,-290,-2188,175,-124,-110,-19,37,-3,1617,-2758,
     D 185,-2788,2436,-1669,20,-210,-44,131,-15,-3,-13,157,1420,-1310,
     E -911,808,-582,-22,-32,45,33,74,-6,4,-171,1146,625,-323,-78,38,
     F -1125,143,34,2,46,-8,-14,-666,-265,-34,81,209,-240,-186,41,125,
     G 15,6,1,-12,121,-160,22,-176,46,189,-46,-187,94,9,-8,2,-12,-174,
     H 163,14,-27,-32,80,137,-4,-14,-4,22,-24,-1,27,19,0,35,-45,22,-31,
     I 56,-1,-63,14,4,10,-2,26,-26,-9,21,-1,18,-14,-28,-17,-14,6,-4,-3,
     J 4,9,-1,-10,26,-32,13,-6,-19,7,19,12/
      DATA GT7/10,231,-244,-19,-7,12,-7,0,3,4*0,-46,112,-1,-90,-6,7,6,
     K -3,3,4*0,-104,-166,40,-20,-36,12,14,3,4,4*0,72,21,-52,-54,-11,0,
     L 17,6,1,4*0,22,-5,14,-24,-23,-15,6,3,-1,4*0,1,25,-14,9,1,11,-3,2,
     M -3,4*0,-5,11,2,-3,7,22,-5,1,9,4*0,-17,-3,7,1,-2,-3,-2,-1,-2,4*0,
     N 2,-6,-3,-4,1,-2,-2,-1,6,56*0/
      DATA GTT7 /1,168*0/
      DATA SHMIT(1,1) / 0.0 /, TMOLD / 0.0 /, MODOLD / 0 /
C  *****  SUBSCRIPTED DO-LOOP VERSION BEGINS HERE
      DIMENSION CONST(13,13),FN(13),FM(13)
      DIMENSION P(13,13),DP(13,13),SP(13),CP(13)
      DATA P(1,1),CP(1),DP(1,1),SP(1) / 2*1.,2*0. /
C  *****  BEGIN PROGRAM
      IF(SHMIT(1,1).EQ.-1.)   GO TO 8
C  *****  INITIALIZE * ONCE ONLY, FIRST TIME SUBROUTINE IS CALLED
      SHMIT(1,1)=-1.
      DO 18 N=1,13
      FN(N)=N
      DO 18 M=1,13
      FM(M)=M-1
   18 CONST(N,M) = FLOAT((N-2)**2-(M-1)**2) / ((2*N-3)*(2*N-5))
      DO 2 N=2,13
      SHMIT(N,1) = (2*N-3) * SHMIT(N-1,1) / (N-1)
      JJ=2
      DO 2 M=2,N
      SHMIT(N,M) = SHMIT(N,M-1) * SQRT(FLOAT((N-M+1)*JJ)/(N+M-2))
      SHMIT(M-1,N)=SHMIT(N,M)
    2 JJ = 1
      DO 7 K=1,7
      F1=LG(1,1,K)
      F2=LGT(1,1,K)
      F3=LGTT(1,1,K)
      NMAX=NMX(K)
      L = 0
      DO 3 I=1,3
    3 ISUM(K,I) = 0
      DO 4 N=1,NMAX
      DO 4 M=1,NMAX
      L = L+1
      ISUM(K,1)=ISUM(K,1)+L*LG(N,M,K)
      ISUM(K,2)=ISUM(K,2)+L*LGT(N,M,K)
    4 ISUM(K,3)=ISUM(K,3)+L*LGTT(N,M,K)
      DO 6 I=1,3
      IF(ISUM(K,I).EQ.LSUM(K,I))  GO TO 6
C  *****  ERROR IN DATA CARDS - NOTE WRITE AND STOP STATEMENTS
      PRINT 5,   K,I,LSUM(K,I),ISUM(K,I)
    5 FORMAT(///29H DATA WRONG IN ALLMAG--MODEL ,I2,3X,2HI=,I1,3X,
     A17HPRECALCULATED SUM,I10,3X,17HTHIS MACHINE GETS,I10)
      STOP
    6 CONTINUE
      DO 7 N=1,NMAX
      DO 7 M=1,NMAX
      GG(N,M,K)=LG(N,M,K)*SHMIT(N,M)/F1
      GGT(N,M,K)=LGT(N,M,K)*SHMIT(N,M)/F2
    7 GGTT(N,M,K)=LGTT(N,M,K)*SHMIT(N,M)/F3
    8 IF((MODEL.EQ.MODOLD).AND.(TM.EQ.TMOLD))  GO TO 11
C  *****  NOTE WRITE STATEMENT - NEW MODEL OR NEW TIME
C    DO NOT WRITE
C     PRINT 9,   MODEL,(LABEL(I,MODEL),I=1,4),TM
C   9 FORMAT('0 MODEL USED IS NUMBER',I2,2X,4A8,'  FOR TM =',F9.3/)
      IF(MODEL.LT.1.OR.MODEL.GT.7) STOP
      MODOLD=MODEL
      TMOLD=TM
      NMAX=NMX(MODEL)
      T=TM-T0(MODEL)
      DO 10 N=1,NMAX
      DO 10 M=1,NMAX
   10 G(N,M)=GG(N,M,MODEL)+T*(GGT(N,M,MODEL)+GGTT(N,M,MODEL)*T)
C  *****  CALCULATION USUALLY BEGINS HERE
   11 SP(2)=SPH
      CP(2)=CPH
      DO 12 M=3,NMAX
      SP(M)=SP(2)*CP(M-1)+CP(2)*SP(M-1)
   12 CP(M)=CP(2)*CP(M-1)-SP(2)*SP(M-1)
      AOR=6371.2/RKM
      AR=AOR**2
      BR=0.0
      BT=0.0
      BP=0.0
      DO 17 N=2,NMAX
      AR=AOR*AR
      DO 17 M=1,N
      IF(M.EQ.N) GO TO 13
      P(N,M)=CT*P(N-1,M)-CONST(N,M)*P(N-2,M)
      DP(N,M)=CT*DP(N-1,M)-ST*P(N-1,M)-CONST(N,M)*DP(N-2,M)
      GO TO 14
   13 P(N,N)=ST*P(N-1,N-1)
      DP(N,N)=ST*DP(N-1,N-1)+CT*P(N-1,N-1)
   14 PAR=P(N,M)*AR
      IF(M.EQ.1) GO TO 15
      TEMP=G(N,M)*CP(M)+G(M-1,N)*SP(M)
      BP=BP-(G(N,M)*SP(M)-G(M-1,N)*CP(M))*FM(M)*PAR
      GO TO 16
   15 TEMP = G(N,M)
   16 BR=BR-TEMP*FN(N)*PAR
   17 BT=BT+TEMP*DP(N,M)*AR
    1 BR = BR / 100000.
      BT = BT / 100000.
      BP = BP / ST / 100000.
      B = DSQRT(BR*BR+BT*BT+BP*BP )
      RETURN
      END
      SUBROUTINE ARANGE
C
C        'ARANGE' CONVERTS THE FORTRAN SYMBOL OF THE COMPUTED DEPENDENT
C        VARIABLES TO THE FORTRAN SYMBOL USED IN THE DATA OUTPUT
C
        IMPLICIT REAL*8 (A-H,O-Z)
C
C
      COMMON/CANTNA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/ELMNTS/ NELMTS,NDAMPR
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
      COMMON/MRANG/ ADDOT(10,3),BDDOT(10,3),DOUTDD(10,3),DINDD(10,3)
C
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
C
      IKOUNT=9
      IF(IDAMP.EQ.1) IKOUNT=11
      NELMTS=IK-K1
      NDAMPR=K1
      N=NUMEQS
C
C
      DO 30 K=1,IK
      M=NK(K)
      IF(M.EQ.0) GO TO 30
      L=K - K1
      DO 10 I=1,M
      IKOUNT=IKOUNT + 1
      IF(K.LE.K1) DOUT(K,I)=DEPEND(IKOUNT)
      IF(K.GT.K1) A(L,I)=DEPEND(IKOUNT)
   10 CONTINUE
C
      DO 20 I=1,M
      IKOUNT=IKOUNT + 1
      IF(K-K1) 15,15,17
   15 DOUTDT(K,I)=DEPEND(IKOUNT)
      DOUTDD(K,I)=DERIV(IKOUNT)
      GO TO 20
   17 ADOT(L,I)=DEPEND(IKOUNT)
      ADDOT(L,I)=DERIV(IKOUNT)
   20 CONTINUE
   30 CONTINUE
C
      DO 60 K=1,IK
      M=NK(K)
      IF(M.EQ.0) GO TO 60
      L=K - K1
      DO 40 I=1,M
      IKOUNT=IKOUNT + 1
      IF(K.LE.K1) DIN(K,I)=DEPEND(IKOUNT)
      IF(K.GT.K1) B(L,I)=DEPEND(IKOUNT)
   40 CONTINUE
      DO 50 I=1,M
      IKOUNT=IKOUNT + 1
      IF(K-K1) 45,45,47
   45 DINDOT(K,I)=DEPEND(IKOUNT)
      DINDD(K,I)=DERIV(IKOUNT)
      GO TO 50
C
   47 BDOT(L,I)=DEPEND(IKOUNT)
      BDDOT(L,I)=DERIV(IKOUNT)
   50 CONTINUE
   60 CONTINUE
C
C
      IF(IOUT.EQ.1) RETURN
      WRITE(6,10000)
      WRITE(6,10001) (DEPEND(I),I=1,N)
      WRITE(6,10002)
      WRITE(6,10003) (I,(A(I,J),J=1,3),I=1,IK)
      WRITE(6,10004)
      WRITE(6,10003) (I,(ADOT(I,J),J=1,3),I=1,IK)
      WRITE(6,10005)
      WRITE(6,10003) (I,(B(I,J),J=1,3),I=1,IK)
      WRITE(6,10006)
      WRITE(6,10003) (I,(BDOT(I,J),J=1,3),I=1,IK)
      IF(K1.EQ.0) RETURN
      WRITE(6,10007)
      WRITE(6,10003) (I,(DIN(I,J),J=1,3),I=1,K1)
      WRITE(6,10008)
      WRITE(6,10003) (I,(DINDOT(I,J),J=1,3),I=1,K1)
      WRITE(6,10009)
      WRITE(6,10003) (I,(DOUT(I,J),J=1,3),I=1,K1)
      WRITE(6,10010)
      WRITE(6,10003) (I,(DOUTDT(I,J),J=1,3),I=1,K1)
C
      RETURN
10000 FORMAT('0',2X,'DEPEND FROM ARANGE')
C
10001 FORMAT(' ',1X,6G15.8)
C
10002 FORMAT('0',2X,'A(I,J)')
C
10003 FORMAT('0',1X,I3,3G15.8)
C
10004 FORMAT('0',2X,'ADOT(I,J)')
C
10005 FORMAT('0',2X,'B(I,J)')
C
10006 FORMAT('0',2X,'BDOT(I,J)')
C
10007 FORMAT('0',2X,'DIN(I,J)')
C
10008 FORMAT('0',2X,'DINDOT(I,J)')
C
10009 FORMAT('0',2X,'DOUT(I,J)')
C
10010 FORMAT('0',2X,'DOUTDT(I,J)')
C
C
      END
      SUBROUTINE ARTLU1(J,X,XT,YA,YAT)
      IMPLICIT REAL * 8 (A-H,O-Z)
      DIMENSION XT(2),YAT(2)
      DO 20 I=1,4000
      K=I+1
      IF(X-XT(K))10,10,20
   10 P=(X-XT(I))/(XT(K)-XT(I))
      YA=YAT(I) + P*(YAT(K)-YAT(I))
      GO TO 30
   20 CONTINUE
   30 RETURN
      END
      SUBROUTINE ATMO62(H,RHO,ASOUND,TEMP,PRES)
C
C         'ATMO62' IS THE ATMOSPHERIC MODEL BASED ON THE U.S.
C        STANDARD ATMOSPHERE OF 1962
C
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION  TB(26),HB(26),BM(26),R(26),PB(26),TWTM(26)
      DATA  TB /
     1 320.65D0,  288.15D0,  216.65D0,  216.65D0,  228.65D0,  270.65D0,
     X 270.65D0,
     2 252.65D0,  180.65D0,  180.65D0,  210.65D0,  235.65D0,  260.65D0,
     X 360.65D0,
     3 560.65D0,  960.65D0,  1110.65D0,  1210.65D0,  1350.65D0,
     X 1550.65D0,
     4 1830.65D0,  2160.65D0,  2290.65D0,  2420.65D0,  2590.65D0,
     X 2700.65D0/
      DATA  HB /
     1 -5000.0D0,  0.0D0,  11000.0D0,  20000.0D0,  32000.0D0,
     X 47000.0D0,  52000.0D0,
     2 61000.0D0,  79000.0D0,  88743.0D0,  98451.0D0,  103294.0D0,
     X 108129.0D0,
     3 117776.0D0,  127394.0D0,  146541.0D0,  156071.0D0,  165571.0D0,
     X 184485.0D0,
     4 221967.0D0,  286476.0D0,  376312.0D0,  420240.0D0,  463526.0D0,
     X 548230.0D0,  630530.0D0/
      DATA  BM /
     1 -0.0065D0,  -0.0065D0,  0.0D0,  0.001D0,  0.0028D0,  0.0D0,
     X -0.0020D0,
     2 -0.0040D0,  0.0D0,  0.0030902D0,  0.005162090D0,  0.005170631D0,
     3 0.01036591D0,  0.02079434D0,  0.020891D0,  0.015739D0,
     X 0.0105263D0,
     4 0.00740193D0,  0.00533590D0,  0.00434048D0,  0.00367336D0,
     X 0.002959388D0,
     5 0.00300328D0,  0.00200699D0,  0.00133657D0,  0.0D0/
      DATA  R /
     1 0.193049997D+1, 0.122500263D+1, 0.363918856D-0, 0.880350657D-1,
     2 0.132250458D-1, 0.142753743D-2, 0.759434283D-3, 0.251091339D-3,
     3 0.200114310D-4, 0.317015171D-5, 0.497409776D-6, 0.211674012D-6,
     4 0.982986927D-7, 0.243629359D-7, 0.759159245D-8, 0.183655895D-8,
     5 0.115938455D-8, 0.804025792D-9, 0.434910767D-9, 0.156481698D-9,
     6 .358881794D-10, .650950819D-11, .312789872D-11, .157970712D-11,
     7 0.464882739D-12, 0.154055260D-12/
      DATA  PB /
     1 0.120676249D+4, 0.472681269D+3, 0.105578616D+3, 0.255403660D+2,
     2 0.404931098D+1, 0.517378375D+0, 0.275239632D-0, 0.849500768D-1,
     3 0.484093063D-2, 0.766885906D-3, 0.140309744D-3, 0.667954773D-4,
     4 0.343097486D-4, 0.117659643D-4, 0.569949880D-5, 0.236255541D-5,
     5 0.172430381D-5, 0.130345970D-5, 0.786596574D-6, 0.324927509D-6,
     6 0.879763417D-7, 0.188339643D-7, 0.959446043D-8, 0.512056269D-8,
     7 0.161272861D-8, 0.557126634D-9/
      DATA  TWTM /
     1 28.9644D0,  28.9644D0,  28.9644D0,  28.9644D0,  28.9644D0,
     X 28.9644D0,
     2 28.9644D0,  28.9644D0,  28.9644D0,  28.9644D0,  28.88D0,
     X 28.75D0,  28.56D0,
     3 28.07D0,  27.58D0,  26.92D0,  26.66D0,  26.40D0,  25.85D0,
     X 24.70D0,  22.66D0,
     4 19.94D0,  18.82D0,  17.94D0,  16.84D0,  16.17D0/
      DATA AG /9.80665D0/, AM0 /28.9644D0/, ARR /8.31432D+3/,
     .     AR /6356766.0D0/
      DATA CON1 /0.3048D0/, CON2 /1.8D0/, CON3 /0.0021156D0/,
     .     CON4 /263.83052D0/
C
C
      IF((H-2275000.0D0).LE.0.0D0) GO TO 2
      RHO=3.3D-15
      ASOUND=3413.42933D0
      TEMP=2713.95661D0
      PRES=0.126068033D-11
      GO TO 105
    2 ZZ=H*CON1
      AH=AR*ZZ/(AR+ZZ)
      DO 7 I=1,26
      IF(AH-HB(I)) 7,8,9
    9 IF(AH-HB(I+1)) 8,7,7
    8 K=I
      GO TO 10
    7 CONTINUE
   10 WS4=(AH-HB(K))
      TM=TB(K)+(BM(K)*WS4)
      CALL ARTLU1(1,AH,HB,WTM,TWTM)
      TEMP=TM*CON2*(WTM/AM0)
   12 IF(BM(K)-0.0D0) 15,16,15
   15 WS5=(TB(K)/TM)
      WS6=AG*AM0/(ARR*BM(K))
      RHO=(R(K)*WS5**(1.0D0+WS6))/R(2)
      PRES=(WS5**WS6)*CON3*PB(K)
      GO TO 17
   16 WS7=DEXP(-(AG*AM0*WS4)/(ARR*TB(K)))
      RHO=R(K)*WS7/R(2)
      PRES=PB(K)*WS7*CON3
   17 CONTINUE
      ASOUND=CON4*DSQRT(TEMP/WTM)
  105 RETURN
      END
      SUBROUTINE ATTUDE(TSTOP,TIME,FREQ,DELTAT,JPLUSE,LSAVE,JUMP)
C
C        'ATTUDE' DETERMINES THE START AND STOP TIME OF THRUSTING FOR
C        THE ATTITUDE CONTROL SYSTEM. IT ALSO SETS THE INTEGRATION TIME
C        STEP DURING THE THRUSTING OPERATION
C
        IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER*4 ACNTRL
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/OUTONE/ OMEGL,VSUBL,ASUBM(3),CMX1,SIMPX,SB(3)
C
      COMMON/RATTDE/ DTMXA,PXI,PXO,EIT,REFTIM,TMX1,TMX2,CMX,ISW
C
C
      DATA N /0/
C
      IF(JUMP.EQ.1) GO TO 10
      IF(TIME.LT.TMX1) RETURN
   10 GO TO (20,30,40),JUMP
   20 N=N+1
      JUMP=2
      TSAVE=TSTOP
      FSAVE=FREQ
      DSAVE=DELTAT
      TSTOP=TMX1
      FREQ=TMX1 - REFTIM
      FREQ=DMIN1(FREQ,FSAVE)
      DELTAT=DMIN1(FREQ/4.D0,DSAVE)
      REFTIM=0.D0
      TS=DMOD(TSTOP,8.64D4)
      TS=HMSOUT(TS)
      WRITE(6,10000) N,TS
      WRITE(6,10003) FREQ,DELTAT
      RETURN
C
C
   30 JUMP=3
      TSTOP=TMX2
      FREQ=TMX2 - TMX1
      FREQ=DMIN1(FREQ,FSAVE)
      DELTAT=DMIN1(FREQ/4.D1,DSAVE)
      LSAVE=1
      SIMPX=SIMPX + FREQ*CMX
      TS=DMOD(TSTOP,8.64D4)
      TS=HMSOUT(TS)
      WRITE(6,10001) TS
      WRITE(6,10003) FREQ,DELTAT
      IF(NPULSE.LE.0.OR.TSTOP.LE.TSAVE) RETURN
      TS=DMOD(TSAVE,8.64D4)
      TSAVE=TSAVE + FSAVE
      TS1=DMOD(TSAVE,8.64D4)
      WRITE(6,10004) TS,TS1
      RETURN
C
C
   40 IF(TIME.LT.TMX2) RETURN
      JUMP=1
      NPULSE=NPULSE - 1
      ISW=0
      FREQ=FSAVE
      DELTAT=DSAVE
      TSTOP=TSAVE
      ACNTRL=0
      LSAVE=1
      IF(NPULSE.EQ.0) IATTDE=0
      TS=DMOD(TSTOP,8.64D4)
      TS=HMSOUT(TS)
      WRITE(6,10002) TS
      WRITE(6,10003) FREQ,DELTAT
      RETURN
C
C
10000 FORMAT('0',10X,'ATTITUDE CONTROL ON FOR PULSE ',I3/11X,
     .               'INTEGRATING TO LEADING EDGE OF PULSE  ',F10.3)
C
10001 FORMAT('0',10X,'INTEGRATING TO TRALING EDGE OF PULSE  ',F10.3)
C
10002 FORMAT('0',10X,'ATTITUDE CONTROL OFF'/11X,
     .               'CONTINUING PROBLEM TO  ',F10.3)
C
10003 FORMAT('0',10X,'WITH A PRINT FREQUENCY OF',F8.3/11X,
     .               'AND DELTA-TIME EQUAL TO',G20.8)
C
10004 FORMAT('0',30X,'THE STOP TIME FOR THIS RUN HAS BEEN CHANGED FROM '
     .              ,F9.3,' TO ',F9.3/'0','THE TRAILING EDGE OF THE ',
     .                                    'LAST PULSE WAS GREATER THAN '
     .                                   ,'THE PROBLEM TIME')
C
C
      END
      SUBROUTINE AUTOCO(Z,P,L,N,SIG)
      DIMENSION P(1)
      COMPLEX Z(1)
C     COMPUTE RAW TRANSFORM OF X.
      CALL DBLFFT(Z,N,-1)
C     COMPUTE RAW SPECTRUM.
      NH=N/2
      FN=FLOAT(N*L)
      DO 115 I=1,NH
      A=REAL(Z(I))
      B=AIMAG(Z(I))
  115 P(I)=(A*A+B*B)/FN
      NH1=NH+1
      P(NH1)=0.
      DO 116 I=2,NH
  116 P(N+2-I)=P(I)
C
C     COMPUTE INVERSE FFT OF RAW SPECTRUM TO OBTAIN AUTOCORRELATION OF X
      CALL DBLFFT(Z,N,1)
C
      A=REAL(Z(1))
      WRITE(6,5) A
   5  FORMAT(32H1AUTOCOVARIANCE AT THE ORIGIN = ,1PE10.3)
      SIG=SQRT(A)
      WRITE(6,6)
    6 FORMAT(1H ,50X,28H AUTOCORRELATION COEFFICIENT)
C     COMPUTE AUTOCORRELATION COEFFICIENT.
      DO 444 I=1,L
  444 Z(I)=Z(I)*(FLOAT(L))/(A*FLOAT(L+1-I))
      RETURN
      END
      SUBROUTINE AUTPOW(Z,P,L,N,SIG,M,NS,IWIN,DELT,DELF)
      COMMON/DEBUG1/ IAFM(5)
      COMPLEX Z(1)
      DIMENSION P(1),AM(4)
      M1=M+1
      NS1=NS+1
      NSPEC=2*NS
      CALL AUTOCO(Z,P,L,N,SIG)
      IF(IAFM(4).EQ.0) GO TO 1975
      CALL PLTC(Z,1,M1,1,1,0,2)
 1975 CONTINUE
C
      DELF=1./(FLOAT(NSPEC)*DELT)
   16 FORMAT(14H DELF IN HZ = ,1PE10.3)
   17 FORMAT(1H1,30X,43H NORMALIZED POWER SPECTRAL DENSITY FUNCTION)
      WRITE(6,17)
      WRITE(6,16) DELF
      CALL POWERS(Z,M,NSPEC,IWIN)
      CALL PLTC(Z,1,NS1,1,1,0,0)
      RETURN
      END
      SUBROUTINE AWREAD
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ADDMOM/ HWL(3),HAXWH(3),HELGM(3)
C
      COMMON/ADSTAT/ DER(150),DEP(150)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSTVAL/ TSTART
C
      COMMON/DATOUT/ IDATA,MLAST
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/IMAIN1/ IDATE,LSAVE,IDUM1(6)
C
      COMMON/ARBMWH/ AMPARM(200),IAMPRM(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     1 DUM01(83)
C
      COMMON/TRQOUT/ OUTTRQ(150)
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
      COMMON/XIN4  / UP(150),DN(150),BNDS(22)
C
C
      DIMENSION HEDPC(5),ETA(7)
      DIMENSION HDPID(5),HDMOT(5)
      DIMENSION ANOISE(3),PNOISE(3),FNOISE(3)
      DIMENSION FREQNS(3),PHASNS(3)
      DIMENSION HDOT(3),RWHEEL(3),OUTP(6)
      DIMENSION WAXIS(3)
      REAL*4 BUFF(450)
C
      DATA I8/',A8,'/
      DATA HEDPC/'AXIS MOM','ENTUM WH','EEL CONT','ROL SYST','EM      '/
      DATA HDPID/'WHEEL CO','NTROLLER',' PARAMET','ERS     ','        '/
      DATA HDMOT/'WHEEL  D','RIVE MOT','OR PARAM','ETERS   ','        '/
C
      EQUIVALENCE (IAMPRM(1),IPCONT)
C
      EQUIVALENCE (AMPARM(31),YWQNT)
      EQUIVALENCE (AMPARM(32),YWXIUP)
      EQUIVALENCE (AMPARM(33),YWXIDN)
      EQUIVALENCE (AMPARM(34),YWKP)
      EQUIVALENCE (AMPARM(35),YWKI)
      EQUIVALENCE (AMPARM(36),YWKD)
      EQUIVALENCE (AMPARM(37),YAWG)
      EQUIVALENCE (AMPARM(38),YBW)
      EQUIVALENCE (AMPARM(61),YWKA)
      EQUIVALENCE (AMPARM(62),YWKT)
      EQUIVALENCE (AMPARM(63),YWKB)
      EQUIVALENCE (AMPARM(64),YWMTUP)
      EQUIVALENCE (AMPARM(65),YWMTDN)
      EQUIVALENCE (AMPARM(66),YWTCUL)
      EQUIVALENCE (AMPARM(67),YWDMIN)
      EQUIVALENCE (AMPARM(68),YWWMOI)
      EQUIVALENCE (AMPARM(80),ANOISE(1)),(AMPARM(83),PNOISE(1))
      EQUIVALENCE (AMPARM(86),FNOISE(1))
      EQUIVALENCE (AMPARM(90),FREQNS(1)),(AMPARM(93),PHASNS(1))
      EQUIVALENCE (AMPARM(2),WAXIS(1)),(AMPARM(5),WGT1)
      EQUIVALENCE (AMPARM(6),WGT2),(AMPARM(7),WGT3)
      EQUIVALENCE (AMPARM(8),EXK)
C
C     CALLED FROM READGP
C
      CALL SETUP(8HAMPARM  ,8,AMPARM,200)
      CALL SETUP(8HIAMPRM  ,4,IAMPRM,20)
C
      RETURN
C
C   ****************************************************************
      ENTRY NUMAMW(NUMEQS)
C   ****************************************************************
C
C     CALLED FROM NUMPGE
C
      IF(IPCONT.EQ.0) RETURN
      NYAW=NUMEQS+1
      NUMEQS=NUMEQS+3
C
      RETURN
C
C   ****************************************************************
      ENTRY AWECHO
C   ****************************************************************
C
C     CALLED FROM ECHOGP
C
      IF(IPCONT.EQ.0) RETURN
C
      CALL HVAL(HEDPC)
C
      CALL HVAL(HDPID)
C
      CALL FVAL('YAW     ',4,AMPARM(31),6,0,1)
C
      CALL HVAL(HDMOT)
C
      CALL FVAL('YAW     ',4,AMPARM(61),7,0,1)
C
      RETURN
C
C   ****************************************************************
      ENTRY AWINIT
C   ****************************************************************
C
C     CALLED FROM MAIN FOR INITIAL CONDITIONS AND INTEGRATION BOUNDS
C     CALLED AFTER CALL TO SETVAL(1)
C
      IF(IPCONT.EQ.0) RETURN
C
      CALL DEBANG(YAW,ROLL,PITCH)
      ANG=WGT1*ROLL+WGT2*PITCH+WGT3*YAW
      I1=NYAW+1
      I2=I1+1
      UP(NYAW)=AMPARM(101)
      UP(I1)=AMPARM(101)
      DN(NYAW)=AMPARM(102)
      DN(I1)=AMPARM(102)
      DEP(NYAW)=ANG
      DEP(I1)=0.0D0
      UP(I2)=AMPARM(103)
      DN(I2)=AMPARM(104)
      DEP(I2)=AMPARM(131)
    6 CONTINUE
C
      RETURN
C
C   ****************************************************************
      ENTRY AWREAC(ETA)
C   ****************************************************************
C
C     CALLED FROM DEREQ TO LOAD DERIVATIVES FOR SENSOR
C
      IF(IPCONT.EQ.0) RETURN
      DO 10 I=1,3
      HDOT(I)=0.0D0
      HWL(I)=0.0D0
   10 CONTINUE
      CALL DEBANG(YAW,ROLL,PITCH)
      ANG=WGT1*ROLL+WGT2*PITCH+WGT3*YAW
      DERIV(NYAW)=YAWG*ANG-YBW*DEPEND(NYAW)
      I1=NYAW+1
      I2=I1+1
      TEST=DEPEND(NYAW)
      FOPT=TEST
      IF(DEPEND(NYAW).GE.0.0D0) GO TO 32
C
C     LESS THAN ZERO
C
      IF(DEPEND(I1).GE.0.0D0) GO TO 34
      ARG=(YWXIDN-DEPEND(I1))/YWXIDN
      ARG=EXK*ARG
      IF(ARG.GT.0.0D0) ARG=-ARG
      TEST=0.0D0
      IF(DEPEND(I1).LT.YWXIDN) GO TO 34
      TEST=DEPEND(NYAW)*(1.0D0-DEXP(ARG))
      GO TO 34
C
   32 CONTINUE
C
C     GREATER THAN ZERO
C
      IF(DEPEND(I1).LE.0.0D0) GO TO 34
      ARG=(YWXIUP-DEPEND(I1))/YWXIUP
      ARG=EXK*ARG
      IF(ARG.GT.0.0D0) ARG=-ARG
      TEST=0.0D0
      IF(DEPEND(I1).GT.YWXIUP) GO TO 34
      TEST=DEPEND(NYAW)*(1.0D0-DEXP(ARG))
C
   34 CONTINUE
      FINT=DEPEND(I1)
      FDER=DERIV(NYAW)
      DERIV(I1)=TEST
      YWOUT=YWKP*DEPEND(NYAW)+YWKI*DEPEND(I1)+YWKD*DERIV(NYAW)
      VOPYW=YWKA*YWOUT
      YWMOTT=YWKT*(VOPYW-YWKB*DEPEND(I2))
      IF(YWMOTT.GT.YWMTUP) YWMOTT=YWMTUP
      IF(YWMOTT.LT.YWMTDN) YWMOTT=YWMTDN
      YWMOTT=YWMOTT-DEPEND(I2)*YWTCUL/(YWDMIN+DABS(DEPEND(I2)))
      DERIV(I2)=YWMOTT/YWWMOI
      OUTTRQ(14)=YWMOTT
      VWH=DEPEND(I2)
      YWHD=YWMOTT
      YWH=YWWMOI*DEPEND(I2)
   40 CONTINUE
      DO 36 I=1,3
      HWL(I)=YWH*WAXIS(I)
      HDOT(I)=YWHD*WAXIS(I)
   36 CONTINUE
      RWHEEL(1)=-HDOT(1)+HWL(2)*OMEG(3)-HWL(3)*OMEG(2)
      RWHEEL(2)=-HDOT(2)+HWL(3)*OMEG(1)-HWL(1)*OMEG(3)
      RWHEEL(3)=-HDOT(3)+HWL(1)*OMEG(2)-HWL(2)*OMEG(1)
      OUTTRQ(4)=RWHEEL(1)
      OUTTRQ(5)=RWHEEL(2)
      OUTTRQ(6)=RWHEEL(3)
      ETA(4)=ETA(4)+RWHEEL(1)
      ETA(5)=ETA(5)+RWHEEL(2)
      ETA(6)=ETA(6)+RWHEEL(3)
C
      RETURN
C
C   ****************************************************************
      ENTRY AWPLOT(BUFF,INDEX)
C   ****************************************************************
C
C     CALLED FROM GPPLOT TO LOAD PLOT RECORD
C
      I1=INDEX-1
      INDEX=INDEX+2
      IF(IPCONT.EQ.0) RETURN
      OUTP(1)=FOPT/RADIAN
      OUTP(2)=VWH/RADIAN
      OUTP(3)=FINT/RADIAN
      OUTP(4)=FDER/RADIAN
      BUFF(I1+1)=OUTP(1)
      BUFF(I1+2)=OUTP(2)
C
C
      RETURN
C
C   ****************************************************************
      ENTRY AWPRNT
C   ****************************************************************
C
C     CALLED FROM GPSOUT FOR PRINTED OUTPUT
C
      IF(IPCONT.EQ.0) RETURN
C
      CALL SET('FTR ANG ',0,0,OUTP(1),I8)
      CALL SET('ARB MWS ',0,0,OUTP(2),I8)
      CALL SET('MOT TK  ',0,0,YWMOTT,I8)
      CALL SET('CONT INT',0,0,OUTP(3),I8)
      CALL SET('CONT DER',0,0,OUTP(4),I8)
C
C
      RETURN
C
C
      END
      SUBROUTINE  BARODE (FKL   ,FLC4  ,HGT   ,RHOZ  ,TX    ,TZ    ,
     *                    T0    ,VCDI  ,XCDI  ,ZJ0   ,RHO   )
      IMPLICIT REAL*8    (A-H,O-Z)
      DIMENSION           AC(7) ,AD(6) ,B(6)  ,BD(6)
C
C.......................................................................
C
C   VERSION OF APRIL 8, 1976
C
C   PURPOSE
C     SUBROUTINE BARODE IS CALLED BY LOWALT TO COMPUTE THE ATMOSPHERIC
C     DENSITY BETWEEN 90 AND 100 KM.
C
C   INTERFACES
C
C     VARIABLE   COM/ARGLIST   I/O   DESCRIPTION
C     --------   -----------   ---   -----------------------------------
C     FKL        ARG. LIST      I    FACTOR INVOLVED IN RHO COMPUTATION
C     FLC4       ARG. LIST      I    MODIFYING FACTOR
C     HGT        ARG. LIST      I    SPACECRAFT HEIGHT (KM)
C     RCM        /ORDRAG/       I    AVERAGE EARTH RADIUS (KM)
C     RHO        ARG. LIST      O    ATMOSPHERIC DENSITY
C     RHOZ       ARG. LIST      I    DENSITY AT ZJ0
C     RL1        /ORDRAG/       I    ROOT OF POLYNOMIAL IN INTEGRAND
C     RL2        /ORDRAG/       I    ROOT OF POLYNOMIAL IN INTEGRAND
C     TX         ARG. LIST      I    INFLECTION POINT TEMPERATURE
C     TZ         ARG. LIST      I    TEMPERATURE AT HGT
C     T0         ARG. LIST      I    TEMPERATURE AT ZJ0
C     UC(2)      /ORDRAG/       I    FUNCTIONAL VALUES AT RL1 AND RL2
C     VCDI       ARG. LIST      I    FACTOR INCLUDED IN RHO COMPUTATION
C     WC(2)      /ORDRAG/       I    FUNCTIONAL VALUES AT RL1 AND RL2
C     XCDI       ARG. LIST      I    FACTOR INCLUDED IN RHO COMPUTATION
C     XLPS       /ORDRAG/       I    ROOT OF POLYNOMIAL IN INTEGRAND
C     YLPS       /ORDRAG/       I    ROOT OF POLYNOMIAL IN INTEGRAND
C     ZJ0        ARG. LIST      I    MINIMUM HEIGHT (KM)
C
C     SUBROUTINES AND FUNCTIONS REQUIRED
C       NONE
C
C     COMMON BLOCKS REQUIRED
C       /ORDRAG/
C
C     SUBROUTNE BARODE IS CALLED FROM SUBROUTINE LOWALT
C
C.......................................................................
C
      COMMON/ORDRAG/ ADT(6),CM(6),GL0,RC,RCM,RL1,RL1MAG,
     *               RL2,RL2MAG,XLPS,YLPS,UC(2),WC(2)
C
C
C  SET MOLECULAR POWER SERIES COEFFICIENTS
C
      DATA   AC / -.435093363387D6,
     *             .282755646391D5,
     *            -.765334661080D3,
     *             .110433875450D2,
     *            -.8958790995D-1,
     *             .38737586D-3,
     *            -.697444D-6/
C
C  SET CONSTANT COEFFICIENTS FOR B(N) SERIES
C
      DATA   AD /  .3144902516672729D10,
     *            -.1237748854832917D9,
     *             .1816141096520398D7,
     *            -.1140331079489267D5,
     *             .2436498612105595D2,
     *             .8957502869707995D-2/
C
C  SET LINEAR COEFFICIENTS FOR THE B(N) SERIES
C
      DATA   BD / -.5286448217910969D8,
     *            -.1663250847336828D5,
     *            -.1308252378125D1,
     *           3*0.D0/
C
C   THE B(N) SERIES
C
      D1 = TX/(TX-T0)
C
      DO 10 I=1,6
          B(I) = AD(I) + BD(I)*D1
   10 CONTINUE
C
C   THE S(Z) SERIES
C
      P2 = 0.D0
      P3 = 0.D0
      P5 = 0.D0
      D1 = 1.D0
      D2 = 1.D0
      D3 = 1.D0
C
      DO 20 I=1,6
        P2 = P2 + B(I)* D1
        P3 = P3 + B(I)* D2
        P5 = P5 + B(I)* D3
        D1 = D1 * RL1
        D2 = D2 * RL2
        D3 = D3 *(-RCM)
   20 CONTINUE
C
C   COMPUTE THE P FACTORS
C
      D1 = XLPS**2 + YLPS**2
      D2 = RCM**2
      D3 =   2.D0*XLPS +RL1 + RL2 -RCM
      D4 = RL1 * RL2
      P2 = P2/UC(1)
      P3 =-P3/UC(2)
      P5 = P5/  VCDI
      P4 = WC(1)*P2 + WC(2)*P3
      P4 = P4 + (D4*((D2-D1)*P5-D2*(B(5)+D3*B(6))))
      P4 = P4 + (B(1) - D4*RCM*D1*B(6))
      P4 = P4 /XCDI
      P6 = 2.D0*(XLPS+RCM)*P4 + (RL2+RCM)*P3 + (RL1+RCM)*P2
      P6 = B(5) + D3*B(6)-P5 - P6
      P1 = 2.D0*P4 + P3 + P2
      P1 = B(6)-P1
C
C   COMPUTE MOLECULAR MASS
C                                              
      EM = AC(7)
C
      DO 30 I=1,6
         EM = EM*HGT + AC(7-I)
   30 CONTINUE
C
C   COMPUTE F FACTORS
C
      D5 = ZJ0 + RCM
      D6 = HGT - ZJ0
      D7 = HGT + RCM
      F1 = 0.D0
      F2 = (HGT**2-2.D0*HGT*XLPS+D1)/(ZJ0**2-2.D0*ZJ0*XLPS+D1)
      F1 = F1 + DLOG  (F2)*P4
      F2 = (HGT-RL2)/(ZJ0-RL2)
      F1 = F1 + DLOG  (F2)*P3
      F2 = (HGT-RL1)/(ZJ0-RL1)
      F1 = F1 + DLOG  (F2)*P2
      F2 = D7/D5
      F1 = F1 + DLOG  (F2)*P1
      F2 = YLPS*D6/(YLPS**2 + (HGT-XLPS)*(ZJ0-XLPS))
      F2 = D6*(AC(7) + P5/(D7*D5)) + P6*DATAN(F2)/YLPS
C
C   COMPUTE DENSITY
C
      F3= FKL*FLC4*(F1 + F2)
      RHO = RHOZ*T0*EM/(28.826779D0*TZ)
      F3 = DEXP (F3 )
      RHO = F3*RHO
C
      RETURN
      END
      BLOCK DATA
C     ***************** BLOCK DATA 1 ***********************************
        IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 ISUBD,JARRAY,J2,J3,J4,J22,NSUBX
      INTEGER*4 ACNTRL,DDPLY
C
C
      COMMON/ANTENA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3),ZBZ(3,10),
     .               NELMTS,NDAMPR,MODES(10)
C
      COMMON/CCNVRT/ BDYMI(3,3),DPRMI(3,3),EMODLS(10),RTUBE(10),
     .               HTUBE(10),THERMC(10),TIPMS(10),C(10)
C
      COMMON/CFINDX/ AX2CHK,TCHECK,LCHECK
C
      COMMON/CFNALP/ SCO,CIZO(3,3),CIYO(3,3),DONA(3,10),DONB(3,10)
     .              ,CDAMP(3,10)
C
      COMMON/CNBODY/ J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/CODPLY/ STANG,ANGTOL
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CRATIO/ RATIO
C
      COMMON/CSOLAR/ SAO(10),SKA(9),SKB(9),SKOA(10,3),SKOB(10,3),
     .               STMK(10),SKAA(10,9),SKBB(10,9)
C
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10),TTST
C
      COMMON/DATOUT/ IDATA,MLAST
C
      COMMON/DEBUG1/ IAFM(5)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/DEBUG3/ ISWTCH
C
      COMMON/DEPLOY/ DDPLY,MDPLY
C
      COMMON/DMMNT1/ ZKBM(6),FMAK(10),FMBK(10),ARTETA(3),CMTORK(3),
     .               ITORK,IBENDM,ITENSE,ITNS1
C
      COMMON/ECNSTS/ THETA1,THETGO(40)
C
      COMMON/HAMOUT/ HAMILT,IHAMLT
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IODPLY/ ISDPLY,IRAXIS,ISAXIS,NCROSS,NPRINT
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/ISHADE/ IPLANS,ISATSH,IWRTTF
C
      COMMON/JBTEST/ IBTEST
C
      COMMON/LIBDPR/ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,ZMDO,
     *              ZMDBO,CNV,DECAY
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/NODER/ NDER,NOPT
C
      COMMON/PLANSH/ OCCRIT,TAUPL
C
      COMMON /PLOTIT/ XMIN(11),XMAX(11),YMIN(11),YMAX(11),IFSCAL,
     1               KPLOTS(450)
C
      COMMON/PLTCOM/IPLMOD,IKMOD
C
      COMMON/PRESUR/ DTOO,POO
C
      COMMON/PWHEEL/XMOMIN(3),DVMOM(3),VMOM(3),VW(3)
C
      COMMON/RATTDE/ DTMXA,PXI,PXO,EIT,REFTIM,TMX1,TMX2,CMX,ISW
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
C
      COMMON/RMGNTC/ SMAGI(3),DPMAG(3),SFMAG,MAGFLD
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/RSUNCL/ WE,TVER,ECLPTC
C
      COMMON/RTDIST/ TDIS(10)
C
      COMMON/RUNOUT/ LCPU
C
      COMMON/RVISCS/ NSUBX(3),YARRAY(3),RADTBE,VISCTY,RADRNG,DENSTY,
     .               JARRAY(3),SSUBY,OMEGL,ISUBD
C
      COMMON/SATLSH/ TAUK(10),OCULTK(10),RADSH
C
      COMMON/SOLOUT/ FTAKIN(10,3),FTAKOT(10,3),FTBKIN(10,3),FTBKOT(10,3)
C
      COMMON/TJAN1/T
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/XIN1  / PSI1,THET1,PHI1,ETTAE,ZETTA,ITEST1
C
      COMMON/XIN2  / ALFAE,BETAE,GAMAE,OMBC(3),ITEST2
C
      COMMON/XIN3  / ALFAEK(10),BETAEK(10),GAMAEK(10),ETTAD,ZETTAD
C
      COMMON/XIN4  / UP(150),DN(150),CONSA,COMEG,AOOP,AOOPV,AOOP1,AOOPV1
     .              ,AIP,AIPV,AIP1,AIPV1,DOOP,DOOPV,DOOP1,DOOPV1,DIP,
     .               DIPV,DIP1,DIPV1,DUC,DUC1,DUCD,DUCD1
C
      COMMON/ZSPINR/ DTZMA,PZDT,CMZO,ISPIN3,JSPIN
C
C
C
      DATA T/0.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON ANTENA
      DATA A,ADOT,B,BDOT,DIN,DINDOT,DOUT,DOUTDT/240*0.0D0/
      DATA NELMTS,NDAMPR,MODES/6,11*0/
      DATA ZBZ/30*0.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON CCNVRT
      DATA BDYMI/10.00D0,3*0.0D0,15.00D0,3*0.0D0,20.00D0/
      DATA DPRMI/9*0.0D0/
      DATA EMODLS/10*2.D7/
      DATA RTUBE/10*2.935D-1/
      DATA HTUBE/10*2.D-3/
      DATA THERMC/10*8.85D-6/
      DATA TIPMS/ 10*0.D0/
      DATA C/10*4.D0/
C
C                  DATA STATEMENT FOR LABELED COMMON CFINDX
      DATA AX2CHK,TCHECK / 0.437D-2,1.D-12 /
      DATA LCHECK /10 /
C
C                  DATA STATEMENT FOR LABELED COMMON CFNALP
      DATA SCO/14.6D0/
      DATA CDAMP/30*0.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON CNBODY
      DATA J2,J3,J4,J22 /1082.3D-6,-2.3D-6,-1.8D-6,1.9D-6/
      DATA ZJ20,ZMU,WWO /1082.3D-6,3.986032D+05,55.0D0/
      DATA FLAT,AEARTH/298.3D0,6378.165D0/
C
C                  DATA STATEMENT FOR LABELED COMMON CODPLY
      DATA STANG,ANGTOL/45.0D0,1.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON CONSTS
      DATA PI/3.141592653589793D0/
C
C                  DATA STATEMENT FOR LABELED COMMON CRATIO
      DATA RATIO/10.D-10/
C
C                  DATA STATEMENT FOR LABELED COMMON CSOLAR
      DATA SAO,SKA,SKB,SKOA,SKOB,STMK,SKAA,SKBB/278*0.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON CSTVAL
      DATA TSTART/0.0D0/
      DATA ZL0/10*1.D0/
      DATA ZL1/10*0.D0/
      DATA ZLA/10*0.D0/
      DATA TTST/0.D0/
C
C                  DATA STATEMENT FOR LABELED COMMON DATOUT
      DATA IDATA,MLAST/0,0/
C
C                  DATA STATEMENT FOR LABELED COMMON DEBUG1
      DATA IAFM/5*0/
C
C                  DATA STATEMENT FOR LABELED COMMON DEBUG2
      DATA IOUT,JOUT,KLUGE/1,0,0/
C
C
C                  DATA STATEMENT FOR LABELED COMMON DEBUG3
      DATA ISWTCH/8/
C
C                  DATA STATEMENT FOR LABELED COMMON DEPLOY
      DATA DDPLY,MDPLY/0,0/
C
C                  DATA STATEMENT FOR LABELLED COMMON DMMNT1
      DATA ITORK,IBENDM,ITENSE,ITNS1,CMTORK/4*0,3*0.0D0/
      DATA ZKBM/3.5D0,-22.0D0,61.7D0,3.5D0,-22.0D0,61.7D0/
C
C                  DATA STATEMENT FOR LABELED COMMON ECNSTS
      DATA THETA1/0.9856473354D0/
C     THETGO IS THE RT. ASCENSION OF GREENWICH MERIDIAN AT JAN 1ST.
C     AT 00:00 OF THE YEAR IN QUESTION
C     THE FOLLOWING IS THE THETGO TABLE FOR YEARS 1968 TO 2000 INCL.
      DATA THETGO/99.7212D0,100.4681D0,100.2294D0,99.9907D0,99.7520D0
     1           ,100.4989D0,100.2602D0,100.0215D0,99.7828D0,100.5297D0
     2           ,100.2910D0,100.0523D0,99.8135D0,100.5605D0,100.3218D0
     3           ,100.0830D0,99.8443D0,100.5913D0,100.3525D0,100.1138D0
     4           ,99.8751D0,100.6220D0,100.3833D0,100.1446D0,99.9059D0
     5           ,100.6528D0,100.4141D0,100.1754D0,99.9367D0,100.6836D0
     6           ,100.4449D0,100.2062D0,99.9675D0,7*100.2D0/
C
C                  DATA STATEMENT FOR LABELED COMMON HAMOUT
      DATA IHAMLT/0/
C
C                  DATA STATEMENT FOR LABELED COMMON IMAIN1
      DATA IDATE/760101/
      DATA LSAVE/1/
      DATA IPLOT,INOPT/0,1/
      DATA IPLTPE,IORB/12,0/
      DATA ITAPE/0/
C
C                  DATA STATEMENT FOR LABELED COMMON IODPLY
      DATA ISDPLY,IRAXIS,ISAXIS,NCROSS,NPRINT/0,3,2,5,2/
C
C                  DATA STATEMENT FOR LABELED COMMON IPOOL1
      DATA IGRAV/1/
      DATA IDAMP/0/
      DATA ITIM /1/
      DATA LK,LLK/20*1/
C
C                  DATA STATEMENT FOR LABELLED COMMON ISHADE
      DATA IPLANS,ISATSH,IWRTTF/3*0/
C
C                  DATA STATEMENT FOR LABELED COMMON JBTEST
      DATA IBTEST/0/
C
C                  DATA STATEMENT FOR LABELED COMMON LIBDPR
      DATA ZK1D/1.0D-3/
      DATA ZK2D/2.0D0/
      DATA PHIS/35.0D0/
      DATA PHILD,DPHILD,BETLD,GAMLD/4*0.0D0/
      DATA ZMDO/0.0D0/
      DATA ZMDBO/0.0D0/
      DATA CNV/0.0D0/
      DATA DECAY/70.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON MOMENT
      DATA ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL/5*0/
      DATA NPULSE/-4/
C
C                  DATA STATEMENT FOR LABELED COMMON NODER
      DATA NDER,NOPT/0,0/
C
C                  DATA STATEMENT FOR LABELLED COMMON PLANSH
      DATA OCCRIT,TAUPL/0.0D0,1.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON PLOTIT
      DATA XMIN,XMAX,YMIN,YMAX/44*0.0D0/,IFSCAL/0/
      DATA KPLOTS/450*0/
C
      DATA IPLMOD,IKMOD/2*0/
C                  DATA STATEMENT FOR LABELED COMMON PRESUR
      DATA POO,DTOO/0.0D0,0.0D0/
C
C
C                  DATA STATEMENT FOR LABELED COMMON PWHEEL
      DATA XMOMIN,DVMOM,VMOM,VW/3*1.0D0,3*0.0D0,3*0.0D0,3*0.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON RATTDE
      DATA DTMXA,PXI,PXO,CMX/10.D-1,0.4D0,0.5D0,0.0D0/
      DATA EIT,REFTIM/2*0.D0/
      DATA ISW/0/
C
C                  DATA STATEMENT FOR LABELED COMMON RMAIN1
      DATA DELTAT,FACTOR,FREQ,DELMIT/ 0.01D0,0.3D0,60.D0,1.D-8/
      DATA TSTOP/3600.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON RMGNTC
      DATA DPMAG/3*0.D0/
      DATA SFMAG/ 0.738D-7/
      DATA MAGFLD/7/
C
C                  DATA STATEMENT FOR LABELED COMMON RPOOL1
      DATA RHOK,TIME,SA,FM1,ZLK,OMEG,ZLKP,ZLKDP,CMAT,GBAR,YBCM,
     .     ZBZK,FCM,DTO,PHID,PHI/10*4.36D-04,115*0.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON RPOOL2
      DATA AERO,DTO1/2.D0,0.D0/
C
C                  DATA STATEMENT FOR LABELED COMMON RPOOL3
      DATA ZMS,YIZM/25.0D0,6*0.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON RSUNCL
      DATA ECLPTC / 23.444D0 /
      DATA TVER /6873720.0D0/
      DATA WE/ 1.1407D-5 /
C
C                  DATA STATEMENT FOR LABELED COMMON RTDIST
      DATA TDIS/10*2.D0/
C
C                  DATA STATEMENT FOR LABELED COMMON RUNOUT
      DATA LCPU/20/
C
C                  DATA STATEMENT FOR LABELED COMMON RVISCS
      DATA JARRAY/ 2.40483D0,5.52008D0,8.65373D0/
      DATA VISCTY,RADTBE,DENSTY/3.0D0,0.37D0,56.16D0/
      DATA RADRNG,YARRAY,OMEGL/10.0D0,3*0.0D0,0.0D0/
C
C                  DATA STATEMENT FOR LABELLED COMMON SATLSH
      DATA TAUK,OCULTK,RADSH/10*1.0D0,10*0.0D0,10.0D0/
C
C                  DATA STATEMENT FOR LABELLED COMMON SOLOUT
      DATA FTAKIN,FTAKOT,FTBKIN,FTBKOT/120*0.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON VECTRS
      DATA XSAT/8000.0D0,0.0D0,0.0D0/
      DATA XSATDT/0.0D0,7.05871093D0,0.0D0/
      DATA AD/3*0.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON XIN1
      DATA PSI1,THET1,PHI1,ETTAE,ZETTA/3*0.0D0,2*0.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON XIN2
      DATA ALFAE,BETAE,GAMAE,OMBC/6*0.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON XIN3
      DATA ALFAEK,BETAEK,GAMAEK/30*0.0D0/
      DATA ETTAD,ZETTAD/2*90.0D0/
C
C                  DATA STATEMENT FOR LABELED COMMON XIN4
      DATA   UP  /150*-1.D0/
      DATA   DN  /150*-1.D0/
      DATA CONSA / 1.D-5 /
      DATA COMEG / 1.D-7 /
      DATA AOOP  / 1.D-1 /
      DATA AOOPV / 5.D-5 /
      DATA AOOP1 / 1.D-3 /
      DATA AOOPV1/ 5.D-7 /
      DATA AIP   / 1.D-1 /
      DATA AIPV  / 5.D-5 /
      DATA AIP1  / 1.D-3 /
      DATA AIPV1 / 5.D-7 /
      DATA DOOP  / 1.D-1 /
      DATA DOOPV / 5.D-5 /
      DATA DOOP1 / 1.D-3 /
      DATA DOOPV1/ 5.D-7 /
      DATA DIP   / 1.D-1 /
      DATA DIPV  / 5.D-5 /
      DATA DIP1  / 1.D-3 /
      DATA DIPV1 / 5.D-7 /
      DATA DUC   / 1.D-2 /
      DATA DUC1  / 1.D-4 /
      DATA DUCD  / 1.D-3 /
      DATA DUCD1 / 1.D-5 /
C
C                  DATA STATEMENT FOR LABELED COMMON ZSPINR
      DATA DTZMA,PZDT,CMZO/ 3*0.D0 /
      DATA ISPIN3,JSPIN/ 2*0 /
C
      END
C     BLK10
      BLOCK DATA
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/ARBMWH/AMPARM(200),IAMPRM(10)
      COMMON/DPLTCG/PCSPRM(100),IPLTCS(20)
      COMMON/ELKDMP/OMKDMP(30),IOMKDM(10)
      COMMON/EXPAND/THRMPR(100),ITHRM(20)
      COMMON/ROTORS/AMWHPR(200),IAMWH(10)
      COMMON/IGIMBD/IGIM(3)
      COMMON/DMBICS/V1(6)
      COMMON/DMINTF/V2(8)
      COMMON/CGIMBD/V3(25)
      DATA AMPARM/200*0.0D0/,IAMPRM/10*0/
      DATA PCSPRM/100*0.0D0/,IPLTCS/20*0/
      DATA THRMPR/100*0.0D0/,ITHRM/20*0/
      DATA AMWHPR/200*0.0D0/,IAMWH/10*0/
      DATA IGIM/3*0/,V1/6*0.0D0/,V2/8*0.0D0/,V3/25*0.0D0/
      DATA OMKDMP/30*0.0D0/,IOMKDM/10*0/
      END
C     BLK11
C
      BLOCK DATA
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/INOMOT/ NOINTG(21)
C
      COMMON/IRSTGM/ IGMRST,IARST(3),IRSCY(3)
C
      COMMON/ISAGRS/ ISARUM(7)
C
      COMMON/ISAGIM/ ISAGUM(3)
C
      COMMON/CRSTGM/ RSTDUM(36)
C
      COMMON/CSAGIM/ SAGDUM(43)
C
      COMMON/CSAGRS/ SARDUM(36)
C
      COMMON/SAGICS/ SAICDM(9)
C
      COMMON/SAINTF/ SAFDUM(4)
C
      COMMON/CSAPLC/ SAPPRM(100),ISAPLS(20)
C
      COMMON/RAVSCS/ VISCDM(32),VDMPUP(2),VDMPDN(2),NVDMPR
C
C
C
      DATA NOINTG/21*0/
C
      DATA IGMRST/0/,IARST/3*0/,IRSCY/3*0/
C
      DATA ISARUM/7*0/
C
      DATA ISAGUM/3*0/
C
      DATA RSTDUM/36*0.0D0/
C
      DATA SAFDUM/4*0.0D0/
C
      DATA SAICDM/5*0.0D0,2*1.0D-3,2*1.0D-5/
C
      DATA SAGDUM/43*0.0D0/
C
      DATA SARDUM/36*0.0D0/
C
      DATA SAPPRM/100*0.0D0/,ISAPLS/20*0/
C
      DATA VISCDM/32*0.0D0/,NVDMPR/0/
C
      DATA VDMPUP/1.0D-2,1.0D-3/,VDMPDN/1.0D-4,1.0D-5/
C
C
C
      END
      BLOCK DATA
C     ******************** BLOCK DATA 2 ********************************
      IMPLICIT REAL * 8 (A-H,O-Z)
C
C
C   MODIFICATION BY K.Y. TO SUPPLY THE STRING SHAPE FUNCTION
C   DATA SET
C
C     'BLOCK 2' DATA ARE THE COEFFICIENTS RESULTING FROM THE
C     INTEGRATION OF PRODUCTS AND MODE SHAPES FOR CANTILEVER BOOMS BY
C     THE INTEGRAL EVALUATION PROGRAM.
C
      COMMON/CCMBNZ/ CMRK(10),Z01(4),Z02(4),Z03(4),Z04(4),Z11(12),
     .               Z12(12),Z13(12),Z14(12),Z15(12),Z16(12),Z21(36),
     .               Z22(36),Z23(36),Z24(36),Z25(36),Z26(36),Z27(36),
     .               Z28(36),Z31(108),Z32(108),Z33(108),Z34(108),
     .               Z35(108),Z41(324),Z42(324),Z43(324),ZK21(18),
     .               ZK22(18),ZK23(18),ZK31(54),ZK32(54),ZK33(54),
     .               ZK34(54),ZK35(54),ZK36(54),ZK41(162),ZK42(162),
     .               ZK43(162),ZK44(162),ZK45(162),ZK46(162),ZK47(162),
     .               ZK48(162),ZS01(2),ZS02(2),ZS11(6),ZS12(6),ZS13(6),
     .               ZS21(18),ZS22(18),ZS23(18),ZS24(18),ZS31(54),
     .               ZS32(54),ZS41(162),ZT21(108),ZT22(108),STAO(18),
     .               STA1(18),STA2(18),STBO(18),STB1(18),STB2(18),
     .               Z2S01(2),Z2S12(6),Z2S23(18)
C
      DIMENSION Z31A(54),Z32A(54),Z33A(54),Z34A(54),Z35A(54),Z41A(64),
     .          Z41B(34),Z41C(64),Z41D(64),Z41E(34),Z42A(64),Z42B(34),
     .          Z42C(64),Z42D(64),Z42E(34),Z43A(64),Z43B(34),Z43C(64),
     .          Z43D(64),Z43E(34),ZK41A(17),ZK41B(64),ZK41C(17),
     .          ZK43A(17),ZK43B(64),ZK43C(17),ZK46A(17),ZK46B(64),
     .          ZK46C(17),ZK48A(17),ZK48B(64),ZK48C(17),ZS41A(17),
     .          ZS41B(64),ZS41C(17)
C
      EQUIVALENCE (Z31( 55),Z31A(1)),(Z32( 55),Z32A(1)),
     .            (Z33( 55),Z33A(1)),(Z34( 55),Z34A(1)),
     .            (Z35( 55),Z35A(1)),(Z41( 65),Z41A(1)),
     .            (Z41(129),Z41B(1)),(Z41(163),Z41C(1)),
     .            (Z41(227),Z41D(1)),(Z41(291),Z41E(1)),
     .            (Z42( 65),Z42A(1)),(Z42(129),Z42B(1)),
     .            (Z42(163),Z42C(1)),(Z42(227),Z42D(1)),
     .            (Z42(291),Z42E(1)),(Z43( 65),Z43A(1)),
     .            (Z43(129),Z43B(1)),(Z43(163),Z43C(1)),
     .            (Z43(227),Z43D(1)),(Z43(291),Z43E(1))
      EQUIVALENCE (ZK41( 65),ZK41A(1)),(ZK41( 82),ZK41B(1)),
     .            (ZK41(146),ZK41C(1)),(ZK43( 65),ZK43A(1)),
     .            (ZK43( 82),ZK43B(1)),(ZK43(146),ZK43C(1)),
     .            (ZK46( 65),ZK46A(1)),(ZK46( 82),ZK46B(1)),
     .            (ZK46(146),ZK46C(1)),(ZK48( 65),ZK48A(1)),
     .            (ZK48( 82),ZK48B(1)),(ZK48(146),ZK48C(1)),
     .            (ZS41( 65),ZS41A(1)),(ZS41( 82),ZS41B(1)),
     .            (ZS41(146),ZS41C(1))
C
C
      DATA CMRK / 10*0.D0 /
C
      DATA Z01 / 0.5D0,1.0D0,0.5D0,1.0D0 /
C
      DATA Z02 / 4*0.5D0 /
C
      DATA Z03 / 0.33333333D0,1.0D0,0.33333333D0,1.0D0 /
C
      DATA Z04 / 0.5D0,1.0D0,0.5D0,1.0D0 /
C
      DATA Z11  /
     . 0.40000000D 00,-0.23859649D 00, 0.13765510D 00,  3*0.1D1,
     .         0.49901021D+00,-0.19830055D+00, 0.64089188D-01,
     .  0.10000000D+01, 0.10000001D+01, 0.99999350D+00/
C
      DATA Z12 /
     . 3*0.1D1,0.13333333D 01, 0.45263158D1, 0.72369738D1,
     .         0.10000000D+01, 0.10000001D+01, 0.99999350D+00 ,
     .  0.10050973D+01, 0.63366071D+01, 0.16899160D+02/
C
      DATA Z13  /
     . 0.13333333D1, 0.45263158D1, 0.72369738D1,-0.2D-6,-0.12000032D-6,
     .-0.43999944D-5,
     .         0.11877517D-01, 0.82132104D+01, 0.14211358D+02,
     .  0.68288664D-02, 0.13587785D+02, 0.86893186D+02/
C
      DATA Z14  /
     . 0.28888889D 00,-0.45614034D-01, 0.14805957D-01, 3*0.1D1,
     .         0.33285246D+00,-0.37713939D-01,-0.39265958D-01,
     .  0.10000000D+01, 0.10000001D+01, 0.99999350D+00/
C
      DATA Z15  /
     . 0.60000000D 00, 0.12385965D 01, 0.86234490D 00, 0.13333333D 01,
     . 0.45263158D 01, 0.72369738D1,
     .         0.50098979D+00, 0.11983006D+01, 0.93590431D+00,
     .  0.10050973D+01, 0.63366071D+01, 0.16899160D+02/
C
      DATA Z16  /
     . 0.33333333D0, 0.35263158D1, 0.62369738D1,-0.2D-6,-0.12000032D-6,
     .-0.43999944D-5,
     .         0.50973168D-02, 0.53366071D+01, 0.15899167D+02,
     .  0.68288664D-02, 0.13587785D+02, 0.86893186D+02/
C
      DATA Z21  /
     . 0.25679013D0, 0.21406388D-9, 0.30696672D-7, 0.21406388D-9,
     . 0.28459666D0,-0.32637217D-8, 0.30696672D-7,-0.32637217D-8,
     .0.28704534D0, 9*0.1D1,
     .         0.33237277D+00,-0.37369548D-01,-0.39336669D-01,
     . -0.37369548D-01, 0.18645760D+00,-0.36119321D-01,-0.39336669D-01,
     . -0.36119321D-01, 0.20616551D+00, 0.10000000D+01, 0.10000001D+01,
     .  0.99999350D+00, 0.10000001D+01, 0.10000001D+01, 0.99999355D+00,
     .  0.99999350D+00, 0.99999355D+00, 0.99998700D+00/
C
      DATA Z22  /
     . 0.5D0, 0.12095517D1, 0.94455821D0,-0.20955166D0, 0.5D0,
     . 0.16567674D1, 0.55441789D-1,-0.65676735D0, 0.5D0, 0.13333333D1,
     . 0.45263158D1, 0.72369738D1, 0.13333333D1, 0.45263158D1,
     . 0.72369738D1,0.13333333D1, 0.45263158D1, 0.72369738D1,
     .         0.50000000D+00, 0.11976894D+01, 0.93676483D+00,
     . -0.19768936D+00, 0.50000005D+00, 0.15269154D+01, 0.63228666D-01,
     . -0.52692186D+00, 0.49999350D+00, 0.10050973D+01, 0.63366071D+01,
     .  0.16899160D+02, 0.10050974D+01, 0.63366075D+01, 0.16899161D+02,
     .  0.10050908D+01, 0.63365660D+01, 0.16899050D+02 /
C
      DATA Z23  /
     . 0.19047616D0,0.26992481D1, 0.63596896D1,-0.49373435D0,
     .-0.38107550D1, 0.22348779D1, 0.45604908D0,-0.47578009D0,
     .-0.13018039D2,-0.20000006D-6,-0.11999970D-6,-0.43999989D-5,
     .-0.20000039D-6,-0.11999055D-6,-0.44001645D-5,-0.20000061D-6,
     .-0.12006785D-6,-0.44018961D-5,
     .         0.50854189D-02, 0.53285341D+01, 0.15895551D+02,
     . -0.29756595D-02,-0.86187108D+00, 0.98669790D+01, 0.14812646D-02,
     . -0.69561617D+00,-0.71744634D+01, 0.68288664D-02, 0.13587785D+02,
     .  0.86893186D+02, 0.68288667D-02, 0.13587786D+02, 0.86893190D+02,
     .  0.68288220D-02, 0.13587697D+02, 0.86892621D+02 /
C
      DATA Z24  /
     . 0.4D0, 0.11617934D0,-0.32885325D0, 0.11617934D0, 0.25510619D1,
     .-0.73983104D0,-0.32885325D0,-0.73983104D0, 0.79633924D1,
     . 0.11428571D1, 0.18270677D1, 0.87728422D0, 0.18270677D1,
     . 0.83370707D1, 0.50020959D1, 0.87728422D0, 0.50020959D1,
     . 0.20255012D2,
     .         0.49802703D+00,-0.19554199D+00, 0.61560054D-01,
     . -0.19554199D+00, 0.14776115D+01,-0.67399252D+00, 0.61560054D-01,
     . -0.67399252D+00, 0.39786671D+01, 0.10000119D+01, 0.10080730D+01,
     .  0.10036095D+01, 0.10080730D+01, 0.71984785D+01, 0.70321821D+01,
     .  0.10036095D+01, 0.70321821D+01, 0.24073514D+02 /
C
      DATA Z25  /
     . 0.11428571D1, 0.18270677D1, 0.87728422D0, 0.18270677D1,
     . 0.83370707D1, 0.50020959D1, 0.87728422D0, 0.50020959D1,
     . 0.20255012D2, 0.17777777D1, 0.60350875D1, 0.96492982D1,
     . 0.60350875D1, 0.20487534D2, 0.32756829D2, 0.96492982D1,
     . 0.32756829D2, 0.52373790D2,
     .         0.10000119D+01, 0.10080730D+01, 0.10036095D+01,
     .  0.10080730D+01, 0.71984785D+01, 0.70321821D+01, 0.10036095D+01,
     .  0.70321821D+01, 0.24073514D+02, 0.10102206D+01, 0.63689068D+01,
     .  0.16985301D+02, 0.63689068D+01, 0.40152590D+02, 0.10708334D+03,
     .  0.16985301D+02, 0.10708334D+03, 0.28558162D+03 /
C
      DATA Z26  /
     . 0.17777777D1, 0.60350875D1, 0.96492982D1, 0.60350875D1,
     . 0.20487534D2, 0.32756829D2, 0.96492982D1, 0.32756829D2,
     . 0.52373790D2,-0.53333342D-6,-0.10652684D-5,-0.73141855D-5,
     .-.10652684D-5,-0.10861841D-5,-0.20784326D-4,-0.73141855D-5,
     .-0.20784326D-4,-0.63650310D-4,
     .         0.23735046D-01, 0.82327864D+01, 0.14315722D+02,
     .  0.82327864D+01, 0.36630950D+02, 0.11212728D+03, 0.14315722D+02,
     .  0.11212728D+03, 0.27835734D+03, 0.13727351D-01, 0.13700318D+02,
     .  0.87451510D+02, 0.13700318D+02, 0.17220091D+03, 0.78023014D+03,
     .  0.87451510D+02, 0.78023014D+03, 0.29368437D+04 /
C
      DATA Z27  /
     . 0.30123457D0, 0.18635478D0,-0.23121422D0, 0.18635478D0,
     . 0.18486359D1,-0.15921988D0,-0.23121422D0,-0.15921988D0,
     . 0.54122640D1, 0.11428571D1, 0.18270677D1, 0.87728422D0,
     . 0.18270677D1, 0.83370707D1, 0.50020959D1, 0.87728422D0,
     . 0.50020959D1, 0.20255012D2,
     .         0.33237549D+00,-0.35915898D-01,-0.40561927D-01,
     . -0.35915898D-01, 0.10976055D+01,-0.24961539D+00,-0.40561927D-01,
     . -0.24961539D+00, 0.29571842D+01, 0.10000119D+01, 0.10080730D+01,
     .  0.10036095D+01, 0.10080730D+01, 0.71984785D+01, 0.70321821D+01,
     .  0.10036095D+01, 0.70321821D+01, 0.24073514D+02  /
C
      DATA Z28  /
     . 0.74285714D0, 0.17108883D1, 0.12061375D1, 0.17108883D1,
     . 0.57860089D1, 0.57419269D1, 0.12061375D1, 0.57419269D1,
     . 0.12291620D2, 0.17777777D1, 0.60350875D1, 0.96492982D1,
     . 0.60350875D1, 0.20487534D2, 0.32756829D2, 0.96492982D1,
     . 0.32756829D2, 0.52373790D2,
     .         0.50198487D+00, 0.12036150D+01, 0.94204947D+00,
     .  0.12036150D+01, 0.57208671D+01, 0.77061746D+01, 0.94204947D+00,
     .  0.77061746D+01, 0.20094847D+02, 0.10102206D+01, 0.63689068D+01,
     .  0.16985301D+02, 0.63689068D+01, 0.40152590D+02, 0.10708334D+03,
     .  0.16985301D+02, 0.10708334D+03, 0.28558162D+03 /
C
      DATA Z31  /
     . 0.27160494D 00, 0.20090968D 00,-0.19401553D 00, 0.20090968D 00,
     . 0.16565992D 01,-0.25150693D-01,-0.19401553D 00,-0.25150693D-01,
     . 0.47277204D 01, 0.26250812D-01, 0.26246211D 00, 0.15656370D 00,
     . 0.26246211D 00, 0.18657313D 00, 0.83288830D 00, 0.15656370D 00,
     . 0.83288830D 00,-0.45280476D 00,-0.21494645D-02, 0.42658463D-01,
     . 0.26538080D 00, 0.42658463D-01, 0.32366017D 00, 0.20335797D 00,
     . 0.26538080D 00, 0.20335797D 00, 0.37034088D 00, 0.11428571D 01,
     . 0.18270677D 01, 0.87728422D 00, 0.18270677D 01, 0.83370707D 01,
     . 0.50020959D 01, 0.87728422D 00, 0.50020959D 01, 0.20255012D 02,
     . 0.11428571D 01, 0.18270677D 01, 0.87728422D 00, 0.18270677D 01,
     . 0.83370707D 01, 0.50020959D 01, 0.87728422D 00, 0.50020959D 01,
     . 0.20255012D 02, 0.11428571D 01, 0.18270677D 01, 0.87728422D 00,
     . 0.18270677D 01, 0.83370707D 01, 0.50020958D 01, 0.87728422D 00,
     . 0.50020958D 01, 0.20255013D 02, 54*0.D0 /
      DATA Z31A  /
     .         0.33189697D+00,-0.35573966D-01,-0.40629731D-01,
     . -0.35573966D-01, 0.10965203D+01,-0.24857248D+00,-0.40629731D-01,
     . -0.24857248D+00, 0.29541239D+01,-0.37026017D-01, 0.18640593D+00,
     . -0.35313569D-01, 0.18640593D+00, 0.23676955D+00, 0.51116977D+00,
     . -0.35313569D-01, 0.51116977D+00, 0.51117527D+00,-0.39407176D-01,
     . -0.36066694D-01, 0.20634308D+00,-0.36066694D-01, 0.24408296D-01,
     .  0.28266086D+00, 0.20634308D+00, 0.28266086D+00,-0.22167744D-01,
     .  0.10000119D+01, 0.10080730D+01, 0.10036095D+01, 0.10080730D+01,
     .  0.71984785D+01, 0.70321821D+01, 0.10036095D+01, 0.70321821D+01,
     .  0.24073514D+02, 0.10000119D+01, 0.10080731D+01, 0.10036096D+01,
     .  0.10080731D+01, 0.71984789D+01, 0.70321825D+01, 0.10036096D+01,
     .  0.70321825D+01, 0.24073515D+02, 0.10000054D+01, 0.10080665D+01,
     .  0.10036030D+01, 0.10080665D+01, 0.71984318D+01, 0.70321364D+01,
     .  0.10036030D+01, 0.70321364D+01, 0.24073357D+02/
C
      DATA Z32  /
     . 0.63376623D 00, 0.16200737D 01, 0.13254092D 01, 0.16200737D 01,
     . 0.51938118D 01, 0.56580167D 01, 0.13254092D 01, 0.56580167D 01,
     . 0.10637949D 02,-0.18759357D 00, 0.52304124D 00, 0.20768614D 01,
     . 0.52304124D 00, 0.88993692D 00, 0.39007224D 01, 0.20768614D 01,
     . 0.39007224D 01,-0.27036859D 00,-0.47932068D-02,-0.54780076D 00,
     . 0.47108430D 00,-0.54780076D 00, 0.87861884D 00, 0.13495872D 01,
     . 0.47108430D 00, 0.13495872D 01, 0.49404699D 01, 0.17777777D 01,
     . 0.60350875D 01, 0.96492982D 01, 0.60350875D 01, 0.20487534D 02,
     . 0.32756829D 02, 0.96492982D 01, 0.32756829D 02, 0.52373790D 02,
     . 0.17777777D 01, 0.60350875D 01, 0.96492982D 01, 0.60350875D 01,
     . 0.20487534D 02, 0.32756829D 02, 0.96492982D 01, 0.32756829D 02,
     . 0.52373789D 02, 0.17777777D 01, 0.60350875D 01, 0.96492982D 01,
     . 0.60350875D 01, 0.20487534D 02, 0.32756829D 02, 0.96492982D 01,
     . 0.32756829D 02, 0.52373773D 02, 54*0.D0 /
      DATA Z32A  /
     .         0.50099507D+00, 0.12029990D+01, 0.94291072D+00,
     .  0.12029990D+01, 0.57168895D+01, 0.77054649D+01, 0.94291072D+00,
     .  0.77054649D+01, 0.20083988D+02,-0.19707779D+00, 0.50153432D+00,
     .  0.15327961D+01, 0.50153432D+00, 0.22919912D+01, 0.65066891D+01,
     .  0.15327961D+01, 0.65066891D+01, 0.11047310D+02, 0.62369075D-01,
     . -0.52697390D+00, 0.50139483D+00,-0.52697390D+00,-0.30334576D+00,
     .  0.22165446D+01, 0.50139483D+00, 0.22165446D+01, 0.61679583D+01,
     .  0.10102206D+01, 0.63689068D+01, 0.16985301D+02, 0.63689068D+01,
     .  0.40152590D+02, 0.10708334D+03, 0.16985301D+02, 0.10708334D+03,
     .  0.28558162D+03, 0.10102207D+01, 0.63689072D+01, 0.16985302D+02,
     .  0.63689072D+01, 0.40152592D+02, 0.10708335D+03, 0.16985302D+02,
     .  0.10708335D+03, 0.28558163D+03, 0.10102141D+01, 0.63688654D+01,
     .  0.16985190D+02, 0.63688654D+01, 0.40152329D+02, 0.10708264D+03,
     .  0.16985190D+02, 0.10708264D+03, 0.28557976D+03/
C
      DATA Z33  /
     . 0.50909091D 00, 0.20699391D 00,-0.44812494D 00, 0.20699391D 00,
     . 0.31432590D 01,-0.65592087D 00,-0.44812494D 00,-0.65592087D 00,
     . 0.96170638D 01, 0.13304507D 01, 0.13040264D 01,-0.11995772D 01,
     . 0.13040264D 01, 0.74471338D 01, 0.11013734D 01,-0.11995772D 01,
     . 0.11013734D 01, 0.20525381D 02, 0.11476503D 01, 0.23748684D 01,
     . 0.40619992D 00, 0.23748684D 01, 0.74584519D 01, 0.36525087D 01,
     . 0.40619992D 00, 0.36525087D 01, 0.15314541D 02, 0.15238095D 01,
     . 0.24360901D 01, 0.11697123D 01, 0.24360901D 01, 0.11116094D 02,
     . 0.66694610D 01, 0.11697123D 01, 0.66694610D 01, 0.27006683D 02,
     . 0.51729323D 01, 0.82698851D 01, 0.39708654D 01, 0.82698851D 01,
     . 0.37736215D 02, 0.22641065D 02, 0.39708654D 01, 0.22641065D 02,
     . 0.91680582D 02, 0.82708272D 01, 0.13222441D 02, 0.63488829D 01,
     . 0.13222441D 02, 0.60335162D 02, 0.36200036D 02, 0.63488829D 01,
     . 0.36200036D 02, 0.14658499D 03, 54*0.D0 /
      DATA Z33A  /
     .         0.49901683D+00,-0.19492601D+00, 0.60698796D-01,
     . -0.19492601D+00, 0.14815891D+01,-0.67328281D+00, 0.60698796D-01,
     . -0.67328281D+00, 0.39895255D+01, 0.11970897D+01, 0.50653875D+00,
     . -0.52918654D+00, 0.50653875D+00, 0.49064877D+01, 0.52549336D+00,
     . -0.52918654D+00, 0.52549336D+00, 0.13026205D+02, 0.93763632D+00,
     .  0.15350404D+01, 0.50220816D+00, 0.15350404D+01, 0.75017775D+01,
     .  0.48155918D+01, 0.50220816D+00, 0.48155918D+01, 0.17905399D+02,
     .  0.10051093D+01, 0.10132115D+01, 0.10087252D+01, 0.10132115D+01,
     .  0.72351715D+01, 0.70680274D+01, 0.10087252D+01, 0.70680274D+01,
     .  0.24196224D+02, 0.63366825D+01, 0.63877627D+01, 0.63594792D+01,
     .  0.63877627D+01, 0.45613931D+02, 0.44560175D+02, 0.63594792D+01,
     .  0.44560175D+02, 0.15254440D+03, 0.16899361D+02, 0.17035588D+02,
     .  0.16960158D+02, 0.17035588D+02, 0.12164824D+03, 0.11883797D+03,
     .  0.16960158D+02, 0.11883797D+03, 0.40682217D+03/
      DATA Z34  /
     . 0.40634912D 00, 0.33698791D 01, 0.84089799D 01, 0.33698791D 01,
     . 0.10693927D 02, 0.24622915D 02, 0.84089799D 01, 0.24622915D 02,
     . 0.30410419D 02,-0.88743075D 00,-0.37585203D 01, 0.15153841D 01,
     .-0.37585203D 01,-0.23471412D 01, 0.30218410D-01, 0.15153841D 01,
     . 0.30218410D-01, 0.15176907D 02, 0.53745944D 00,-0.20988265D 01,
     .-0.12314072D 02,-0.20988265D 01,-0.12239076D 02,-0.44400536D 01,
     .-0.12314072D 02,-0.44400536D 01, 0.52414249D 01,-0.53333352D-06,
     .-0.10652689D-05,-0.73140563D-05,-0.10652689D-05,-0.10865042D-05,
     .-0.20791544D-04,-0.73140563D-05,-0.20791544D-04,-0.63672662D-04,
     .-0.53332866D-06,-0.10656368D-05,-0.73106057D-05,-0.10656368D-05,
     .-0.11359807D-05,-0.21401793D-04,-0.73106057D-05,-0.21401793D-04,
     .-0.70631504D-04,-0.53303120D-06,-0.10647054D-05,-0.73460396D-05,
     .-0.10647054D-05,-0.10542572D-05,-0.18894672D-04,-0.73460396D-05,
     .-0.18894672D-04,-0.94413757D-04, 54*0.D0 /
      DATA Z34A  /
     .         0.10184934D-01, 0.53527482D+01, 0.15978027D+02,
     .  0.53527482D+01, 0.32931346D+02, 0.10000642D+03, 0.15978027D+02,
     .  0.10000642D+03, 0.26142288D+03,-0.59379503D-02,-0.85233687D+00,
     .  0.99083865D+01,-0.85233687D+00, 0.11449630D+02, 0.57605032D+02,
     .  0.99083865D+01, 0.57605032D+02, 0.17888544D+03, 0.29403569D-02,
     . -0.70804962D+00,-0.71735499D+01,-0.70804962D+00,-0.93259841D+01,
     .  0.38645322D+00,-0.71735499D+01, 0.38645322D+00, 0.63490517D+02,
     .  0.13727351D-01, 0.13700318D+02, 0.87451510D+02, 0.13700318D+02,
     .  0.17220091D+03, 0.78023014D+03, 0.87451510D+02, 0.78023014D+03,
     .  0.29368437D+04, 0.13727351D-01, 0.13700319D+02, 0.87451514D+02,
     .  0.13700319D+02, 0.17220092D+03, 0.78023018D+03, 0.87451514D+02,
     .  0.78023018D+03, 0.29368439D+04, 0.13727261D-01, 0.13700229D+02,
     .  0.87450941D+02, 0.13700229D+02, 0.17219979D+03, 0.78022507D+03,
     .  0.87450941D+02, 0.78022507D+03, 0.29368247D+04/
C
      DATA Z35  /
     . 0.15238092D 00,-0.22911829D 00,-0.70605982D-01,-0.22911829D 00,
     . 0.13224862D 01,-0.14644531D 01,-0.70605982D-01,-0.14644531D 01,
     . 0.50433119D 01, 0.25077239D 01,-0.15237227D 01,-0.41630486D 01,
     .-0.15237227D 01, 0.14901539D 02,-0.10085545D 02,-0.41630486D 01,
     .-0.10085545D 02, 0.54483699D 02, 0.70305089D 01, 0.50885267D 01,
     .-0.15614488D 02, 0.50885267D 01, 0.27608552D 02,-0.99684603D 00,
     .-0.15614488D 02,-0.99684603D 00, 0.99452643D 02,-0.22857138D-06,
     .-0.36541314D-06,-0.17545426D-06,-0.36541314D-06,-0.16673248D-05,
     .-0.10009971D-05,-0.17545426D-06,-0.10009971D-05,-0.40514860D-05,
     .-0.13715311D-06,-0.21913729D-06,-0.10521035D-06,-0.21913729D-06,
     .-0.10095828D-05,-0.64028427D-06,-0.10521035D-06,-0.64028427D-06,
     .-0.12665987D-05,-0.50285644D-05,-0.80382597D-05,-0.38386788D-05,
     .-0.80382597D-05,-0.36649173D-04,-0.22783875D-04,-0.38386788D-05,
     .-0.22783875D-04,-0.63300133D-04, 54*0.D0 /
      DATA Z35A  /
     .         0.50735936D-02,-0.29471229D-02, 0.14515418D-02,
     . -0.29471229D-02, 0.13927446D-01,-0.88876688D-02, 0.14515418D-02,
     . -0.88876688D-02, 0.37484008D-01, 0.53205239D+01,-0.83348128D+00,
     . -0.71743581D+00,-0.83348128D+00, 0.16910968D+02,-0.49181376D+01,
     . -0.71743581D+00,-0.49181376D+01, 0.45848209D+02, 0.15892088D+02,
     .  0.99586726D+01,-0.71985820D+01, 0.99586726D+01, 0.72169930D+02,
     .  0.12141782D+02,-0.71985820D+01, 0.12141782D+02, 0.18473292D+03,
     .  0.68289477D-02, 0.68839960D-02, 0.68535153D-02, 0.68839960D-02,
     .  0.49157448D-01, 0.48021832D-01, 0.68535153D-02, 0.48021832D-01,
     .  0.16439481D+00, 0.13587947D+02, 0.13697480D+02, 0.13636830D+02,
     .  0.13697480D+02, 0.97811379D+02, 0.95551779D+02, 0.13636830D+02,
     .  0.95551779D+02, 0.32710573D+03, 0.86894220D+02, 0.87594677D+02,
     .  0.87206828D+02, 0.87594677D+02, 0.62549873D+03, 0.61104871D+03,
     .  0.87206828D+02, 0.61104871D+03, 0.20918243D+04/
C
      DATA Z41  /
     . 0.28971194D 00, 0.23638726D 00,-0.19273282D 00, 0.23638726D 00,
     . 0.17669802D 01, 0.48851313D-01,-0.19273282D 00, 0.48851313D-01,
     . 0.49559860D 01, 0.23638726D 00, 0.40579129D 00, 0.30486499D-01,
     . 0.40579129D 00, 0.15146569D 01, 0.76835497D 00, 0.30486499D-01,
     . 0.76835497D 00, 0.33338064D 01,-0.19273282D 00, 0.30486499D-01,
     . 0.48952141D 00, 0.30486499D-01,-0.83726833D 00, 0.73660058D 00,
     . 0.48952141D 00, 0.73660058D 00,-0.34743668D 01, 0.23638726D 00,
     . 0.40579129D 00, 0.30486499D-01, 0.40579129D 00, 0.15146569D 01,
     . 0.76835497D 00, 0.30486499D-01, 0.76835497D 00, 0.33338064D 01,
     . 0.17669802D 01, 0.15146569D 01,-0.83726833D 00, 0.15146569D 01,
     . 0.11188953D 02, 0.68122626D 00,-0.83726833D 00, 0.68122626D 00,
     . 0.30596486D 02, 0.48851313D-01, 0.76835497D 00, 0.73660058D 00,
     . 0.76835497D 00, 0.68122626D 00, 0.31246407D 01, 0.73660058D 00,
     . 0.31246407D 01,-0.12607612D 01,-0.19273282D 00, 0.30486499D-01,
     . 0.48952141D 00, 0.30486499D-01,-0.83726833D 00, 0.73660058D 00,
     . 0.48952141D 00, 0.73660058D 00,-0.34743668D 01, 0.48851313D-01,  
     . 260*0.D0 /
      DATA Z41A  /
     . 0.76835497D 00, 0.73660058D 00, 0.76835497D 00, 0.68122626D 00,
     . 0.31246407D 01, 0.73660058D 00, 0.31246407D 01,-0.12607612D 01,
     . 0.49559860D 01, 0.33338065D 01,-0.34743668D 01, 0.33338065D 01,
     . 0.30596486D 02,-0.12607612D 01,-0.34743668D 01,-0.12607612D 01,
     . 0.89097934D 02, 0.13061224D 01, 0.20880773D 01, 0.10026105D 01,
     . 0.20880773D 01, 0.95280808D 01, 0.57166810D 01, 0.10026105D 01,
     . 0.57166810D 01, 0.23148586D 02, 0.20880773D 01, 0.33381762D 01,
     . 0.16028576D 01, 0.33381762D 01, 0.15232392D 02, 0.91391675D 01,
     . 0.16028576D 01, 0.91391675D 01, 0.37007278D 02, 0.10026105D 01,
     . 0.16028576D 01, 0.76962757D 00, 0.16028576D 01, 0.73139806D 01,
     . 0.43882601D 01, 0.76962757D 00, 0.43882601D 01, 0.17769411D 02,
     . 0.20880773D 01, 0.33381762D 01, 0.16028576D 01, 0.33381762D 01,
     . 0.15232392D 02, 0.91391675D 01, 0.16028576D 01, 0.91391675D 01,
     . 0.37007278D 02, 0.95280808D 01, 0.15232392D 02, 0.73139806D 01,
     . 0.15232392D 02, 0.69506748D 02, 0.41702827D 02, 0.73139806D 01,
     . 0.41702827D 02, 0.16886744D 03, 0.57166810D 01, 0.91391675D 01  /
      DATA Z41B  /
     . 0.43882601D 01, 0.91391675D 01, 0.41702827D 02, 0.25020966D 02,
     . 0.43882601D 01, 0.25020966D 02, 0.10131687D 03, 0.10026105D 01,
     . 0.16028576D 01, 0.76962757D 00, 0.16028576D 01, 0.73139806D 01,
     . 0.43882601D 01, 0.76962757D 00, 0.43882601D 01, 0.17769411D 02,
     . 0.57166810D 01, 0.91391675D 01, 0.43882601D 01, 0.91391675D 01,
     . 0.41702827D 02, 0.25020966D 02, 0.43882601D 01, 0.25020966D 02,
     . 0.10131687D 03, 0.23148586D 02, 0.37007278D 02, 0.17769411D 02,
     . 0.37007278D 02, 0.16886744D 03, 0.10131687D 03, 0.17769411D 02,
     . 0.10131687D 03, 0.41027065D 03  /
      DATA Z41C  /
     .         0.00000000D+00,-0.35232872D-01,-0.40697346D-01,
     . -0.35232872D-01, 0.10954478D+01,-0.24753291D+00,-0.40697346D-01,
     . -0.24753291D+00, 0.29510976D+01,-0.35232872D-01, 0.18636458D+00,
     . -0.35267253D-01, 0.18636458D+00, 0.24335325D+00, 0.51068701D+00,
     . -0.35267253D-01, 0.51068701D+00, 0.52853796D+00,-0.40697346D-01,
     . -0.35267253D-01, 0.20652889D+00,-0.35267253D-01, 0.21657467D-01,
     .  0.28620467D+00, 0.20652889D+00, 0.28620467D+00,-0.29572892D-01,
     . -0.35232872D-01, 0.18636458D+00,-0.35267253D-01, 0.18636458D+00,
     .  0.24335325D+00, 0.51068701D+00,-0.35267253D-01, 0.51068701D+00,
     .  0.52853796D+00, 0.10954478D+01, 0.24335325D+00, 0.21657467D-01,
     .  0.24335325D+00, 0.46139834D+01, 0.57579958D+00, 0.21657467D-01,
     .  0.57579958D+00, 0.12045153D+02,-0.24753291D+00, 0.51068701D+00,
     .  0.28620467D+00, 0.51068701D+00, 0.57579958D+00, 0.25504690D+01,
     .  0.28620467D+00, 0.25504690D+01, 0.15800418D+01,-0.40697346D-01,
     . -0.35267253D-01, 0.20652889D+00,-0.35267253D-01, 0.21657467D-01,
     .  0.28620467D+00, 0.20652889D+00, 0.28620467D+00,-0.29572891D-01,
     . -0.24753291D+00/
      DATA Z41D  /
     .                  0.51068701D+00, 0.28620467D+00, 0.51068701D+00,
     .  0.57579958D+00, 0.25504690D+01, 0.28620467D+00, 0.25504690D+01,
     .  0.15800418D+01, 0.29510976D+01, 0.52853796D+00,-0.29572891D-01,
     .  0.52853796D+00, 0.12045153D+02, 0.15800418D+01,-0.29572891D-01,
     .  0.15800418D+01, 0.33043105D+02, 0.10000238D+01, 0.10080850D+01,
     .  0.10036215D+01, 0.10080850D+01, 0.71985642D+01, 0.70322658D+01,
     .  0.10036215D+01, 0.70322658D+01, 0.24073800D+02, 0.10080850D+01,
     .  0.10162112D+01, 0.10117117D+01, 0.10162112D+01, 0.72565921D+01,
     .  0.70889531D+01, 0.10117117D+01, 0.70889531D+01, 0.24267860D+02,
     .  0.10036215D+01, 0.10117117D+01, 0.10072321D+01, 0.10117117D+01,
     .  0.72244616D+01, 0.70575649D+01, 0.10072321D+01, 0.70575649D+01,
     .  0.24160408D+02, 0.10080850D+01, 0.10162112D+01, 0.10117117D+01,
     .  0.10162112D+01, 0.72565921D+01, 0.70889531D+01, 0.10117117D+01,
     .  0.70889531D+01, 0.24267860D+02, 0.71985642D+01, 0.72565921D+01,
     .  0.72244616D+01, 0.72565921D+01, 0.51818093D+02, 0.50621012D+02,
     .  0.72244616D+01, 0.50621012D+02, 0.17329267D+03, 0.70322658D+01,
     .  0.70889531D+01/
      DATA Z41E  /
     .                  0.70575649D+01, 0.70889531D+01, 0.50621012D+02,
     .  0.49451585D+02, 0.70575649D+01, 0.49451585D+02, 0.16928933D+03,
     .  0.10036215D+01, 0.10117117D+01, 0.10072321D+01, 0.10117117D+01,
     .  0.72244616D+01, 0.70575649D+01, 0.10072321D+01, 0.70575649D+01,
     .  0.24160408D+02, 0.70322658D+01, 0.70889531D+01, 0.70575649D+01,
     . 0.70889531D+01 ,0.50621012D+02 ,0.49451585D+02 ,0.70575649D+01 ,
     .  0.49451585D+02, 0.16928933D+03, 0.24073800D+02, 0.24267860D+02,
     .  0.24160408D+02, 0.24267860D+02, 0.17329267D+03, 0.16928933D+03,
     .  0.24160408D+02, 0.16928933D+03, 0.57953408D+03/
C
      DATA Z42  /
     . 0.65306122D 00, 0.17658769D 01, 0.15895182D 01, 0.17658769D 01,
     . 0.55683283D 01, 0.63345454D 01, 0.15895182D 01, 0.63345454D 01,
     . 0.11190531D 02, 0.32220039D 00, 0.16690881D 01, 0.30494787D 01,
     . 0.16690881D 01, 0.50587567D 01, 0.81896220D 01, 0.30494787D 01,
     . 0.81896220D 01, 0.87574493D 01,-0.58690763D 00,-0.14466210D 01,
     . 0.38481381D 00,-0.14466210D 01,-0.29385514D 01,-0.53806637D 00,
     . 0.38481381D 00,-0.53806637D 00,-0.33391138D 01, 0.32220039D 00,
     . 0.16690881D 01, 0.30494787D 01, 0.16690881D 01, 0.50587567D 01,
     . 0.81896220D 01, 0.30494787D 01, 0.81896220D 01, 0.87574493D 01,
     . 0.39597525D 01, 0.10173636D 02, 0.10252532D 02, 0.10173636D 02,
     . 0.34753374D 02, 0.41114759D 02, 0.10252532D 02, 0.41114759D 02,
     . 0.74143403D 02,-0.61786443D 00, 0.94954551D 00, 0.49263270D 01,
     . 0.94954551D 00, 0.58806763D 00, 0.12510484D 02, 0.49263270D 01,
     . 0.12510484D 02, 0.58544756D 01,-0.58690763D 00,-0.14466210D 01,
     . 0.38481381D 00,-0.14466210D 01,-0.29385514D 01,-0.53806637D 00,
     . 0.38481381D 00,-0.53806637D 00,-0.33391138D 01,-0.61786443D 00,
     . 260*0.D0 /
      DATA Z42A  /
     . 0.94954551D 00, 0.49263270D 01, 0.94954551D 00, 0.58806763D 00,
     . 0.12510484D 02, 0.49263270D 01, 0.12510484D 02, 0.58544756D 01,
     . 0.11958054D 02, 0.28249828D 02, 0.21108529D 02, 0.28249828D 02,
     . 0.94724057D 02, 0.95462857D 02, 0.21108529D 02, 0.95462857D 02,
     . 0.20513268D 03, 0.20317459D 01, 0.68972429D 01, 0.11027769D 02,
     . 0.68972429D 01, 0.23414325D 02, 0.37436376D 02, 0.11027769D 02,
     . 0.37436376D 02, 0.59855760D 02, 0.32481201D 01, 0.11026513D 02,
     . 0.17629921D 02, 0.11026513D 02, 0.37432112D 02, 0.59848941D 02,
     . 0.17629921D 02, 0.59848941D 02, 0.95690451D 02, 0.15596163D 01,
     . 0.52944871D 01, 0.84651769D 01, 0.52944871D 01, 0.17973391D 02,
     . 0.28737048D 02, 0.84651769D 01, 0.28737048D 02, 0.45946663D 02,
     . 0.32481201D 01, 0.11026513D 02, 0.17629921D 02, 0.11026513D 02,
     . 0.37432112D 02, 0.59848941D 02, 0.17629921D 02, 0.59848941D 02,
     . 0.95690451D 02, 0.14821458D 02, 0.50314952D 02, 0.80446881D 02,
     . 0.50314952D 02, 0.17080602D 03, 0.27309598D 03, 0.80446881D 02,
     . 0.27309598D 03, 0.43664384D 03, 0.88926144D 01, 0.30188086D 02  /
      DATA Z42B  /
     . 0.48266715D 02, 0.30188086D 02, 0.10248060D 03, 0.16385254D 03,
     . 0.48266715D 02, 0.16385254D 03, 0.26198117D 03, 0.15596163D 01,
     . 0.52944871D 01, 0.84651769D 01, 0.52944871D 01, 0.17973391D 02,
     . 0.28737048D 02, 0.84651769D 01, 0.28737048D 02, 0.45946663D 02,
     . 0.88926144D 01, 0.30188086D 02, 0.48266715D 02, 0.30188086D 02,
     . 0.10248060D 03, 0.16385254D 03, 0.48266715D 02, 0.16385254D 03,
     . 0.26198117D 03, 0.36008909D 02, 0.12224077D 03, 0.19544666D 03,
     . 0.12224077D 03, 0.41497501D 03, 0.66349193D 03, 0.19544666D 03,
     . 0.66349193D 03, 0.10607789D 04  /
      DATA Z42C  /
     .         0.53558652D+00, 0.12688711D+01,-0.42476821D+01,
     .  0.12688711D+01, 0.53826379D+01 ,0.18421259D+02,-0.42476821D+01,
     .  0.18421259D+02,-0.20607912D+01,-0.12898257D+00, 0.23449984D+00,
     .  0.10801530D+02, 0.23449984D+00, 0.30519338D+01,-0.12207302D+02,
     .  0.10801530D+02,-0.12207302D+02, 0.50960844D+02, 0.16430964D+02,
     . -0.31845376D+02, 0.30264979D+02,-0.31845376D+02, 0.59651658D+02,
     . -0.54237081D+02, 0.30264979D+02,-0.54237081D+02, 0.56629937D+02,
     . -0.12898257D+00, 0.23449984D+00, 0.10801530D+02, 0.23449984D+00,
     .  0.30519338D+01,-0.12207302D+02, 0.10801530D+02,-0.12207302D+02,
     .  0.50960844D+02, 0.15697483D+01, 0.75064960D+01,-0.11287224D+03,
     .  0.75064960D+01, 0.16937398D+02, 0.29286474D+03,-0.11287224D+03,
     .  0.29286474D+03,-0.40696229D+03, 0.74297940D+02,-0.14838052D+03,
     .  0.27741792D+03,-0.14838052D+03, 0.29882475D+03,-0.52214908D+03,
     .  0.27741792D+03,-0.52214908D+03, 0.83947826D+03, 0.16430964D+02,
     . -0.31845376D+02, 0.30264979D+02,-0.31845376D+02, 0.59651658D+02 ,
     . -0.54237081D+02, 0.30264979D+02,-0.54237081D+02 ,0.56629937D+02,
     .  0.74297940D+02/
      DATA Z42D  /
     .                 -0.14838052D+03, 0.27741792D+03,-0.14838052D+03,
     .  0.29882475D+03,-0.52214908D+03, 0.27741792D+03,-0.52214908D+03,
     .  0.83947826D+03, 0.23239257D+03,-0.38529089D+03, 0.12408260D+03,
     . -0.38529089D+03, 0.76297973D+03, 0.77355912D+02, 0.12408260D+03,
     .  0.77355912D+02, 0.45250483D+01, 0.20071985D+01, 0.84566502D+01,
     . -0.13946662D+03, 0.84566502D+01, 0.30141426D+02, 0.42981409D+03,
     . -0.13946662D+03, 0.42981409D+03,-0.38169499D+03, 0.29386551D+01,
     . -0.28181598D+01, 0.34772289D+03,-0.28181598D+01, 0.65796473D+02,
     . -0.56307286D+03, 0.34772289D+03,-0.56307286D+03, 0.17073708D+04,
     .  0.48381794D+03,-0.90877446D+03, 0.73472054D+03,-0.90877446D+03,
     .  0.17788996D+04,-0.12120103D+04, 0.73472054D+03,-0.12120103D+04,
     .  0.11424767D+04, 0.29386551D+01,-0.28181598D+01, 0.34772289D+03,
     . -0.28181598D+01, 0.65796473D+02,-0.56307286D+03, 0.34772289D+03,
     . -0.56307286D+03, 0.17073708D+04, 0.67064037D+01, 0.13924782D+03,
     . -0.40798635D+04, 0.13924782D+03,-0.24980448D+02, 0.93811832D+04,
     . -0.40798635D+04, 0.93811832D+04,- .15883360D+05, 0.25683471D+04,
     . -0.51018797D+04/
      DATA Z42E  /
     .                  0.10895504D+05,-0.51018797D+04, 0.10535742D+05,
     . -0.21028265D+05, 0.10895504D+05,-0.21028265D+05, 0.34858917D+05,
     .  0.48381794D+03,-0.90877446D+03, 0.73472054D+03,-0.90877446D+03,
     .  0.17788996D+04,-0.12120103D+04, 0.73472054D+03,-0.12120103D+04,
     .  0.11424767D+04, 0.25683471D+04,-0.51018797D+04, 0.10895504D+05,
     . -0.51018797D+04, 0.10535742D+05,-0.21028265D+05, 0.10895504D+05,
     . -0.21028265D+05, 0.34858917D+05, 0.58865077D+04,-0.94733690D+04,
     . -0.32398399D+04,-0.94733690D+04, 0.16670105D+05, 0.16281794D+05,
     . -0.32398399D+04, 0.16281794D+05,-0.22873879D+05/
      DATA Z43  /
     . 0.34383385D 00, 0.32342113D 01, 0.91245979D 01, 0.32342113D 01,
     . 0.11183568D 02, 0.26066925D 02, 0.91245979D 01, 0.26066925D 02,
     . 0.33522052D 02,-0.41491152D 00,-0.12042442D 01, 0.62604703D 01,
     .-0.12042442D 01, 0.45759735D 01, 0.19476835D 02, 0.62604703D 01,
     . 0.19476835D 02, 0.38661997D 02,-0.34355512D 00,-0.60749632D 01,
     .-0.17868530D 02,-0.60749632D 01,-0.22398717D 02,-0.28291411D 02,
     .-0.17868530D 02,-0.28291411D 02,-0.85055028D 01,-0.41491152D 00,
     .-0.12042442D 01, 0.62604703D 01,-0.12042442D 01, 0.45759735D 01,
     . 0.19476835D 02, 0.62604703D 01, 0.19476835D 02, 0.38661997D 02,
     . 0.25907009D 01, 0.17458814D 02, 0.40074774D 02, 0.17458814D 02,
     . 0.51235413D 02, 0.14903207D 03, 0.40074774D 02, 0.14903207D 03,
     . 0.21725207D 03,-0.24768358D 01,-0.10184021D 02,-0.87617492D 01,
     .-0.10184021D 02,-0.21583303D 02,-0.55539228D 02,-0.87617492D 01,
     .-0.55539228D 02, 0.23968093D 02,-0.34355512D 00,-0.60749632D 01,
     .-0.17868530D 02,-0.60749632D 01,-0.22398717D 02,-0.28291411D 02,
     .-0.17868530D 02,-0.28291411D 02,-0.85055028D 01,-0.24768358D 01,
     . 260*0.D0 /
      DATA Z43A  /
     .-0.10184021D 02,-0.87617492D 01,-0.10184021D 02,-0.21583303D 02,
     .-0.55539228D 02,-0.87617492D 01,-0.55539228D 02, 0.23968093D 02,
     . 0.96752017D 01, 0.65212312D 02, 0.14099446D 03, 0.65212312D 02,
     . 0.19558324D 03, 0.42547916D 03, 0.14099446D 03, 0.42547916D 03,
     . 0.40570557D 03,-0.60952354D-06,-0.12174444D-05,-0.83573414D-05,
     .-0.12174444D-05,-0.12398959D-05,-0.23758563D-04,-0.83573414D-05,
     .-0.23758563D-04,-0.73949341D-04,-0.97444490D-06,-0.19420486D-05,
     .-0.13328157D-04,-0.19420486D-05,-0.20000152D-05,-0.37308782D-04,
     .-0.13328157D-04,-0.37308782D-04,-0.10311604D-03,-0.46778041D-06,
     .-0.94210554D-06,-0.69502275D-05,-0.94210554D-06,-0.16912818D-05,
     .-0.18596649D-04,-0.69502275D-05,-0.18596649D-04, 0.36716461D-03,
     .-0.97444490D-06,-0.19420486D-05,-0.13328157D-04,-0.19420486D-05,
     .-0.20000152D-05,-0.37308782D-04,-0.13328157D-04,-0.37308782D-04,
     .-0.10311604D-03,-0.44488770D-05,-0.88720117D-05,-0.60699880D-04,
     .-0.88720117D-05,-0.76256692D-05,-0.16045570D-03,-0.60699880D-04,
     .-0.16045570D-03,-0.20027161D-04,-0.26520138D-05,-0.60535967D-05  /
      DATA Z43B  /
     .-0.63180923D-04,-0.60535967D-05,-0.90003014D-05,-0.15258789D-03,
     .-0.63180923D-04,-0.15258789D-03,-0.86975098D-03,-0.46778041D-06,
     .-0.94210554D-06,-0.69502275D-05,-0.94210554D-06,-0.16912818D-05,
     .-0.18596649D-04,-0.69502275D-05,-0.18596649D-04, 0.36716461D-03,
     .-0.26520138D-05,-0.60535967D-05,-0.63180923D-04,-0.60535967D-05,
     .-0.90003014D-05,-0.15258789D-03,-0.63180923D-04,-0.15258789D-03,
     .-0.86975098D-03,-0.11244090D-04,-0.18350780D-04, 0.15711784D-03,
     .-0.18350780D-04,-0.15640259D-03,-0.84838867D-02, 0.15711784D-03,
     .-0.84838867D-02,-0.10449219D 00  /
       DATA Z43C  /
     .         0.10161296D-01, 0.53447256D+01, 0.15974517D+02,
     .  0.53447256D+01, 0.32908926D+02, 0.99962800D+02, 0.15974517D+02,
     .  0.99962800D+02, 0.26134058D+03,-0.58808235D-02,-0.82381841D+00,
     .  0.10000610D+02,-0.82381841D+00, 0.11637011D+02, 0.58248266D+02,
     .  0.10000610D+02, 0.58248266D+02, 0.18066936D+03, 0.28809280D-02 ,
     . -0.72991833D+00,-0.71978257D+01,-0.72991833D+00,-0.94020391D+01,
     .  0.25209192D+00,-0.71978257D+01, 0.25209192D+00, 0.63440151D+02,
     . -0.58808235D-02,-0.82381841D+00, 0.10000610D+02,-0.82381841D+00 ,
     .  0.11637011D+02, 0.58248266D+02, 0.10000610D+02, 0.58248266D+02 ,
     .  0.18066936D+03, 0.27909830D-01, 0.17006707D+02, 0.72568762D+02,
     .  0.17006707D+02, 0.13606368D+03, 0.49932455D+03, 0.72568762D+02 ,
     .  0.49932455D+03, 0.14452106D+04,-0.17758493D-01,-0.49122479D+01,
     .  0.12225961D+02,-0.49122479D+01, 0.10847754D+02, 0.14248695D+03,
     .  0.12225961D+02, 0.14248695D+03, 0.67986060D+03, 0.28809280D-02,
     . -0.72991833D+00,-0.71978257D+01,-0.72991833D+00,-0.94020391D+01,
     .  0.25209192D+00,-0.71978257D+01, 0.25209192D+00, 0.63440151D+02 ,
     . -0.17758493D-01/
      DATA Z43D  /
     .                 -0.49122479D+01, 0.12225961D+02,-0.49122479D+01 ,
     .  0.10847754D+02, 0.14248695D+03, 0.12225961D+02, 0.14248695D+03 ,
     .  0.67986060D+03, 0.75124834D-01, 0.46104200D+02, 0.18572359D+03 ,
     .  0.46104200D+02, 0.35607133D+03, 0.12494709D+04, 0.18572359D+03,
     .  0.12494709D+04, 0.36860436D+04, 0.13727514D-01, 0.13700481D+02,
     .  0.87452550D+02, 0.13700481D+02, 0.17220296D+03, 0.78023942D+03,
     .  0.87452550D+02, 0.78023942D+03, 0.29368787D+04, 0.13838172D-01,
     .  0.13810921D+02, 0.88157508D+02, 0.13810921D+02, 0.17359109D+03 ,
     .  0.78652896D+03, 0.88157508D+02, 0.78652896D+03, 0.29605530D+04,
     .  0.13776900D-01, 0.13749770D+02, 0.87767168D+02, 0.13749770D+02,
     .  0.17282247D+03, 0.78304639D+03, 0.87767168D+02, 0.78304639D+03 ,
     .  0.29474443D+04, 0.13838172D-01, 0.13810921D+02, 0.88157508D+02,
     .  0.13810921D+02, 0.17359109D+03, 0.78652896D+03, 0.88157508D+02,
     .  0.78652896D+03, 0.29605530D+04, 0.98816039D-01, 0.98621446D+02,
     .  0.62951782D+03, 0.98621446D+02, 0.12395846D+04, 0.56164699D+04,
     .  0.62951782D+03, 0.56164699D+04, 0.21140807D+05, 0.96533229D-01,
     .  0.96343132D+02/
      DATA Z43E  /
     .                  0.61497494D+03, 0.96343132D+02, 0.12109482D+04,
     .  0.54867204D+04, 0.61497494D+03, 0.54867204D+04, 0.20652420D+05,
     .  0.13776900D-01, 0.13749770D+02, 0.87767168D+02, 0.13749770D+02 ,
     .  0.17282247D+03, 0.78304639D+03, 0.87767168D+02, 0.78304639D+03,
     .  0.29474443D+04, 0.96533229D-01, 0.96343132D+02, 0.61497494D+03 ,
     .  0.96343132D+02, 0.12109482D+04, 0.54867204D+04, 0.61497494D+03,
     .  0.54867204D+04, 0.20652420D+05, 0.33046556D+00, 0.32981480D+03,
     .  0.21052651D+04, 0.32981480D+03, 0.41454810D+04, 0.18782881D+05,
     .  0.21052651D+04, 0.18782881D+05, 0.70700152D+05/
C
      DATA ZK21  /
     . 0.16000000D 01,-0.95438602D 00, 0.55061993D 00,-0.95438602D 00,
     . 0.73391690D 02,-0.48957854D 02, 0.55061993D 00,-0.48957854D 02,
     . 0.62569849D 03,
     .         0.74785853D-04, 0.42566424D-01, 0.40002572D-01,
     .  0.42566424D-01, 0.42973417D+02, 0.12008994D+03, 0.40002572D-01,
     .  0.12008994D+03, 0.77815617D+03/
C
      DATA ZK22 / 18*0.D0 /
C
      DATA ZK23  /
     . 0.16000000D 01,-0.95438602D 00, 0.55061993D 00,-0.95438602D 00,
     . 0.73391690D 02,-0.48957854D 02, 0.55061993D 00,-0.48957854D 02,
     . 0.62569849D 03,
     .         0.74785853D-04, 0.42566424D-01, 0.40002572D-01,
     .  0.42566424D-01, 0.42973417D+02, 0.12008994D+03, 0.40002572D-01,
     .  0.12008994D+03, 0.77815617D+03/
C
      DATA ZK31 / 54*0.D0 /
C
      DATA ZK32 / 54*0.D0 /
C
      DATA ZK33 / 54*0.D0 /
C
      DATA ZK34 / 54*0.D0 /
C
      DATA ZK35 / 54*0.D0 /
C
      DATA ZK36 / 54*0.D0 /
C
      DATA ZK41  /
     . 0.11636364D 01, 0.27031483D 01,-0.21400422D 01, 0.79065272D 01,
     . 0.58475040D 02, 0.44162401D 02,-0.47434733D 01, 0.88696440D 02,
     . 0.45990345D 03,-0.25002305D 01, 0.78354586D 01, 0.18972053D 02,
     . 0.32793896D 01, 0.38917215D 02, 0.29749167D 03, 0.53809092D 02,
     . 0.23138523D 03, 0.45390968D 03, 0.46338889D 00,-0.25561985D 02,
     . 0.25238882D 02,-0.35258985D 02,-0.11164846D 03, 0.14801671D 02,
     . 0.24397152D 01, 0.23550830D 02, 0.16978424D 03, 0.27031483D 01,
     . 0.32793896D 01, 0.92750536D 01, 0.58475040D 02, 0.74640667D 02,
     . 0.12602017D 03, 0.88696440D 02, 0.53516031D 03, 0.47750892D 03,
     . 0.78354586D 01, 0.31937635D 01,-0.62834136D 01, 0.38917215D 02,
     . 0.41955559D 03, 0.19123781D 03, 0.23138523D 03, 0.64445608D 03,
     . 0.35290058D 04,-0.25561985D 02, 0.59823029D 02,-0.87976096D 01,
     .-0.11164846D 03,-0.26198038D 03, 0.12050099D 04, 0.23550830D 02,
     . 0.13649770D 03,-0.30794357D 02,-0.21400422D 01, 0.92750536D 01,
     . 0.24397152D 01, 0.44162401D 02, 0.12602017D 03, 0.47150105D 02,
     . 0.45990345D 03, 0.47750892D 03, 0.33215353D 03, 0.18972053D 02,
     . 98*0.D0 /
      DATA ZK41A  /
     .-0.62834136D 01,-0.48467398D-01, 0.29749167D 03, 0.19123781D 03,
     . 0.13649744D 03, 0.45390968D 03, 0.35290058D 04, 0.41244807D 03,
     . 0.25238882D 02,-0.87976096D 01, 0.74148365D 01, 0.14801671D 02,
     . 0.12050099D 04,-0.47404022D 03, 0.16978424D 03,-0.30794357D 02,
     . 0.10122621D 05/
       DATA ZK41B  /
     .         0.14909318D-03, 0.42660755D-01, 0.40898424D-01,
     .  0.85334015D-01, 0.43274682D+02, 0.12130015D+03, 0.81720733D-01 ,
     .  0.12168614D+03, 0.78465047D+03,-0.12506089D-04, 0.72480663D-01,
     .  0.41584179D+00, 0.14434438D+00, 0.12767788D+03, 0.64675017D+03,
     .  0.83153513D+00, 0.64809322D+03, 0.35060193D+04, 0.76115052D-04,
     .  0.29851800D-01, 0.52112671D+00, 0.59555148D-01, 0.10016672D+03,
     .  0.95550312D+03, 0.10403738D+01, 0.95716045D+03, 0.59491878D+04,
     .  0.42660755D-01, 0.14434438D+00, 0.44554514D+00, 0.43274682D+02,
     .  0.25464271D+03, 0.74615456D+03, 0.12168614D+03, 0.12927380D+04,
     .  0.44575201D+04, 0.72480663D-01, 0.71305313D+00, 0.21053750D+01,
     .  0.12767788D+03, 0.11367564D+04, 0.38436839D+04, 0.64809322D+03,
     .  0.61441734D+04, 0.23283898D+05, 0.29851800D-01, 0.76232677D+00,
     .  0.40023749D+01, 0.10016672D+03, 0.15431944D+04, 0.71304116D+04,
     .  0.95716045D+03, 0.10394960D+05, 0.43932037D+05, 0.40898424D-01,
     .  0.44554514D+00, 0.10403738D+01, 0.12130015D+03, 0.74615456D+03,
     .  0.19086612D+04, 0.78465047D+03, 0.44575201D+04, 0.11886752D+05,
     .  0.41584179D+00/
       DATA ZK41C  /
     .                  0.21053750D+01, 0.56597069D+01, 0.64675017D+03,
     .  0.38436839D+04, 0.10394960D+05, 0.35060193D+04, 0.23283898D+05,
     .  0.65841504D+05, 0.52112671D+00, 0.40023749D+01, 0.11623520D+02,
     .  0.95550312D+03, 0.71304116D+04, 0.22022570D+05, 0.59491878D+04,
     .  0.43932037D+05, 0.14058549D+06/
C
      DATA ZK42 / 162*0.D0 /
C
      DATA ZK43  /
     . 0.11636364D 01, 0.79065272D 01,-0.47434733D 01,-0.25002305D 01,
     . 0.32793896D 01, 0.53809092D 02, 0.46338889D 00,-0.35258985D 02,
     . 0.24397152D 01, 0.27031483D 01, 0.58475040D 02, 0.88696440D 02,
     . 0.78354586D 01, 0.38917215D 02, 0.23138523D 03,-0.25561985D 02,
     .-0.11164846D 03, 0.23550799D 02,-0.21400422D 01, 0.44162402D 02,
     . 0.45990345D 03, 0.18972053D 02, 0.29749167D 03, 0.45390966D 03,
     . 0.25238882D 02, 0.14801668D 02, 0.16978398D 03, 0.27031483D 01,
     . 0.58475040D 02, 0.88696440D 02, 0.78354586D 01, 0.38917215D 02,
     . 0.23138523D 03,-0.25561985D 02,-0.11164846D 03, 0.23550799D 02,
     . 0.32793896D 01, 0.74640668D 02, 0.53516031D 03, 0.31937634D 01,
     . 0.41955559D 03, 0.64445606D 03, 0.59823028D 02,-0.26198040D 03,
     . 0.13649694D 03, 0.92750536D 01, 0.12602018D 03, 0.47750896D 03,
     .-0.62834163D 01, 0.19123785D 03, 0.35290058D 04,-0.87975924D 01,
     . 0.12050096D 04,-0.30802185D 02,-0.21400422D 01, 0.44162402D 02,
     . 0.45990345D 03, 0.18972053D 02, 0.29749167D 03, 0.45390966D 03,
     . 0.25238882D 02, 0.14801668D 02, 0.16978398D 03, 0.92750536D 01,
     . 98*0.D0 /
      DATA ZK43A  /
     . 0.12602018D 03, 0.47750896D 03,-0.62834163D 01, 0.19123785D 03,
     . 0.35290058D 04,-0.87975924D 01, 0.12050096D 04,-0.30802185D 02,
     . 0.24397152D 01, 0.47150135D 02, 0.33215372D 03,-0.48466444D-01,
     . 0.13649743D 03, 0.41245613D 03, 0.74150501D 01,-0.47404388D 03,
     . 0.10122683D 05/
       DATA ZK43B  /
     .         0.14909318D-03, 0.85334015D-01, 0.81720733D-01,
     . -0.12506089D-04, 0.14434438D+00, 0.83153513D+00, 0.76115052D-04,
     .  0.59555148D-01, 0.10403738D+01, 0.42660755D-01, 0.43274682D+02,
     .  0.12168614D+03, 0.72480663D-01, 0.12767788D+03, 0.64809322D+03,
     .  0.29851800D-01, 0.10016672D+03, 0.95716045D+03, 0.40898424D-01,
     .  0.12130015D+03, 0.78465047D+03, 0.41584179D+00, 0.64675017D+03,
     .  0.35060193D+04, 0.52112671D+00, 0.95550312D+03, 0.59491878D+04,
     .  0.42660755D-01, 0.43274682D+02, 0.12168614D+03, 0.72480663D-01,
     .  0.12767788D+03, 0.64809322D+03, 0.29851800D-01, 0.10016672D+03,
     .  0.95716045D+03, 0.14434438D+00, 0.25464271D+03, 0.12927380D+04,
     .  0.71305313D+00, 0.11367564D+04, 0.61441734D+04, 0.76232677D+00 ,
     .  0.15431944D+04, 0.10394960D+05, 0.44554514D+00, 0.74615456D+03,
     .  0.44575201D+04, 0.21053750D+01, 0.38436839D+04, 0.23283898D+05,
     .  0.40023749D+01, 0.71304116D+04, 0.43932037D+05, 0.40898424D-01,
     .  0.12130015D+03, 0.78465047D+03, 0.41584179D+00, 0.64675017D+03,
     .  0.35060193D+04, 0.52112671D+00, 0.95550312D+03, 0.59491878D+04,
     .  0.44554514D+00/
      DATA ZK43C  /
     .                  0.74615456D+03, 0.44575201D+04, 0.21053750D+01,
     .  0.38436839D+04, 0.23283898D+05, 0.40023749D+01, 0.71304116D+04,
     .  0.43932037D+05, 0.10403738D+01, 0.19086612D+04, 0.11886752D+05,
     .  0.56597069D+01, 0.10394960D+05, 0.65841504D+05, 0.11623520D+02,
     .  0.22022570D+05, 0.14058550D+06/
C
      DATA ZK44 / 162*0.D0 /
C
      DATA ZK45 / 162*0.D0 /
C
      DATA ZK46  /
     . 0.11636364D 01, 0.27031483D 01,-0.21400422D 01, 0.79065272D 01,
     . 0.58475040D 02, 0.44162402D 02,-0.47434733D 01, 0.88696440D 02,
     . 0.45990345D 03,-0.25002305D 01, 0.78354586D 01, 0.18972053D 02,
     . 0.32793896D 01, 0.38917215D 02, 0.29749167D 03, 0.53809092D 02,
     . 0.23138523D 03, 0.45390966D 03, 0.46338889D 00,-0.25561985D 02,
     . 0.25238882D 02,-0.35258985D 02,-0.11164846D 03, 0.14801668D 02,
     . 0.24397152D 01, 0.23550830D 02, 0.16978398D 03, 0.27031483D 01,
     . 0.32793896D 01, 0.92750536D 01, 0.58475040D 02, 0.74640668D 02,
     . 0.12602018D 03, 0.88696440D 02, 0.53516031D 03, 0.47750896D 03,
     . 0.78354586D 01, 0.31937634D 01,-0.62834163D 01, 0.38917215D 02,
     . 0.41955559D 03, 0.19123785D 03, 0.23138523D 03, 0.64445606D 03,
     . 0.35290058D 04,-0.25561985D 02, 0.59823028D 02,-0.87975924D 01,
     .-0.11164846D 03,-0.26198040D 03, 0.12050096D 04, 0.23550830D 02,
     . 0.13649743D 03,-0.30802185D 02,-0.21400422D 01, 0.92750536D 01,
     . 0.24397152D 01, 0.44162402D 02, 0.12602018D 03, 0.47150135D 02,
     . 0.45990345D 03, 0.47750896D 03, 0.33215372D 03, 0.18972053D 02,
     . 98*0.D0 /
      DATA ZK46A  /
     .-0.62834163D 01,-0.48466444D-01, 0.29749167D 03, 0.19123785D 03,
     . 0.13649694D 03, 0.45390966D 03, 0.35290058D 04, 0.41245613D 03,
     . 0.25238882D 02,-0.87975924D 01, 0.74155384D 01, 0.14801668D 02,
     . 0.12050096D 04,-0.47404388D 03, 0.16978398D 03,-0.30802185D 02,
     . 0.10122683D 05/
      DATA ZK46B  /
     .         0.14909318D-03, 0.42660755D-01, 0.40898424D-01,
     .  0.85334015D-01, 0.43274682D+02, 0.12130015D+03, 0.81720733D-01,
     .  0.12168614D+03, 0.78465047D+03,-0.12506089D-04, 0.72480663D-01,
     .  0.41584179D+00, 0.14434438D+00, 0.12767788D+03, 0.64675017D+03,
     .  0.83153513D+00, 0.64809322D+03, 0.35060193D+04, 0.76115052D-04,
     .  0.29851800D-01, 0.52112671D+00, 0.59555148D-01, 0.10016672D+03,
     .  0.95550312D+03, 0.10403738D+01, 0.95716045D+03, 0.59491878D+04 ,
     .  0.42660755D-01, 0.14434438D+00, 0.44554514D+00, 0.43274682D+02,
     .  0.25464271D+03, 0.74615456D+03, 0.12168614D+03, 0.12927380D+04,
     .  0.44575201D+04, 0.72480663D-01, 0.71305313D+00, 0.21053750D+01,
     .  0.12767788D+03, 0.11367564D+04, 0.38436839D+04, 0.64809322D+03,
     .  0.61441734D+04, 0.23283898D+05, 0.29851800D-01, 0.76232677D+00,
     .  0.40023749D+01, 0.10016672D+03, 0.15431944D+04, 0.71304116D+04,
     .  0.95716045D+03, 0.10394960D+05, 0.43932037D+05, 0.40898424D-01,
     .  0.44554514D+00, 0.10403738D+01, 0.12130015D+03, 0.74615456D+03,
     .  0.19086612D+04, 0.78465047D+03, 0.44575201D+04, 0.11886752D+05,
     .  0.41584179D+00/
      DATA ZK46C  /
     .                  0.21053750D+01, 0.56597069D+01, 0.64675017D+03 ,
     .  0.38436839D+04, 0.10394960D+05, 0.35060193D+04, 0.23283898D+05,
     .  0.65841504D+05, 0.52112671D+00, 0.40023749D+01, 0.11623520D+02,
     .  0.95550312D+03, 0.71304116D+04, 0.22022570D+05, 0.59491878D+04,
     .  0.43932037D+05, 0.14058550D+06/
C
      DATA ZK47 / 162*0.D0 /
C
      DATA ZK48  /
     . 0.11636364D 01, 0.27031483D 01,-0.21400422D 01, 0.79065272D 01,
     . 0.58475040D 02, 0.44162401D 02,-0.47434733D 01, 0.88696440D 02,
     . 0.45990345D 03,-0.25002305D 01, 0.78354586D 01, 0.18972053D 02,
     . 0.32793896D 01, 0.38917215D 02, 0.29749167D 03, 0.53809092D 02,
     . 0.23138523D 03, 0.45390968D 03, 0.46338889D 00,-0.25561985D 02,
     . 0.25238882D 02,-0.35258985D 02,-0.11164846D 03, 0.14801671D 02,
     . 0.24397152D 01, 0.23550830D 02, 0.16978424D 03, 0.27031483D 01,
     . 0.32793896D 01, 0.92750536D 01, 0.58475040D 02, 0.74640667D 02,
     . 0.12602017D 03, 0.88696440D 02, 0.53516031D 03, 0.47750892D 03,
     . 0.78354586D 01, 0.31937635D 01,-0.62834136D 01, 0.38917215D 02,
     . 0.41955559D 03, 0.19123781D 03, 0.23138523D 03, 0.64445608D 03,
     . 0.35290058D 04,-0.25561985D 02, 0.59823029D 02,-0.87976096D 01,
     .-0.11164846D 03,-0.26198038D 03, 0.12050099D 04, 0.23550830D 02,
     . 0.13649770D 03,-0.30794357D 02,-0.21400422D 01, 0.92750536D 01,
     . 0.24397152D 01, 0.44162401D 02, 0.12602017D 03, 0.47150105D 02,
     . 0.45990345D 03, 0.47750892D 03, 0.33215353D 03, 0.18972053D 02,
     . 98*0.D0 /
      DATA ZK48A  /
     .-0.62834136D 01,-0.48467398D-01, 0.29749167D 03, 0.19123781D 03,
     . 0.13649744D 03, 0.45390968D 03, 0.35290058D 04, 0.41244807D 03,
     . 0.25238882D 02,-0.87976096D 01, 0.74148365D 01, 0.14801671D 02,
     . 0.12050099D 04,-0.47404022D 03, 0.16978424D 03,-0.30794357D 02,
     . 0.10122621D 05/
      DATA ZK48B  /
     .         0.14909318D-03, 0.42660755D-01, 0.40898424D-01,
     .  0.85334015D-01, 0.43274682D+02, 0.12130015D+03, 0.81720733D-01,
     .  0.12168614D+03, 0.78465047D+03,-0.12506089D-04, 0.72480663D-01,
     .  0.41584179D+00, 0.14434438D+00, 0.12767788D+03, 0.64675017D+03,
     .  0.83153513D+00, 0.64809322D+03, 0.35060193D+04, 0.76115052D-04,
     .  0.29851800D-01, 0.52112671D+00, 0.59555148D-01, 0.10016672D+03,
     .  0.95550312D+03, 0.10403738D+01, 0.95716045D+03, 0.59491878D+04,
     .  0.42660755D-01, 0.14434438D+00, 0.44554514D+00, 0.43274682D+02,
     .  0.25464271D+03, 0.74615456D+03, 0.12168614D+03, 0.12927380D+04,
     .  0.44575201D+04, 0.72480663D-01, 0.71305313D+00, 0.21053750D+01,
     .  0.12767788D+03, 0.11367564D+04, 0.38436839D+04, 0.64809322D+03,
     .  0.61441734D+04, 0.23283898D+05, 0.29851800D-01, 0.76232677D+00,
     .  0.40023749D+01, 0.10016672D+03, 0.15431944D+04, 0.71304116D+04,
     .  0.95716045D+03, 0.10394960D+05, 0.43932037D+05, 0.40898424D-01,
     .  0.44554514D+00, 0.10403738D+01, 0.12130015D+03, 0.74615456D+03,
     .  0.19086612D+04, 0.78465047D+03, 0.44575201D+04, 0.11886752D+05,
     .  0.41584179D+00/
      DATA ZK48C  /
     .                  0.21053750D+01, 0.56597069D+01, 0.64675017D+03,
     .  0.38436839D+04, 0.10394960D+05, 0.35060193D+04, 0.23283898D+05,
     .  0.65841504D+05, 0.52112671D+00, 0.40023749D+01, 0.11623520D+02,
     .  0.95550312D+03, 0.71304116D+04, 0.22022570D+05, 0.59491878D+04,
     .  0.43932037D+05, 0.14058549D+06/
C
      DATA ZS01 / 2*1.0D0 /
C
      DATA ZS02 / 2*0.5D0 /
C
      DATA ZS11 / 6*1.0D0 /
C
      DATA ZS12  /
     . 0.4D0,-0.23859649D0, 0.13765510D0,
     .    0.49901021D+00,-0.19830055D+00, 0.64089188D-01/
C
      DATA ZS13  /
     . 0.28888889D0,-0.45614034D-1, 0.14805957D-1,
     .    0.33285246D+00,-0.37713939D-01,-0.39265958D-01 /
C
      DATA ZS21  /
     . 0.11428571D1, 0.18270677D1, 0.87728422D0, 0.18270677D1,
     . 0.83370707D1, 0.50020959D1, 0.87728422D0, 0.50020959D1,
     . 0.20255012D2,
     .         0.10000119D+01, 0.10080730D+01, 0.10036095D+01,
     .  0.10080730D+01, 0.71984785D+01, 0.70321821D+01, 0.10036095D+01,
     .  0.70321821D+01, 0.24073514D+02/
C
      DATA ZS22  /
     . 0.5D0, 0.12095517D1, 0.94455821D0,-0.20955166D0, 0.5D0,
     . 0.16567674D1, 0.55441789D-1,-0.65676735D0,   0.5D0,
     .         0.50000000D+00, 0.11976894D+01, 0.93676483D+00,
     . -0.19768936D+00, 0.50000005D+00, 0.15269154D+01, 0.63228666D-01,
     . -0.52692186D+00, 0.49999350D+00/
C
      DATA ZS23  /
     . 0.4D0, 0.11617934D0,-0.32885325D0, 0.11617934D0, 0.25510619D1,
     .-0.73983104D0,-0.32885325D0,-0.73983104D0, 0.79633924D1,
     .         0.49802703D+00,-0.19554199D+00, 0.61560054D-01,
     . -0.19554199D+00, 0.14776115D+01,-0.67399252D+00, 0.61560054D-01,
     . -0.67399252D+00, 0.39786671D+01/
C
      DATA ZS24  /
     . 0.74285714D0, 0.17108883D1, 0.12061375D1, 0.17108883D1,
     .0.57860089D1,0.57419269D1,0.12061375D1,0.57419269D1,
     .0.12291620D2,
     .         0.50198487D+00, 0.12036150D+01, 0.94204947D+00,
     .  0.12036150D+01, 0.57208671D+01, 0.77061746D+01, 0.94204947D+00,
     .  0.77061746D+01, 0.20094847D+02/
C
      DATA ZS31  /
     . 0.50909091D 00, 0.13304507D 01, 0.11476503D 01, 0.20699391D 00,
     . 0.13040264D 01, 0.23748684D 01,-0.44812494D 00,-0.11995772D 01,
     . 0.40619992D 00, 0.20699391D 00, 0.13040264D 01, 0.23748684D 01,
     . 0.31432590D 01, 0.74471338D 01, 0.74584519D 01,-0.65592087D 00,
     . 0.11013734D 01, 0.36525087D 01,-0.44812494D 00,-0.11995772D 01,
     . 0.40619992D 00,-0.65592087D 00, 0.11013734D 01, 0.36525087D 01,
     . 0.96170638D 01, 0.20525381D 02, 0.15314541D 02,
     .         0.49901683D+00, 0.11970897D+01, 0.93763632D+00,
     . -0.19492601D+00, 0.50653875D+00, 0.15350404D+01, 0.60698796D-01,
     . -0.52918654D+00, 0.50220816D+00,-0.19492601D+00, 0.50653875D+00,
     .  0.15350404D+01, 0.14815891D+01, 0.49064877D+01, 0.75017775D+01,
     . -0.67328281D+00, 0.52549336D+00, 0.48155918D+01, 0.60698796D-01,
     . -0.52918654D+00, 0.50220816D+00,-0.67328281D+00, 0.52549336D+00,
     .  0.48155918D+01, 0.39895255D+01, 0.13026205D+02, 0.17905399D+02/
C
      DATA ZS32  /
     . 0.63376623D 00, 0.16200737D 01, 0.13254092D 01, 0.16200737D 01,
     . 0.51938118D 01, 0.56580167D 01, 0.13254092D 01, 0.56580167D 01,
     . 0.10637949D 02,-0.18759357D 00, 0.52304124D 00, 0.20768614D 01,
     . 0.52304124D 00, 0.88993692D 00, 0.39007224D 01, 0.20768614D 01,
     . 0.39007224D 01,-0.27036859D 00,-0.47932068D-02,-0.54780076D 00,
     . 0.47108430D 00,-0.54780076D 00, 0.87861884D 00, 0.13495871D 01,
     . 0.47108430D 00, 0.13495871D 01, 0.49404709D 01,
     .         0.50099507D+00, 0.12029990D+01, 0.94291072D+00,
     .  0.12029990D+01, 0.57168895D+01, 0.77054649D+01, 0.94291072D+00,
     .  0.77054649D+01, 0.20083988D+02,-0.19707779D+00, 0.50153432D+00,
     .  0.15327961D+01, 0.50153432D+00, 0.22919912D+01, 0.65066891D+01,
     .  0.15327961D+01, 0.65066891D+01, 0.11047310D+02, 0.62369075D-01,
     . -0.52697390D+00, 0.50139483D+00,-0.52697390D+00,-0.30334576D+00,
     .  0.22165446D+01, 0.50139483D+00, 0.22165446D+01, 0.61679583D+01/
C
      DATA ZS41  /
     . 0.65306122D 00, 0.17658769D 01, 0.15895182D 01, 0.17658769D 01,
     . 0.55683283D 01, 0.63345454D 01, 0.15895182D 01, 0.63345454D 01,
     . 0.11190531D 02, 0.32220039D 00, 0.16690881D 01, 0.30494787D 01,
     . 0.16690881D 01, 0.50587567D 01, 0.81896220D 01, 0.30494787D 01,
     . 0.81896220D 01, 0.87574493D 01,-0.58690763D 00,-0.14466210D 01,
     . 0.38481381D 00,-0.14466210D 01,-0.29385513D 01,-0.53806631D 00,
     . 0.38481381D 00,-0.53806631D 00,-0.33391118D 01, 0.32220039D 00,
     . 0.16690881D 01, 0.30494787D 01, 0.16690881D 01, 0.50587567D 01,
     . 0.81896220D 01, 0.30494787D 01, 0.81896220D 01, 0.87574493D 01,
     . 0.39597525D 01, 0.10173636D 02, 0.10252532D 02, 0.10173636D 02,
     . 0.34753374D 02, 0.41114760D 02, 0.10252532D 02, 0.41114760D 02,
     . 0.74143418D 02,-0.61786443D 00, 0.94954551D 00, 0.49263270D 01,
     . 0.94954551D 00, 0.58806852D 00, 0.12510485D 02, 0.49263270D 01,
     . 0.12510485D 02, 0.58547207D 01,-0.58690763D 00,-0.14466210D 01,
     . 0.38481381D 00,-0.14466210D 01,-0.29385513D 01,-0.53806631D 00,
     . 0.38481381D 00,-0.53806631D 00,-0.33391118D 01,-0.61786443D 00,
     . 98*0.D0 /
      DATA ZS41A  /
     . 0.94954551D 00, 0.49263270D 01, 0.94954551D 00, 0.58806852D 00,
     . 0.12510485D 02, 0.49263270D 01, 0.12510485D 02, 0.58547207D 01,
     . 0.11958054D 02, 0.28249828D 02, 0.21108528D 02, 0.28249828D 02,
     . 0.94724072D 02, 0.95463086D 02, 0.21108528D 02, 0.95463086D 02,
     . 0.20513243D 03/
      DATA ZS41B  /
     .         0.50001190D+00, 0.12023946D+01, 0.94378301D+00 ,
     .  0.12023946D+01, 0.57129760D+01, 0.77048401D+01, 0.94378301D+00,
     .  0.77048401D+01, 0.20073361D+02,-0.19430962D+00, 0.50810561D+00,
     .  0.15409644D+01, 0.50810561D+00, 0.23270880D+01, 0.65611423D+01,
     .  0.15409644D+01, 0.65611423D+01, 0.11182472D+02, 0.59838450D-01,
     . -0.52925270D+00, 0.50361603D+00,-0.52925270D+00,-0.31492021D+00,
     .  0.22204551D+01, 0.50361603D+00, 0.22204551D+01, 0.61604030D+01,
     . -0.19430962D+00, 0.50810561D+00, 0.15409644D+01, 0.50810561D+00,
     .  0.23270880D+01, 0.65611423D+01, 0.15409644D+01, 0.65611423D+01,
     .  0.11182472D+02, 0.14855882D+01, 0.49295041D+01, 0.75393818D+01,
     .  0.49295041D+01, 0.25909047D+02, 0.45787887D+02, 0.75393818D+01,
     .  0.45787887D+02, 0.10662782D+03,-0.67257427D+00, 0.52781079D+00,
     .  0.48371099D+01, 0.52781079D+00, 0.48331252D+01, 0.24725793D+02,
     .  0.48371099D+01, 0.24725793D+02, 0.52519910D+02, 0.59838450D-01,
     . -0.52925270D+00, 0.50361603D+00,-0.52925270D+00,-0.31492021D+00,
     .  0.22204551D+01, 0.50361603D+00, 0.22204551D+01, 0.61604030D+01,
     . -0.67257427D+00/
      DATA ZS41C  /
     .                  0.52781079D+00, 0.48371099D+01, 0.52781079D+00,
     .  0.48331252D+01, 0.24725793D+02, 0.48371099D+01, 0.24725793D+02,
     .  0.52519910D+02, 0.40004390D+01, 0.13085388D+02, 0.18000005D+02,
     .  0.13085388D+02, 0.66664852D+02, 0.11676942D+03, 0.18000005D+02,
     .  0.11676942D+03, 0.28976706D+03/
C
      DATA ZT21  /
     . 0.44444444D 00,-0.35200004D 00, 0.22407679D 00, 0.17280000D 01,
     . 0.23355789D 01,-0.61304099D 01, 0.19759632D 01, 0.13598967D 02,
     . 0.59706120D 01, 45*0.0D0,
     .         0.59337615D-02,-0.24132831D-02,-0.37379749D-02,
     . -0.41139799D+01,-0.91577375D+01,-0.61344443D+01,-0.71541229D+01,
     . -0.49929195D+02,-0.69589334D+02, 0.0           , 0.0           ,
     . 43*0.0D0/
C
      DATA ZT22  /
     . 27*0.0D0, 0.44444444D 00,
     .-0.11918598D 01, 0.75871616D 00, 0.58509474D 01, 0.79081883D 01,
     .-0.20757353D 02, 0.66905420D 01, 0.46045625D 02, 0.20216283D 02,
     . 18*0.0D0,
     .27*0.0D0,
     . -0.59337615D-02,-0.24132831D-02,-0.37379749D-02,-0.41139799D+01,
     . -0.91577375D+01,-0.61344443D+01,-0.71541229D+01,-0.49929195D+02,
     . -0.69589334D+02, 0.0           , 0.0           , 0.0            ,
     .15*0.0D0/
C
      DATA STAO  /
     . 3*0.0D0,-0.66666666D 00,-0.22631600D 01,-0.36184900D 01, 6*0.0D0,
     .  0.59387586D-02, 0.41066052D+01, 0.71056788D+01,3*0.0D0/
C
      DATA STA1 / 18*1.D0 /
C
      DATA STA2 / 18*1.D0 /
C
      DATA STBO  /
     . 6*0.0D0,-0.66666666D 00,-0.22631600D 01,-0.36184900D 01, 3*0.0D0,
     .  0.0           , 0.0           , 0.0 ,           0.59387586D-02,
     .  0.41066052D+01, 0.71056788D+01/
C
      DATA STB1 /18*1.D0 /
C
      DATA STB2 /18*1.D0 /
C
      DATA Z2S01 / 2*1.0D0 /
C
      DATA Z2S12 / 6*1.0D0 /
C
      DATA Z2S23  /
     . 0.11428571D1, 0.18270677D1, 0.87728422D0, 0.18270677D1,
     . 0.83370707D1, 0.50020959D1, 0.87728422D0, 0.50020959D1,
     . 0.20255012D2,
     .         0.10000119D+01, 0.10080730D+01, 0.10036095D+01,
     .  0.10080730D+01, 0.71984785D+01, 0.70321821D+01, 0.10036095D+01,
     .  0.70321821D+01, 0.24073514D+02/
C
C
      END
      BLOCK DATA
C     ****************   BLOCK  DATA  3    ***********************
C
C     BLOCK DATA 3 PRESETS ALL THE INPUT VARIABLES
C     IN SUBROUTINE READTH AND INCOMING NEW INPUT VARIABLES
C
C     WRITTEN BY K. YONG OF CSC IN JANUARY 1976
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 I3,I2OVI3
C
      COMMON/CSBNDS/CSUP(20),CSDN(20),GNIC(10)
C
      COMMON/CSTAT /SVCS(20),SVCDOT(20),CPARM(43)
C
      COMMON/ICNTRL/KNTRL(10)
C
      COMMON/THRUST/TV(3,2),TLOC(3,2),TTIM(4,2),TPAR(4,2),REF(2)
C
      COMMON/ITCNTL/IPULSE,ISPLSE,KPULSE,ITSW,IOTSW,IPLPRP
C
      COMMON/IKPLER/IKPLR
C
      COMMON/XKPLER/AS,E,F,EI,BW,W,BWDOT,WDOT
C
      COMMON/INUMP/ ISPNP
C
      COMMON/HOUTPT/ IHCALC,IHREF,IHFLAG
C
      COMMON/CWHEEL/VW(3),VSUR(3),VSDR(3)
C
      COMMON/IACC/ IACOMP,IHUBAC,ITIPAC,IAFLAG
C
      COMMON/NUMACC/NUMHUB
C
      COMMON/ACCHUB/ YHUB(3,6),HUBACC(3,6),ACCRED(6),ALFAEA(6),
     *BETAEA(6),GAMAEA(6),DKAT(3,3,6)
C
      COMMON/SHAPES/ZXI(10,3),ZXIP(10,3),ZXIPP(10,3),ZZNP(10,3,3)
C
      COMMON/INPFFT/ICSD,IDUM(258)
C
      COMMON/IPRYRT/IPRY,IGGANG
C
      COMMON/PRYRAT/PRAT,RRAT,YRAT
C
      COMMON/TMSINR/ TIPINR(3,10),RTSQ(3,10),XIPL(6),BETL(6)
C
      COMMON/INTTRP/ITPROT,NUMTIP(10),IRDBUG
C
      COMMON/GRNTST/ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY(3),
     *              GACC(3),GLOCAT(3),IGRUND,IALTUD,IGASBR
C
      COMMON/PUNCH /IPUN,IPUNCH
C
      COMMON/ITW/ITWIST,ITWST1
C
      COMMON/RNEWR / ZA(10),I3(10),I2OVI3(10),
     *             ZDQ(10),ZJ(10),D2(10),D3(10)
C
      COMMON/INEWR/NKT(10),ICP,ICPS
C
      COMMON/RNEWV/CW(10,3),CDW(10,3)
C
C
      COMMON/TWIBND/TWIUP,TWIDN,TWDUP,TWDDN
C
      COMMON/TWIDMP/ CDTW(3,10)
C
      COMMON/COMSL1/ ZS101(2),ZS102(2),ZS111(6),ZS112(6),ZS113(6)
     *              ,ZS121(18),ZS122(18),ZS123(18),ZS124(18),ZS131(54)
     *              ,ZS132(54),ZS141(162),Z2S101(2),Z2S112(6)
     *              ,Z2S123(18),XLTEST
C
      DIMENSION V41(40),V42(41),V43(40),V44(41)
      EQUIVALENCE (ZS141(1),V41(1)),(ZS141(41),V42(1))
      EQUIVALENCE (ZS141(82),V43(1)),(ZS141(122),V44(1))
C     PRESET VARIABLES WITH DATA STATEMENTS
C
      DATA CSUP/14*1.0D-2,1.0D-1,5*1.0D-2/
      DATA CSDN/14*1.0D-4,1.0D-3,5*1.0D-4/
      DATA GNIC/10*0.0D0/
C
      DATA SVCS/20*0.0D0/
      DATA CPARM/35*0.0D0,5*1.0D0,3*0.0D0/
C
      DATA KNTRL/10*0/
C
      DATA IACOMP,IHUBAC,ITIPAC/3*0/
C
      DATA NUMHUB/6/
C
C
      DATA YHUB/18*0.0D0/
C
      DATA ALFAEA,BETAEA,GAMAEA/18*0.0D0/
      DATA ZXI/30*1.0D0/
C
      DATA ZXIPP/30*0.0D0/
C
      DATA ZXIP/1.33D0,4.53D0,7.24D0,1.33D0,4.53D0,7.24D0,
     *          1.33D0,4.53D0,7.24D0,1.33D0,4.53D0,7.24D0,
     *          1.33D0,4.53D0,7.24D0,1.33D0,4.53D0,7.24D0,
     *          1.33D0,4.53D0,7.24D0,1.33D0,4.53D0,7.24D0,
     *          1.33D0,4.53D0,7.24D0,1.33D0,4.53D0,7.24D0/
C
      DATA ZZNP/1.143D0,1.827D0,0.877D0,1.827D0,8.337D0,5.002D0,
     *          0.877D0,5.002D0,20.26D0,
     *          1.143D0,1.827D0,0.877D0,1.827D0,8.337D0,5.002D0,
     *          0.877D0,5.002D0,20.26D0,
     *          1.143D0,1.827D0,0.877D0,1.827D0,8.337D0,5.002D0,
     *          0.877D0,5.002D0,20.26D0,
     *          1.143D0,1.827D0,0.877D0,1.827D0,8.337D0,5.002D0,
     *          0.877D0,5.002D0,20.26D0,
     *          1.143D0,1.827D0,0.877D0,1.827D0,8.337D0,5.002D0,
     *          0.877D0,5.002D0,20.26D0,
     *          1.143D0,1.827D0,0.877D0,1.827D0,8.337D0,5.002D0,
     *          0.877D0,5.002D0,20.26D0,
     *          1.143D0,1.827D0,0.877D0,1.827D0,8.337D0,5.002D0,
     *          0.877D0,5.002D0,20.26D0,
     *          1.143D0,1.827D0,0.877D0,1.827D0,8.337D0,5.002D0,
     *          0.877D0,5.002D0,20.26D0,
     *          1.143D0,1.827D0,0.877D0,1.827D0,8.337D0,5.002D0,
     *          0.877D0,5.002D0,20.26D0,
     *          1.143D0,1.827D0,0.877D0,1.827D0,8.337D0,5.002D0,
     *          0.877D0,5.002D0,20.26D0/
C
      DATA IHCALC,IHREF,IPULSE,ISPLSE,KPULSE/5*0/
      DATA IPLPRP/1/
C
      DATA ISPNP/5/
C
      DATA IKPLR/1/
C
      DATA AS,E,EI,F,BW,W,BWDOT,WDOT/8000.0D0,7*0.0D0/
C
      DATA TV/0.0D0,0.0D0,1.0D0,0.0D0,0.0D0,1.0D0/
C
      DATA TLOC/6*0.0D0/
C
      DATA TTIM/0.0D0,5.0D0,10.0D0,15.0D0,5.0D0,10.0D0,15.0D0,20.0D0/
C
      DATA TPAR/1.0D0,1.0D4,0.0D0,1.0D4,1.0D0,1.0D4,0.0D0,1.0D4/
C
      DATA REF/90.0D0,270.0D0/
C
      DATA VSUR/3*1.0D6/
      DATA VSDR/3*-1.0D6/
C
      DATA ICSD,IDUM/259*0/
C
      DATA IPRY/0/
C
      DATA PRAT,RRAT,YRAT/3*0.0D0/
C
      DATA TIPINR/30*0.0D0/
C
      DATA XIPL/1.3333D0,4.5263D0,32.2368D0,1.3333D0,4.5263D0,32.2368D0/
C
      DATA BETL/6*1.0D0/
C
      DATA ITPROT,NUMTIP,IRDBUG/12*0/
C
      DATA IGRUND,IALTUD,IGASBR/3*0/
C
C
      DATA ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY,GLOCAT/10*0.0D0/
C
      DATA GACC/0.0D0,0.0D0,32.1461552D0/
C
C
      DATA ITWST1,ITWIST/2*0/
C
      DATA ZA/10*3.757072066D-2/
C
      DATA ZDQ/10*7.463049723D-8/
C
      DATA ZJ/10*2.118082743D-4/
C
      DATA I2OVI3/10*1.0D0/
C
C
      DATA NKT/10*0/
C
      DATA IPUNCH/0/
C
      DATA CW,CDW/60*0.0D0/
      DATA TWIUP/1.0D-4/
      DATA TWIDN/1.0D-6/
      DATA TWDUP/1.0D-5/
      DATA TWDDN/1.0D-7/
      DATA D2,D3/20*0.0D0/
C
      DATA CDTW/30*0.0D0/
C
      DATA ZS101/0.5D0,0.5D0/
      DATA ZS102/0.33333333D0,0.33333333D0/
      DATA Z2S101/1.0D0,1.0D0/
C     ONE DIM. ARRAYS PS111,PS112,PS113
      DATA ZS111/
     * 0.60000000D+00, 0.12385965D+01, 0.86234490D+00,
     * 0.60000000D+00, 0.12385965D+01, 0.86234490D+00/
      DATA ZS112/
     * 0.28888889D+00,-0.45614031D-01, 0.14805957D-01,
     * 0.28888889D+00,-0.45614031D-01, 0.14805957D-01/
      DATA ZS113/
     * 0.22539683D+00, 0.23934840D-01, 0.59690807D-02,
     * 0.22539683D+00, 0.23934840D-01, 0.59690807D-02/
      DATA Z2S112/
     * 0.10000000D+01, 0.10000000D+01, 0.10000000D+01,
     * 0.10000000D+01, 0.10000000D+01, 0.10000000D+01/
C     TWO DIM. ARRAYS PS121,PS122,PS123,PS124.
      DATA ZS121/
     * 0.74285714D+00, 0.17108883D+01, 0.12061375D+01, 0.17108883D+01,
     * 0.57860088D+01, 0.57419268D+01, 0.12061375D+01, 0.57419268D+01,
     * 0.12291620D+02,
     * 0.74285714D+00, 0.17108883D+01, 0.12061375D+01, 0.17108883D+01,
     * 0.57860088D+01, 0.57419268D+01, 0.12061375D+01, 0.57419268D+01,
     * 0.12291620D+02/
      DATA ZS122/
     * 0.37160494D+00, 0.10270955D+01, 0.10037819D+01,-0.27095515D-01,
     * 0.35770167D+00, 0.11486905D+01,-0.37819135D-02,-0.14869050D+00,
     * 0.35647733D+00,
     * 0.37160494D+00, 0.10270955D+01, 0.10037819D+01,-0.27095515D-01,
     * 0.35770167D+00, 0.11486905D+01,-0.37819135D-02,-0.14869050D+00,
     * 0.35647733D+00/
      DATA ZS123/
     * 0.30123457D+00, 0.18635478D+00,-0.23121422D+00, 0.18635478D+00,
     * 0.18486359D+01,-0.15921989D+00,-0.23121422D+00,-0.15921989D+00,
     * 0.54122640D+01,
     * 0.30123457D+00, 0.18635478D+00,-0.23121422D+00, 0.18635478D+00,
     * 0.18486359D+01,-0.15921989D+00,-0.23121422D+00,-0.15921989D+00,
     * 0.54122640D+01/
      DATA ZS124/
     * 0.54038800D+00, 0.14543581D+01, 0.13397127D+01, 0.14543581D+01,
     * 0.46397988D+01, 0.53205356D+01, 0.13397127D+01, 0.53205356D+01,
     * 0.94304843D+01,
     * 0.54038800D+00, 0.14543581D+01, 0.13397127D+01, 0.14543581D+01,
     * 0.46397988D+01, 0.53205356D+01, 0.13397127D+01, 0.53205356D+01,
     * 0.94304843D+01/
      DATA Z2S123/
     * 0.11428571D+01, 0.18270677D+01, 0.87728422D+00, 0.18270677D+01,
     * 0.83370706D+01, 0.50020958D+01, 0.87728422D+00, 0.50020958D+01,
     * 0.20255012D+02,
     * 0.11428571D+01, 0.18270677D+01, 0.87728422D+00, 0.18270677D+01,
     * 0.83370706D+01, 0.50020958D+01, 0.87728422D+00, 0.50020958D+01,
     * 0.20255012D+02/
C     THREE DIM. ARRAYS PS131,PS132.
      DATA ZS131/
     * 0.39057239D+00, 0.11204442D+01, 0.11648463D+01, 0.26521354D+00,
     * 0.11123255D+01, 0.19064333D+01,-0.29933018D+00,-0.72318353D+00,
     * 0.14354946D+00, 0.26521354D+00, 0.11123255D+01, 0.19064333D+01,
     * 0.23751121D+01, 0.66868945D+01, 0.75761527D+01,-0.11964413D+00,
     * 0.79087827D+00, 0.30564911D+01,-0.29933018D+00,-0.72318353D+00,
     * 0.14354946D+00,-0.11964413D+00, 0.79087827D+00, 0.30564911D+01,
     * 0.68788892D+01, 0.18113411D+02, 0.16788350D+02,
     * 0.39057239D+00, 0.11204442D+01, 0.11648463D+01, 0.26521354D+00,
     * 0.11123255D+01, 0.19064333D+01,-0.29933018D+00,-0.72318353D+00,
     * 0.14354946D+00, 0.26521354D+00, 0.11123255D+01, 0.19064333D+01,
     * 0.23751121D+01, 0.66868945D+01, 0.75761527D+01,-0.11964413D+00,
     * 0.79087827D+00, 0.30564911D+01,-0.29933018D+00,-0.72318353D+00,
     * 0.14354946D+00,-0.11964413D+00, 0.79087827D+00, 0.30564911D+01,
     * 0.68788892D+01, 0.18113411D+02, 0.16788350D+02/
      DATA ZS132/
     * 0.48067981D+00, 0.13609444D+01, 0.13706299D+01, 0.13609444D+01,
     * 0.43053593D+01, 0.51468906D+01, 0.13706299D+01, 0.51468906D+01,
     * 0.86484028D+01,-0.38378794D-02, 0.45228008D+00, 0.14439041D+01,
     * 0.45228008D+00, 0.14636030D+01, 0.33783292D+01, 0.14439041D+01,
     * 0.33783292D+01, 0.25944062D+01,-0.19839701D-01,-0.12202412D+00,
     * 0.46835396D+00,-0.12202412D+00, 0.43725777D+00, 0.17422467D+01,
     * 0.46835396D+00, 0.17422467D+01, 0.30963212D+01,
     * 0.48067981D+00, 0.13609444D+01, 0.13706299D+01, 0.13609444D+01,
     * 0.43053593D+01, 0.51468906D+01, 0.13706299D+01, 0.51468906D+01,
     * 0.86484028D+01,-0.38378794D-02, 0.45228008D+00, 0.14439041D+01,
     * 0.45228008D+00, 0.14636030D+01, 0.33783292D+01, 0.14439041D+01,
     * 0.33783292D+01, 0.25944062D+01,-0.19839701D-01,-0.12202412D+00,
     * 0.46835396D+00,-0.12202412D+00, 0.43725777D+00, 0.17422467D+01,
     * 0.46835396D+00, 0.17422467D+01, 0.30963212D+01/
C     FOUR DIM. ARRAY PS141.
      DATA V41/
     * 0.50820525D+00, 0.14820563D+01, 0.15792565D+01, 0.14820563D+01,
     * 0.46852807D+01, 0.57425293D+01, 0.15792565D+01, 0.57425293D+01,
     * 0.93644071D+01, 0.36963379D+00, 0.14661925D+01, 0.24817080D+01,
     * 0.14661925D+01, 0.47958472D+01, 0.73896743D+01, 0.24817080D+01,
     * 0.73896743D+01, 0.95550142D+01,-0.38391314D+00,-0.90933690D+00,
     * 0.14005310D+00,-0.90933690D+00,-0.21259540D+01,-0.30637439D+00,
     * 0.14005310D+00,-0.30637444D+00,-0.18034030D+01, 0.36963379D+00,
     * 0.14661925D+01, 0.24817080D+01, 0.14661925D+01, 0.47958472D+01,
     * 0.73896743D+01, 0.24817080D+01, 0.73896743D+01, 0.95550142D+01,
     * 0.30758198D+01, 0.89218879D+01, 0.10277203D+02, 0.89218879D+01/
      DATA V42/
     * 0.29158897D+02, 0.37557021D+02, 0.10277203D+02, 0.37557021D+02,
     * 0.61397708D+02,-0.74699706D-01, 0.98113816D+00, 0.39580336D+01,
     * 0.98113816D+00, 0.34645783D+01, 0.10948161D+02, 0.39580335D+01,
     * 0.10948158D+02, 0.12550976D+02,-0.38391314D+00,-0.90933690D+00,
     * 0.14005310D+00,-0.90933690D+00,-0.21259540D+01,-0.30637439D+00,
     * 0.14005310D+00,-0.30637444D+00,-0.18034030D+01,-0.74699706D-01,
     * 0.98113816D+00, 0.39580336D+01, 0.98113816D+00, 0.34645783D+01,
     * 0.10948161D+02, 0.39580335D+01, 0.10948158D+02, 0.12550976D+02,
     * 0.88281925D+01, 0.24118457D+02, 0.23047172D+02, 0.24118457D+02,
     * 0.76873275D+02, 0.90027240D+02, 0.23047172D+02, 0.90027288D+02,
     * 0.16058328D+03/
      DATA V43/
     * 0.50820525D+00, 0.14820563D+01, 0.15792565D+01, 0.14820563D+01,
     * 0.46852807D+01, 0.57425293D+01, 0.15792565D+01, 0.57425293D+01,
     * 0.93644071D+01, 0.36963379D+00, 0.14661925D+01, 0.24817080D+01,
     * 0.14661925D+01, 0.47958472D+01, 0.73896743D+01, 0.24817080D+01,
     * 0.73896743D+01, 0.95550142D+01,-0.38391314D+00,-0.90933690D+00,
     * 0.14005310D+00,-0.90933690D+00,-0.21259540D+01,-0.30637439D+00,
     * 0.14005310D+00,-0.30637444D+00,-0.18034030D+01, 0.36963379D+00,
     * 0.14661925D+01, 0.24817080D+01, 0.14661925D+01, 0.47958472D+01,
     * 0.73896743D+01, 0.24817080D+01, 0.73896743D+01, 0.95550142D+01,
     * 0.30758198D+01, 0.89218879D+01, 0.10277203D+02, 0.89218879D+01/
      DATA V44/
     * 0.29158897D+02, 0.37557021D+02, 0.10277203D+02, 0.37557021D+02,
     * 0.61397708D+02,-0.74699706D-01, 0.98113816D+00, 0.39580336D+01,
     * 0.98113816D+00, 0.34645783D+01, 0.10948161D+02, 0.39580335D+01,
     * 0.10948158D+02, 0.12550976D+02,-0.38391314D+00,-0.90933690D+00,
     * 0.14005310D+00,-0.90933690D+00,-0.21259540D+01,-0.30637439D+00,
     * 0.14005310D+00,-0.30637444D+00,-0.18034030D+01,-0.74699706D-01,
     * 0.98113816D+00, 0.39580336D+01, 0.98113816D+00, 0.34645783D+01,
     * 0.10948161D+02, 0.39580335D+01, 0.10948158D+02, 0.12550976D+02,
     * 0.88281925D+01, 0.24118457D+02, 0.23047172D+02, 0.24118457D+02,
     * 0.76873275D+02, 0.90027240D+02, 0.23047172D+02, 0.90027288D+02,
     * 0.16058328D+03/
      DATA XLTEST/1.0D6/
C
      END
      BLOCK DATA
C     ******************************************************
C     *                                                    *
C     *    BLOCK DATA 4                                    *
C     *                                                    *
C     ******************************************************
C
C     PRESET VALUES FOR NEW COMMON BLOCKS APRIL, 1978
C
      IMPLICIT REAL*8(A-H,O-Z)
      INTEGER*2 KP
      REAL*4 TC
C
      COMMON/DRGCOM/ ER(3),HUBCDA(3),HUBCP(3),UJD0,HUBF(3),HUBM(3),IDRAG
C
      COMMON/MAGCOM/ COILS(3)
C
      COMMON/ORDRAG/ ADT(6),CM(6),GL0,RC,RCM,RL1,RL1MAG,
     *               RL2,RL2MAG,XLPS,YLPS,UC(2),WC(2)
C
      COMMON/ORJACC/ IT,KP(21,8),TC(20)
C
C     PRESET VALUES FOR COMMON/DRGCOM/
C
      DATA ER/0.0D0,0.0D0,7.29211508D-5/
C
      DATA HUBCDA/3*1.0D0/
C
      DATA HUBCP/3*0.0D0/
C
      DATA IDRAG/1/
C
C     PRESET VALUES FOR COMMON/MAGCOM/
C
      DATA COILS/3*0.0D0/
C
C     PRESET VALUES FOR COMMON/ORDRAG/
C
C     THERMAL DIFFUSION COEFFICIENTS
C
      DATA ADT/2*0.0D0,-0.38D0,3*0.0D0/
C
C     MASSES OF ATMOSPHERIC CONSTITUENTS GM/MOLE
C
      DATA CM/28.0134D0,39.948D0,4.0026D0,31.9988D0,15.9994D0,1.00797D0/
C
C     MEAN SURFACE GRAVITY M/SEC**2
C
      DATA GL0/9.80665D0/
C
C
C     UNIVERSAL GAS CONSTANT ERGS/DEGREE KELVIN/MOLE
      DATA RC/8.31432D0/
C
C     AVERAGE EARTH RADIUS IN KM
C
      DATA RCM/6356.766D0/
C
C     INITIAL APPROXIMATIONS TO RL1,RL2,XLPS,YLPS
C
      DATA RL1,RL2,XLPS,YLPS/166.0D0,61.0D0,99.0D0,28.0D0/
C
C     PRESET VALUES FOR COMMON/ORJACC/
C
C      MODIFIED JULIAN DATE OF FIRST TIME ON JACCHIA-ROBERTS FILE
C
      DATA IT/10300/
C
C     MODIFIED JULIAN DATE OF 10300 CORESSPONDS TO 19 MARCH, 1969
C
      DATA KP/
     1 10,53,33,27,20,80,27,33,23,10,10,37,40,17,27,53,23,30,30,37,33,
     2 10,37,27,37,10,63,30,17,23,17,13,30,30,27,17,30,30,20,23,47,23,
     3 30,33,37,23,17,67,50,17,20,17,20,20,17,17,13,20,27,33,23,43,13,
     4 17,23,27,20,23,70,40,30,13,13,20,17,27,33,27,17,20,17,07,20,13,
     5 17,17,23,27,23,53,43,23,20,17,40,10,27,27,27,17,27,13,17,23,17,
     6 13,37,10,23,37,33,23,23,10,27,37,30,33,37,40,27,17,23,23,30,13,
     7 47,30,20,27,67,17,23,17,03,13,20,33,33,57,43,37,30,20,33,43,13,
     8 53,40,37,13,80,17,37,23,03,10,40,47,23,50,37,30,23,27,37,20,27/
C
      DATA TC/
     1 969.155E0,975.656E0,997.421E0,986.457E0,964.164E0,
     2 950.771E0,932.318E0,945.500E0,927.806E0,927.401E0,
     3 933.008E0,933.994E0,937.223E0,940.986E0,943.967E0,
     4 940.798E0,923.083E0,919.701E0,901.322E0,889.441E0/
C
C
      END
      BLOCK DATA
C     *****************************************************
C     *                                                    *
C     *  BLOCK DATA 5                                      *
C     *                                                    *
C     *****************************************************
C
C     PRESET VALUES FOR TWIST COMMON BLOCKS
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      REAL*4 D21,D22,D31,DI01,DI11,DI12,DI21,DI22,DI31,DA
C
      COMMON/DITCOM/D21(3,3,2),D22(3,3,2),D31(3,3,3,2),DI01(40)
     1             ,DI11(40,3),DI12(40,3),DI21(40,3,3),DI22(40,3,3)
     2             ,DI31(40,3,3,3),DA(40,3)
C
C
      REAL*4 VI11(40),VI12(40),VI211(80),VI212(80),VI213(80),VI214(40)
      REAL*4 VI221(80),VI222(80),VI223(80),VI224(40),VI311(80),VI312(80)
      REAL*4 VI313(80),VI314(80),VI315(80),VI316(80),VI317(80),VI318(80)
      REAL*4 VI319(80),VI31A(80),VI31B(80),VI31C(80),VI31D(40)
      REAL*4 VA(40)
C
      EQUIVALENCE (DI11(1,3),VI11(1)),(DI12(1,3),VI12(1))
      EQUIVALENCE (DI21(1,3,1),VI211(1)),(DI21(1,2,2),VI212(1))
      EQUIVALENCE (DI21(1,1,3),VI213(1)),(DI21(1,3,3),VI214(1))
      EQUIVALENCE (DI22(1,3,1),VI221(1)),(DI22(1,2,2),VI222(1))
      EQUIVALENCE (DI22(1,1,3),VI223(1)),(DI22(1,3,3),VI224(1))
C
      EQUIVALENCE (DI31(1,3,1,1),VI311(1)),(DI31(1,2,2,1),VI312(1))
      EQUIVALENCE (DI31(1,1,3,1),VI313(1)),(DI31(1,3,3,1),VI314(1))
      EQUIVALENCE (DI31(1,2,1,2),VI315(1)),(DI31(1,1,2,2),VI316(1))
      EQUIVALENCE (DI31(1,3,2,2),VI317(1)),(DI31(1,2,3,2),VI318(1))
      EQUIVALENCE (DI31(1,1,1,3),VI319(1)),(DI31(1,3,1,3),VI31A(1))
      EQUIVALENCE (DI31(1,2,2,3),VI31B(1)),(DI31(1,1,3,3),VI31C(1))
      EQUIVALENCE (DI31(1,3,3,3),VI31D(1))
      EQUIVALENCE (DA(1,3),VA(1))
C
C
      DATA D21/
     * 4.85714E-01, 9.53674E-07, 1.90735E-06, 9.53674E-07, 3.58768E-01,
     * 1.81198E-05, 1.90735E-06, 1.81198E-05, 2.65798E-01, 4.85714E-01,
     * 9.53674E-07, 1.90735E-06, 9.53674E-07, 3.58768E-01, 1.81198E-05,
     * 1.90735E-06, 1.81198E-05, 2.65798E-01/
C
      DATA D22/
     * 1.14285E 00, 1.82704E 00, 7.42520E 00, 1.82704E 00, 8.33423E 00,
     * 2.48789E 01, 7.42520E 00, 2.48789E 01, 1.36813E 02, 1.14285E 00,
     * 1.82704E 00, 7.42520E 00, 1.82704E 00, 8.33423E 00, 2.48789E 01,
     * 7.42520E 00, 2.48789E 01, 1.36813E 02/
C
      DATA D31/
     * 9.03708E-01,-5.16701E-03,-3.20587E-02, 1.95192E 00, 1.16498E 00,
     *-3.90137E-01, 7.30737E 00, 6.13013E 00, 2.05566E 00, 1.95187E 00,
     * 1.16522E 00,-3.92090E-01, 6.72778E 00, 2.30103E 00, 9.52148E-01,
     * 2.52354E 01, 1.90029E 01, 8.94141E 00, 7.30811E 00, 6.13623E 00,
     * 2.05249E 00, 2.52236E 01, 1.86279E 01, 9.25391E 00, 1.28586E 02,
     * 9.52539E 01, 6.83555E 01, 9.03708E-01,-5.16701E-03,-3.20587E-02,
     * 1.95192E 00, 1.16498E 00,-3.90137E-01, 7.30737E 00, 6.13013E 00,
     * 2.05566E 00, 1.95187E 00, 1.16522E 00,-3.92090E-01, 6.72778E 00,
     * 2.30103E 00, 9.52148E-01, 2.52354E 01, 1.90029E 01, 8.94141E 00,
     * 7.30811E 00, 6.13623E 00, 2.05249E 00, 2.52236E 01, 1.86279E 01,
     * 9.25391E 00, 1.28586E 02, 9.52539E 01, 6.83555E 01/
C
      DATA DI01/
     * 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02,
     * 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02,
     * 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02,
     * 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02,
     * 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02,
     * 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02,
     * 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02,
     * 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02, 5.00000E-02/
C
      DATA DI11/
     * 4.83541E-03, 1.38646E-02, 2.19687E-02, 2.91978E-02, 3.56020E-02,
     * 4.12312E-02, 4.61354E-02, 5.03645E-02, 5.39687E-02, 5.69980E-02,
     * 5.95020E-02, 6.15310E-02, 6.31352E-02, 6.43650E-02, 6.52684E-02,
     * 6.58978E-02, 6.63022E-02, 6.65317E-02, 6.66354E-02, 6.66640E-02,
     * 4.83541E-03, 1.38646E-02, 2.19687E-02, 2.91978E-02, 3.56020E-02,
     * 4.12312E-02, 4.61354E-02, 5.03645E-02, 5.39687E-02, 5.69980E-02,
     * 5.95020E-02, 6.15310E-02, 6.31352E-02, 6.43650E-02, 6.52684E-02,
     * 6.58978E-02, 6.63022E-02, 6.65317E-02, 6.66354E-02, 6.66640E-02,
     *-3.76881E-02,-9.39053E-02,-1.24975E-01,-1.35397E-01,-1.29312E-01,
     *-1.10502E-01,-8.23886E-02,-4.80363E-02,-1.01475E-02, 2.89329E-02,
     * 6.72193E-02, 1.03085E-01, 1.35254E-01, 1.62843E-01, 1.85283E-01,
     * 2.02382E-01, 2.14317E-01, 2.21630E-01, 2.25174E-01, 2.26232E-01,
     *-3.76881E-02,-9.39053E-02,-1.24975E-01,-1.35397E-01,-1.29312E-01,
     *-1.10502E-01,-8.23886E-02,-4.80363E-02,-1.01475E-02, 2.89329E-02,
     * 6.72193E-02, 1.03085E-01, 1.35254E-01, 1.62843E-01, 1.85283E-01,
     * 2.02382E-01, 2.14317E-01, 2.21630E-01, 2.25174E-01, 2.26232E-01,
     * 40*0.D0 /
C
      DATA VI11/
     * 1.22571E-01, 2.50973E-01, 2.50516E-01, 1.73419E-01, 6.10014E-02,
     *-5.52310E-02,-1.52503E-01,-2.15693E-01,-2.36236E-01,-2.11035E-01,
     *-1.41399E-01,-3.19356E-02, 1.10532E-01, 2.77972E-01, 4.62520E-01,
     * 6.57056E-01, 8.56502E-01, 1.05970E 00, 1.26913E 00, 1.49229E 00,
     * 1.22571E-01, 2.50973E-01, 2.50516E-01, 1.73419E-01, 6.10014E-02,
     *-5.52310E-02,-1.52503E-01,-2.15693E-01,-2.36236E-01,-2.11035E-01,
     *-1.41399E-01,-3.19356E-02, 1.10532E-01, 2.77972E-01, 4.62520E-01,
     * 6.57056E-01, 8.56502E-01, 1.05970E 00, 1.26913E 00, 1.49229E 00/
C
      DATA DI12/
     * 1.87422E-03, 5.61327E-03, 9.32420E-03, 1.29883E-02, 1.65867E-02,
     * 2.01007E-02, 2.35116E-02, 2.68008E-02, 2.99492E-02, 3.29382E-02,
     * 3.57492E-02, 3.83632E-02, 4.07617E-02, 4.29257E-02, 4.48366E-02,
     * 4.64758E-02, 4.78241E-02, 4.88632E-02, 4.95742E-02, 4.99381E-02,
     * 1.87422E-03, 5.61327E-03, 9.32420E-03, 1.29883E-02, 1.65867E-02,
     * 2.01007E-02, 2.35116E-02, 2.68008E-02, 2.99492E-02, 3.29382E-02,
     * 3.57492E-02, 3.83632E-02, 4.07617E-02, 4.29257E-02, 4.48366E-02,
     * 4.64758E-02, 4.78241E-02, 4.88632E-02, 4.95742E-02, 4.99381E-02,
     *-4.08741E-03,-1.20930E-02,-1.95956E-02,-2.62748E-02,-3.18324E-02,
     *-3.60020E-02,-3.85571E-02,-3.93210E-02,-3.81748E-02,-3.50671E-02,
     *-3.00223E-02,-2.31510E-02,-1.46564E-02,-4.84610E-03, 5.86092E-03,
     * 1.69242E-02, 2.76732E-02, 3.72999E-02, 4.48479E-02, 4.91984E-02,
     *-4.08741E-03,-1.20930E-02,-1.95956E-02,-2.62748E-02,-3.18324E-02,
     *-3.60020E-02,-3.85571E-02,-3.93210E-02,-3.81748E-02,-3.50671E-02,
     *-3.00223E-02,-2.31510E-02,-1.46564E-02,-4.84610E-03, 5.86092E-03,
     * 1.69242E-02, 2.76732E-02, 3.72999E-02, 4.48479E-02, 4.91984E-02,
     * 40*0.D0 /
C
      DATA VI12/
     * 5.09549E-03, 1.47511E-02, 2.28459E-02, 2.84886E-02, 3.10038E-02,
     * 3.00019E-02, 2.54342E-02, 1.76256E-02, 7.28416E-03,-4.52155E-03,
     *-1.64155E-02,-2.68113E-02,-3.40483E-02,-3.65785E-02,-3.32034E-02,
     *-2.33716E-02,-7.53576E-03, 1.24237E-02, 3.27048E-02, 4.70153E-02,
     * 5.09549E-03, 1.47511E-02, 2.28459E-02, 2.84886E-02, 3.10038E-02,
     * 3.00019E-02, 2.54342E-02, 1.76256E-02, 7.28416E-03,-4.52155E-03,
     *-1.64155E-02,-2.68113E-02,-3.40483E-02,-3.65785E-02,-3.32034E-02,
     *-2.33716E-02,-7.53576E-03, 1.24237E-02, 3.27048E-02, 4.70153E-02/
C
      DATA DI21/
     * 6.18306E-04, 3.96660E-03, 9.75025E-03, 1.71276E-02, 2.54103E-02,
     * 3.40463E-02, 4.26040E-02, 5.07572E-02, 5.82708E-02, 6.49877E-02,
     * 7.08185E-02, 7.57270E-02, 7.97250E-02, 8.28578E-02, 8.52007E-02,
     * 8.68501E-02, 8.79191E-02, 8.85273E-02, 8.88060E-02, 8.88796E-02,
     * 6.18306E-04, 3.96660E-03, 9.75025E-03, 1.71276E-02, 2.54103E-02,
     * 3.40463E-02, 4.26040E-02, 5.07572E-02, 5.82708E-02, 6.49877E-02,
     * 7.08185E-02, 7.57270E-02, 7.97250E-02, 8.28578E-02, 8.52007E-02,
     * 8.68501E-02, 8.79191E-02, 8.85273E-02, 8.88060E-02, 8.88796E-02,
     *-4.75948E-03,-2.66500E-02,-5.51660E-02,-7.90830E-02,-9.19446E-02,
     *-9.09123E-02,-7.57799E-02,-4.81487E-02,-1.07380E-02, 3.31597E-02,
     * 8.01326E-02, 1.26956E-01, 1.70862E-01, 2.09666E-01, 2.41883E-01,
     * 2.66739E-01, 2.84198E-01, 2.94884E-01, 3.00103E-01, 3.01634E-01,
     *-4.75948E-03,-2.66500E-02,-5.51660E-02,-7.90830E-02,-9.19446E-02,
     *-9.09123E-02,-7.57799E-02,-4.81487E-02,-1.07380E-02, 3.31597E-02,
     * 8.01326E-02, 1.26956E-01, 1.70862E-01, 2.09666E-01, 2.41883E-01,
     * 2.66739E-01, 2.84198E-01, 2.94884E-01, 3.00103E-01, 3.01634E-01,
     * 280*0.D0 /
C
      DATA VI211/
     * 1.52183E-02, 7.03568E-02, 1.09468E-01, 1.00120E-01, 4.22415E-02,
     *-4.65087E-02,-1.41345E-01,-2.17547E-01,-2.54974E-01,-2.40345E-01,
     *-1.67939E-01,-3.89158E-02, 1.39925E-01, 3.58190E-01, 6.03988E-01,
     * 8.66095E-01, 1.13606E 00, 1.41014E 00, 1.69129E 00, 1.98956E 00,
     * 1.52183E-02, 7.03568E-02, 1.09468E-01, 1.00120E-01, 4.22415E-02,
     *-4.65087E-02,-1.41345E-01,-2.17547E-01,-2.54974E-01,-2.40345E-01,
     *-1.67939E-01,-3.89158E-02, 1.39925E-01, 3.58190E-01, 6.03988E-01,
     * 8.66095E-01, 1.13606E 00, 1.41014E 00, 1.69129E 00, 1.98956E 00,
     *-4.75948E-03,-2.66500E-02,-5.51660E-02,-7.90830E-02,-9.19446E-02,
     *-9.09123E-02,-7.57799E-02,-4.81487E-02,-1.07380E-02, 3.31597E-02,
     * 8.01326E-02, 1.26956E-01, 1.70862E-01, 2.09666E-01, 2.41883E-01,
     * 2.66739E-01, 2.84198E-01, 2.94884E-01, 3.00103E-01, 3.01634E-01,
     *-4.75948E-03,-2.66500E-02,-5.51660E-02,-7.90830E-02,-9.19446E-02,
     *-9.09123E-02,-7.57799E-02,-4.81487E-02,-1.07380E-02, 3.31597E-02,
     * 8.01326E-02, 1.26956E-01, 1.70862E-01, 2.09666E-01, 2.41883E-01,
     * 2.66739E-01, 2.84198E-01, 2.94884E-01, 3.00103E-01, 3.01634E-01/
C
      DATA VI212/
     * 3.66689E-02, 1.79433E-01, 3.13050E-01, 3.66657E-01, 3.34722E-01,
     * 2.45176E-01, 1.37440E-01, 4.83637E-02, 4.58622E-03, 1.92623E-02,
     * 9.26056E-02, 2.14440E-01, 3.67445E-01, 5.31441E-01, 6.86706E-01,
     * 8.19117E-01, 9.18591E-01, 9.82047E-01, 1.01357E 00, 1.02313E 00,
     * 3.66689E-02, 1.79433E-01, 3.13050E-01, 3.66657E-01, 3.34722E-01,
     * 2.45176E-01, 1.37440E-01, 4.83637E-02, 4.58622E-03, 1.92623E-02,
     * 9.26056E-02, 2.14440E-01, 3.67445E-01, 5.31441E-01, 6.86706E-01,
     * 8.19117E-01, 9.18591E-01, 9.82047E-01, 1.01357E 00, 1.02313E 00,
     *-1.17388E-01,-4.75248E-01,-6.24630E-01,-4.69375E-01,-1.60355E-01,
     * 1.17682E-01, 2.46990E-01, 2.04640E-01, 4.82340E-02,-1.18844E-01,
     *-1.83887E-01,-5.82304E-02, 3.07200E-01, 9.13247E-01, 1.72148E 00,
     * 2.66534E 00, 3.68022E 00, 4.70033E 00, 5.72189E 00, 6.75804E 00,
     *-1.17388E-01,-4.75248E-01,-6.24630E-01,-4.69375E-01,-1.60355E-01,
     * 1.17682E-01, 2.46990E-01, 2.04640E-01, 4.82340E-02,-1.18844E-01,
     *-1.83887E-01,-5.82304E-02, 3.07200E-01, 9.13247E-01, 1.72148E 00,
     * 2.66534E 00, 3.68022E 00, 4.70033E 00, 5.72189E 00, 6.75804E 00/
C
      DATA VI213/
     * 1.52183E-02, 7.03568E-02, 1.09468E-01, 1.00120E-01, 4.22415E-02,
     *-4.65087E-02,-1.41345E-01,-2.17547E-01,-2.54974E-01,-2.40345E-01,
     *-1.67939E-01,-3.89158E-02, 1.39925E-01, 3.58190E-01, 6.03988E-01,
     * 8.66095E-01, 1.13606E 00, 1.41014E 00, 1.69129E 00, 1.98956E 00,
     * 1.52183E-02, 7.03568E-02, 1.09468E-01, 1.00120E-01, 4.22415E-02,
     *-4.65087E-02,-1.41345E-01,-2.17547E-01,-2.54974E-01,-2.40345E-01,
     *-1.67939E-01,-3.89158E-02, 1.39925E-01, 3.58190E-01, 6.03988E-01,
     * 8.66095E-01, 1.13606E 00, 1.41014E 00, 1.69129E 00, 1.98956E 00,
     *-1.17388E-01,-4.75248E-01,-6.24630E-01,-4.69375E-01,-1.60355E-01,
     * 1.17682E-01, 2.46990E-01, 2.04640E-01, 4.82340E-02,-1.18844E-01,
     *-1.83887E-01,-5.82304E-02, 3.07200E-01, 9.13247E-01, 1.72148E 00,
     * 2.66534E 00, 3.68022E 00, 4.70033E 00, 5.72189E 00, 6.75804E 00,
     *-1.17388E-01,-4.75248E-01,-6.24630E-01,-4.69375E-01,-1.60355E-01,
     * 1.17682E-01, 2.46990E-01, 2.04640E-01, 4.82340E-02,-1.18844E-01,
     *-1.83887E-01,-5.82304E-02, 3.07200E-01, 9.13247E-01, 1.72148E 00,
     * 2.66534E 00, 3.68022E 00, 4.70033E 00, 5.72189E 00, 6.75804E 00/
C
      DATA VI214/
     * 3.76406E-01, 1.26494E 00, 1.25904E 00, 6.18608E-01, 9.80043E-02,
     * 8.09393E-02, 4.75834E-01, 9.32716E-01, 1.11491E 00, 8.91863E-01,
     * 4.12585E-01, 4.50993E-02, 2.76222E-01, 1.60406E 00, 4.33547E 00,
     * 8.68923E 00, 1.47553E 01, 2.25494E 01, 3.24204E 01, 4.46970E 01,
     * 3.76406E-01, 1.26494E 00, 1.25904E 00, 6.18608E-01, 9.80043E-02,
     * 8.09393E-02, 4.75834E-01, 9.32716E-01, 1.11491E 00, 8.91863E-01,
     * 4.12585E-01, 4.50993E-02, 2.76222E-01, 1.60406E 00, 4.33547E 00,
     * 8.68923E 00, 1.47553E 01, 2.25494E 01, 3.24204E 01, 4.46970E 01/
C
      DATA DI22/
     * 2.40630E-04, 1.60969E-03, 4.14393E-03, 7.62583E-03, 1.18461E-02,
     * 1.66059E-02, 2.17199E-02, 2.70171E-02, 3.23434E-02, 3.75615E-02,
     * 4.25532E-02, 4.72184E-02, 5.14755E-02, 5.52617E-02, 5.85312E-02,
     * 6.12544E-02, 6.34178E-02, 6.50188E-02, 6.60682E-02, 6.65827E-02,
     * 2.40630E-04, 1.60969E-03, 4.14393E-03, 7.62583E-03, 1.18461E-02,
     * 1.66059E-02, 2.17199E-02, 2.70171E-02, 3.23434E-02, 3.75615E-02,
     * 4.25532E-02, 4.72184E-02, 5.14755E-02, 5.52617E-02, 5.85312E-02,
     * 6.12544E-02, 6.34178E-02, 6.50188E-02, 6.60682E-02, 6.65827E-02,
     *-5.24470E-04,-3.46476E-03,-8.70107E-03,-1.54134E-02,-2.27152E-02,
     *-2.97180E-02,-3.55899E-02,-3.96066E-02,-4.11933E-02,-3.99561E-02,
     *-3.57053E-02,-2.84668E-02,-1.84850E-02,-6.22016E-03, 7.66450E-03,
     * 2.23147E-02, 3.67023E-02, 4.96353E-02, 5.97684E-02, 6.55983E-02,
     *-5.24470E-04,-3.46476E-03,-8.70107E-03,-1.54134E-02,-2.27152E-02,
     *-2.97180E-02,-3.55899E-02,-3.96066E-02,-4.11933E-02,-3.99561E-02,
     *-3.57053E-02,-2.84668E-02,-1.84850E-02,-6.22016E-03, 7.66450E-03,
     * 2.23147E-02, 3.67023E-02, 4.96353E-02, 5.97684E-02, 6.55983E-02,
     * 280*0.D0 /
C
      DATA VI221/
     * 6.53133E-04, 4.21952E-03, 1.01275E-02, 1.66836E-02, 2.20841E-02,
     * 2.47158E-02, 2.34208E-02, 1.76941E-02, 7.79992E-03,-5.20980E-03,
     *-1.95782E-02,-3.30217E-02,-4.30049E-02,-4.70880E-02,-4.33319E-02,
     *-3.07900E-02,-9.98449E-03, 1.65373E-02, 4.35872E-02, 6.26879E-02,
     * 6.53133E-04, 4.21952E-03, 1.01275E-02, 1.66836E-02, 2.20841E-02,
     * 2.47158E-02, 2.34208E-02, 1.76941E-02, 7.79992E-03,-5.20980E-03,
     *-1.95782E-02,-3.30217E-02,-4.30049E-02,-4.70880E-02,-4.33319E-02,
     *-3.07900E-02,-9.98449E-03, 1.65373E-02, 4.35872E-02, 6.26879E-02,
     *-1.85175E-03,-1.08082E-02,-2.34287E-02,-3.51802E-02,-4.28195E-02,
     *-4.42846E-02,-3.85645E-02,-2.55514E-02,-5.87839E-03, 1.92482E-02,
     * 4.82280E-02, 7.92354E-02, 1.10381E-01, 1.39890E-01, 1.66207E-01,
     * 1.88153E-01, 2.05012E-01, 2.16596E-01, 2.23261E-01, 2.25948E-01,
     *-1.85175E-03,-1.08082E-02,-2.34287E-02,-3.51802E-02,-4.28195E-02,
     *-4.42846E-02,-3.85645E-02,-2.55514E-02,-5.87839E-03, 1.92482E-02,
     * 4.82280E-02, 7.92354E-02, 1.10381E-01, 1.39890E-01, 1.66207E-01,
     * 1.88153E-01, 2.05012E-01, 2.16596E-01, 2.23261E-01, 2.25948E-01/
C
      DATA VI222/
     * 4.03620E-03, 2.32697E-02, 4.92175E-02, 7.11661E-02, 8.22199E-02,
     * 7.94299E-02, 6.34450E-02, 3.77878E-02, 7.88492E-03,-2.00264E-02,
     *-3.99876E-02,-4.72879E-02,-3.91917E-02,-1.53525E-02, 2.20785E-02,
     * 6.87629E-02, 1.18772E-01, 1.65420E-01, 2.01971E-01, 2.22611E-01,
     * 4.03620E-03, 2.32697E-02, 4.92175E-02, 7.11661E-02, 8.22199E-02,
     * 7.94299E-02, 6.34450E-02, 3.77878E-02, 7.88492E-03,-2.00264E-02,
     *-3.99876E-02,-4.72879E-02,-3.91917E-02,-1.53525E-02, 2.20785E-02,
     * 6.87629E-02, 1.18772E-01, 1.65420E-01, 2.01971E-01, 2.22611E-01,
     *-5.02678E-03,-2.83509E-02,-5.73381E-02,-7.71571E-02,-8.01674E-02,
     *-6.64189E-02,-4.22423E-02,-1.74968E-02,-2.21002E-03,-3.40474E-03,
     *-2.27850E-02,-5.57975E-02,-9.23698E-02,-1.19128E-01,-1.22844E-01,
     *-9.42745E-02,-3.20356E-02, 5.52095E-02, 1.47443E-01, 2.12873E-01,
     *-5.02678E-03,-2.83509E-02,-5.73381E-02,-7.71571E-02,-8.01674E-02,
     *-6.64189E-02,-4.22423E-02,-1.74968E-02,-2.21002E-03,-3.40474E-03,
     *-2.27850E-02,-5.57975E-02,-9.23698E-02,-1.19128E-01,-1.22844E-01,
     *-9.42745E-02,-3.20356E-02, 5.52095E-02, 1.47443E-01, 2.12873E-01/
C
      DATA VI223/
     * 5.91860E-03, 2.85073E-02, 4.64263E-02, 4.44340E-02, 1.95291E-02,
     *-2.28394E-02,-7.21735E-02,-1.15844E-01,-1.41489E-01,-1.38789E-01,
     *-1.00692E-01,-2.39537E-02, 9.07007E-02, 2.39257E-01, 4.15326E-01,
     * 6.11210E-01, 8.19727E-01, 1.03598E 00, 1.25849E 00, 1.49040E 00,
     * 5.91860E-03, 2.85073E-02, 4.64263E-02, 4.44340E-02, 1.95291E-02,
     *-2.28394E-02,-7.21735E-02,-1.15844E-01,-1.41489E-01,-1.38789E-01,
     *-1.00692E-01,-2.39537E-02, 9.07007E-02, 2.39257E-01, 4.15326E-01,
     * 6.11210E-01, 8.19727E-01, 1.03598E 00, 1.25849E 00, 1.49040E 00,
     *-1.29014E-02,-6.13972E-02,-9.76185E-02,-9.00890E-02,-3.78603E-02,
     * 4.03934E-02, 1.17835E-01, 1.69621E-01, 1.80373E-01, 1.48347E-01,
     * 8.57998E-02, 1.64160E-02,-2.99996E-02,-2.39218E-02, 5.76624E-02,
     * 2.25994E-01, 4.77575E-01, 7.93430E-01, 1.14007E 00, 1.46896E 00,
     *-1.29014E-02,-6.13972E-02,-9.76185E-02,-9.00890E-02,-3.78603E-02,
     * 4.03934E-02, 1.17835E-01, 1.69621E-01, 1.80373E-01, 1.48347E-01,
     * 8.57998E-02, 1.64160E-02,-2.99996E-02,-2.39218E-02, 5.76624E-02,
     * 2.25994E-01, 4.77575E-01, 7.93430E-01, 1.14007E 00, 1.46896E 00/
C
      DATA VI224/
     * 1.60695E-02, 7.48531E-02, 1.13917E-01, 9.81058E-02, 3.76673E-02,
     *-3.26277E-02,-7.67181E-02,-7.53769E-02,-3.44577E-02, 1.81164E-02,
     * 4.46522E-02, 1.51574E-02,-7.64238E-02,-2.03346E-01,-3.04976E-01,
     *-3.03071E-01,-1.23003E-01, 2.70197E-01, 8.37386E-01, 1.40390E 00,
     * 1.60695E-02, 7.48531E-02, 1.13917E-01, 9.81058E-02, 3.76673E-02,
     *-3.26277E-02,-7.67181E-02,-7.53769E-02,-3.44577E-02, 1.81164E-02,
     * 4.46522E-02, 1.51574E-02,-7.64238E-02,-2.03346E-01,-3.04976E-01,
     *-3.03071E-01,-1.23003E-01, 2.70197E-01, 8.37386E-01, 1.40390E 00/
C
      DATA DI31/
     * 3.45833E-05, 4.74736E-04, 1.85961E-03, 4.49727E-03, 8.48019E-03,
     * 1.37372E-02, 2.00809E-02, 2.72489E-02, 3.49398E-02, 4.28423E-02,
     * 5.06585E-02, 5.81217E-02, 6.50081E-02, 7.11441E-02, 7.64089E-02,
     * 8.07328E-02, 8.40955E-02, 8.65172E-02, 8.80498E-02, 8.87741E-02,
     * 3.45833E-05, 4.74736E-04, 1.85961E-03, 4.49727E-03, 8.48019E-03,
     * 1.37372E-02, 2.00809E-02, 2.72489E-02, 3.49398E-02, 4.28423E-02,
     * 5.06585E-02, 5.81217E-02, 6.50081E-02, 7.11441E-02, 7.64089E-02,
     * 8.07328E-02, 8.40955E-02, 8.65172E-02, 8.80498E-02, 8.87741E-02,
     *-7.53467E-05,-1.02101E-03,-3.90127E-03,-9.08213E-03,-1.62474E-02,
     *-2.45639E-02,-3.28776E-02,-3.99144E-02,-4.44643E-02,-4.55359E-02,
     *-4.24691E-02,-3.50057E-02,-2.33162E-02,-7.98517E-03, 1.00242E-02,
     * 2.94254E-02, 4.86755E-02, 6.60413E-02, 7.96617E-02, 8.74596E-02,
     *-7.53467E-05,-1.02101E-03,-3.90127E-03,-9.08213E-03,-1.62474E-02,
     *-2.45639E-02,-3.28776E-02,-3.99144E-02,-4.44643E-02,-4.55359E-02,
     *-4.24691E-02,-3.50057E-02,-2.33162E-02,-7.98517E-03, 1.00242E-02,
     * 2.94254E-02, 4.86755E-02, 6.60413E-02, 7.96617E-02, 8.74596E-02,
     * 1000*0.D0 /
C
      DATA VI311/
     * 9.37647E-05, 1.24158E-03, 4.53353E-03, 9.81409E-03, 1.57677E-02,
     * 2.03887E-02, 2.15841E-02, 1.77715E-02, 8.35460E-03,-6.00320E-03,
     *-2.33526E-02,-4.06733E-02,-5.43206E-02,-6.06136E-02,-5.65525E-02,
     *-4.05707E-02,-1.32148E-02, 2.20162E-02, 5.80898E-02, 8.35869E-02,
     * 9.37647E-05, 1.24158E-03, 4.53353E-03, 9.81409E-03, 1.57677E-02,
     * 2.03887E-02, 2.15841E-02, 1.77715E-02, 8.35460E-03,-6.00320E-03,
     *-2.33526E-02,-4.06733E-02,-5.43206E-02,-6.06136E-02,-5.65525E-02,
     *-4.05707E-02,-1.32148E-02, 2.20162E-02, 5.80898E-02, 8.35869E-02,
     *-2.64142E-04,-3.16442E-03,-1.04586E-02,-2.06594E-02,-3.05377E-02,
     *-3.65004E-02,-3.55124E-02,-2.56300E-02,-6.22034E-03, 2.20689E-02,
     * 5.75104E-02, 9.76065E-02, 1.39458E-01, 1.80131E-01, 2.17007E-01,
     * 2.48005E-01, 2.71892E-01, 2.88238E-01, 2.97598E-01, 3.01344E-01,
     *-2.64142E-04,-3.16442E-03,-1.04586E-02,-2.06594E-02,-3.05377E-02,
     *-3.65004E-02,-3.55124E-02,-2.56300E-02,-6.22034E-03, 2.20689E-02,
     * 5.75104E-02, 9.76065E-02, 1.39458E-01, 1.80131E-01, 2.17007E-01,
     * 2.48005E-01, 2.71892E-01, 2.88238E-01, 2.97598E-01, 3.01344E-01/
C
      DATA VI312/
     * 5.75508E-04, 6.80716E-03, 2.19515E-02, 4.17556E-02, 5.85875E-02,
     * 6.54149E-02, 5.83775E-02, 3.78737E-02, 8.34394E-03,-2.29435E-02,
     *-4.76413E-02,-5.81925E-02,-4.94732E-02,-1.97129E-02, 2.88577E-02,
     * 9.07174E-02, 1.57532E-01, 2.20033E-01, 2.69194E-01, 2.96532E-01,
     * 5.75508E-04, 6.80716E-03, 2.19515E-02, 4.17556E-02, 5.85875E-02,
     * 6.54149E-02, 5.83775E-02, 3.78737E-02, 8.34394E-03,-2.29435E-02,
     *-4.76413E-02,-5.81925E-02,-4.94732E-02,-1.97129E-02, 2.88577E-02,
     * 9.07174E-02, 1.57532E-01, 2.20033E-01, 2.69194E-01, 2.96532E-01,
     *-7.16232E-04,-8.28107E-03,-2.55316E-02,-4.51941E-02,-5.70223E-02,
     *-5.45911E-02,-3.87766E-02,-1.74813E-02,-2.34169E-03,-3.91591E-03,
     *-2.71975E-02,-6.87402E-02,-1.16682E-01,-1.53285E-01,-1.60190E-01,
     *-1.24061E-01,-4.20049E-02, 7.40530E-02, 1.97200E-01, 2.84975E-01,
     *-7.16232E-04,-8.28107E-03,-2.55316E-02,-4.51941E-02,-5.70223E-02,
     *-5.45911E-02,-3.87766E-02,-1.74813E-02,-2.34169E-03,-3.91591E-03,
     *-2.71975E-02,-6.87402E-02,-1.16682E-01,-1.53285E-01,-1.60190E-01,
     *-1.24061E-01,-4.20049E-02, 7.40530E-02, 1.97200E-01, 2.84975E-01/
C
      DATA VI313/
     * 8.35587E-04, 8.25277E-03, 2.05201E-02, 2.57915E-02, 1.35533E-02,
     *-1.92552E-02,-6.69650E-02,-1.16929E-01,-1.52793E-01,-1.58121E-01,
     *-1.19607E-01,-2.92092E-02, 1.14835E-01, 3.08318E-01, 5.42327E-01,
     * 8.05689E-01, 1.08717E 00, 1.37845E 00, 1.67716E 00, 1.98725E 00,
     * 8.35587E-04, 8.25277E-03, 2.05201E-02, 2.57915E-02, 1.35533E-02,
     *-1.92552E-02,-6.69650E-02,-1.16929E-01,-1.52793E-01,-1.58121E-01,
     *-1.19607E-01,-2.92092E-02, 1.14835E-01, 3.08318E-01, 5.42327E-01,
     * 8.05689E-01, 1.08717E 00, 1.37845E 00, 1.67716E 00, 1.98725E 00,
     *-1.82065E-03,-1.77591E-02,-4.31084E-02,-5.22471E-02,-2.62606E-02,
     * 3.40373E-02, 1.09247E-01, 1.71073E-01, 1.94602E-01, 1.68856E-01,
     * 1.01822E-01, 2.00927E-02,-3.78609E-02,-3.09178E-02, 7.57304E-02,
     * 2.97810E-01, 6.32793E-01, 1.05505E 00, 1.52020E 00, 1.95632E 00,
     *-1.82065E-03,-1.77591E-02,-4.31084E-02,-5.22471E-02,-2.62606E-02,
     * 3.40373E-02, 1.09247E-01, 1.71073E-01, 1.94602E-01, 1.68856E-01,
     * 1.01822E-01, 2.00927E-02,-3.78609E-02,-3.09178E-02, 7.57304E-02,
     * 2.97810E-01, 6.32793E-01, 1.05505E 00, 1.52020E 00, 1.95632E 00/
C
      DATA VI314/
     * 2.26604E-03, 2.16177E-02, 5.02229E-02, 5.68012E-02, 2.60923E-02,
     *-2.74559E-02,-7.09628E-02,-7.57812E-02,-3.69109E-02, 2.08315E-02,
     * 5.31175E-02, 1.84468E-02,-9.72493E-02,-2.62086E-01,-3.99203E-01,
     *-3.99941E-01,-1.65189E-01, 3.59224E-01, 1.11368E 00, 1.87253E 00,
     * 2.26604E-03, 2.16177E-02, 5.02229E-02, 5.68012E-02, 2.60923E-02,
     *-2.74559E-02,-7.09628E-02,-7.57812E-02,-3.69109E-02, 2.08315E-02,
     * 5.31175E-02, 1.84468E-02,-9.72493E-02,-2.62086E-01,-3.99203E-01,
     *-3.99941E-01,-1.65189E-01, 3.59224E-01, 1.11368E 00, 1.87253E 00,
     *-2.64142E-04,-3.16442E-03,-1.04586E-02,-2.06594E-02,-3.05377E-02,
     *-3.65004E-02,-3.55124E-02,-2.56300E-02,-6.22034E-03, 2.20689E-02,
     * 5.75104E-02, 9.76046E-02, 1.39458E-01, 1.80130E-01, 2.16996E-01,
     * 2.48014E-01, 2.71883E-01, 2.88222E-01, 2.97604E-01, 3.01323E-01,
     *-2.64142E-04,-3.16442E-03,-1.04586E-02,-2.06594E-02,-3.05377E-02,
     *-3.65004E-02,-3.55124E-02,-2.56300E-02,-6.22034E-03, 2.20689E-02,
     * 5.75104E-02, 9.76046E-02, 1.39458E-01, 1.80130E-01, 2.16996E-01,
     * 2.48014E-01, 2.71883E-01, 2.88222E-01, 2.97604E-01, 3.01323E-01/
C
      DATA VI315/
     * 5.75508E-04, 6.80716E-03, 2.19515E-02, 4.17556E-02, 5.85875E-02,
     * 6.54149E-02, 5.83775E-02, 3.78737E-02, 8.34584E-03,-2.29416E-02,
     *-4.76451E-02,-5.81925E-02,-4.94460E-02,-1.97401E-02, 2.89156E-02,
     * 9.06594E-02, 1.57643E-01, 2.20061E-01, 2.69252E-01, 2.96578E-01,
     * 5.75508E-04, 6.80716E-03, 2.19515E-02, 4.17556E-02, 5.85875E-02,
     * 6.54149E-02, 5.83775E-02, 3.78737E-02, 8.34584E-03,-2.29416E-02,
     *-4.76451E-02,-5.81925E-02,-4.94460E-02,-1.97401E-02, 2.89156E-02,
     * 9.06594E-02, 1.57643E-01, 2.20061E-01, 2.69252E-01, 2.96578E-01,
     *-7.16232E-04,-8.28108E-03,-2.55316E-02,-4.51941E-02,-5.70222E-02,
     *-5.45911E-02,-3.87777E-02,-1.74829E-02,-2.33895E-03,-3.92354E-03,
     *-2.72025E-02,-6.87456E-02,-1.16691E-01,-1.53298E-01,-1.60266E-01,
     *-1.24109E-01,-4.21675E-02, 7.36583E-02, 1.96604E-01, 2.84339E-01,
     *-7.16232E-04,-8.28108E-03,-2.55316E-02,-4.51941E-02,-5.70222E-02,
     *-5.45911E-02,-3.87777E-02,-1.74829E-02,-2.33895E-03,-3.92354E-03,
     *-2.72025E-02,-6.87456E-02,-1.16691E-01,-1.53298E-01,-1.60266E-01,
     *-1.24109E-01,-4.21675E-02, 7.36583E-02, 1.96604E-01, 2.84339E-01/
C
      DATA VI316/
     * 2.01876E-03, 2.11339E-02, 5.89895E-02, 9.52924E-02, 1.10639E-01,
     * 9.79545E-02, 6.40443E-02, 2.55631E-02, 2.67196E-03, 1.29322E-02,
     * 6.67540E-02, 1.65118E-01, 3.00288E-01, 4.56761E-01, 6.16872E-01,
     * 7.62356E-01, 8.78498E-01, 9.60514E-01, 1.00570E 00, 1.02194E 00,
     * 2.01876E-03, 2.11339E-02, 5.89895E-02, 9.52924E-02, 1.10639E-01,
     * 9.79545E-02, 6.40443E-02, 2.55631E-02, 2.67196E-03, 1.29322E-02,
     * 6.67540E-02, 1.65118E-01, 3.00288E-01, 4.56761E-01, 6.16872E-01,
     * 7.62356E-01, 8.78498E-01, 9.60514E-01, 1.00570E 00, 1.02194E 00,
     *-4.39859E-03,-4.54726E-02,-1.23872E-01,-1.92759E-01,-2.12549E-01,
     *-1.75934E-01,-1.05675E-01,-3.80415E-02,-3.55136E-03,-1.32083E-02,
     *-5.44417E-02,-9.75509E-02,-1.04815E-01,-4.86822E-02, 8.42590E-02,
     * 2.79397E-01, 5.11290E-01, 7.31560E-01, 9.12759E-01, 1.00173E 00,
     *-4.39859E-03,-4.54726E-02,-1.23872E-01,-1.92759E-01,-2.12549E-01,
     *-1.75934E-01,-1.05675E-01,-3.80415E-02,-3.55136E-03,-1.32083E-02,
     *-5.44417E-02,-9.75509E-02,-1.04815E-01,-4.86822E-02, 8.42590E-02,
     * 2.79397E-01, 5.11290E-01, 7.31560E-01, 9.12759E-01, 1.00173E 00/
C
      DATA VI317/
     * 5.47451E-03, 5.53411E-02, 1.44204E-01, 2.08973E-01, 2.07469E-01,
     * 1.47608E-01, 7.09911E-02, 1.80796E-02, 9.14872E-04,-2.84213E-03,
     *-3.27048E-02,-1.17071E-01,-2.50847E-01,-3.88472E-01,-4.52350E-01,
     *-3.82364E-01,-1.33930E-01, 2.49915E-01, 6.80446E-01, 9.67501E-01,
     * 5.47451E-03, 5.53411E-02, 1.44204E-01, 2.08973E-01, 2.07469E-01,
     * 1.47608E-01, 7.09911E-02, 1.80796E-02, 9.14872E-04,-2.84213E-03,
     *-3.27048E-02,-1.17071E-01,-2.50847E-01,-3.88472E-01,-4.52350E-01,
     *-3.82364E-01,-1.33930E-01, 2.49915E-01, 6.80446E-01, 9.67501E-01,
     *-6.39170E-03,-5.52831E-02,-1.16371E-01,-1.20306E-01,-5.12877E-02,
     * 4.85207E-02, 1.16315E-01, 1.08973E-01, 2.77969E-02,-7.93154E-02,
     *-1.32044E-01,-4.42289E-02, 2.52154E-01, 7.84192E-01, 1.54128E 00,
     * 2.47487E 00, 3.51168E 00, 4.58779E 00, 5.65711E 00, 6.73587E 00,
     *-6.39170E-03,-5.52831E-02,-1.16371E-01,-1.20306E-01,-5.12877E-02,
     * 4.85207E-02, 1.16315E-01, 1.08973E-01, 2.77969E-02,-7.93154E-02,
     *-1.32044E-01,-4.42289E-02, 2.52154E-01, 7.84192E-01, 1.54128E 00,
     * 2.47487E 00, 3.51168E 00, 4.58779E 00, 5.65711E 00, 6.73587E 00/
C
      DATA VI318/
     * 1.39273E-02, 1.18991E-01, 2.44589E-01, 2.43902E-01, 9.94695E-02,
     *-8.59303E-02,-1.90389E-01,-1.60666E-01,-3.69651E-02, 8.35307E-02,
     * 1.12662E-01, 3.30380E-02,-7.71351E-02,-6.46074E-02, 2.22769E-01,
     * 9.29809E-01, 2.04609E 00, 3.56529E 00, 5.19812E 00, 6.74464E 00,
     * 1.39273E-02, 1.18991E-01, 2.44589E-01, 2.43902E-01, 9.94695E-02,
     *-8.59303E-02,-1.90389E-01,-1.60666E-01,-3.69651E-02, 8.35307E-02,
     * 1.12662E-01, 3.30380E-02,-7.71351E-02,-6.46074E-02, 2.22769E-01,
     * 9.29809E-01, 2.04609E 00, 3.56529E 00, 5.19812E 00, 6.74464E 00,
     *-1.73355E-02,-1.44904E-01,-2.85210E-01,-2.65581E-01,-9.90087E-02,
     * 6.95952E-02, 1.25198E-01, 7.38491E-02, 1.01588E-02, 1.32214E-02,
     * 6.07010E-02, 2.95124E-02,-2.09608E-01,-6.55809E-01,-1.10624E 00,
     *-1.17132E 00,-3.85066E-01, 1.41548E 00, 4.27956E 00, 7.10263E 00,
     *-1.73355E-02,-1.44904E-01,-2.85210E-01,-2.65581E-01,-9.90087E-02,
     * 6.95952E-02, 1.25198E-01, 7.38491E-02, 1.01588E-02, 1.32214E-02,
     * 6.07010E-02, 2.95124E-02,-2.09608E-01,-6.55809E-01,-1.10624E 00,
     *-1.17132E 00,-3.85066E-01, 1.41548E 00, 4.27956E 00, 7.10263E 00/
C
      DATA VI319/
     * 8.35587E-04, 8.25277E-03, 2.05201E-02, 2.57915E-02, 1.35536E-02,
     *-1.92549E-02,-6.69642E-02,-1.16928E-01,-1.52785E-01,-1.58122E-01,
     *-1.19589E-01,-2.91969E-02, 1.14855E-01, 3.08345E-01, 5.42359E-01,
     * 8.05811E-01, 1.08715E 00, 1.37867E 00, 1.67730E 00, 1.98741E 00,
     * 8.35587E-04, 8.25277E-03, 2.05201E-02, 2.57915E-02, 1.35536E-02,
     *-1.92549E-02,-6.69642E-02,-1.16928E-01,-1.52785E-01,-1.58122E-01,
     *-1.19589E-01,-2.91969E-02, 1.14855E-01, 3.08345E-01, 5.42359E-01,
     * 8.05811E-01, 1.08715E 00, 1.37867E 00, 1.67730E 00, 1.98741E 00,
     *-1.82065E-03,-1.77591E-02,-4.31084E-02,-5.22471E-02,-2.62596E-02,
     * 3.40363E-02, 1.09247E-01, 1.71073E-01, 1.94622E-01, 1.68866E-01,
     * 1.01836E-01, 2.01105E-02,-3.78364E-02,-3.08295E-02, 7.54002E-02,
     * 2.98365E-01, 6.34177E-01, 1.05583E 00, 1.52162E 00, 1.95844E 00,
     *-1.82065E-03,-1.77591E-02,-4.31084E-02,-5.22471E-02,-2.62596E-02,
     * 3.40363E-02, 1.09247E-01, 1.71073E-01, 1.94622E-01, 1.68866E-01,
     * 1.01836E-01, 2.01105E-02,-3.78364E-02,-3.08295E-02, 7.54002E-02,
     * 2.98365E-01, 6.34177E-01, 1.05583E 00, 1.52162E 00, 1.95844E 00/
C
      DATA VI31A/
     * 2.26604E-03, 2.16177E-02, 5.02229E-02, 5.68011E-02, 2.60932E-02,
     *-2.74549E-02,-7.09611E-02,-7.57786E-02,-3.69071E-02, 2.08521E-02,
     * 5.31093E-02, 1.84877E-02,-9.72254E-02,-2.62408E-01,-3.98814E-01,
     *-3.99795E-01,-1.66254E-01, 3.60309E-01, 1.11395E 00, 1.86876E 00,
     * 2.26604E-03, 2.16177E-02, 5.02229E-02, 5.68011E-02, 2.60932E-02,
     *-2.74549E-02,-7.09611E-02,-7.57786E-02,-3.69071E-02, 2.08521E-02,
     * 5.31093E-02, 1.84877E-02,-9.72254E-02,-2.62408E-01,-3.98814E-01,
     *-3.99795E-01,-1.66254E-01, 3.60309E-01, 1.11395E 00, 1.86876E 00,
     *-6.39170E-03,-5.52832E-02,-1.16371E-01,-1.20306E-01,-5.12915E-02,
     * 4.85145E-02, 1.16303E-01, 1.08958E-01, 2.77644E-02,-7.94894E-02,
     *-1.32202E-01,-4.44280E-02, 2.51840E-01, 7.83818E-01, 1.53979E 00,
     * 2.47506E 00, 3.51071E 00, 4.58447E 00, 5.65485E 00, 6.73329E 00,
     *-6.39170E-03,-5.52832E-02,-1.16371E-01,-1.20306E-01,-5.12915E-02,
     * 4.85145E-02, 1.16303E-01, 1.08958E-01, 2.77644E-02,-7.94894E-02,
     *-1.32202E-01,-4.44280E-02, 2.51840E-01, 7.83818E-01, 1.53979E 00,
     * 2.47506E 00, 3.51071E 00, 4.58447E 00, 5.65485E 00, 6.73329E 00/
C
      DATA VI31B/
     * 1.39273E-02, 1.18990E-01, 2.44588E-01, 2.43902E-01, 9.94542E-02,
     *-8.59151E-02,-1.90452E-01,-1.60766E-01,-3.70932E-02, 8.28446E-02,
     * 1.12074E-01, 3.00456E-02,-7.71114E-02,-7.44948E-02, 2.14942E-01,
     * 9.18756E-01, 2.03262E 00, 3.51291E 00, 5.06739E 00, 6.59952E 00,
     * 1.39273E-02, 1.18990E-01, 2.44588E-01, 2.43902E-01, 9.94542E-02,
     *-8.59151E-02,-1.90452E-01,-1.60766E-01,-3.70932E-02, 8.28446E-02,
     * 1.12074E-01, 3.00456E-02,-7.71114E-02,-7.44948E-02, 2.14942E-01,
     * 9.18756E-01, 2.03262E 00, 3.51291E 00, 5.06739E 00, 6.59952E 00,
     *-1.73355E-02,-1.44904E-01,-2.85210E-01,-2.65581E-01,-9.90087E-02,
     * 6.95952E-02, 1.25198E-01, 7.38491E-02, 1.01588E-02, 1.32214E-02,
     * 6.07010E-02, 2.95124E-02,-2.09608E-01,-6.55809E-01,-1.10624E 00,
     *-1.15532E 00,-4.01067E-01, 1.51543E 00, 4.26869E 00, 7.32604E 00,
     *-1.73355E-02,-1.44904E-01,-2.85210E-01,-2.65581E-01,-9.90087E-02,
     * 6.95952E-02, 1.25198E-01, 7.38491E-02, 1.01588E-02, 1.32214E-02,
     * 6.07010E-02, 2.95124E-02,-2.09608E-01,-6.55809E-01,-1.10624E 00,
     *-1.15532E 00,-4.01067E-01, 1.51543E 00, 4.26869E 00, 7.32604E 00/
C
      DATA VI31C/
     * 2.02612E-02, 1.45282E-01, 2.31909E-01, 1.56477E-01, 3.08159E-02,
     * 3.40481E-02, 2.26712E-01, 5.02189E-01, 6.67531E-01, 5.85593E-01,
     * 2.91625E-01, 2.96202E-02, 2.22005E-01, 1.35967E 00, 3.87729E 00,
     * 8.05570E 00, 1.40659E 01, 2.19417E 01, 3.17518E 01, 4.44011E 01,
     * 2.02612E-02, 1.45282E-01, 2.31909E-01, 1.56477E-01, 3.08159E-02,
     * 3.40481E-02, 2.26712E-01, 5.02189E-01, 6.67531E-01, 5.85593E-01,
     * 2.91625E-01, 2.96202E-02, 2.22005E-01, 1.35967E 00, 3.87729E 00,
     * 8.05570E 00, 1.40659E 01, 2.19417E 01, 3.17518E 01, 4.44011E 01,
     *-4.41508E-02,-3.12814E-01,-4.87864E-01,-3.17899E-01,-6.00166E-02,
     *-5.98993E-02,-3.68506E-01,-7.33041E-01,-8.51607E-01,-6.29910E-01,
     *-2.49557E-01,-1.21737E-02,-7.65076E-02,-1.08459E-01, 5.42735E-01,
     * 2.92647E 00, 7.95346E 00, 1.66630E 01, 2.81163E 01, 4.29108E 01,
     *-4.41508E-02,-3.12814E-01,-4.87864E-01,-3.17899E-01,-6.00166E-02,
     *-5.98993E-02,-3.68506E-01,-7.33041E-01,-8.51607E-01,-6.29910E-01,
     *-2.49557E-01,-1.21737E-02,-7.65076E-02,-1.08459E-01, 5.42735E-01,
     * 2.92647E 00, 7.95346E 00, 1.66630E 01, 2.81163E 01, 4.29108E 01/
C
      DATA VI31D/
     * 5.49602E-02, 3.81180E-01, 5.69840E-01, 3.47603E-01, 6.03819E-02,
     * 4.75721E-02, 2.36624E-01, 3.22831E-01, 1.62102E-01,-7.00645E-02,
     *-1.42435E-01,-3.52087E-02,-2.07508E-01,-1.21673E 00,-2.86070E 00,
     *-3.92882E 00,-1.69850E 00, 6.55704E 00, 2.27910E 01, 4.66247E 01,
     * 5.49602E-02, 3.81180E-01, 5.69840E-01, 3.47603E-01, 6.03819E-02,
     * 4.75721E-02, 2.36624E-01, 3.22831E-01, 1.62102E-01,-7.00645E-02,
     *-1.42435E-01,-3.52087E-02,-2.07508E-01,-1.21673E 00,-2.86070E 00,
     *-3.92882E 00,-1.69850E 00, 6.55704E 00, 2.27910E 01, 4.66247E 01/
C
      DATA DA/
     * 3.74922E-02, 1.12289E-01, 1.86523E-01, 2.59820E-01, 3.31804E-01,
     * 4.02101E-01, 4.70336E-01, 5.36132E-01, 5.99117E-01, 6.58913E-01,
     * 7.15148E-01, 7.67444E-01, 8.15429E-01, 8.58726E-01, 8.96960E-01,
     * 9.29757E-01, 9.56742E-01, 9.77538E-01, 9.91772E-01, 9.99070E-01,
     * 3.74922E-02, 1.12289E-01, 1.86523E-01, 2.59820E-01, 3.31804E-01,
     * 4.02101E-01, 4.70336E-01, 5.36132E-01, 5.99117E-01, 6.58913E-01,
     * 7.15148E-01, 7.67444E-01, 8.15429E-01, 8.58726E-01, 8.96960E-01,
     * 9.29757E-01, 9.56742E-01, 9.77538E-01, 9.91772E-01, 9.99070E-01,
     *-8.18896E-02,-2.42282E-01,-3.92602E-01,-5.26434E-01,-6.37810E-01,
     *-7.21391E-01,-7.72643E-01,-7.88020E-01,-7.65139E-01,-7.02963E-01,
     *-6.01979E-01,-4.64379E-01,-2.94234E-01,-9.76795E-02, 1.16908E-01,
     * 3.38732E-01, 5.54396E-01, 7.47725E-01, 8.99586E-01, 9.87706E-01,
     *-8.18896E-02,-2.42282E-01,-3.92602E-01,-5.26434E-01,-6.37810E-01,
     *-7.21391E-01,-7.72643E-01,-7.88020E-01,-7.65139E-01,-7.02963E-01,
     *-6.01979E-01,-4.64379E-01,-2.94234E-01,-9.76795E-02, 1.16908E-01,
     * 3.38732E-01, 5.54396E-01, 7.47725E-01, 8.99586E-01, 9.87706E-01,
     * 40*0.D0 /
C
      DATA VA/
     * 1.02360E-01, 2.96335E-01, 4.58982E-01, 5.72406E-01, 6.23040E-01,
     * 6.03048E-01, 5.11422E-01, 3.54658E-01, 1.46929E-01,-9.03358E-02,
     *-3.29553E-01,-5.38872E-01,-6.84927E-01,-7.36555E-01,-6.69544E-01,
     *-4.72579E-01,-1.54344E-01, 2.47965E-01, 6.58798E-01, 9.52765E-01,
     * 1.02360E-01, 2.96335E-01, 4.58982E-01, 5.72406E-01, 6.23040E-01,
     * 6.03048E-01, 5.11422E-01, 3.54658E-01, 1.46929E-01,-9.03358E-02,
     *-3.29553E-01,-5.38872E-01,-6.84927E-01,-7.36555E-01,-6.69544E-01,
     *-4.72579E-01,-1.54344E-01, 2.47965E-01, 6.58798E-01, 9.52765E-01/
C
C
      END
      BLOCK DATA
C     ******************************************************
C     *                                                    *
C     *   BLOCK DATA 6                                     *
C     *                                                    *
C     ******************************************************
      IMPLICIT REAL*8(A-H,O-Z)
C
      REAL*4 DK23,DK24,DK33,DK34,DK21,DK22,DK31,DK32
C
      COMMON/TWIFCM/DK23(3,3,2),DK24(3,3,2),DK33(3,3,3,2)
     1             ,DK34(3,3,3,2),DK21(40,3,3),DK22(40,3,3)
     2             ,DK31(40,3,3,3),DK32(40,3,3,3)
C
      REAL*4 VK211(80),VK212(80),VK213(80),VK214(40),VK311(80),VK312(80)
      REAL*4 VK313(80),VK314(80),VK315(80),VK316(80),VK317(80),VK318(80)
      REAL*4 VK319(80),VK31A(80),VK31B(80),VK31C(80),VK31D(40)
      REAL*4 VK221(80),VK222(80),VK223(80),VK224(40),VK321(80),VK322(80)
      REAL*4 VK323(80),VK324(80),VK325(80),VK326(80),VK327(80),VK328(80)
      REAL*4 VK329(80),VK32A(80),VK32B(80),VK32C(80),VK32D(40)
C
      EQUIVALENCE (DK21(1,3,1),VK211(1)),(DK21(1,2,2),VK212(1))
      EQUIVALENCE (DK21(1,1,3),VK213(1)),(DK21(1,3,3),VK214(1))
      EQUIVALENCE (DK22(1,3,1),VK221(1)),(DK22(1,2,2),VK222(1))
      EQUIVALENCE (DK22(1,1,3),VK223(1)),(DK22(1,3,3),VK224(1))
C
      EQUIVALENCE (DK31(1,3,1,1),VK311(1)),(DK31(1,2,2,1),VK312(1))
      EQUIVALENCE (DK31(1,1,3,1),VK313(1)),(DK31(1,3,3,1),VK314(1))
      EQUIVALENCE (DK31(1,2,1,2),VK315(1)),(DK31(1,1,2,2),VK316(1))
      EQUIVALENCE (DK31(1,3,2,2),VK317(1)),(DK31(1,2,3,2),VK318(1))
      EQUIVALENCE (DK31(1,1,1,3),VK319(1)),(DK31(1,3,1,3),VK31A(1))
      EQUIVALENCE (DK31(1,2,2,3),VK31B(1)),(DK31(1,1,3,3),VK31C(1))
      EQUIVALENCE (DK31(1,3,3,3),VK31D(1))
C
      EQUIVALENCE (DK32(1,3,1,1),VK321(1)),(DK32(1,2,2,1),VK322(1))
      EQUIVALENCE (DK32(1,1,3,1),VK323(1)),(DK32(1,3,3,1),VK324(1))
      EQUIVALENCE (DK32(1,2,1,2),VK325(1)),(DK32(1,1,2,2),VK326(1))
      EQUIVALENCE (DK32(1,3,2,2),VK327(1)),(DK32(1,2,3,2),VK328(1))
      EQUIVALENCE (DK32(1,1,1,3),VK329(1)),(DK32(1,3,1,3),VK32A(1))
      EQUIVALENCE (DK32(1,2,2,3),VK32B(1)),(DK32(1,1,3,3),VK32C(1))
      EQUIVALENCE (DK32(1,3,3,3),VK32D(1))
C
      DATA DK23/
     * 3.00000E 00, 2.99994E 00, 2.99976E 00, 2.99994E 00, 2.12009E 02,
     * 2.27392E 02, 2.99976E 00, 2.27392E 02, 1.64004E 03, 3.00000E 00,
     * 2.99994E 00, 2.99976E 00, 2.99994E 00, 2.12009E 02, 2.27392E 02,
     * 2.99976E 00, 2.27392E 02, 1.64004E 03/
C
      DATA DK24/
     * 1.20000E 00, 1.07141E-01, 2.66590E-02, 1.07141E-01, 8.30354E 00,
     * 2.06649E 00, 2.66590E-02, 2.06649E 00, 1.87447E 01, 1.20000E 00,
     * 1.07141E-01, 2.66590E-02, 1.07141E-01, 8.30354E 00, 2.06649E 00,
     * 2.66590E-02, 2.06649E 00, 1.87447E 01/
C
      DATA DK33/
     * 4.26666E 00,-2.99758E 01, 5.51758E-01, 3.53711E 00, 3.84922E 01,
     *-1.97191E 02, 1.16917E 01, 8.59063E 01,-9.43555E 01, 3.09043E 01,
     * 2.25836E 02,-1.04104E 03, 1.66109E 02,-5.37625E 02, 5.15313E 02,
     * 3.69250E 02, 2.31731E 03,-3.89100E 03,-2.70980E 02, 8.45438E 02,
     *-6.97000E 02,-5.11438E 02,-9.25000E 02,-5.18000E 03,-1.18669E 03,
     *-2.48690E 04,-2.59150E 04, 4.26666E 00,-2.99758E 01, 5.51758E-01,
     * 3.53711E 00, 3.84922E 01,-1.97191E 02, 1.16917E 01, 8.59063E 01,
     *-9.43555E 01, 3.09043E 01, 2.25836E 02,-1.04104E 03, 1.66109E 02,
     *-5.37625E 02, 5.15313E 02, 3.69250E 02, 2.31731E 03,-3.89100E 03,
     *-2.70980E 02, 8.45438E 02,-6.97000E 02,-5.11438E 02,-9.25000E 02,
     *-5.18000E 03,-1.18669E 03,-2.48690E 04,-2.59150E 04/
C
      DATA DK34/
     * 1.11429E 00,-5.95093E-02,-8.89160E-01,-2.48929E 00, 6.08435E 00,
     *-2.69824E 00, 2.63428E 00,-5.91846E 00, 1.57300E 01, 7.62204E 00,
     * 1.84435E 01,-1.65264E 01, 8.65918E 00, 2.94299E 01, 2.70020E 01,
     *-2.17324E 01, 8.93398E 01, 1.32223E 02, 1.74670E 01, 1.65359E 02,
     * 1.62687E 02, 9.09551E 01, 4.04840E 02, 5.58410E 02, 1.76172E 02,
     * 1.47751E 03, 3.38071E 03, 1.11429E 00,-5.95093E-02,-8.89160E-01,
     *-2.48929E 00, 6.08435E 00,-2.69824E 00, 2.63428E 00,-5.91846E 00,
     * 1.57300E 01, 7.62204E 00, 1.84435E 01,-1.65264E 01, 8.65918E 00,
     * 2.94299E 01, 2.70020E 01,-2.17324E 01, 8.93398E 01, 1.32223E 02,
     * 1.74670E 01, 1.65359E 02, 1.62687E 02, 9.09551E 01, 4.04840E 02,
     * 5.58410E 02, 1.76172E 02, 1.47751E 03, 3.38071E 03/
C
      DATA DK21/
     * 7.23901E-01, 5.86530E-01, 4.69711E-01, 3.71282E-01, 2.89201E-01,
     * 2.21551E-01, 1.66533E-01, 1.22460E-01, 8.77800E-02, 6.10542E-02,
     * 4.09508E-02, 2.62785E-02, 1.59674E-02, 9.02462E-03, 4.65012E-03,
     * 2.09618E-03, 7.77245E-04, 2.06947E-04, 3.71933E-05,-9.53674E-07,
     * 7.23901E-01, 5.86530E-01, 4.69711E-01, 3.71282E-01, 2.89201E-01,
     * 2.21551E-01, 1.66533E-01, 1.22460E-01, 8.77800E-02, 6.10542E-02,
     * 4.09508E-02, 2.62785E-02, 1.59674E-02, 9.02462E-03, 4.65012E-03,
     * 2.09618E-03, 7.77245E-04, 2.06947E-04, 3.71933E-05,-9.53674E-07,
     *-5.37313E 00,-2.95022E 00,-1.23895E 00,-9.12199E-02, 6.20592E-01,
     * 1.00521E 00, 1.15369E 00, 1.14107E 00, 1.02766E 00, 8.60512E-01,
     * 6.74935E-01, 4.95779E-01, 3.39156E-01, 2.13329E-01, 1.20838E-01,
     * 5.95732E-02, 2.37846E-02, 6.88171E-03, 8.24928E-04, 1.52588E-05,
     *-5.37313E 00,-2.95022E 00,-1.23895E 00,-9.12199E-02, 6.20592E-01,
     * 1.00521E 00, 1.15369E 00, 1.14107E 00, 1.02766E 00, 8.60512E-01,
     * 6.74935E-01, 4.95779E-01, 3.39156E-01, 2.13329E-01, 1.20838E-01,
     * 5.95732E-02, 2.37846E-02, 6.88171E-03, 8.24928E-04, 1.52588E-05,
     * 280*0.D0 /	
C
      DATA VK211/
     * 1.63407E 01, 3.79697E 00,-2.80702E 00,-5.47075E 00,-5.70927E 00,
     *-4.63152E 00,-3.01208E 00,-1.35625E 00, 4.11129E-02, 1.04199E 00,
     * 1.62351E 00, 1.83113E 00, 1.75508E 00, 1.49639E 00, 1.15486E 00,
     * 8.01830E-01, 4.96203E-01, 2.60412E-01, 9.79242E-02, 1.61133E-02,
     * 1.63407E 01, 3.79697E 00,-2.80702E 00,-5.47075E 00,-5.70927E 00,
     *-4.63152E 00,-3.01208E 00,-1.35625E 00, 4.11129E-02, 1.04199E 00,
     * 1.62351E 00, 1.83113E 00, 1.75508E 00, 1.49639E 00, 1.15486E 00,
     * 8.01830E-01, 4.96203E-01, 2.60412E-01, 9.79242E-02, 1.61133E-02,
     *-5.37313E 00,-2.95022E 00,-1.23895E 00,-9.12199E-02, 6.20607E-01,
     * 1.00522E 00, 1.15370E 00, 1.14108E 00, 1.02767E 00, 8.60525E-01,
     * 6.74950E-01, 4.95795E-01, 3.39173E-01, 2.13455E-01, 1.20878E-01,
     * 5.96161E-02, 2.41680E-02, 6.77109E-03, 1.11866E-03, 1.07765E-04,
     *-5.37313E 00,-2.95022E 00,-1.23895E 00,-9.12199E-02, 6.20607E-01,
     * 1.00522E 00, 1.15370E 00, 1.14108E 00, 1.02767E 00, 8.60525E-01,
     * 6.74950E-01, 4.95795E-01, 3.39173E-01, 2.13455E-01, 1.20878E-01,
     * 5.96161E-02, 2.41680E-02, 6.77109E-03, 1.11866E-03, 1.07765E-04/
C
      DATA VK212/
     * 4.02270E 01, 1.51189E 01, 3.49159E 00, 1.99036E-01, 1.46899E 00,
     * 4.66586E 00, 8.07114E 00, 1.06901E 01, 1.20712E 01, 1.21573E 01,
     * 1.11424E 01, 9.36526E 00, 7.21327E 00, 5.04456E 00, 3.14297E 00,
     * 1.68825E 00, 7.35001E-01, 2.24564E-01, 2.95868E-02,-2.77710E-03,
     * 4.02270E 01, 1.51189E 01, 3.49159E 00, 1.99036E-01, 1.46899E 00,
     * 4.66586E 00, 8.07114E 00, 1.06901E 01, 1.20712E 01, 1.21573E 01,
     * 1.11424E 01, 9.36526E 00, 7.21327E 00, 5.04456E 00, 3.14297E 00,
     * 1.68825E 00, 7.35001E-01, 2.24564E-01, 2.95868E-02,-2.77710E-03,
     *-1.23867E 02,-2.07622E 01, 6.41487E 00, 8.37708E-01,-1.24278E 01,
     *-2.09772E 01,-2.07048E 01,-1.24120E 01, 7.24838E-01, 1.49310E 01,
     * 2.69639E 01, 3.47235E 01, 3.74521E 01, 3.55096E 01, 3.01181E 01,
     * 2.28943E 01, 1.53234E 01, 8.68240E 00, 3.56505E 00, 6.54877E-01,
     *-1.23867E 02,-2.07622E 01, 6.41487E 00, 8.37708E-01,-1.24278E 01,
     *-2.09772E 01,-2.07048E 01,-1.24120E 01, 7.24838E-01, 1.49310E 01,
     * 2.69639E 01, 3.47235E 01, 3.74521E 01, 3.55096E 01, 3.01181E 01,
     * 2.28943E 01, 1.53234E 01, 8.68240E 00, 3.56505E 00, 6.54877E-01/
C
      DATA VK213/
     * 1.63407E 01, 3.79697E 00,-2.80702E 00,-5.47075E 00,-5.70921E 00,
     *-4.63150E 00,-3.01198E 00,-1.35593E 00, 4.12836E-02, 1.04231E 00,
     * 1.62374E 00, 1.83241E 00, 1.75576E 00, 1.49714E 00, 1.15587E 00,
     * 8.02746E-01, 4.97399E-01, 2.61926E-01, 1.02808E-01, 1.82858E-02,
     * 1.63407E 01, 3.79697E 00,-2.80702E 00,-5.47075E 00,-5.70921E 00,
     *-4.63150E 00,-3.01198E 00,-1.35593E 00, 4.12836E-02, 1.04231E 00,
     * 1.62374E 00, 1.83241E 00, 1.75576E 00, 1.49714E 00, 1.15587E 00,
     * 8.02746E-01, 4.97399E-01, 2.61926E-01, 1.02808E-01, 1.82858E-02,
     *-1.23867E 02,-2.07622E 01, 6.41487E 00, 8.37708E-01,-1.24278E 01,
     *-2.09772E 01,-2.07048E 01,-1.24120E 01, 7.24838E-01, 1.49310E 01,
     * 2.69639E 01, 3.47235E 01, 3.74521E 01, 3.55096E 01, 3.01181E 01,
     * 2.28943E 01, 1.53234E 01, 8.68240E 00, 3.56505E 00, 6.54877E-01,
     *-1.23867E 02,-2.07622E 01, 6.41487E 00, 8.37708E-01,-1.24278E 01,
     *-2.09772E 01,-2.07048E 01,-1.24120E 01, 7.24838E-01, 1.49310E 01,
     * 2.69639E 01, 3.47235E 01, 3.74521E 01, 3.55096E 01, 3.01181E 01,
     * 2.28943E 01, 1.53234E 01, 8.68240E 00, 3.56505E 00, 6.54877E-01/
C
      DATA VK214/
     * 3.88142E 02, 3.44951E 01, 2.11563E 01, 8.20708E 01, 1.12949E 02,
     * 9.68579E 01, 5.48499E 01, 1.59846E 01, 1.42847E 00, 1.99209E 01,
     * 6.66873E 01, 1.30468E 02, 1.96151E 02, 2.51774E 02, 2.90553E 02,
     * 3.12863E 02, 3.25245E 02, 3.36778E 02, 3.69251E 02, 4.39985E 02,
     * 3.88142E 02, 3.44951E 01, 2.11563E 01, 8.20708E 01, 1.12949E 02,
     * 9.68579E 01, 5.48499E 01, 1.59846E 01, 1.42847E 00, 1.99209E 01,
     * 6.66873E 01, 1.30468E 02, 1.96151E 02, 2.51774E 02, 2.90553E 02,
     * 3.12863E 02, 3.25245E 02, 3.36778E 02, 3.69251E 02, 4.39985E 02/
C
      DATA DK22/
     *-1.40187E-02,-3.82812E-02,-5.72187E-02,-7.12812E-02,-8.09187E-02,
     *-8.65813E-02,-8.87185E-02,-8.77813E-02,-8.42188E-02,-7.84814E-02,
     *-7.10191E-02,-6.22815E-02,-5.27194E-02,-4.27814E-02,-3.29196E-02,
     *-2.35819E-02,-1.52189E-02,-8.28218E-03,-3.21865E-03,-4.82440E-04,
     *-1.40187E-02,-3.82812E-02,-5.72187E-02,-7.12812E-02,-8.09187E-02,
     *-8.65813E-02,-8.87185E-02,-8.77813E-02,-8.42188E-02,-7.84814E-02,
     *-7.10191E-02,-6.22815E-02,-5.27194E-02,-4.27814E-02,-3.29196E-02,
     *-2.35819E-02,-1.52189E-02,-8.28218E-03,-3.21865E-03,-4.82440E-04,
     * 2.53539E-01, 6.86302E-01, 1.00767E 00, 1.22137E 00, 1.33509E 00,
     * 1.35972E 00, 1.30870E 00, 1.19721E 00, 1.04156E 00, 8.58376E-01,
     * 6.63943E-01, 4.73485E-01, 3.00412E-01, 1.55601E-01, 4.67796E-02,
     *-2.23675E-02,-5.27267E-02,-5.06296E-02,-2.85044E-02,-5.47695E-03,
     * 2.53539E-01, 6.86302E-01, 1.00767E 00, 1.22137E 00, 1.33509E 00,
     * 1.35972E 00, 1.30870E 00, 1.19721E 00, 1.04156E 00, 8.58376E-01,
     * 6.63943E-01, 4.73485E-01, 3.00412E-01, 1.55601E-01, 4.67796E-02,
     *-2.23675E-02,-5.27267E-02,-5.06296E-02,-2.85044E-02,-5.47695E-03,
     * 280*0.D0 /	
C
      DATA VK221/
     *-8.06389E-01,-2.14050E 00,-3.01742E 00,-3.42710E 00,-3.40609E 00,
     *-3.02791E 00,-2.39180E 00,-1.61055E 00,-7.98096E-01,-5.76935E-02,
     * 5.28427E-01, 9.07028E-01, 1.05991E 00, 1.00485E 00, 7.92740E-01,
     * 5.01095E-01, 2.17847E-01, 2.12440E-02,-4.56972E-02,-1.67561E-02,
     *-8.06389E-01,-2.14050E 00,-3.01742E 00,-3.42710E 00,-3.40609E 00,
     *-3.02791E 00,-2.39180E 00,-1.61055E 00,-7.98096E-01,-5.76935E-02,
     * 5.28427E-01, 9.07028E-01, 1.05991E 00, 1.00485E 00, 7.92740E-01,
     * 5.01095E-01, 2.17847E-01, 2.12440E-02,-4.56972E-02,-1.67561E-02,
     * 9.80787E-02, 1.86608E-01, 1.45040E-01, 1.17204E-02,-1.79318E-01,
     *-3.98351E-01,-6.19970E-01,-8.23063E-01,-9.90842E-01,-1.11082E 00,
     *-1.17485E 00,-1.17904E 00,-1.12386E 00,-1.01408E 00,-8.58727E-01,
     *-6.71225E-01,-4.69249E-01,-2.74795E-01,-1.14198E-01,-1.80731E-02,
     * 9.80787E-02, 1.86608E-01, 1.45040E-01, 1.17204E-02,-1.79318E-01,
     *-3.98351E-01,-6.19970E-01,-8.23063E-01,-9.90842E-01,-1.11082E 00,
     *-1.17485E 00,-1.17904E 00,-1.12386E 00,-1.01408E 00,-8.58727E-01,
     *-6.71225E-01,-4.69249E-01,-2.74795E-01,-1.14198E-01,-1.80731E-02/
C
      DATA VK222/
     *-1.77400E 00,-3.34729E 00,-2.55879E 00,-2.08738E-01, 2.94703E 00,
     * 6.24084E 00, 9.12684E 00, 1.12045E 01, 1.22313E 01, 1.21258E 01,
     * 1.09601E 01, 8.94055E 00, 6.38358E 00, 3.67049E 00, 1.20503E 00,
     *-6.48621E-01,-1.63411E 00,-1.68602E 00,-1.01277E 00,-2.03949E-01,
     *-1.77400E 00,-3.34729E 00,-2.55879E 00,-2.08738E-01, 2.94703E 00,
     * 6.24084E 00, 9.12684E 00, 1.12045E 01, 1.22313E 01, 1.21258E 01,
     * 1.09601E 01, 8.94055E 00, 6.38358E 00, 3.67049E 00, 1.20503E 00,
     *-6.48621E-01,-1.63411E 00,-1.68602E 00,-1.01277E 00,-2.03949E-01,
     * 5.64355E 00, 1.04524E 01, 7.69362E 00, 6.39679E-01,-7.44145E 00,
     *-1.37993E 01,-1.65658E 01,-1.49467E 01,-9.24042E 00,-6.82877E-01,
     * 8.85028E 00, 1.72508E 01, 2.26414E 01, 2.38329E 01, 2.06730E 01,
     * 1.42384E 01, 6.68240E 00, 6.85562E-01,-1.63100E 00,-6.14624E-01,
     * 5.64355E 00, 1.04524E 01, 7.69362E 00, 6.39679E-01,-7.44145E 00,
     *-1.37993E 01,-1.65658E 01,-1.49467E 01,-9.24042E 00,-6.82877E-01,
     * 8.85028E 00, 1.72508E 01, 2.26414E 01, 2.38329E 01, 2.06730E 01,
     * 1.42384E 01, 6.68240E 00, 6.85562E-01,-1.63100E 00,-6.14624E-01/
C
      DATA VK223/
     *-2.71833E-01,-2.12463E-01, 3.67910E-01, 1.06687E 00, 1.60468E 00,
     * 1.80801E 00, 1.59363E 00, 9.52188E-01,-6.80828E-02,-1.37768E 00,
     *-2.86197E 00,-4.39770E 00,-5.86899E 00,-7.18370E 00,-8.29009E 00,
     *-9.19226E 00,-9.96710E 00,-1.07805E 01,-1.19038E 01,-1.37284E 01,
     *-2.71833E-01,-2.12463E-01, 3.67910E-01, 1.06687E 00, 1.60468E 00,
     * 1.80801E 00, 1.59363E 00, 9.52188E-01,-6.80828E-02,-1.37768E 00,
     *-2.86197E 00,-4.39770E 00,-5.86899E 00,-7.18370E 00,-8.29009E 00,
     *-9.19226E 00,-9.96710E 00,-1.07805E 01,-1.19038E 01,-1.37284E 01,
     * 4.91760E 00, 3.81956E 00,-6.45939E 00,-1.82580E 01,-2.64615E 01,
     *-2.83996E 01,-2.35459E 01,-1.30685E 01, 7.07108E-01, 1.48736E 01,
     * 2.64963E 01, 3.30990E 01, 3.30260E 01, 2.56037E 01, 1.11167E 01,
     *-9.60555E 00,-3.58288E 01,-6.79783E 01,-1.09306E 02,-1.67855E 02,
     * 4.91760E 00, 3.81956E 00,-6.45939E 00,-1.82580E 01,-2.64615E 01,
     *-2.83996E 01,-2.35459E 01,-1.30685E 01, 7.07108E-01, 1.48736E 01,
     * 2.64963E 01, 3.30990E 01, 3.30260E 01, 2.56037E 01, 1.11167E 01,
     *-9.60555E 00,-3.58288E 01,-6.79783E 01,-1.09306E 02,-1.67855E 02/
C
      DATA VK224/
     *-1.56498E 01,-1.19871E 01, 1.92045E 01, 5.10776E 01, 6.74117E 01,
     * 6.32789E 01, 4.32739E 01, 1.80717E 01, 2.37915E-01, 7.82471E-02,
     * 2.24907E 01, 6.52144E 01, 1.18946E 02, 1.69202E 02, 1.99337E 02,
     * 1.93528E 02, 1.37852E 02, 1.69453E 01,-1.97296E 02,-5.70445E 02,
     *-1.56498E 01,-1.19871E 01, 1.92045E 01, 5.10776E 01, 6.74117E 01,
     * 6.32789E 01, 4.32739E 01, 1.80717E 01, 2.37915E-01, 7.82471E-02,
     * 2.24907E 01, 6.52144E 01, 1.18946E 02, 1.69202E 02, 1.99337E 02,
     * 1.93528E 02, 1.37852E 02, 1.69453E 01,-1.97296E 02,-5.70445E 02/
C
      DATA DK31/
     * 2.62084E-02, 6.50600E-02, 8.69340E-02, 9.59013E-02, 9.54958E-02,
     * 8.87145E-02, 7.80339E-02, 6.54303E-02, 5.24248E-02, 4.01051E-02,
     * 2.92027E-02, 2.01113E-02, 1.29794E-02, 7.73174E-03, 4.16183E-03,
     * 1.94722E-03, 7.34806E-04, 2.14636E-04, 1.49608E-05,-4.82798E-06,
     * 2.62084E-02, 6.50600E-02, 8.69340E-02, 9.59013E-02, 9.54958E-02,
     * 8.87145E-02, 7.80339E-02, 6.54303E-02, 5.24248E-02, 4.01051E-02,
     * 2.92027E-02, 2.01113E-02, 1.29794E-02, 7.73174E-03, 4.16183E-03,
     * 1.94722E-03, 7.34806E-04, 2.14636E-04, 1.49608E-05,-4.82798E-06,
     *-5.71618E-02,-1.40209E-01,-1.82808E-01,-1.94182E-01,-1.83510E-01,
     *-1.59179E-01,-1.28281E-01,-9.63154E-02,-6.71291E-02,-4.29735E-02,
     *-2.47583E-02,-1.23243E-02,-4.80175E-03,-9.66072E-04, 4.89235E-04,
     * 6.94275E-04, 4.34875E-04, 1.67847E-04, 5.81741E-05, 3.33786E-05,
     *-5.71618E-02,-1.40209E-01,-1.82808E-01,-1.94182E-01,-1.83510E-01,
     *-1.59179E-01,-1.28281E-01,-9.63154E-02,-6.71291E-02,-4.29735E-02,
     *-2.47583E-02,-1.23243E-02,-4.80175E-03,-9.66072E-04, 4.89235E-04,
     * 6.94275E-04, 4.34875E-04, 1.67847E-04, 5.81741E-05, 3.33786E-05,
     * 1000*0.D0 /
C
      DATA VK311/
     * 7.12703E-02, 1.71127E-01, 2.13364E-01, 2.10919E-01, 1.79227E-01,
     * 1.33225E-01, 8.52278E-02, 4.37698E-02, 1.33629E-02,-5.04780E-03,
     *-1.31092E-02,-1.39017E-02,-1.07908E-02,-6.59180E-03,-3.10230E-03,
     *-1.03283E-03,-1.00136E-04, 8.86917E-05,-1.96457E-04, 3.62396E-05,
     * 7.12703E-02, 1.71127E-01, 2.13364E-01, 2.10919E-01, 1.79227E-01,
     * 1.33225E-01, 8.52278E-02, 4.37698E-02, 1.33629E-02,-5.04780E-03,
     *-1.31092E-02,-1.39017E-02,-1.07908E-02,-6.59180E-03,-3.10230E-03,
     *-1.03283E-03,-1.00136E-04, 8.86917E-05,-1.96457E-04, 3.62396E-05,
     *-1.83731E-01,-3.18543E-01,-2.22404E-01,-1.81940E-02, 2.09026E-01,
     * 4.05564E-01, 5.42821E-01, 6.11234E-01, 6.14804E-01, 5.66018E-01,
     * 4.81788E-01, 3.79718E-01, 2.76002E-01, 1.82834E-01, 1.08319E-01,
     * 5.51462E-02, 2.29197E-02, 6.93989E-03, 1.05476E-03,-2.67029E-05,
     *-1.83731E-01,-3.18543E-01,-2.22404E-01,-1.81940E-02, 2.09026E-01,
     * 4.05564E-01, 5.42821E-01, 6.11234E-01, 6.14804E-01, 5.66018E-01,
     * 4.81788E-01, 3.79718E-01, 2.76002E-01, 1.82834E-01, 1.08319E-01,
     * 5.51462E-02, 2.29197E-02, 6.93989E-03, 1.05476E-03,-2.67029E-05/
C
      DATA VK312/
     * 4.00783E-01, 6.86990E-01, 4.68815E-01, 3.85818E-02,-3.99460E-01,
     *-7.25228E-01,-8.89840E-01,-8.97408E-01,-7.85171E-01,-6.04795E-01,
     *-4.07226E-01,-2.31861E-01,-1.01621E-01,-2.27261E-02, 1.25523E-02,
     * 1.90563E-02, 1.26429E-02, 4.66728E-03, 3.72887E-04,-9.01222E-04,
     * 4.00783E-01, 6.86990E-01, 4.68815E-01, 3.85818E-02,-3.99460E-01,
     *-7.25228E-01,-8.89840E-01,-8.97408E-01,-7.85171E-01,-6.04795E-01,
     *-4.07226E-01,-2.31861E-01,-1.01621E-01,-2.27261E-02, 1.25523E-02,
     * 1.90563E-02, 1.26429E-02, 4.66728E-03, 3.72887E-04,-9.01222E-04,
     *-4.99827E-01,-8.39592E-01,-5.49638E-01,-4.56104E-02, 3.85552E-01,
     * 6.02007E-01, 5.86308E-01, 4.03378E-01, 1.52506E-01,-7.40514E-02,
     *-2.18075E-01,-2.63045E-01,-2.29514E-01,-1.55805E-01,-7.96648E-02,
     *-2.83645E-02,-2.59066E-03, 4.10390E-03, 3.40641E-03, 3.54671E-03,
     *-4.99827E-01,-8.39592E-01,-5.49638E-01,-4.56104E-02, 3.85552E-01,
     * 6.02007E-01, 5.86308E-01, 4.03378E-01, 1.52506E-01,-7.40514E-02,
     *-2.18075E-01,-2.63045E-01,-2.29514E-01,-1.55805E-01,-7.96648E-02,
     *-2.83645E-02,-2.59066E-03, 4.10390E-03, 3.40641E-03, 3.54671E-03/
C
      DATA VK313/
     * 5.10907E-01, 3.69351E-01,-5.50015E-01,-1.42845E 00,-1.89046E 00,
     *-1.85347E 00,-1.40678E 00,-7.18369E-01, 3.09362E-02, 6.90882E-01,
     * 1.16251E 00, 1.40563E 00, 1.43147E 00, 1.28585E 00, 1.03486E 00,
     * 7.46716E-01, 4.76855E-01, 2.57113E-01, 1.04706E-01, 1.60313E-02,
     * 5.10907E-01, 3.69351E-01,-5.50015E-01,-1.42845E 00,-1.89046E 00,
     *-1.85347E 00,-1.40678E 00,-7.18369E-01, 3.09362E-02, 6.90882E-01,
     * 1.16251E 00, 1.40563E 00, 1.43147E 00, 1.28585E 00, 1.03486E 00,
     * 7.46716E-01, 4.76855E-01, 2.57113E-01, 1.04706E-01, 1.60313E-02,
     *-1.11472E 00,-7.98965E-01, 1.15161E 00, 2.88744E 00, 3.63011E 00,
     * 3.32670E 00, 2.31806E 00, 1.06729E 00,-2.68393E-02,-7.25184E-01,
     *-9.70853E-01,-8.45973E-01,-5.15488E-01,-1.49636E-01, 1.30365E-01,
     * 2.67171E-01, 2.74881E-01, 1.96085E-01, 8.96225E-02, 2.16951E-02,
     *-1.11472E 00,-7.98965E-01, 1.15161E 00, 2.88744E 00, 3.63011E 00,
     * 3.32670E 00, 2.31806E 00, 1.06729E 00,-2.68393E-02,-7.25184E-01,
     *-9.70853E-01,-8.45973E-01,-5.15488E-01,-1.49636E-01, 1.30365E-01,
     * 2.67171E-01, 2.74881E-01, 1.96085E-01, 8.96225E-02, 2.16951E-02/
C
      DATA VK314/
     * 1.39076E 00, 9.81723E-01,-1.33330E 00,-3.12576E 00,-3.53954E 00,
     *-2.78612E 00,-1.55023E 00,-5.02043E-01,-1.66225E-02,-1.10517E-01,
     *-5.40855E-01,-9.80112E-01,-1.19477E 00,-1.09088E 00,-7.57612E-01,
     *-3.69242E-01,-7.24487E-02, 6.22559E-02, 1.27630E-01, 1.62106E-01,
     * 1.39076E 00, 9.81723E-01,-1.33330E 00,-3.12576E 00,-3.53954E 00,
     *-2.78612E 00,-1.55023E 00,-5.02043E-01,-1.66225E-02,-1.10517E-01,
     *-5.40855E-01,-9.80112E-01,-1.19477E 00,-1.09088E 00,-7.57612E-01,
     *-3.69242E-01,-7.24487E-02, 6.22559E-02, 1.27630E-01, 1.62106E-01,
     *-1.83731E-01,-3.18543E-01,-2.22404E-01,-1.81940E-02, 2.09022E-01,
     * 4.05561E-01, 5.42817E-01, 6.11246E-01, 6.14783E-01, 5.66009E-01,
     * 4.81776E-01, 3.79704E-01, 2.75922E-01, 1.82797E-01, 1.08182E-01,
     * 5.52111E-02, 2.28662E-02, 6.70624E-03, 9.52721E-04,-3.70026E-04,
     *-1.83731E-01,-3.18543E-01,-2.22404E-01,-1.81940E-02, 2.09022E-01,
     * 4.05561E-01, 5.42817E-01, 6.11246E-01, 6.14783E-01, 5.66009E-01,
     * 4.81776E-01, 3.79704E-01, 2.75922E-01, 1.82797E-01, 1.08182E-01,
     * 5.52111E-02, 2.28662E-02, 6.70624E-03, 9.52721E-04,-3.70026E-04/
C
      DATA VK315/
     * 4.00783E-01, 6.86990E-01, 4.68815E-01, 3.85838E-02,-3.99458E-01,
     *-7.25224E-01,-8.89826E-01,-8.97398E-01,-7.85137E-01,-6.04769E-01,
     *-4.07193E-01,-2.31826E-01,-1.01509E-01,-2.25782E-02, 1.27516E-02,
     * 1.91803E-02, 1.28050E-02, 4.83894E-03, 7.56264E-04,-1.63078E-04,
     * 4.00783E-01, 6.86990E-01, 4.68815E-01, 3.85838E-02,-3.99458E-01,
     *-7.25224E-01,-8.89826E-01,-8.97398E-01,-7.85137E-01,-6.04769E-01,
     *-4.07193E-01,-2.31826E-01,-1.01509E-01,-2.25782E-02, 1.27516E-02,
     * 1.91803E-02, 1.28050E-02, 4.83894E-03, 7.56264E-04,-1.63078E-04,
     *-4.99827E-01,-8.39592E-01,-5.49638E-01,-4.56123E-02, 3.85554E-01,
     * 6.02007E-01, 5.86278E-01, 4.03369E-01, 1.52446E-01,-7.40135E-02,
     *-2.18161E-01,-2.63161E-01,-2.29663E-01,-1.55273E-01,-8.03336E-02,
     *-2.64090E-02,-2.05702E-03, 7.10797E-03, 8.15731E-03, 1.02094E-02,
     *-4.99827E-01,-8.39592E-01,-5.49638E-01,-4.56123E-02, 3.85554E-01,
     * 6.02007E-01, 5.86278E-01, 4.03369E-01, 1.52446E-01,-7.40135E-02,
     *-2.18161E-01,-2.63161E-01,-2.29663E-01,-1.55273E-01,-8.03336E-02,
     *-2.64090E-02,-2.05702E-03, 7.10797E-03, 8.15731E-03, 1.02094E-02/
C
      DATA VK316/
     * 1.29660E 00, 1.58992E 00, 6.10227E-01, 4.91133E-02, 5.03014E-01,
     * 1.89633E 00, 3.81330E 00, 5.74143E 00, 7.23534E 00, 8.00728E 00,
     * 7.96223E 00, 7.18018E 00, 5.87407E 00, 4.32719E 00, 2.82056E 00,
     * 1.57404E 00, 7.13013E-01, 2.28607E-01, 4.94537E-02, 1.23596E-02,
     * 1.29660E 00, 1.58992E 00, 6.10227E-01, 4.91133E-02, 5.03014E-01,
     * 1.89633E 00, 3.81330E 00, 5.74143E 00, 7.23534E 00, 8.00728E 00,
     * 7.96223E 00, 7.18018E 00, 5.87407E 00, 4.32719E 00, 2.82056E 00,
     * 1.57404E 00, 7.13013E-01, 2.28607E-01, 4.94537E-02, 1.23596E-02,
     *-2.82874E 00,-3.43138E 00,-1.28900E 00,-1.00068E-01,-9.56833E-01,
     *-3.37984E 00,-6.23322E 00,-8.40656E 00,-9.21466E 00,-8.53102E 00,
     *-6.70699E 00,-4.36404E 00,-2.15143E 00,-5.26367E-01, 3.34106E-01,
     * 5.51147E-01, 3.86993E-01, 1.37527E-01, 4.68750E-02,-6.05011E-02,
     *-2.82874E 00,-3.43138E 00,-1.28900E 00,-1.00068E-01,-9.56833E-01,
     *-3.37984E 00,-6.23322E 00,-8.40656E 00,-9.21466E 00,-8.53102E 00,
     *-6.70699E 00,-4.36404E 00,-2.15143E 00,-5.26367E-01, 3.34106E-01,
     * 5.51147E-01, 3.86993E-01, 1.37527E-01, 4.68750E-02,-6.05011E-02/
C
      DATA VK317/
     * 3.52869E 00, 4.19900E 00, 1.51706E 00, 1.10102E-01, 9.14530E-01,
     * 2.78326E 00, 4.07313E 00, 3.73720E 00, 1.74516E 00,-1.08864E 00,
     *-3.63052E 00,-4.99280E 00,-4.89838E 00,-3.68564E 00,-2.11089E 00,
     *-8.32028E-01,-1.20366E-01, 6.10695E-02,-8.06618E-02,-7.66726E-02,
     * 3.52869E 00, 4.19900E 00, 1.51706E 00, 1.10102E-01, 9.14530E-01,
     * 2.78326E 00, 4.07313E 00, 3.73720E 00, 1.74516E 00,-1.08864E 00,
     *-3.63052E 00,-4.99280E 00,-4.89838E 00,-3.68564E 00,-2.11089E 00,
     *-8.32028E-01,-1.20366E-01, 6.10695E-02,-8.06618E-02,-7.66726E-02,
     *-3.64439E 00,-1.98763E 00, 1.22565E 00, 1.40676E-01,-4.19576E 00,
     *-8.45843E 00,-9.71019E 00,-6.59273E 00, 5.05219E-01, 9.89810E 00,
     * 1.93212E 01, 2.66700E 01, 3.05278E 01, 3.04654E 01, 2.69811E 01,
     * 2.12519E 01, 1.46414E 01, 8.44965E 00, 3.52293E 00, 6.50543E-01,
     *-3.64439E 00,-1.98763E 00, 1.22565E 00, 1.40676E-01,-4.19576E 00,
     *-8.45843E 00,-9.71019E 00,-6.59273E 00, 5.05219E-01, 9.89810E 00,
     * 1.93212E 01, 2.66700E 01, 3.05278E 01, 3.04654E 01, 2.69811E 01,
     * 2.12519E 01, 1.46414E 01, 8.44965E 00, 3.52293E 00, 6.50543E-01/
C
      DATA VK318/
     * 7.95264E 00, 4.30122E 00,-2.57175E 00,-3.10248E-01, 8.01312E 00,
     * 1.51296E 01, 1.59485E 01, 9.76251E 00,-5.06012E-01,-1.03671E 01,
     *-1.60934E 01,-1.60181E 01,-1.09367E 01,-3.43331E 00, 3.26215E 00,
     * 7.80943E 00, 8.34391E 00, 6.24422E 00, 3.15665E 00, 9.10339E-01,
     * 7.95264E 00, 4.30122E 00,-2.57175E 00,-3.10248E-01, 8.01312E 00,
     * 1.51296E 01, 1.59485E 01, 9.76251E 00,-5.06012E-01,-1.03671E 01,
     *-1.60934E 01,-1.60181E 01,-1.09367E 01,-3.43331E 00, 3.26215E 00,
     * 7.80943E 00, 8.34391E 00, 6.24422E 00, 3.15665E 00, 9.10339E-01,
     *-9.92444E 00,-5.28875E 00, 2.98920E 00, 3.89630E-01,-7.72250E 00,
     *-1.25675E 01,-1.05769E 01,-4.55057E 00,-1.50528E-01,-1.59857E 00,
     *-8.99747E 00,-1.86449E 01,-2.53688E 01,-2.57571E 01,-1.97659E 01,
     *-1.04971E 01,-2.34274E 00, 3.02325E 00, 2.88699E 00, 2.23842E 00,
     *-9.92444E 00,-5.28875E 00, 2.98920E 00, 3.89630E-01,-7.72250E 00,
     *-1.25675E 01,-1.05769E 01,-4.55057E 00,-1.50528E-01,-1.59857E 00,
     *-8.99747E 00,-1.86449E 01,-2.53688E 01,-2.57571E 01,-1.97659E 01,
     *-1.04971E 01,-2.34274E 00, 3.02325E 00, 2.88699E 00, 2.23842E 00/
C
      DATA VK319/
     * 5.10907E-01, 3.69351E-01,-5.50015E-01,-1.42845E 00,-1.89046E 00,
     *-1.85350E 00,-1.40675E 00,-7.18449E-01, 3.08685E-02, 6.90541E-01,
     * 1.16263E 00, 1.40494E 00, 1.43046E 00, 1.28516E 00, 1.03391E 00,
     * 7.45580E-01, 4.73408E-01, 2.52549E-01, 9.86118E-02, 1.54486E-02,
     * 5.10907E-01, 3.69351E-01,-5.50015E-01,-1.42845E 00,-1.89046E 00,
     *-1.85350E 00,-1.40675E 00,-7.18449E-01, 3.08685E-02, 6.90541E-01,
     * 1.16263E 00, 1.40494E 00, 1.43046E 00, 1.28516E 00, 1.03391E 00,
     * 7.45580E-01, 4.73408E-01, 2.52549E-01, 9.86118E-02, 1.54486E-02,
     *-1.11472E 00,-7.98966E-01, 1.15161E 00, 2.88747E 00, 3.63008E 00,
     * 3.32681E 00, 2.31810E 00, 1.06714E 00,-2.68393E-02,-7.25673E-01,
     *-9.70365E-01,-8.47649E-01,-5.15875E-01,-1.50324E-01, 1.28172E-01,
     * 2.64146E-01, 2.68563E-01, 1.90398E-01, 8.29353E-02, 5.38731E-03,
     *-1.11472E 00,-7.98966E-01, 1.15161E 00, 2.88747E 00, 3.63008E 00,
     * 3.32681E 00, 2.31810E 00, 1.06714E 00,-2.68393E-02,-7.25673E-01,
     *-9.70365E-01,-8.47649E-01,-5.15875E-01,-1.50324E-01, 1.28172E-01,
     * 2.64146E-01, 2.68563E-01, 1.90398E-01, 8.29353E-02, 5.38731E-03/
C
      DATA VK31A/
     * 1.39076E 00, 9.81717E-01,-1.33331E 00,-3.12578E 00,-3.53957E 00,
     *-2.78617E 00,-1.55030E 00,-5.02374E-01,-1.68562E-02,-1.09776E-01,
     *-5.40855E-01,-9.82666E-01,-1.19324E 00,-1.08985E 00,-7.69148E-01,
     *-3.73649E-01,-5.65062E-02, 9.92384E-02, 5.38425E-02, 8.17232E-02,
     * 1.39076E 00, 9.81717E-01,-1.33331E 00,-3.12578E 00,-3.53957E 00,
     *-2.78617E 00,-1.55030E 00,-5.02374E-01,-1.68562E-02,-1.09776E-01,
     *-5.40855E-01,-9.82666E-01,-1.19324E 00,-1.08985E 00,-7.69148E-01,
     *-3.73649E-01,-5.65062E-02, 9.92384E-02, 5.38425E-02, 8.17232E-02,
     *-3.64439E 00,-1.98763E 00, 1.22565E 00, 1.40676E-01,-4.19576E 00,
     *-8.45843E 00,-9.71019E 00,-6.59273E 00, 5.05219E-01, 9.89810E 00,
     * 1.93212E 01, 2.66700E 01, 3.05278E 01, 3.04654E 01, 2.69614E 01,
     * 2.12456E 01, 1.46362E 01, 8.48087E 00, 3.52293E 00, 6.50543E-01,
     *-3.64439E 00,-1.98763E 00, 1.22565E 00, 1.40676E-01,-4.19576E 00,
     *-8.45843E 00,-9.71019E 00,-6.59273E 00, 5.05219E-01, 9.89810E 00,
     * 1.93212E 01, 2.66700E 01, 3.05278E 01, 3.04654E 01, 2.69614E 01,
     * 2.12456E 01, 1.46362E 01, 8.48087E 00, 3.52293E 00, 6.50543E-01/
C
      DATA VK31B/
     * 7.95264E 00, 4.30118E 00,-2.57180E 00,-3.10626E-01, 8.01261E 00,
     * 1.51288E 01, 1.59474E 01, 9.76100E 00,-5.07172E-01,-1.03772E 01,
     *-1.61191E 01,-1.60176E 01,-1.10164E 01,-3.52721E 00, 3.39742E 00,
     * 7.53603E 00, 8.16019E 00, 6.64438E 00, 2.38315E 00, 5.69901E-01,
     * 7.95264E 00, 4.30118E 00,-2.57180E 00,-3.10626E-01, 8.01261E 00,
     * 1.51288E 01, 1.59474E 01, 9.76100E 00,-5.07172E-01,-1.03772E 01,
     *-1.61191E 01,-1.60176E 01,-1.10164E 01,-3.52721E 00, 3.39742E 00,
     * 7.53603E 00, 8.16019E 00, 6.64438E 00, 2.38315E 00, 5.69901E-01,
     *-9.92444E 00,-5.28867E 00, 2.98913E 00, 3.89630E-01,-7.72250E 00,
     *-1.25675E 01,-1.05851E 01,-4.54617E 00,-1.52313E-01,-1.61647E 00,
     *-9.04730E 00,-1.86392E 01,-2.54895E 01,-2.59766E 01,-1.99383E 01,
     *-1.10045E 01,-2.10193E 00, 2.18349E 00, 3.98471E 00, 1.85852E-02,
     *-9.92444E 00,-5.28867E 00, 2.98913E 00, 3.89630E-01,-7.72250E 00,
     *-1.25675E 01,-1.05851E 01,-4.54617E 00,-1.52313E-01,-1.61647E 00,
     *-9.04730E 00,-1.86392E 01,-2.54895E 01,-2.59766E 01,-1.99383E 01,
     *-1.10045E 01,-2.10193E 00, 2.18349E 00, 3.98471E 00, 1.85852E-02/
C
      DATA VK31C/
     * 1.04191E 01, 3.15857E 00, 4.27946E 00, 2.16500E 01, 3.75030E 01,
     * 3.87381E 01, 2.55395E 01, 8.36140E 00, 9.24332E-01, 1.32143E 01,
     * 4.80079E 01, 1.00349E 02, 1.60205E 02, 2.16517E 02, 2.61034E 02,
     * 2.91655E 02, 3.11244E 02, 3.32191E 02, 3.66824E 02, 4.43740E 02,
     * 1.04191E 01, 3.15857E 00, 4.27946E 00, 2.16500E 01, 3.75030E 01,
     * 3.87381E 01, 2.55395E 01, 8.36140E 00, 9.24332E-01, 1.32143E 01,
     * 4.80079E 01, 1.00349E 02, 1.60205E 02, 2.16517E 02, 2.61034E 02,
     * 2.91655E 02, 3.11244E 02, 3.32191E 02, 3.66824E 02, 4.43740E 02,
     *-2.27412E 01,-6.84285E 00,-8.93764E 00,-4.36921E 01,-7.19566E 01,
     *-6.95421E 01,-4.21459E 01,-1.24954E 01,-1.21826E 00,-1.35874E 01,
     *-3.93347E 01,-5.98066E 01,-5.71953E 01,-2.30696E 01, 3.24368E 01,
     * 1.06135E 02, 1.77311E 02, 2.57348E 02, 3.24694E 02, 4.23870E 02,
     *-2.27412E 01,-6.84285E 00,-8.93764E 00,-4.36921E 01,-7.19566E 01,
     *-6.95421E 01,-4.21459E 01,-1.24954E 01,-1.21826E 00,-1.35874E 01,
     *-3.93347E 01,-5.98066E 01,-5.71953E 01,-2.30696E 01, 3.24368E 01,
     * 1.06135E 02, 1.77311E 02, 2.57348E 02, 3.24694E 02, 4.23870E 02/
C
      DATA VK31D/
     * 2.83908E 01, 8.42999E 00, 1.02980E 01, 4.71459E 01, 7.00466E 01,
     * 5.82773E 01, 2.83699E 01, 6.07909E 00, 2.80762E-01,-2.46237E 00,
     *-2.24408E 01,-7.02075E 01,-1.33521E 02,-1.80696E 02,-1.85644E 02,
     *-1.38191E 02,-3.00911E 01, 1.09451E 02, 2.92781E 02, 5.09256E 02,
     * 2.83908E 01, 8.42999E 00, 1.02980E 01, 4.71459E 01, 7.00466E 01,
     * 5.82773E 01, 2.83699E 01, 6.07909E 00, 2.80762E-01,-2.46237E 00,
     *-2.24408E 01,-7.02075E 01,-1.33521E 02,-1.80696E 02,-1.85644E 02,
     *-1.38191E 02,-3.00911E 01, 1.09451E 02, 2.92781E 02, 5.09256E 02/
C
      DATA DK32/
     *-6.94530E-04,-4.43137E-03,-1.07714E-02,-1.85877E-02,-2.68884E-02,
     *-3.48290E-02,-4.17216E-02,-4.70396E-02,-5.04215E-02,-5.16685E-02,
     *-5.07405E-02,-4.77479E-02,-4.29408E-02,-3.66951E-02,-2.94909E-02,
     *-2.18977E-02,-1.45412E-02,-8.08448E-03,-3.18819E-03,-4.81009E-04,
     *-6.94530E-04,-4.43137E-03,-1.07714E-02,-1.85877E-02,-2.68884E-02,
     *-3.48290E-02,-4.17216E-02,-4.70396E-02,-5.04215E-02,-5.16685E-02,
     *-5.07405E-02,-4.77479E-02,-4.29408E-02,-3.66951E-02,-2.94909E-02,
     *-2.18977E-02,-1.45412E-02,-8.08448E-03,-3.18819E-03,-4.81009E-04,
     * 1.51380E-03, 9.53905E-03, 2.26205E-02, 3.75791E-02, 5.15791E-02,
     * 6.23638E-02, 6.84167E-02, 6.90342E-02, 6.43175E-02, 5.50873E-02,
     * 4.27253E-02, 2.89564E-02, 1.56032E-02, 4.31669E-03,-3.68285E-03,
     *-7.81864E-03,-8.29375E-03,-6.09070E-03,-2.85023E-03,-4.81129E-04,
     * 1.51380E-03, 9.53905E-03, 2.26205E-02, 3.75791E-02, 5.15791E-02,
     * 6.23638E-02, 6.84167E-02, 6.90342E-02, 6.43175E-02, 5.50873E-02,
     * 4.27253E-02, 2.89564E-02, 1.56032E-02, 4.31669E-03,-3.68285E-03,
     *-7.81864E-03,-8.29375E-03,-6.09070E-03,-2.85023E-03,-4.81129E-04,
     * 1000*0.D0 /
C
      DATA VK321/
     *-1.88523E-03,-1.16187E-02,-2.63366E-02,-4.06964E-02,-5.01863E-02,
     *-5.19348E-02,-4.51252E-02,-3.09805E-02,-1.23589E-02, 6.96081E-03,
     * 2.31593E-02, 3.32550E-02, 3.58114E-02, 3.13000E-02, 2.19584E-02,
     * 1.12093E-02, 2.52509E-03,-1.84351E-03,-1.99383E-03,-4.41432E-04,
     *-1.88523E-03,-1.16187E-02,-2.63366E-02,-4.06964E-02,-5.01863E-02,
     *-5.19348E-02,-4.51252E-02,-3.09805E-02,-1.23589E-02, 6.96081E-03,
     * 2.31593E-02, 3.32550E-02, 3.58114E-02, 3.13000E-02, 2.19584E-02,
     * 1.12093E-02, 2.52509E-03,-1.84351E-03,-1.99383E-03,-4.41432E-04,
     * 1.25555E-02, 7.93895E-02, 1.89553E-01, 3.18251E-01, 4.43290E-01,
     * 5.46539E-01, 6.14923E-01, 6.40990E-01, 6.22996E-01, 5.64543E-01,
     * 4.73831E-01, 3.62520E-01, 2.44287E-01, 1.33155E-01, 4.16803E-02,
     *-2.09188E-02,-5.04627E-02,-4.94547E-02,-2.82087E-02,-5.47123E-03,
     * 1.25555E-02, 7.93895E-02, 1.89553E-01, 3.18251E-01, 4.43290E-01,
     * 5.46539E-01, 6.14923E-01, 6.40990E-01, 6.22996E-01, 5.64543E-01,
     * 4.73831E-01, 3.62520E-01, 2.44287E-01, 1.33155E-01, 4.16803E-02,
     *-2.09188E-02,-5.04627E-02,-4.94547E-02,-2.82087E-02,-5.47123E-03/
C
      DATA VK322/
     *-2.73660E-02,-1.70898E-01,-3.98095E-01,-6.43493E-01,-8.50533E-01,
     *-9.78971E-01,-1.00896E 00,-9.41557E-01,-7.95846E-01,-6.03322E-01,
     *-4.00606E-01,-2.21618E-01,-9.05266E-02,-1.72930E-02, 3.81184E-03,
     *-8.46195E-03,-2.93751E-02,-3.75881E-02,-2.52457E-02,-5.25379E-03,
     *-2.73660E-02,-1.70898E-01,-3.98095E-01,-6.43493E-01,-8.50533E-01,
     *-9.78971E-01,-1.00896E 00,-9.41557E-01,-7.95846E-01,-6.03322E-01,
     *-4.00606E-01,-2.21618E-01,-9.05266E-02,-1.72930E-02, 3.81184E-03,
     *-8.46195E-03,-2.93751E-02,-3.75881E-02,-2.52457E-02,-5.25379E-03,
     * 3.40805E-02, 2.08164E-01, 4.63544E-01, 6.97040E-01, 8.27953E-01,
     * 8.15969E-01, 6.66600E-01, 4.24147E-01, 1.54993E-01,-7.37219E-02,
     *-2.14244E-01,-2.51061E-01,-2.03128E-01,-1.13814E-01,-3.19710E-02,
     * 9.56440E-03, 7.79247E-03,-1.18494E-02,-1.78280E-02,-4.79031E-03,
     * 3.40805E-02, 2.08164E-01, 4.63544E-01, 6.97040E-01, 8.27953E-01,
     * 8.15969E-01, 6.66600E-01, 4.24147E-01, 1.54993E-01,-7.37219E-02,
     *-2.14244E-01,-2.51061E-01,-2.03128E-01,-1.13814E-01,-3.19710E-02,
     * 9.56440E-03, 7.79247E-03,-1.18494E-02,-1.78280E-02,-4.79031E-03/
C
      DATA VK323/
     *-3.98933E-02,-2.47216E-01,-5.66642E-01,-8.91356E-01,-1.12864E 00,
     *-1.21422E 00,-1.12064E 00,-8.58907E-01,-4.74006E-01,-3.47300E-02,
     * 3.80013E-01, 6.97053E-01, 8.64157E-01, 8.62116E-01, 7.10200E-01,
     * 4.64838E-01, 2.07645E-01, 2.08015E-02,-4.54969E-02,-1.62268E-02,
     *-3.98933E-02,-2.47216E-01,-5.66642E-01,-8.91356E-01,-1.12864E 00,
     *-1.21422E 00,-1.12064E 00,-8.58907E-01,-4.74006E-01,-3.47300E-02,
     * 3.80013E-01, 6.97053E-01, 8.64157E-01, 8.62116E-01, 7.10200E-01,
     * 4.64838E-01, 2.07645E-01, 2.08015E-02,-4.54969E-02,-1.62268E-02,
     * 8.69521E-02, 5.32195E-01, 1.19021E 00, 1.80283E 00, 2.16673E 00,
     * 2.17725E 00, 1.84239E 00, 1.26684E 00, 6.12149E-01, 4.50659E-02,
     *-3.12407E-01,-4.16454E-01,-3.10239E-01,-9.97925E-02, 8.77342E-02,
     * 1.62755E-01, 1.15498E-01, 1.55096E-02,-4.04234E-02,-2.10257E-02,
     * 8.69521E-02, 5.32195E-01, 1.19021E 00, 1.80283E 00, 2.16673E 00,
     * 2.17725E 00, 1.84239E 00, 1.26684E 00, 6.12149E-01, 4.50659E-02,
     *-3.12407E-01,-4.16454E-01,-3.10239E-01,-9.97925E-02, 8.77342E-02,
     * 1.62755E-01, 1.15498E-01, 1.55096E-02,-4.04234E-02,-2.10257E-02/
C
      DATA VK324/
     *-1.08288E-01,-6.48297E-01,-1.38623E 00,-1.95399E 00,-2.11178E 00,
     *-1.81936E 00,-1.22435E 00,-5.80333E-01,-1.31161E-01,-8.37898E-03,
     *-1.82766E-01,-4.90416E-01,-7.21846E-01,-7.34316E-01,-5.28842E-01,
     *-2.40608E-01,-3.79152E-02,-1.47247E-03,-2.85263E-02,-9.08661E-03,
     *-1.08288E-01,-6.48297E-01,-1.38623E 00,-1.95399E 00,-2.11178E 00,
     *-1.81936E 00,-1.22435E 00,-5.80333E-01,-1.31161E-01,-8.37898E-03,
     *-1.82766E-01,-4.90416E-01,-7.21846E-01,-7.34316E-01,-5.28842E-01,
     *-2.40608E-01,-3.79152E-02,-1.47247E-03,-2.85263E-02,-9.08661E-03,
     * 4.71750E-03, 2.10496E-02, 2.64692E-02, 2.02691E-03,-6.07319E-02,
     *-1.61440E-01,-2.92736E-01,-4.42182E-01,-5.94245E-01,-7.32222E-01,
     *-8.40161E-01,-9.04524E-01,-9.15909E-01,-8.70142E-01,-7.69532E-01,
     *-6.23418E-01,-4.48473E-01,-2.68167E-01,-1.13118E-01,-1.80168E-02,
     * 4.71750E-03, 2.10496E-02, 2.64692E-02, 2.02691E-03,-6.07319E-02,
     *-1.61440E-01,-2.92736E-01,-4.42182E-01,-5.94245E-01,-7.32222E-01,
     *-8.40161E-01,-9.04524E-01,-9.15909E-01,-8.70142E-01,-7.69532E-01,
     *-6.23418E-01,-4.48473E-01,-2.68167E-01,-1.13118E-01,-1.80168E-02/
C
      DATA VK325/
     *-1.02834E-02,-4.53442E-02,-5.57244E-02,-4.43274E-03, 1.15881E-01,
     * 2.88102E-01, 4.78698E-01, 6.47222E-01, 7.56001E-01, 7.78461E-01,
     * 7.05114E-01, 5.46316E-01, 3.30803E-01, 1.00651E-01,-9.73387E-02,
     *-2.23350E-01,-2.55939E-01,-2.02026E-01,-1.00643E-01,-1.70870E-02,
     *-1.02834E-02,-4.53442E-02,-5.57244E-02,-4.43274E-03, 1.15881E-01,
     * 2.88102E-01, 4.78698E-01, 6.47222E-01, 7.56001E-01, 7.78461E-01,
     * 7.05114E-01, 5.46316E-01, 3.30803E-01, 1.00651E-01,-9.73387E-02,
     *-2.23350E-01,-2.55939E-01,-2.02026E-01,-1.00643E-01,-1.70870E-02,
     * 1.28090E-02, 5.53014E-02, 6.51777E-02, 5.51271E-03,-1.11469E-01,
     *-2.37978E-01,-3.13112E-01,-2.87243E-01,-1.41620E-01, 1.02345E-01,
     * 3.86344E-01, 6.31825E-01, 7.64474E-01, 7.41763E-01, 5.72019E-01,
     * 3.17759E-01, 7.60660E-02,-6.17952E-02,-7.20615E-02,-1.62411E-02,
     * 1.28090E-02, 5.53014E-02, 6.51777E-02, 5.51271E-03,-1.11469E-01,
     *-2.37978E-01,-3.13112E-01,-2.87243E-01,-1.41620E-01, 1.02345E-01,
     * 3.86344E-01, 6.31825E-01, 7.64474E-01, 7.41763E-01, 5.72019E-01,
     * 3.17759E-01, 7.60660E-02,-6.17952E-02,-7.20615E-02,-1.62411E-02/
C
      DATA VK326/
     *-8.52878E-02,-3.77305E-01,-4.66637E-01,-3.67467E-02, 9.97425E-01,
     * 2.52726E 00, 4.30595E 00, 6.01427E 00, 7.32868E 00, 7.98486E 00,
     * 7.82861E 00, 6.84993E 00, 5.19318E 00, 3.14156E 00, 1.07375E 00,
     *-6.08154E-01,-1.56468E 00,-1.64645E 00,-1.00708E 00,-2.10831E-01,
     *-8.52878E-02,-3.77305E-01,-4.66637E-01,-3.67467E-02, 9.97425E-01,
     * 2.52726E 00, 4.30595E 00, 6.01427E 00, 7.32868E 00, 7.98486E 00,
     * 7.82861E 00, 6.84993E 00, 5.19318E 00, 3.14156E 00, 1.07375E 00,
     *-6.08154E-01,-1.56468E 00,-1.64645E 00,-1.00708E 00,-2.10831E-01,
     * 1.85914E-01, 8.12794E-01, 9.82446E-01, 8.00419E-02,-1.90353E 00,
     *-4.51172E 00,-7.04536E 00,-8.81116E 00,-9.33716E 00,-8.50911E 00,
     *-6.59795E 00,-4.17030E 00,-1.91354E 00,-4.03137E-01, 9.84497E-02,
     *-2.47284E-01,-9.19464E-01,-1.25505E 00,-9.01001E-01,-2.20367E-01,
     * 1.85914E-01, 8.12794E-01, 9.82446E-01, 8.00419E-02,-1.90353E 00,
     *-4.51172E 00,-7.04536E 00,-8.81116E 00,-9.33716E 00,-8.50911E 00,
     *-6.59795E 00,-4.17030E 00,-1.91354E 00,-4.03137E-01, 9.84497E-02,
     *-2.47284E-01,-9.19464E-01,-1.25505E 00,-9.01001E-01,-2.20367E-01/
C
      DATA VK327/
     *-2.31575E-01,-9.91311E-01,-1.14923E 00,-9.89056E-02, 1.83185E 00,
     * 3.72995E 00, 4.61620E 00, 3.92549E 00, 1.77328E 00,-1.08309E 00,
     *-3.56602E 00,-4.75780E 00,-4.32482E 00,-2.68648E 00,-8.23746E-01,
     * 2.76219E-01, 2.17996E-01,-4.27224E-01,-6.10373E-01,-2.36117E-01,
     *-2.31575E-01,-9.91311E-01,-1.14923E 00,-9.89056E-02, 1.83185E 00,
     * 3.72995E 00, 4.61620E 00, 3.92549E 00, 1.77328E 00,-1.08309E 00,
     *-3.56602E 00,-4.75780E 00,-4.32482E 00,-2.68648E 00,-8.23746E-01,
     * 2.76219E-01, 2.17996E-01,-4.27224E-01,-6.10373E-01,-2.36117E-01,
     * 2.71039E-01, 1.17629E 00, 1.40074E 00, 1.16893E-01,-2.51397E 00,
     *-5.57531E 00,-7.79320E 00,-7.99115E 00,-5.49670E 00,-4.03793E-01,
     * 6.37041E 00, 1.32669E 01, 1.84716E 01, 2.04591E 01, 1.85268E 01,
     * 1.32146E 01, 6.37778E 00, 6.65253E-01,-1.61592E 00,-6.16379E-01,
     * 2.71039E-01, 1.17629E 00, 1.40074E 00, 1.16893E-01,-2.51397E 00,
     *-5.57531E 00,-7.79320E 00,-7.99115E 00,-5.49670E 00,-4.03793E-01,
     * 6.37041E 00, 1.32669E 01, 1.84716E 01, 2.04591E 01, 1.85268E 01,
     * 1.32146E 01, 6.37778E 00, 6.65253E-01,-1.61592E 00,-6.16379E-01/
C
      DATA VK328/
     *-5.90824E-01,-2.53409E 00,-2.94948E 00,-2.52532E-01, 4.80020E 00,
     * 9.96347E 00, 1.27763E 01, 1.17554E 01, 7.08092E 00, 5.42358E-01,
     *-5.22217E 00,-7.89711E 00,-6.59026E 00,-2.33476E 00, 2.32216E 00,
     * 4.66437E 00, 3.54576E 00, 3.73535E-01,-1.49820E 00,-6.03546E-01,
     *-5.90824E-01,-2.53409E 00,-2.94948E 00,-2.52532E-01, 4.80020E 00,
     * 9.96347E 00, 1.27763E 01, 1.17554E 01, 7.08092E 00, 5.42358E-01,
     *-5.22217E 00,-7.89711E 00,-6.59026E 00,-2.33476E 00, 2.32216E 00,
     * 4.66437E 00, 3.54576E 00, 3.73535E-01,-1.49820E 00,-6.03546E-01,
     * 7.35937E-01, 3.09092E 00, 3.45101E 00, 3.07926E-01,-4.62462E 00,
     *-8.25801E 00,-8.42112E 00,-5.32874E 00,-1.48769E 00,-1.32553E-01,
     *-3.09473E 00,-9.37990E 00,-1.54755E 01,-1.74987E 01,-1.39315E 01,
     *-7.20650E 00,-1.49905E 00,-8.39890E-01,-2.01555E 00,-3.89148E 00,
     * 7.35937E-01, 3.09092E 00, 3.45101E 00, 3.07926E-01,-4.62462E 00,
     *-8.25801E 00,-8.42112E 00,-5.32874E 00,-1.48769E 00,-1.32553E-01,
     *-3.09473E 00,-9.37990E 00,-1.54755E 01,-1.74987E 01,-1.39315E 01,
     *-7.20650E 00,-1.49905E 00,-8.39890E-01,-2.01555E 00,-3.89148E 00/
C
      DATA VK329/
     *-1.24315E-02,-2.13311E-02, 7.29254E-02, 2.81132E-01, 5.34669E-01,
     * 7.26861E-01, 7.46969E-01, 5.05869E-01,-4.68321E-02,-9.14386E-01,
     *-2.05324E 00,-3.38054E 00,-4.78995E 00,-6.17113E 00,-7.43668E 00,
     *-8.54604E 00,-9.53467E 00,-1.05365E 01,-1.18033E 01,-1.37114E 01,
     *-1.24315E-02,-2.13311E-02, 7.29254E-02, 2.81132E-01, 5.34669E-01,
     * 7.26861E-01, 7.46969E-01, 5.05869E-01,-4.68321E-02,-9.14386E-01,
     *-2.05324E 00,-3.38054E 00,-4.78995E 00,-6.17113E 00,-7.43668E 00,
     *-8.54604E 00,-9.53467E 00,-1.05365E 01,-1.18033E 01,-1.37114E 01,
     * 2.71038E-02, 4.61090E-02,-1.52544E-01,-5.67423E-01,-1.02485E 00,
     *-1.30187E 00,-1.22772E 00,-7.49059E-01, 4.77810E-02, 9.56712E-01,
     * 1.70328E 00, 2.01667E 00, 1.69930E 00, 6.75947E-01,-9.89491E-01,
     *-3.12432E 00,-5.52790E 00,-8.05427E 00,-1.06839E 01,-1.35107E 01,
     * 2.71038E-02, 4.61090E-02,-1.52544E-01,-5.67423E-01,-1.02485E 00,
     *-1.30187E 00,-1.22772E 00,-7.49059E-01, 4.77810E-02, 9.56712E-01,
     * 1.70328E 00, 2.01667E 00, 1.69930E 00, 6.75947E-01,-9.89491E-01,
     *-3.12432E 00,-5.52790E 00,-8.05427E 00,-1.06839E 01,-1.35107E 01/
C
      DATA VK32A/
     *-3.37717E-02,-5.65805E-02, 1.76300E-01, 6.12482E-01, 9.95585E-01,
     * 1.08491E 00, 8.15210E-01, 3.48715E-01, 1.24035E-02, 1.53106E-01,
     * 9.67977E-01, 2.38087E 00, 4.00648E 00, 5.25190E 00, 5.48820E 00,
     * 4.27089E 00, 1.45247E 00,-2.72832E 00,-7.88499E 00,-1.29957E 01,
     *-3.37717E-02,-5.65805E-02, 1.76300E-01, 6.12482E-01, 9.95585E-01,
     * 1.08491E 00, 8.15210E-01, 3.48715E-01, 1.24035E-02, 1.53106E-01,
     * 9.67977E-01, 2.38087E 00, 4.00648E 00, 5.25190E 00, 5.48820E 00,
     * 4.27089E 00, 1.45247E 00,-2.72832E 00,-7.88499E 00,-1.29957E 01,
     * 2.24780E-01, 3.83303E-01,-1.27969E 00,-4.80764E 00,-8.80992E 00,
     *-1.14084E 01,-1.10274E 01,-6.93706E 00, 4.98840E-01, 9.86337E 00,
     * 1.89877E 01, 2.54093E 01, 2.69103E 01, 2.19485E 01, 9.91325E 00,
     *-9.00591E 00,-3.43068E 01,-6.65159E 01,-1.08422E 02,-1.67760E 02,
     * 2.24780E-01, 3.83303E-01,-1.27969E 00,-4.80764E 00,-8.80992E 00,
     *-1.14084E 01,-1.10274E 01,-6.93706E 00, 4.98840E-01, 9.86337E 00,
     * 1.89877E 01, 2.54093E 01, 2.69103E 01, 2.19485E 01, 9.91325E 00,
     *-9.00591E 00,-3.43068E 01,-6.65159E 01,-1.08422E 02,-1.67760E 02/
C
      DATA VK32B/
     *-4.90078E-01,-8.28544E-01, 2.67695E 00, 9.70474E 00, 1.68906E 01,
     * 2.04407E 01, 1.81350E 01, 1.02811E 01,-4.90021E-01,-1.03417E 01,
     *-1.58188E 01,-1.52803E 01,-9.74837E 00,-2.69839E 00, 9.64569E-01,
     *-3.68756E 00,-2.03936E 01,-5.12944E 01,-9.86582E 01,-1.65604E 02,
     *-4.90078E-01,-8.28544E-01, 2.67695E 00, 9.70474E 00, 1.68906E 01,
     * 2.04407E 01, 1.81350E 01, 1.02811E 01,-4.90021E-01,-1.03417E 01,
     *-1.58188E 01,-1.52803E 01,-9.74837E 00,-2.69839E 00, 9.64569E-01,
     *-3.68756E 00,-2.03936E 01,-5.12944E 01,-9.86582E 01,-1.65604E 02,
     * 6.10646E-01, 1.01674E 00,-3.09408E 00,-1.04778E 01,-1.64158E 01,
     *-1.70491E 01,-1.20621E 01,-4.80339E 00,-1.70517E-01,-1.62187E 00,
     *-8.88544E 00,-1.78177E 01,-2.24842E 01,-1.87370E 01,-7.62558E 00,
     * 4.02956E 00, 4.32835E 00,-1.83790E 01,-7.28801E 01,-1.59363E 02,
     * 6.10646E-01, 1.01674E 00,-3.09408E 00,-1.04778E 01,-1.64158E 01,
     *-1.70491E 01,-1.20621E 01,-4.80339E 00,-1.70517E-01,-1.62187E 00,
     *-8.88544E 00,-1.78177E 01,-2.24842E 01,-1.87370E 01,-7.62558E 00,
     * 4.02956E 00, 4.32835E 00,-1.83790E 01,-7.28801E 01,-1.59363E 02/
C
      DATA VK32C/
     *-7.14551E-01,-1.20167E 00, 3.80011E 00, 1.34259E 01, 2.23988E 01,
     * 2.53609E 01, 2.02096E 01, 9.56165E 00, 8.69141E-02, 1.10626E-01,
     * 1.62334E 01, 5.02582E 01, 9.71845E 01, 1.45386E 02, 1.78805E 02,
     * 1.79804E 02, 1.31683E 02, 1.63027E 01,-1.96005E 02,-5.70039E 02,
     *-7.14551E-01,-1.20167E 00, 3.80011E 00, 1.34259E 01, 2.23988E 01,
     * 2.53609E 01, 2.02096E 01, 9.56165E 00, 8.69141E-02, 1.10626E-01,
     * 1.62334E 01, 5.02582E 01, 9.71845E 01, 1.45386E 02, 1.78805E 02,
     * 1.79804E 02, 1.31683E 02, 1.63027E 01,-1.96005E 02,-5.70039E 02,
     * 1.55791E 00, 2.59758E 00,-7.95022E 00,-2.71092E 01,-4.29678E 01,
     *-4.54867E 01,-3.32981E 01,-1.42170E 01,-2.02271E-01, 2.69623E-02,
     *-1.31601E 01,-2.95087E 01,-3.38708E 01,-1.56462E 01, 2.37747E 01,
     * 6.53185E 01, 7.50890E 01, 1.14084E 01,-1.78859E 02,-5.60889E 02,
     * 1.55791E 00, 2.59758E 00,-7.95022E 00,-2.71092E 01,-4.29678E 01,
     *-4.54867E 01,-3.32981E 01,-1.42170E 01,-2.02271E-01, 2.69623E-02,
     *-1.31601E 01,-2.95087E 01,-3.38708E 01,-1.56462E 01, 2.37747E 01,
     * 6.53185E 01, 7.50890E 01, 1.14084E 01,-1.78859E 02,-5.60889E 02/
C
      DATA VK32D/
     *-1.94120E 00,-3.18771E 00, 9.19074E 00, 2.92852E 01, 4.18106E 01,
     * 3.80355E 01, 2.22738E 01, 6.73241E 00, 2.37885E-01,-2.37839E-01,
     *-8.01181E 00,-3.56766E 01,-8.15421E 01,-1.23557E 02,-1.32718E 02,
     *-9.17927E 01,-2.30725E 01,-1.04155E 01,-1.45081E 02,-5.72044E 02,
     *-1.94120E 00,-3.18771E 00, 9.19074E 00, 2.92852E 01, 4.18106E 01,
     * 3.80355E 01, 2.22738E 01, 6.73241E 00, 2.37885E-01,-2.37839E-01,
     *-8.01181E 00,-3.56766E 01,-8.15421E 01,-1.23557E 02,-1.32718E 02,
     *-9.17927E 01,-2.30725E 01,-1.04155E 01,-1.45081E 02,-5.72044E 02/
C
C
      END
      BLOCK DATA
C
C     BLOCK DATA 7 - APRIL 1981
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ACFILT/ACPARM(20),IACFLT(20)
C
      COMMON/CONDMP/IDPHLD
C
      COMMON/CRASTR/VRASTR(36)
C
      COMMON/CSECBD/VSB(46)
C
      COMMON/DPCONS/DPPARM(200),IDPCS(50)
C
      COMMON/DPCSIC/DPIC(50),DPUP(50),DPDN(50)
C
      COMMON/GPCONS/GPPARM(200),IGPCS(50)
C
      COMMON/GPINCS/GPICS(50),GPUP(50),GPDN(50)
C
      COMMON/ISECBD/IVSB(10)
C
C
      COMMON/SECICS/VSBIC(18),SBUP(2),SBDN(2)
C
      COMMON/SBINTF/VSBK(12)
C
      DATA ACPARM/20*0.0D0/
      DATA IACFLT/20*0/
C
      DATA IDPHLD/0/
C
      DATA VRASTR/36*0.0D0/
C
      DATA VSB/46*0.0D0/
C
      DATA DPPARM/200*0.0D0/
      DATA IDPCS/50*0/
C
      DATA DPIC/50*0.0D0/
      DATA DPUP/50*1.0D-3/
      DATA DPDN/50*1.0D-5/
C
      DATA GPPARM/200*0.0D0/
      DATA IGPCS/50*0/
C
      DATA GPICS/50*0.0D0/
      DATA GPUP/50*1.0D-3/
      DATA GPDN/50*1.0D-5/
C
      DATA IVSB/10*0/
C
C
      DATA VSBIC/18*0.0D0/
      DATA SBUP/2*1.0D-3/
      DATA SBDN/2*1.0D-5/
C
      DATA VSBK/12*0.0D0/
C
      END
      BLOCK DATA
C
C     BLK8
C
C     TITLE DATA FOR PLOT HEADINGS
C
      COMPLEX*16 OPT2,TITLE
C
      COMMON/PLTHED/ OPT2(10),TITLE(450)
C
      COMPLEX*16 OPT1(10)
     * /'PSI1            ','THET1           ','PHI1            ',
     *  'OMEG1           ','OMEG2           ','OMEG3           ',
     * 'PHILD           ','NUTAT. ANGLE    ','EPSERR          ',
     * '                '/
C
      DATA OPT2
     * /'ALFAE           ','BETAE           ','GAMAE           ',
     *  'OMBC1           ','OMBC2           ','OMBC3           ',
     *  'PHILD           ','ROLL RATE       ','PITCH RATE      ',
     *  'YAW RATE        '/
C
      COMPLEX*16 FL11(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 FL12(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 FL13(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 FL14(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 FL15(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 FL16(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 FL17(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 FL18(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 FL19(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 FL20(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
C
      COMPLEX*16 DM11(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 DM12(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 DM13(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 DM14(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 DM15(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 DM16(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 DM17(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 DM18(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 DM19(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
      COMPLEX*16 DM20(6)
     * /'DISPL 1-2 PLANE ','RATE 1-2 PLANE  ','DISPL 1-3 PLANE ',
     *  'RATE 1-3 PLANE  ','TWIST 1 AXIS    ','RATE 1 AXIS     '/
C
      COMPLEX*16 FEMOD(9)
     * /'MODE1 1-2 PLANE ','MODE1 1-3 PLANE ',
     *  'MODE2 1-2 PLANE ','MODE2 1-3 PLANE ',
     *  'MODE3 1-2 PLANE ','MODE3 1-3 PLANE ',
     *  'MODE1 TWIST     ','MODE2 TWIST     ','MODE3 TWIST     '/
      COMPLEX*16 DEMOD(9)
     * /'MODE1 1-2 PLANE ','MODE1 1-3 PLANE ',
     *  'MODE2 1-2 PLANE ','MODE2 1-3 PLANE ',
     *  'MODE3 1-2 PLANE ','MODE3 1-3 PLANE ',
     *  'MODE1 TWIST     ','MODE2 TWIST     ','MODE3 TWIST     '/
C
      COMPLEX*16 GAREAD(6)
     * /'ACC. READING  1 ','ACC. READING  2 ','ACC. READING  3 ',
     *  'ACC. READING  4 ','ACC. READING  5 ','ACC. READING  6 '/
C
      COMPLEX*16 BDYINT(3)
     * /'BODY    IXX     ','BODY    IYY     ','BODY    IZZ     '/
      COMPLEX*16 HMMNTM(3)
     * /'RT.ASCENSION-HI ','DECLINATION-HI  ','MAGNITUDE OF HI '/
C
      COMPLEX*16 RTTNSN(10)
     * /'ROOT TENSION  1 ','ROOT TENSION  2 ','ROOT TENSION  3 ',
     *  'ROOT TENSION  4 ','ROOT TENSION  5 ','ROOT TENSION  6 ',
     *  'ROOT TENSION  7 ','ROOT TENSION  8 ','ROOT TENSION  9 ',
     *  'ROOT TENSION  10'/
C
      COMPLEX*16 RTBNDM(20)
     *   /'1-2 PLANE BNDM 1','1-3 PLANE BNDM 1',
     *    '1-2 PLANE BNDM 2','1-3 PLANE BNDM 2',
     *    '1-2 PLANE BNDM 3','1-3 PLANE BNDM 3',
     *    '1-2 PLANE BNDM 4','1-3 PLANE BNDM 4',
     *    '1-2 PLANE BNDM 5','1-3 PLANE BNDM 5',
     *    '1-2 PLANE BNDM 6','1-3 PLANE BNDM 6',
     *    '1-2 PLANE BNDM 7','1-3 PLANE BNDM 7',
     *    '1-2 PLANE BNDM 8','1-3 PLANE BNDM 8',
     *    '1-2 PLANE BNDM 9','1-3 PLANE BNDM 9',
     *    '1-2 PLANE BNDM10','1-3 PLANE BNDM10'/
C
      COMPLEX*16 SANGLS(2)
     *  /'BODY SUN ANG-ALP','BODY SUN ANG-DEC'/
C
      COMPLEX*16 FIELDM(3)
     *  /'MAGNET.VECTOR-B1','MAGNET.VECTOR-B2','MAGNET.VECTOR-B3'/
C
      COMPLEX*16 HHHVAL/'HAMILTONIAN     '/
      COMPLEX*16 BNDMAG(10)
     *   /'MAG. BNDM-ELEM 1',
     *    'MAG. BNDM-ELEM 2',
     *    'MAG. BNDM-ELEM 3',
     *    'MAG. BNDM-ELEM 4',
     *    'MAG. BNDM-ELEM 5',
     *    'MAG. BNDM-ELEM 6',
     *    'MAG. BNDM-ELEM 7',
     *    'MAG. BNDM-ELEM 8',
     *    'MAG. BNDM-ELEM 9',
     *    'MAG. BNDM-ELEM10'/
C
      COMPLEX*16 WHLSPD(3)
     * /'AXIS 1 WHL. SPD.','AXIS 2 WHL. SPD.','AXIS 3 WHL. SPD.'/
C
      COMPLEX*16 EXTMOM(3)
     * /'EXTERNAL MOMENT1','EXTERNAL MOMENT2','EXTERNAL MOMENT3'/
C
      COMPLEX*16 HMBODY(3)
     * /'AXIS 1  MOMENTUM','AXIS 2  MOMENTUM','AXIS 3  MOMENTUM'/
C
      COMPLEX*16 CONSYS(20)
     */'CONT. SYS. INT 1','CONT. SYS. INT 2','CONT. SYS. INT 3',
     * 'CONT. SYS. INT 4','DEB NUTATION ANG','CONT. SYS. INT 6',
     * 'CONT. SYS. INT 7','CONT. SYS. INT 8','CONT. SYS. INT 9',
     * 'CONT. SYS. INT10','CONT. SYS. INT11','CONT. SYS. INT12',
     * 'CONT. SYS. INT13','CONT. SYS. INT14','CONT. SYS. INT15',
     * 'CONT. SYS. INT16','CONT. SYS. INT17','CONT. SYS. INT18',
     * 'CONT. SYS. INT19','CONT. SYS. INT20'/
C
      COMPLEX*16 SBDTIT(9)
     1/'GAMMA SEC. BODY ','ALPHA SEC. BODY ','BETA SEC. BODY  ',
     2 'GAMMAD SEC. BODY','ALPHAD SEC. BODY','BETAD SEC. BODY ',
     3 'OMEGA1 SEC. BODY','OMEGA2 SEC. BODY','OMEGA3 SEC. BODY'/
C
      COMPLEX*16 ACFTIT(3)
     1/'SENSOR OUTPUT   ','FILTER OUTPUT   ','FILTER W-OUTPUT '/
C
      COMPLEX*16 PRODIN(3)
     * /'BODY    IXY     ','BODY    IXZ     ','BODY    IYZ     '/
C
      COMPLEX*16 TSLOPS(40)
     * /'SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ',
     *  'SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ',
     *  'SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ',
     *  'SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ',
     *  'SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ',
     *  'SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ',
     *  'SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ',
     *  'SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ',
     *  'SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ',
     *  'SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ',
     *  'SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ',
     *  'SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ',
     *  'SLOPE 1-2 PLANE ','SLOPE 1-3 PLANE ','SLOPE 1-2 PLANE ',
     *  'SLOPE 1-3 PLANE '/
C
      COMPLEX*16 SLPMOD(6)
     *  /'MODE1 1-2 SLOPE ','MODE1 1-3 SLOPE ','MODE2 1-2 SLOPE ',
     *  'MODE2 1-3 SLOPE ','MODE3 1-2 SLOPE ','MODE3 1-3 SLOPE '/
C
      COMPLEX*16 GIMBLE(4)
     * /'GIMBLE AZIMUTH  ','GIMBLE AZIM RATE','GIMBLE ELEVATION',
     *  'GIMBLE ELEV RATE'/
C
      COMPLEX*16 DIMBLE(4)
     * /'GIMBLE AZIMUTH  ','GIMBLE AZIM RATE','GIMBLE ELEVATION',
     *  'GIMBLE ELEV RATE'/
C
      COMPLEX*16 PLATCS(9)
     * /'FILTER MAG 1    ','FILTER MAG 2    ','FILTER MAG 3    ',
     *  'AZIMUTH ERROR   ','ELEVATION ERROR ','AZIM P I D OUTPT',
     *  'ELEV P I D OUTPT','AZIM MOTOR TRQUE','ELEV MOTOR TRQUE'/
C
      COMPLEX*16 DLATCS(9)
     * /'FILTER MAG 1    ','FILTER MAG 2    ','FILTER MAG 3    ',
     *  'AZIMUTH ERROR   ','ELEVATION ERROR ','AZIM P I D OUTPT',
     *  'ELEV P I D OUTPT','AZIM MOTOR TRQUE','ELEV MOTOR TRQUE'/
C
      COMPLEX*16 ELTEMP(10)
     *   /'AVG. TEMP-ELEM 1',
     *    'AVG. TEMP-ELEM 2',
     *    'AVG. TEMP-ELEM 3',
     *    'AVG. TEMP-ELEM 4',
     *    'AVG. TEMP-ELEM 5',
     *    'AVG. TEMP-ELEM 6',
     *    'AVG. TEMP-ELEM 7',
     *    'AVG. TEMP-ELEM 8',
     *    'AVG. TEMP-ELEM 9',
     *    'AVG. TEMP-ELEM10'/
C
      COMPLEX*16 AWHSPD(3)
     * /'AXIS 1 WHL. SPD.','AXIS 2 WHL. SPD.','AXIS 3 WHL. SPD.'/
C
      COMPLEX*16 FILOUT(3)
     * /'AXIS 1  FILT OUT','AXIS 2  FILT OUT','AXIS 3  FILT OUT'/
C
      COMPLEX*16 AILOUT(2)
     * /'ARB AXS FILT OUT','ARB AXS WHL. SPD'/
C
      COMPLEX*16 SPARES(87)
     * /87*'                '/
C
      COMPLEX*16 ENVMOM(9)
     * /'GR. GR. MOMENT 1','GR. GR. MOMENT 2','GR. GR. MOMENT 3',
     *  'SOL PR. MOMENT 1','SOL PR. MOMENT 2','SOL PR. MOMENT 3',
     *  'AIR DR. MOMENT 1','AIR DR. MOMENT 2','AIR DR. MOMENT 3'/
C
      COMPLEX*16 SAGLOT(2)
     * /'SNGL AXS GMB ANG','SNGL AXS GMB RT.'/
C
      COMPLEX*16 SAPLCS(6)
     * /'FILTER VECTOR 1 ','FILTER VECTOR 2 ','FILTER VECTOR 3 ',
     *  'ANGLE ERROR     ','ANGL P I D OUTPT','ANGL MOTOR TRQUE'/
C
      COMPLEX*16 REACTR(6)
     * /'REACTN MOMENT  1','REACTN MOMENT  2','REACTN MOMENT  3',
     *  'MOTOR  TORQUE  1','MOTOR  TORQUE  2','MOTOR  TORQUE  3'/
C
C
      EQUIVALENCE (TITLE(1),OPT1(1))
C
      EQUIVALENCE (TITLE(11),FL11(1)),(TITLE(17),FL12(1))
     * ,(TITLE(23),FL13(1)),(TITLE(29),FL14(1)),(TITLE(35),FL15(1))
     * ,(TITLE(41),FL16(1)),(TITLE(47),FL17(1)),(TITLE(53),FL18(1))
     * ,(TITLE(59),FL19(1)),(TITLE(65),FL20(1))
C
      EQUIVALENCE (TITLE(71),DM11(1)),(TITLE(77),DM12(1))
     * ,(TITLE(83),DM13(1)),(TITLE(89),DM14(1)),(TITLE(95),DM15(1))
     * ,(TITLE(101),DM16(1)),(TITLE(107),DM17(1)),(TITLE(113),DM18(1))
     * ,(TITLE(119),DM19(1)),(TITLE(125),DM20(1))
C
      EQUIVALENCE (TITLE(131),FEMOD(1)),(TITLE(140),DEMOD(1))
     * ,(TITLE(149),GAREAD(1)),(TITLE(155),BDYINT(1))
     * ,(TITLE(158),HMMNTM(1)),(TITLE(161),RTTNSN(1))
     * ,(TITLE(171),RTBNDM(1)),(TITLE(191),SANGLS(1))
     * ,(TITLE(193),FIELDM(1)),(TITLE(196),HHHVAL)
     * ,(TITLE(197),BNDMAG(1))
C
      EQUIVALENCE (TITLE(207),WHLSPD(1))
C
      EQUIVALENCE (TITLE(210),EXTMOM(1)),(TITLE(213),HMBODY(1))
C
      EQUIVALENCE (TITLE(216),CONSYS(1))
C
      EQUIVALENCE (TITLE(236),SBDTIT(1)),(TITLE(245),ACFTIT(1))
C
      EQUIVALENCE (TITLE(248),PRODIN(1))
      EQUIVALENCE (TITLE(251),TSLOPS(1))
      EQUIVALENCE (TITLE(291),SLPMOD(1))
      EQUIVALENCE (TITLE(297),GIMBLE(1))
      EQUIVALENCE (TITLE(301),PLATCS(1))
      EQUIVALENCE (TITLE(310),DIMBLE(1))
      EQUIVALENCE (TITLE(314),DLATCS(1))
      EQUIVALENCE (TITLE(323),FILOUT(1))
      EQUIVALENCE (TITLE(326),AWHSPD(1))
      EQUIVALENCE (TITLE(329),AILOUT(1))
      EQUIVALENCE (TITLE(331),ELTEMP(1))
      EQUIVALENCE (TITLE(341),SAGLOT(1))
      EQUIVALENCE (TITLE(343),SAPLCS(1))
      EQUIVALENCE (TITLE(349),ENVMOM(1))
      EQUIVALENCE (TITLE(358),REACTR(1))
      EQUIVALENCE (TITLE(364),SPARES(1))
C
C
      END
      BLOCK DATA
C    *************************************************************
C     BLK9
C    *************************************************************
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CGIMBL/ GMVEC(77)
C
      COMMON/CPLTCS/ PCSPRM(100),IPLTCS(20)
C
      COMMON/GMBICS/ GMANG(7),GMUP(2),GMDN(2)
C
      COMMON/GMINTF/ GMKS(8)
C
      COMMON/IGIMBL/ IGMBL,NVEC(4)
C
      COMMON/JETDMP/ ZMS0,DMVEC(11),IJTDMP
C
C
      DATA GMVEC/77*0.0D0/
C
      DATA PCSPRM/100*0.0D0/
      DATA IPLTCS/20*0/
C
      DATA GMANG/7*0.0D0/
      DATA GMUP/2*1.0D-3/
      DATA GMDN/2*1.0D-5/
C
      DATA GMKS/8*0.0D0/
C
      DATA IGMBL/0/
      DATA NVEC/4*0/
C
      DATA ZMS0/10.0D0/
      DATA DMVEC/11*0.0D0/
      DATA IJTDMP/0/
C
C
      END
      SUBROUTINE BOUNDS
C
C        'BOUNDS',THROUGHT INPUT OR PRESET VALUES, CALCULATES UPPER
C        AND LOWER BOUNDS FOR THE DERIVATIVES WHICH ARE USED IN 'ADMIMP'
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 NAME     ,NAME1(2),NAMD(10,3),NAMV(4)
      REAL*4 ACNTRL
C
      COMMON/ANTENA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3),ZBZ(3,10),
     .               NELMTS,NDAMPR,MODES(10)
C
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
C
      COMMON/ XIN4 / UP(150),DN(150),CONSA,COMEG,AOOP,AOOPV,AOOP1,AOOPV1
     .              ,AIP,AIPV,AIP1,AIPV1,DOOP,DOOPV,DOOP1,DOOPV1,DIP,
     .               DIPV,DIP1,DIPV1,DUC,DUC1,DUCD,DUCD1
C
      COMMON/IAFSD/DELMAX,DELMIN,KCUT(150),NCUT,NUP
C
      COMMON/IBFSD/HEAD(150,4),NAME(150)
C
C     DIMENSION HEAD(150,4),HED1(4),HED2(4),HED3(4),HED4(4),HED5(4),
      DIMENSION             HED1(4),HED2(4),HED3(4),HED4(4),HED5(4),
     .          HED6(4),HED7(4),HED8(4),HED9(4)
C
C
      DATA NAME1/'PHI     ','PHIDOT  '/
C
      DATA NAMD /'(1,1)   ','(2,1)   ','(3,1)   ','(4,1)   ','(5,1)   ',
     .           '(6,1)   ','(7,1)   ','(8,1)   ','(9,1)   ','(10,1)  ',
     .           '(1,2)   ','(2,2)   ','(3,2)   ','(4,2)   ','(5,2)   ',
     .           '(6,2)   ','(7,2)   ','(8,2)   ','(9,2)   ','(10,2)  ',
     .           '(1,3)   ','(2,3)   ','(3,3)   ','(4,3)   ','(5,3)   ',
     .           '(6,3)   ','(7,3)   ','(8,3)   ','(9,3)   ','(10,3)  '/
C
      DATA NAMV /'Y(1)    ','Y(2)    ','Y(3)    ','S SUB Y '/
C
      DATA BLANK/'        '/
C
      DATA HED1 /'DAMPER O','UT-OF-PL','ANE DEFL','ECTIONS '/
      DATA HED2 /'DAMPER O','UT-OF-PL','ANE VELO','CITIES  '/
      DATA HED3 /'DAMPER I','N-PLANE ','DEFLECTI','ONS     '/
      DATA HED4 /'DAMPER I','N-PLANE ','VELOCITI','ES      '/
      DATA HED5 /'ANTENNA ','OUT-OF-P','LANE DEF','LECTIONS'/
      DATA HED6 /'ANTENNA ','OUT-OF-P','LANE VEL','OCITIES '/
      DATA HED7 /'ANTENNA ','IN-PLANE',' DEFLECT','IONS    '/
      DATA HED8 /'ANTENNA ','IN-PLANE',' VELOCIT','IES     '/
      DATA HED9 /'VISCOUS ','NUTATION',' DAMPING','        '/
C
C     ZERO INTEGRATOR DIAGNOSTIC COUNTERS
      DELMAX=0.0D0
      DELMIN=1.0D9
      NCUT=0
      NUP=0
C     ESTABLISH DEFAULT BOUNDS
      DO 5 I=1,150
      UPBND(I)=1.D20
      DNBND(I)=1.D20
      KCUT(I)=0
      DO 5 J=1,4
    5 HEAD(I,J)=BLANK
C
      JDAMPR=0
      JELMNT=0
C
C BOUNDS FOR 'A' ARRAY(SA)
C
C
      DO 10 I=1,6
      UPBND(I)=CONSA
   10 DNBND(I)=CONSA/1.D2
C
C BOUNDS FOR OMEG BODY RATES
C
      DO 20 I=1,3
      L=I + 6
      UPBND(L)=COMEG
   20 DNBND(L)=COMEG/1.D2
C
C CHECK FOR DAMPER CAGED(UNCAGED)
C
      IKOUNT=9
      IF(IDAMP.EQ.0) GO TO 30
C
C DAMPER UNCAGED NEED BOUNDS FOR PHI,PHIDOT
C
      IKOUNT=11
      UPBND(10)=DUC
      UPBND(11)=DUCD
      DNBND(10)=DUC1
      DNBND(11)=DUCD1
      NAME(10)=NAME1(1)
      NAME(11)=NAME1(2)
C
C CHECK FOR ANTENNA AND DAMPER BOUNDS REQUIREMENTS
C
   30 DO 40 I=1,IK
      IF(NK(I).NE.0) GO TO 50
   40 CONTINUE
C
      GO TO 131
C
   50 DO 130 K=1,IK
      M=NK(K)
      IF(M.EQ.0) GO TO 130
      IF((K-K1).GT.0) GO TO 90
      IF(JDAMPR.EQ.1) GO TO 90
C
C DAMPER BOUNDS
C
      DO 80 J=1,NDAMPR
      M=NK(J)
C
C DAMPER OUT OF PLANE
C
      DO 60 I=1,M
      IKOUNT=IKOUNT + 1
C
      DO 55 N=1,4
   55 HEAD(IKOUNT,N)=HED1(N)
C
   56 NAME(IKOUNT)=NAMD(J,I)
      UPBND(IKOUNT)=DOOP
   60 DNBND(IKOUNT)=DOOP1
C
C DAMPER OUT OF PLANE VELOCITY
C
      DO 65 I=1,M
      IKOUNT=IKOUNT + 1
C
      DO 63 N=1,4
   63 HEAD(IKOUNT,N)=HED2(N)
C
   64 NAME(IKOUNT)=NAMD(J,I)
      UPBND(IKOUNT)=DOOPV
   65 DNBND(IKOUNT)=DOOPV1
C
C DAMPER IN PLANE
C
      DO 70 I=1,M
      IKOUNT=IKOUNT + 1
C
      DO 66 N=1,4
   66 HEAD(IKOUNT,N)=HED3(N)
C
   67 NAME(IKOUNT)=NAMD(J,I)
      UPBND(IKOUNT)=DIP
   70 DNBND(IKOUNT)=DIP1
C
C DAMPER IN PLANE VELOCITY
C
      DO 75 I=1,M
      IKOUNT=IKOUNT + 1
C
      DO 73 N=1,4
   73 HEAD(IKOUNT,N)=HED4(N)
C
   74 NAME(IKOUNT)=NAMD(J,I)
      UPBND(IKOUNT)=DIPV
   75 DNBND(IKOUNT)=DIPV1
C
   80 CONTINUE
      JDAMPR=1
C
      GO TO 130
C
C ANTENNA BOUNDS
C
   90 IF(JELMNT.EQ.1) GO TO 130
      DO 120 L=1,NELMTS
      KK=L + K1
      M=NK(KK)
      IF(M.EQ.0) GO TO 120
C
C ANTENNA OUT OF PLANE
C
      DO 100 I=1,M
      IKOUNT=IKOUNT + 1
C
      DO 97 N=1,4
   97 HEAD(IKOUNT,N)=HED5(N)
C
   98 NAME(IKOUNT)=NAMD(L,I)
      UPBND(IKOUNT)=AOOP
  100 DNBND(IKOUNT)=AOOP1
C
C ANTENNA OUT OF PLANE VELOCITY
C
      DO 105 I=1,M
      IKOUNT=IKOUNT + 1
C
      DO 103 N=1,4
  103 HEAD(IKOUNT,N)=HED6(N)
C
  104 NAME(IKOUNT)=NAMD(L,I)
      UPBND(IKOUNT)=AOOPV
  105 DNBND(IKOUNT)=AOOPV1
C
C ANTENNA IN PLANE
C
      DO 110 I=1,M
      IKOUNT=IKOUNT + 1
C
      DO 108 N=1,4
  108 HEAD(IKOUNT,N)=HED7(N)
C
  109 NAME(IKOUNT)=NAMD(L,I)
      UPBND(IKOUNT)=AIP
  110 DNBND(IKOUNT)=AIP1
C
C ANTENNA IN PLANE VELOCITY
C
      DO 115 I=1,M
      IKOUNT=IKOUNT + 1
C
      DO 113 N=1,4
  113 HEAD(IKOUNT,N)=HED8(N)
C
  114 NAME(IKOUNT)=NAMD(L,I)
      UPBND(IKOUNT)=AIPV
  115 DNBND(IKOUNT)=AIPV1
C
  120 CONTINUE
      JELMNT=1
C
  130 CONTINUE
C
C CHECK FOR VISCOUS DAMPING
C
  131 IF(IVISCS.EQ.0) GO TO 140
C
C SET BOUNDS FOR VISCOUS DAMPING
C
      IKOUNT=IKOUNT + 1
C
      DO 135 NL=1,4
  135 HEAD(IKOUNT,NL)=HED9(NL)
C
      N=NUMEQS-3
      NAME(N)   =NAMV(1)
      NAME(N+1) =NAMV(2)
      NAME(N+2) =NAMV(3)
      NAME(N+3) =NAMV(4)
      UPBND(N)=   DUC
      UPBND(N+1)= DUC
      UPBND(N+2)= DUC
      UPBND(N+3)= DUCD
      DNBND(N)=   DUC1
      DNBND(N+1)= DUC1
      DNBND(N+2)= DUC1
      DNBND(N+3)= DUCD1
C
C CHECK FOR INPUT VALUES OF BOUNDS
C
  140 DO 150 I=1,NUMEQS
      IF(UP(I).GT.0.D0) UPBND(I)=UP(I)
  150 IF(DN(I).GT.0.D0) DNBND(I)=DN(I)
      RETURN
      END
      SUBROUTINE BRANGE
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CANTNA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     1               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,
     1               NK(10),LK(10),LLK(10)
C
      COMMON/RPOOL1/ DUM01(29),XLK(10),DUM02(86)
C
      COMMON/SLANTN/ AP(10,3),APD(10,3),BP(10,3),BPD(10,3),
     1               SAP(10),SAPD(10),SBP(10),SBPD(10)
C
      COMMON/TMSINR/ TIPINR(3,10),RTSQ(3,10),XIPL(6),BETL(6)
C
      COMMON/VARBLS/ DEP(150),DER(150)
C
C
C
      DO 10 I=1,10
      SAP(I)=0.0D0
      SAPD(I)=0.0D0
      SBP(I)=0.0D0
      SBPD(I)=0.0D0
      DO 10 J=1,3
      A(I,J)=0.0D0
      AP(I,J)=0.0D0
      ADOT(I,J)=0.0D0
      APD(I,J)=0.0D0
      B(I,J)=0.0D0
      BP(I,J)=0.0D0
      BDOT(I,J)=0.0D0
      BPD(I,J)=0.0D0
      DIN(I,J)=0.0D0
      DINDOT(I,J)=0.0D0
      DOUT(I,J)=0.0D0
      DOUTDT(I,J)=0.0D0
   10 CONTINUE
C
C
      IKOUNT=9
      IF(IDAMP.EQ.1) IKOUNT=11
      DO 40 K=1,IK
      M=NK(K)
      IF(M.EQ.0) GO TO 40
      XL=XLK(K)
      ILK=LK(K)
      I1=3*(ILK-1)
      DO 15 I=1,M
      IKOUNT=IKOUNT+1
      I2=I1+I
      AP(K,I)=DEP(IKOUNT)*XIPL(I2)/XL
      SAP(K)=SAP(K)+AP(K,I)
   15 CONTINUE
C
      DO 20 I=1,M
      IKOUNT=IKOUNT+1
      I2=I1+I
      APD(K,I)=DEP(IKOUNT)*XIPL(I2)/XL
      SAPD(K)=SAPD(K)+APD(K,I)
   20 CONTINUE
C
      DO 25 I=1,M
      IKOUNT=IKOUNT+1
      I2=I1+I
      BP(K,I)=DEP(IKOUNT)*XIPL(I2)/XL
      SBP(K)=SBP(K)+BP(K,I)
   25 CONTINUE
C
      DO 30 I=1,M
      IKOUNT=IKOUNT+1
      I2=I1+I
      BPD(K,I)=DEP(IKOUNT)*XIPL(I2)
      BPD(K,I)=DEP(IKOUNT)*XIPL(I2)/XL
      SBPD(K)=SBPD(K)+BPD(K,I)
   30 CONTINUE
C
   40 CONTINUE
C
      CALL ARANGE
C
      RETURN
C
      END
      BLOCK DATA
C     BVERS
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/VERS/VNO
      DATA VNO/8HDEC 1984/
      END
      SUBROUTINE CHECK(QA,QB,NX)
C     ZEROS OUT ANTENNA DEFLECTIONS AND VELOCITIES IF NONE ARE INPUT
      IMPLICIT REAL*8 (A-H,O-Z)
C
      DIMENSION QA(10,3),QB(10,3)
C
      DO 20 I=1,10
      DO 10 J=1,3
      QA(I,J)=0.0D0
      QA(I,J)=QB(I,J)
      IF(DABS(QA(I,J)).LE.10.D-30) QA(I,J)=0.0D0
   10 CONTINUE
   20 CONTINUE
      RETURN
      END
      SUBROUTINE CKINPT(NSUBX)
C
C        'CKINPT' CALCULATES THE TRANSFORMATION MATRIX BETWEEN THE
C        ELEMENT FRAME AND THE BODY FRAME
C
        IMPLICIT REAL*8 (A-H,O-Z)
      REAL * 8 NSUBX(3)
      INTEGER*4 ACNTRL
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/RPOOL5/ CKMAT(3,3,10),FM2(3,3)
C
      COMMON/XIN3  / ALFAEK(10),BETAEK(10),GAMAEK(10),ETTAD,ZETTAD
C
      DIMENSION S(3,3),CK(3,3,10)
C
C
C
      DO 10 I=1,3
      DO 10 J=1,3
      FM2(I,J)=0.D0
   10 FM2(I,I)=1.D0
C
C
      IF(IVISCS.EQ.0) GO TO 15
C
C                    CALCULATE NSUBX ARRAY
      CETA=DCOS(ETTAD*RADIAN)
      SETA=DSIN(ETTAD*RADIAN)
      SZETA=DSIN(ZETTAD*RADIAN)
      CZETA=DCOS(ZETTAD*RADIAN)
C
      NSUBX(1)=SETA*CZETA
      NSUBX(2)=SETA*SZETA
      NSUBX(3)=CETA
C
C
   15 DO 30 K=1,IK
C
C
      SALFAE=DSIN(ALFAEK(K)*RADIAN)
      CALFAE=DCOS(ALFAEK(K)*RADIAN)
      SBETAE=DSIN(BETAEK(K)*RADIAN)
      CBETAE=DCOS(BETAEK(K)*RADIAN)
      SGAMAE=DSIN(GAMAEK(K)*RADIAN)
      CGAMAE=DCOS(GAMAEK(K)*RADIAN)
C
      S(1,1)=CGAMAE*CBETAE + SALFAE*SGAMAE*SBETAE
      S(1,2)=CGAMAE*SALFAE*SBETAE - SGAMAE*CBETAE
      S(1,3)=CALFAE*SBETAE
C
      S(2,1)=SGAMAE*CALFAE
      S(2,2)=CALFAE*CGAMAE
      S(2,3)=-SALFAE
C
      S(3,1)=SGAMAE*SALFAE*CBETAE - SBETAE*CGAMAE
      S(3,2)=CGAMAE*SALFAE*CBETAE + SBETAE*SGAMAE
      S(3,3)=CALFAE*CBETAE
C
C
      DO 20 I=1,3
      DO 20 J=1,3
   20 CK(I,J,K)=S(I,J)
C
   30 CONTINUE
C
      N=1
      DO 70 K=1,IK
      L=IK-K1+N
      IF((K-K1).GT.0) L=K-K1
C
      DO 40 I=1,3
      DO 40 J=1,3
   40 CKMAT(I,J,K)=CK(I,J,L)
      N=N + 1
C
C
   70 CONTINUE
      IF(IOUT.EQ.1) RETURN
      WRITE(6,10000)
      DO 80 K=1,IK
   80 WRITE(6,10001) ((CKMAT(I,J,K),J=1,3),I=1,3)
C
      RETURN
10000 FORMAT('0',3X,'CKMAT')
10001 FORMAT('0',3X,3(G15.8,2X)/3X,3(G15.8,2X)/3X,3(G15.8,2X))
      END
      SUBROUTINE COILDP(XMB)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/MAGCOM/COILS(3)
C
      COMMON/MOMENT/IDUM(3),IMGMTS,JDUM(2)
C
      COMMON/OUTTHR/SMAGB(3),XMB1(3),RWH(3)
C
      DIMENSION XMB(3)
C
      DATA IFLAG/0/
C
      B1=SMAGB(1)
      B2=SMAGB(2)
      B3=SMAGB(3)
      B12=B1*B1+B2*B2
      B12=DSQRT(B12)
      IF(B12.LT.DABS(B3)) GO TO 99
      IF(IMGMTS.GT.2) GO TO 10
C
C     PROPORTIONAL DRIVE
C
      C1=B2*COILS(1)/B12
      C2=B1*COILS(2)/B12
      GO TO 20
   10 CONTINUE
C
C     CONSTANT LEVEL DRIVE
C
      C1=0.0D0
      IF(B2.NE.0.0D0) C1=B2*COILS(1)/DABS(B2)
      C2=0.0D0
      IF(B1.NE.0.0D0) C2=B1*COILS(2)/DABS(B1)
   20 CONTINUE
      XMB(1)=B3*C2
      XMB(2)=-B3*C1
      XMB(3)=B2*C1-B1*C2
      GO TO 100
C
   99 CONTINUE
      IF(IFLAG.EQ.0) WRITE(6,600) B1,B2,B3
  600 FORMAT(' ',5X,'BODY FRAME MAG FIELD COMPONENTS',1P3E13.5,
     1 ' SPIN AXIS COMPONENT GREATER THAN TRANSVERSE COMPONENT')
      IFLAG=1
  100 CONTINUE
C
C
C
      RETURN
C
      END
      SUBROUTINE COMBNS(K,XLK,XL1,XL2,XL3,DRPR,ITEST)
C
      IMPLICIT REAL*8(A-H,O-Z)
C    *                                                            *
C
C    **************************************************************
C    *    COMBNS COMBINES ARRAYS FOR THE SIMULATION OF LINEARLY   *
C    *    VARYING DRAG PRESSURE FOR VERY LONG ELEMENTS.           *
C    *                                                            *
C    **************************************************************
C
      COMMON/COMSOL/ ZZ01(10),ZZ12(3,10),ZZ23(9,10),SZS01(10),SZS02(10)
     *              ,SZS11(3,10),SZS12(3,10),SZS13(3,10),SZS21(9,10)
     *              ,SZS22(9,10),SZS23(9,10),SZS24(9,10),SZS31(27,10)
     *              ,SZS32(27,10),SZS41(81,10)
C
      COMMON/COMSL1/ ZS101(2),ZS102(2),ZS111(6),ZS112(6),ZS113(6)
     *              ,ZS121(18),ZS122(18),ZS123(18),ZS124(18),ZS131(54)
     *              ,ZS132(54),ZS141(162),Z2S101(2),Z2S112(6)
     *              ,Z2S123(18),XLTEST
C
      COMMON/IPOOL1/ IDUM(19),LK(10),LLK(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3)
     *              ,ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3)
     *              ,ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3)
     *              ,SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
C
      DATA FEET/3.28083333333333D3/
C
      DIMENSION XB(3),XI(3),SXSAT(3),SZZ12(3),SZZ23(9),SSZS11(3)
     *         ,SSZS12(3),SSZS13(3),SSZS21(9),SSZS22(9),SSZS23(9)
     *         ,SSZS24(9),SSZS31(27),SSZS32(27),SSZS41(81)
C
      IF(XLK.LT.XLTEST) RETURN
      IF(DRPR.EQ.0.0D0) RETURN
C
      IF(ITEST.EQ.2) GO TO 100
C
C     FIND DRAG PRESSURE AT ELEMENT TIP
C
C     FIND BODY POSITION AT ELEMENT TIP
C
      DO 10 I=1,3
      XB(I)=FCM(I,1)*XL1+FCM(I,2)*XL2+FCM(I,3)*XL3
      XB(I)=XB(I)+YIZK(I)
   10 CONTINUE
C
C
C     FIND INERTIAL POSITION OF ELEMENT TIP
C
      DO 20 I=1,3
      XI(I)=SA(I,1)*XB(1)+SA(I,2)*XB(2)+SA(I,3)*XB(3)
   20 CONTINUE
C
C     MODIFY POSITION VECTOR IN COMMON FOR AIRDRG
C
      DO 30 I=1,3
      SXSAT(I)=XSAT(I)
      XSAT(I)=XSAT(I)+XI(I)/FEET
   30 CONTINUE
      SP1=P1
C
      CALL AIRDRG(2)
C
      DELTP=(P1-DRPR)/DRPR
C
C     RESTORE XSAT AND P1 TO ORIGINAL VALUES
C
      DO 40 I=1,3
      XSAT(I)=SXSAT(I)
   40 CONTINUE
      P1=SP1
C
C     SAVE COMSOL ARRAYS
C
      SZZ01=ZZ01(K)
      SSZS01=SZS01(K)
      SSZS02=SZS02(K)
C
      DO 50 I=1,3
      SZZ12(I)=ZZ12(I,K)
      SSZS11(I)=SZS11(I,K)
      SSZS12(I)=SZS12(I,K)
      SSZS13(I)=SZS13(I,K)
   50 CONTINUE
C
      DO 51 I=1,9
      SZZ23(I)=ZZ23(I,K)
      SSZS21(I)=SZS21(I,K)
      SSZS22(I)=SZS22(I,K)
      SSZS23(I)=SZS23(I,K)
      SSZS24(I)=SZS24(I,K)
   51 CONTINUE
C
      DO 52 I=1,27
      SSZS31(I)=SZS31(I,K)
      SSZS32(I)=SZS32(I,K)
   52 CONTINUE
      DO 53 I=1,81
C
      SSZS41(I)=SZS41(I,K)
   53 CONTINUE
C
      L0=1
      LNK=0
      IF(LK(K).EQ.1) GO TO 55
      L0=2
      LNK=3
   55 CONTINUE
      L1=LNK
      L2=LNK*LNK
      L3=L1*L2
      L4=L1*L3
C
C     LOAD COMSOL ARRAYS WITH COMBINED ARRAYS
C
      ZZ01(K)=ZZ01(K)+DELTP*Z2S101(L0)
      SZS01(K)=SZS01(K)+DELTP*ZS101(L0)
      SZS02(K)=SZS02(K)+DELTP*ZS102(L0)
C
      DO 60 I=1,3
      I1=L1+I
      ZZ12(I,K)=ZZ12(I,K)+DELTP*Z2S112(I1)
      SZS11(I,K)=SZS11(I,K)+DELTP*ZS111(I1)
      SZS12(I,K)=SZS12(I,K)+DELTP*ZS112(I1)
      SZS13(I,K)=SZS13(I,K)+DELTP*ZS113(I1)
   60 CONTINUE
C
      DO 61 I=1,9
      I2=L2+I
      ZZ23(I,K)=ZZ23(I,K)+DELTP*Z2S123(I2)
      SZS21(I,K)=SZS21(I,K)+DELTP*ZS121(I2)
      SZS22(I,K)=SZS22(I,K)+DELTP*ZS122(I2)
      SZS23(I,K)=SZS23(I,K)+DELTP*ZS123(I2)
      SZS24(I,K)=SZS24(I,K)+DELTP*ZS124(I2)
   61 CONTINUE
C
      DO 62 I=1,27
      I3=L3+I
      SZS31(I,K)=SZS31(I,K)+DELTP*ZS131(I3)
      SZS32(I,K)=SZS32(I,K)+DELTP*ZS132(I3)
   62 CONTINUE
C
      DO 63 I=1,81
      I4=L4+I
      SZS41(I,K)=SZS41(I,K)+DELTP*ZS141(I4)
   63 CONTINUE
C
C     RETURN TO SOLAR FOR LINEARLY VARYING DRAG FORCE CALCULATION
C
      RETURN
C
  100 CONTINUE
C
C     RESTORE ORIGINAL ARRAYS TO COMSOL
C
      ZZ01(K)=SZZ01
      SZS01(K)=SSZS01
      SZS02(K)=SSZS02
C
      DO 110 I=1,3
      ZZ12(I,K)=SZZ12(I)
      SZS11(I,K)=SSZS11(I)
      SZS12(I,K)=SSZS12(I)
      SZS13(I,K)=SSZS13(I)
  110 CONTINUE
C
      DO 111 I=1,9
      ZZ23(I,K)=SZZ23(I)
      SZS21(I,K)=SSZS21(I)
      SZS22(I,K)=SSZS22(I)
      SZS23(I,K)=SSZS23(I)
      SZS24(I,K)=SSZS24(I)
  111 CONTINUE
C
      DO 112 I=1,27
      SZS31(I,K)=SSZS31(I)
      SZS32(I,K)=SSZS32(I)
  112 CONTINUE
C
      DO 113 I=1,81
      SZS41(I,K)=SSZS41(I)
  113 CONTINUE
C
C
      RETURN
      END
      SUBROUTINE COMBNZ
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C        'COMBNZ' COMBINES THE ANTENNA ELEMENT MASS INTEGRALS AND
C        ELEMENT AREA INTEGRALS WITH THE ANTENNA TIP MASS INTEGRALS
C        AND TIP AREA INTEGRALS FOR EACH ANTENNA ELEMENT.
C        IT ALSO CALCULATES DATA FOR INTERNAL FORCES AND TEMPERATURE
C        FORCES FOR EACH ANTENNA ELEMENT.
C
C
      COMMON/CCMBNZ/ CMRK(10),Z01(4),Z02(4),Z03(4),Z04(4),Z11(12),
     .               Z12(12),Z13(12),Z14(12),Z15(12),Z16(12),Z21(36),
     .               Z22(36),Z23(36),Z24(36),Z25(36),Z26(36),Z27(36),
     .               Z28(36),Z31(108),Z32(108),Z33(108),Z34(108),
     .               Z35(108),Z41(324),Z42(324),Z43(324),ZK21(18),
     .               ZK22(18),ZK23(18),ZK31(54),ZK32(54),ZK33(54),
     .               ZK34(54),ZK35(54),ZK36(54),ZK41(162),ZK42(162),
     .               ZK43(162),ZK44(162),ZK45(162),ZK46(162),ZK47(162),
     .               ZK48(162),ZS01(2),ZS02(2),ZS11(6),ZS12(6),ZS13(6),
     .               ZS21(18),ZS22(18),ZS23(18),ZS24(18),ZS31(54),
     .               ZS32(54),ZS41(162),ZT21(108),ZT22(108),STAO(18),
     .               STA1(18),STA2(18),STBO(18),STB1(18),STB2(18),
     .               Z2S01(2),Z2S12(6),Z2S23(18)
C
      COMMON/COMALP/ SZ02(10),SZ03(10),SZ04(10),SZ12(3,10),SZ13(3,10),
     .               SZ14(3,10),SZ15(3,10),SZ16(3,10),SZ21(9,10),
     .               SZ22(9,10),SZ23(9,10),SZ25(9,10),
     .               SZ26(9,10),SZ27(9,10),SZ28(9,10),SZ31(27,10),
     .               SZ32(27,10),SZ33(27,10),SZ34(27,10),SZ35(27,10),
     .               SZ41(81,10),SZ42(81,10),SZ43(81,10)
C
      COMMON/COMSOL/ZZ01(10),ZZ12(3,10),ZZ23(9,10),SZS01(10),SZS02(10),
     1              SZS11(3,10),SZS12(3,10),SZS13(3,10),SZS21(9,10),
     1              SZS22(9,10),SZS23(9,10),SZS24(9,10),SZS31(27,10),
     1              SZS32(27,10),SZS41(81,10)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL8/ SZ01(10),SZ11(3,10),SZ24(9,10)
C
C
C
C
      LNK=3
      LCH4=LNK**4 + 1
      LCH3=LNK**3 + 1
      LCH2=LNK**2 + 1
      LCH1=LNK +1
      I2=2*LCH4 - 1
C
C
      DO 140 I=1,IK
C
C
C
C
      CCN=CMRK(I)/ZLK(I)
      J1=1
      J3=LCH4
      J4=1
      IF(LK(I).EQ.1) GO TO 10
      J1=I2
      J3=J1 + LCH4 - 1
      J4=LCH4
   10 J2=LCH4 - 1
      J5=1
      IF(LLK(I).EQ.2) J5=LCH4
C
C
      DO 30 J=1,J2
C
      SZ41(J,I)=Z41(J1) + Z41(J3)*CCN
C
      SZ42(J,I)=Z42(J1) + Z42(J3)*CCN
      SZ43(J,I)=Z43(J1) + Z43(J3)*CCN
      SZS41(J,I)=ZS41(J5)
      J1=J1 + 1
      J3=J3 + 1
      J4=J4 + 1
   30 J5=J5 + 1
C
C
      J1=1
      J3=LCH3
      J4=1
      IF(LK(I).EQ.1) GO TO 40
      J1=2*LCH3 - 1
      J3=J1 + LCH3 -1
      J4=LCH3
   40 J2=LCH3 - 1
C
C
      DO 60 J=1,J2
C
      SZ31(J,I)=Z31(J1) + Z31(J3)*CCN
C
      SZ32(J,I)=Z32(J1) + Z32(J3)*CCN
      SZ33(J,I)=Z33(J1) + Z33(J3)*CCN
      SZ34(J,I)=Z34(J1) + Z34(J3)*CCN
      SZ35(J,I)=Z35(J1) + Z35(J3)*CCN
      SZS31(J,I)=ZS31(J4)
      SZS32(J,I)=ZS32(J4)
      J1=J1 + 1
      J3=J3 + 1
      J4=J4 + 1
   60 CONTINUE
C
C
      J1=1
      J3=LCH2
      J4=1
      IF(LK(I).EQ.1) GO TO 70
      J1=2*LCH2 - 1
      J3=J1 + LCH2 - 1
      J4=LCH2
   70 J2=LCH2-1
C
C
      DO 90 J=1,J2
C
      SZ21(J,I)=Z21(J1) + Z21(J3)*CCN
      SZ27(J,I)=Z27(J1) + Z27(J3)*CCN
      SZ24(J,I)=Z24(J1) + Z24(J3)*CCN
C
      SZ22(J,I)=Z22(J1) + Z22(J3)*CCN
      SZ23(J,I)=Z23(J1) + Z23(J3)*CCN
      SZ25(J,I)=Z25(J1) + Z25(J3)*CCN
      SZ26(J,I)=Z26(J1) + Z26(J3)*CCN
      SZ28(J,I)=Z28(J1) + Z28(J3)*CCN
      SZS21(J,I)=ZS21(J4)
      SZS22(J,I)=ZS22(J4)
      SZS23(J,I)=ZS23(J4)
      SZS24(J,I)=ZS24(J4)
      ZZ23(J,I)=Z2S23(J4)
      J1=J1 + 1
      J3=J3 + 1
      J4=J4 + 1
   90 CONTINUE
C
C
      J1=1
      J3=LCH1
      J4=1
      IF(LK(I).EQ.1) GO TO 100
      J1=2*LCH1 - 1
      J3=J1 + LCH1 - 1
      J4=LCH1
  100 J2=LCH1 - 1
C
C
      DO 120 J=1,J2
C
      SZ11(J,I)=Z11(J1) + Z11(J3)*CCN
      SZ14(J,I)=Z14(J1) + Z14(J3)*CCN
C
      SZ12(J,I)=Z12(J1) + Z12(J3)*CCN
      SZ13(J,I)=Z13(J1) + Z13(J3)*CCN
      SZ15(J,I)=Z15(J1) + Z15(J3)*CCN
      SZ16(J,I)=Z16(J1) + Z16(J3)*CCN
      SZS11(J,I)=ZS11(J4)
      SZS12(J,I)=ZS12(J4)
      SZS13(J,I)=ZS13(J4)
      ZZ12(J,I)=Z2S12(J4)
C
      J1=J1 + 1
      J3=J3 + 1
  120 J4=J4 + 1
C
C
      IF(LK(I).EQ.2) GO TO 130
C
      SZ01(I)=Z01(1) + Z01(2)*CCN
      SZ02(I)=Z02(1) + Z02(2)*CCN
      SZ03(I)=Z03(1) + Z03(2)*CCN
      SZ04(I)=Z04(1) + Z04(2)*CCN
C
      SZS01(I)=ZS01(1)
      SZS02(I)=ZS02(1)
C
      ZZ01(I)=Z2S01(1)
C
      GO TO 140
C
  130 SZ01(I)=Z01(3) + Z01(4)*CCN
      SZ02(I)=Z02(3) + Z02(4)*CCN
      SZ03(I)=Z03(3) + Z03(4)*CCN
      SZ04(I)=Z04(3) + Z04(4)*CCN
C
      SZS01(I)=ZS01(2)
      SZS02(I)=ZS02(2)
      ZZ01(I)=Z2S01(2)
  140 CONTINUE
C
C
      RETURN
      END
      SUBROUTINE COMMAX(Z,N,T,AM,M)
      DIMENSION T(1),AM(1)
      COMPLEX Z(1)
      DO 100 I=1,M
      T(I)=0.0
  100 AM(I) = 0.0
      N2 = N - 2
      DO 700 I=1,N2
      Y1 = REAL(Z(I))
      Y2 = REAL(Z(I+1))
      Y3 = REAL(Z(I+2))
      A=(Y1+Y3)/2.0-Y2
      IF (A.GE.0.0) GO TO 600
      B = Y2-Y1-A
      C = Y1
      Y0 = -(B*B-4.0*A*C)/4.0/A
      IF (Y0.LE.0.0) GO TO 600
      X0 = -B/2.0/A
      IF (X0.LT.0.0) GO TO 600
      IF (X0.GT.2.0) GO TO 600
      TP=X0+FLOAT(I)-1.0
      DO 200 J=1,M
      IF(ABS(TP-T(J)) .LT. 1.0) GO TO 700
      IF(Y0 .GT.AM(J)) GO TO 300
  200 CONTINUE
      GO TO 600
  300 J1=J+1
      IF (J1.GT.M) GO TO 500
      DO 400 K=J1,M
      L = M+J1-K
      AM(L) = AM(L-1)
  400 T(L) = T(L-1)
  500 AM(J) = Y0
      T(J)=TP
  600 CONTINUE
  700 CONTINUE
      RETURN
      END
      SUBROUTINE CONVRT
C
C        'CONVRT' CONVERTS INPUT DATA INTO THE FORM REQUIRED
C        FOR INTERNAL USE
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      REAL*8 I3,I2OVI3
C
      COMMON/CCMBNZ/ CMRK(10),Z01(4),Z02(4),Z03(4),Z04(4),Z11(12),
     .               Z12(12),Z13(12),Z14(12),Z15(12),Z16(12),Z21(36),
     .               Z22(36),Z23(36),Z24(36),Z25(36),Z26(36),Z27(36),
     .               Z28(36),Z31(108),Z32(108),Z33(108),Z34(108),
     .               Z35(108),Z41(324),Z42(324),Z43(324),ZK21(18),
     .               ZK22(18),ZK23(18),ZK31(54),ZK32(54),ZK33(54),
     .               ZK34(54),ZK35(54),ZK36(54),ZK41(162),ZK42(162),
     .               ZK43(162),ZK44(162),ZK45(162),ZK46(162),ZK47(162),
     .               ZK48(162),ZS01(2),ZS02(2),ZS11(6),ZS12(6),ZS13(6),
     .               ZS21(18),ZS22(18),ZS23(18),ZS24(18),ZS31(54),
     .               ZS32(54),ZS41(162),ZT21(108),ZT22(108),STAO(18),
     .               STA1(18),STA2(18),STBO(18),STB1(18),STB2(18),
     .               Z2S01(2),Z2S12(6),Z2S23(18)
C
      COMMON/CCNVRT/ BDYMI(3,3),DPRMI(3,3),EMODLS(10),RTUBE(10),
     .               HTUBE(10),THERMC(10),TIPMS(10),C(10)
C
      COMMON/CFNALP/ SCO,CIZO(3,3),CIYO(3,3),DONA(3,10),DONB(3,10)
     .              ,CDAMP(3,10)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSOLAR/ SAO(10),SKA(9),SKB(9),SKOA(10,3),SKOB(10,3),
     .               STMK(10),SKAA(10,9),SKBB(10,9)
C
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10)
C
      COMMON/EISUBK/ EI(10)
C
      COMMON/ELKDMP/ OMKDMP(3,10),IOMKDM(10)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
C
      COMMON/RNEWR/ZA(10),I3(10),I2OVI3(10),
     *             ZDQ(10),ZJ(10)
C
      COMMON/RTDIST/ TDIS(10)
C
      COMMON/SATLSH/ TAUK(10),OCULTK(10),RADSH
C
C
      DIMENSION STAUK(10),SOCULT(10)
      DIMENSION RHO(10),SAOK(10),ZLOK(10),ZL1K(10),ZL2K(10),EM(10),
     .          HT(10),RT(10),TI(10),TH(10),ST(10),DONB1(3,10),PROD(10),
     .          IL(10),ILL(10),SKOA1(10,3),SKOB1(10,3),TDIST(10)
C
C
C
      REAL*8 INERTA
C
C
C
      DO 5 I=1,3
      DO 5 J=1,3
      CIYO(I,J)=0.D0
    5 CIZO(I,J)=0.D0
C
C
      CIYO(1,1)=(BDYMI(3,3) + BDYMI(2,2) - BDYMI(1,1))/2.D0
      CIYO(2,2)=(BDYMI(3,3) + BDYMI(1,1) - BDYMI(2,2))/2.D0
      CIYO(3,3)=(BDYMI(1,1) + BDYMI(2,2) - BDYMI(3,3))/2.D0
C
      CIZO(1,1)=(DPRMI(3,3) + DPRMI(2,2) - DPRMI(1,1))/2.D0
      CIZO(2,2)=(DPRMI(3,3) + DPRMI(1,1) - DPRMI(2,2))/2.D0
      CIZO(3,3)=(DPRMI(1,1) + DPRMI(2,2) - DPRMI(3,3))/2.D0
C
      CIYO(1,2)=BDYMI(1,2)
      CIYO(1,3)=BDYMI(1,3)
      CIYO(2,3)=BDYMI(2,3)
C
      CIZO(1,2)=DPRMI(1,2)
      CIZO(1,3)=DPRMI(1,3)
      CIZO(2,3)=DPRMI(2,3)
C
      DO 10 I=1,3
      DO 10 J=I,3
      CIYO(J,I)=CIYO(I,J)
   10 CIZO(J,I)=CIZO(I,J)
C
      DO 20 K=1,IK
      STAUK(K)=TAUK(K)
      SOCULT(K)=OCULTK(K)
      TDIST(K)=TDIS(K)
      RHO(K)=RHOK(K)
      SAOK(K)=SAO(K)
      ZLOK(K)=ZL0(K)
      ZL1K(K)=ZL1(K)
      ZL2K(K)=ZLA(K)
      EM(K)=EMODLS(K)
      HT(K)=HTUBE(K)
      RT(K)=RTUBE(K)
      TI(K)=TIPMS(K)
      TH(K)=THERMC(K)
      ST(K)=STMK(K)
      IL(K)=LK(K)
      ILL(K)=LLK(K)
C
      DO 20 I=1,3
      SKOB1(K,I)=SKOB(K,I)
      SKOA1(K,I)=SKOA(K,I)
   20 DONB1(I,K)=CDAMP(I,K)
C
C
C
      DO 60 K=1,IK
      L=IK-K1+K
      IF((K-K1).GT.0) L=K-K1
C
      TAUK(K)=STAUK(L)
      OCULTK(K)=SOCULT(L)
      TDIS(K)=TDIST(L)
      RHOK(K)=RHO(L)
      SAO(K)=SAOK(L)
      ZL0(K)=ZLOK(L)
      ZL1(K)=ZL1K(L)
      ZLA(K)=ZL2K(L)
      EMODLS(K)=EM(L)
      HTUBE(K)=HT(L)
      RTUBE(K)=RT(L)
      TIPMS(K)=TI(L)
      THERMC(K)=TH(L)
      STMK(K)=ST(L)
      LK(K)=IL(L)
      LLK(K)=ILL(L)
C
      DO 30 I=1,3
      SKOA(K,I)=SKOA1(L,I)
      SKOB(K,I)=SKOB1(L,I)
   30 CDAMP(I,K)=DONB1(I,L)
C
   60 CONTINUE
C
C
      DO 70 I=1,IK
      INERTA=PI*RTUBE(I)**3*HTUBE(I)
      PROD(I)=EMODLS(I)*INERTA/144.D0
      EI(I)=6.D0*PROD(I)*THERMC(I)/RTUBE(I)*TDIS(I)
      CMRK(I)=TIPMS(I)/RHOK(I)
      DO 70 J=1,9
      SKAA(I,J)=PROD(I)*(1.0D0+I2OVI3(I))
   70 SKBB(I,J)=PROD(I)*(1.0D0+I2OVI3(I))
C
C
      DO 80 I=1,9
      SKA(I)=0.D0
   80 SKB(I)=0.D0
C
      DO 90 I=1,IK
      SUM=DSQRT(PROD(I)*RHOK(I))
      DO 90 J=1,3
      GO TO (101,102,103),J
  101 N1=1
      N2=19
      M1=1
      M2=10
      GO TO 104
  102 N1=5
      N2=23
      M1=5
      M2=14
      GO TO 104
  103 N1=9
      N2=27
      M1=9
      M2=18
  104 N=N1
      IF (LK(I).EQ.2) N=N2
      M=M1
      IF (LLK(I).EQ.2) M=M2
      SUM1=DSQRT(2.0D0*Z21(N)*ZK21(M))
      SUM2=DSQRT(2.0D0*Z21(N)*ZK23(M))
      DONA(J,I)=SUM*SUM1*2.0D0*CDAMP(J,I)
      DONB(J,I)=SUM*SUM2*2.0D0*CDAMP(J,I)
      IF(IOMKDM(I).EQ.0) GO TO 90
      DONA(J,I)=2.0D0*CDAMP(J,I)*OMKDMP(J,I)
      DONB(J,I)=2.0D0*CDAMP(J,I)*OMKDMP(J,I)
   90 CONTINUE
C
      RETURN
      END
      SUBROUTINE CROSS(Z,L,N)
      COMPLEX Z(1),TEMP,B1
C     OBTAIN TWO FFT'S OF REAL-VALUED TIME HISTORIES SIMULTANEDUSLY
      NN=N
      CALL FOUR(Z,NN,-1)
      NH=N/2
      NH1=NH+1
      B1=AIMAG(Z(1))
      Z(1)=REAL(Z(1))
      DO 112 I=2,NH
      TEMP=0.5*(Z(I)+CONJG(Z(N+2-I)))
      Z(N+2-I)=(0.,-0.5)*(Z(I)-CONJG(Z(N+2-I)))
  112 Z(I)=TEMP
C     COMPUTE THE RAW CROSS SPECTRUM,S
      FN=FLOAT(N*L)
      Z(1)=CONJG(Z(1))*B1/FN
      DO 113 I=2,NH
  113 Z(I)=CONJG(Z(I))*Z(N+2-I)/FN
      Z(NH1)=AIMAG(Z(NH1))*REAL(Z(NH1))/FN
      DO 114 I=2,NH
  114 Z(N+2-I)=CONJG(Z(I))
C     COMPUTE THE INVERS FFT OF S TO OBTAIN THE CROSS CORRELATION
      CALL FOUR(Z,NN,1)
      A=REAL(Z(1))
      WRITE(6,5) A
    5 FORMAT(42H1CROSSCOVARIANCE FUNCTION AT THE ORIGIN = ,1PE10.3)
      WRITE(6,6)
    6 FORMAT(1H ,50X,29H CROSSCORRELATION COEFFICIENT)
      WRITE(6,7) SIG
    7 FORMAT(1X,1PE10.3)
      SIG=1.
      Z(1)=Z(1)/SIG
      DO 115 I=2,L
      Z(N+2-I)=Z(N+2-I)*FLOAT(L)/(SIG*FLOAT(L+1-I))
  115 Z(I)=Z(I)*FLOAT(L)/(SIG*FLOAT(L+1-I))
      RETURN
      END
      SUBROUTINE CROSSV(VI1,VI2,VO)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      DIMENSION VI1(3),VI2(3),VO(3)
C
      VO(1)=VI1(2)*VI2(3)-VI1(3)*VI2(2)
      VO(2)=VI1(3)*VI2(1)-VI1(1)*VI2(3)
      VO(3)=VI1(1)*VI2(2)-VI1(2)*VI2(1)
C
      RETURN
C
      END
      SUBROUTINE CSD(Z,P,L,M,IWIN,DELT,STATE)
C
      REAL*8 TITLE(10)
      COMPLEX Z(1)
C
      COMMON/DEBUG1/ IAFM(5)
C
      COMMON/INPFFT/ICSD
C
      DIMENSION STORE(1024)
      DIMENSION F(10),AMP(10),STATE(7)
      DIMENSION P(1)
C
      DATA TWOPI /6.283185/
C
      DATA TITLE/'FIRST   ','SECOND  ','THIRD   ','FOURTH  ','FIFTH   ',
     1           'SIXTH   ','SEVENTH ','EIGTH   ','NINTH   ','TENTH   '/
C
      CALL FINDN(L,M,N,NS)
C
      L1=L+1
      LL=L+L
      IF(IAFM(4).EQ.0) GO TO 1975
    2 FORMAT(9H RECORD X)
      WRITE(6,2)
C     READ IN A SEQUENCE X (OR Y).
    1 FORMAT(1PE14.6,1PE13.6,1PE13.6,1PE13.6,1PE13.6,1PE13.6,1PE13.6
     &              ,1PE13.6,1PE13.6,1PE13.6)
      WRITE(6,1) (P(I),I=1,L)
 1975 CONTINUE
C     1. MAKE X INTO ZERO MEAN SEQUENCE AND STORE NEW X.
      CALL ZEROMN(P,L,SA)
      DO 88 I=1,L
   88 STORE(I)=P(I)
C     2. ADD ZERCES TO X TIL SEQUENCE LENGTH OF X BECOMES N.
      DO 99 I=L1,N
   99 P(I)=0.
      CALL AUTPOW(Z,P,L,N,SIG,M,NS,IWIN,DELT,DELF)
      CALL COMMAX(Z,NS,F,AMP,ICSD)
C
      DO 73 I=1,ICSD
      F(I)=F(I)*DELF
      WRITE(6,600) TITLE(I),F(I)
  600 FORMAT('0',10X,'*****  ',A8,'FREQUENCY = ',1PE13.6,' CPS  *****')
      F(I)=F(I)*TWOPI
   73 CONTINUE
C
      DO 50 J=1,ICSD
      FI=F(J)*DELT
      NT=TWOPI/FI
C     ARRANGE ZERO MEAN X AND Y ALTERNATELY,I.E., X1,Y1,X2,Y2,...,SL,YL.
      DO 44 I=1,L
      II=I+I
      P(II-1)=STORE(I)
      P(II)=SIN(FI*(I-1))
   44 CONTINUE
      LL1=LL+1
      N2=N+N
C     ADD ZEROES TO XY SEQUENCE TIL SEQUENCE LENGTH BECOMES 2*N.
      DO 111 I=LL1,N2
  111 P(I)=0.
C     COMPUTE CROSSCORRELATION
C
      CALL CROSS(Z,L,N)
      CALL PLTC(Z,1,NT,1,1,0,0)
      CALL COMMAX(Z,NT,TAW,AMPL,1)
C
      IF(TAW .EQ. 0.0) AMPL=REAL(Z(1))
C
      TAW=TAW*FI*360.0E0/TWOPI
C
      WRITE(6,601) TITLE(J),TAW,TITLE(J),AMPL
  601 FORMAT('0',20X,'PHASE ANGLE FOR ',A8,'MODE =',F8.4,' DEGREES',/
     1          ,20X,'AMPLITUDE   FOR ',A8,'MODE =',1PE13.6,/)
C
   50 CONTINUE
      RETURN
      END
      SUBROUTINE CSIC(ITEST,T)
C     CONTROL SYSTEM INITIAL CONDITIONS
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON /ADSTAT/DER(150),DEP(150)
C
      COMMON/CNOISE/VLAST(10),VGOOD(10),VNOW(10),T1,T2
C
      COMMON/CSBNDS/CSUP(20),CSDN(20),GNIC(10)
C
      COMMON /CSTAT/SVCS(20),SVCDOT(20)
C
      COMMON/ICNTRL/KNTRL(10)
C
      COMMON/ICSADM/LDUM,IRAND,NCHAN
C
      COMMON /JCNTRL/NCNTRL,MCNTRL,MAPCNT(20)
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/SCSTAT/SSVCS(20)
C
      COMMON/XIN4  /UP(150),DN(150),BNDS(22)
C
      IF(ITEST.EQ.2) GO TO 200
      IRAND=KNTRL(9)
      NCHAN=KNTRL(10)
      T1=T
      T2=T
      DO 50 I=1,10
      VLAST(I)=GNIC(I)
      VGOOD(I)=GNIC(I)
      VNOW(I)=0.0D0
   50 CONTINUE
C      LOAD SYSTEM STATE VECTOR WITH CONTROL SYSTEM STATE
      DO 100 I=1,NCNTRL
      J=MAPCNT(I)
      SSVCS(J)=SVCS(J)
      UP(I+MCNTRL)=CSUP(J)
      DN(I+MCNTRL)=CSDN(J)
100   DEP(I+MCNTRL)=SVCS(J)
      RETURN
C
  200 CONTINUE
      DO 300 I=1,NCNTRL
      J=MAPCNT(I)
      SVCS(J)=SSVCS(J)
  300 CONTINUE
      RETURN
      END
      SUBROUTINE DAMPCS
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ADSTAT/ DER(150),DEP(150)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSTVAL/ TSTART
C
      COMMON/DPLTCS/ PCSPRM(100),IPLTCS(20)
C
      COMMON/DATOUT/ IDATA,MLAST
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/GMBDUT/ AZ,AZD,EL,ELD,B(3,3),B0(3,3),B0B(3,3)
C
      COMMON/HGIMBD/ HGMB(3)
C
      COMMON/IGIMBD/ IGMBL,NELEV,NE1
C
      COMMON/IMAIN1/ IDATE,LSAVE,IDUM1(6)
C
      COMMON/INEWR / NKT(10),ICP,ICPS
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS
     1              ,NK(10),LK(10),LLK(10)
C
      COMMON/MOMENT/ IDUM01(3),IMGNTS,IDUM02(2)
C
      COMMON/OUTTHR/ SMAGB(3),XMB(3),RWHEEL(3)
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,UPB(150),DNB(150)
C
      COMMON/RMGNTC/ SMAGI(3),DPMAG(3),SFMAG,MAGFLD
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),DUM01(96)
C
      COMMON/RPOOL5/ CKMAT(3,3,10),FM2(3,3)
C
      COMMON/DNSWRK/ NSELB,NSELT,IASEL,IBSEL,ICSEL,LOC
C
      COMMON/TMSINR/ TIPTNR(3,10),RSQ(3,10),XIPL(6),BETL(3)
C
      COMMON/TWIOUT/ CWO(10,3),CWOD(10,3)
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
      COMMON/XIN4  / UP(150),DN(150),BNDS(22)
C
C
      DIMENSION HEDPC(5)
      DIMENSION HDPID(5),HDMOT(5)
      DIMENSION SMAGM(3),SNSWM(3)
      DIMENSION FILMAG(3),REFV(3)
      DIMENSION ANOISE(3),PNOISE(3),FNOISE(3)
      DIMENSION FREQNS(3),PHASNS(3)
      DIMENSION SNSV(3),SNSVM1(3)
      REAL*4 BUFF(450)
C
      DATA I8/',A8,'/
      DATA HEDPC/'TWO AXIS',' DAMPER ','PLATFORM',' CONTROL',' SYSTEM '/
      DATA HDPID/'P I D CO','NTROLLER',' PARAMET','ERS     ','        '/
      DATA HDMOT/'GIMBLE D','RIVE MOT','OR PARAM','ETERS   ','        '/
C
      EQUIVALENCE (IPLTCS(1),IPCONT),(IPLTCS(2),ISKEL)
      EQUIVALENCE (IPLTCS(3),IGSNSE),(IPLTCS(4),NMAGAV)
      EQUIVALENCE (UPMSN,PCSPRM(30)),(DNMSN,PCSPRM(31))
      EQUIVALENCE (SNSWM(1),PCSPRM(32))
      EQUIVALENCE (PCSPRM(35),TMAGSR),(PCSPRM(36),TCOMPD)
C
      EQUIVALENCE (PCSPRM(10),TSAMP)
      EQUIVALENCE (PCSPRM(11),AZQNT),(PCSPRM(21),ELQNT)
      EQUIVALENCE (PCSPRM(12),AZXIUP),(PCSPRM(22),ELXIUP)
      EQUIVALENCE (PCSPRM(13),AZXIDN),(PCSPRM(23),ELXIDN)
      EQUIVALENCE (PCSPRM(14),AZKP),(PCSPRM(24),ELKP)
      EQUIVALENCE (PCSPRM(15),AZKI),(PCSPRM(25),ELKI)
      EQUIVALENCE (PCSPRM(16),AZKD),(PCSPRM(26),ELKD)
      EQUIVALENCE (PCSPRM(41),AZKA),(PCSPRM(51),ELKA)
      EQUIVALENCE (PCSPRM(42),AZKT),(PCSPRM(52),ELKT)
      EQUIVALENCE (PCSPRM(43),AZKB),(PCSPRM(53),ELKB)
      EQUIVALENCE (PCSPRM(44),AZMTUP),(PCSPRM(54),ELMTUP)
      EQUIVALENCE (PCSPRM(45),AZMTDN),(PCSPRM(55),ELMTDN)
      EQUIVALENCE (PCSPRM(46),AZTCUL),(PCSPRM(56),ELTCUL)
      EQUIVALENCE (PCSPRM(47),AZDMIN),(PCSPRM(57),ELDMIN)
      EQUIVALENCE (PCSPRM(48),AZVBAS),(PCSPRM(58),ELVBAS)
      EQUIVALENCE (PCSPRM(80),ANOISE(1)),(PCSPRM(83),PNOISE(1))
      EQUIVALENCE (PCSPRM(86),FNOISE(1))
      EQUIVALENCE (PCSPRM(90),FREQNS(1)),(PCSPRM(93),PHASNS(1))
C
C     CALLED FROM GMBDRD
C
      CALL SETUP(8HDCSPRM  ,8,PCSPRM,100)
      CALL SETUP(8HIPLDCS  ,4,IPLTCS,20)
C
      RETURN
C
C   ****************************************************************
      ENTRY NUMDCS(NUMEQS)
C   ****************************************************************
C
C     CALLED FROM NUMGPE
C
      IF(IPCONT.EQ.0) RETURN
      IF(IGSNSE.EQ.0) RETURN
      NPLCS=NUMEQS+1
      NUMEQS=NUMEQS+3
C
      RETURN
C
C   ****************************************************************
      ENTRY ECHDPC
C   ****************************************************************
C
C     CALLED FROM ECHOGP
C
      IF(IPCONT.EQ.0) RETURN
C
      CALL HVAL(HEDPC)
C
      CALL FVAL('TSAMP   ',5,TSAMP,0,0,0)
C
      CALL HVAL(HDPID)
C
      CALL FVAL('AZIM    ',4,PCSPRM(11),6,0,1)
      CALL FVAL('ELEV    ',4,PCSPRM(21),6,0,1)
C
      CALL HVAL(HDMOT)
C
      CALL FVAL('AZIM    ',4,PCSPRM(41),8,0,1)
      CALL FVAL('ELEV    ',4,PCSPRM(51),8,0,1)
C
      RETURN
C
C   ****************************************************************
      ENTRY DCINIT(FRQ)
C   ****************************************************************
C
C     CALLED FROM MAIN FOR INITIAL CONDITIONS AND INTEGRATION BOUNDS
C     CALLED AFTER CALL TO SETVAL(1)
C
      NPRFRQ=1
      ICNFRQ=0
      FRQ=FREQ
      DO 1 I=1,3
      HGMB(I)=0.0D0
      FREQNS(I)=FNOISE(I)*TWOPI
      PHASNS(I)=PNOISE(I)*RADIAN
    1 CONTINUE
C
      IF(IPCONT.EQ.0) RETURN
C
      IF(NMAGAV.EQ.0) NMAGAV=1
      TSNDLY=TCOMPD+(NMAGAV-1)*TMAGSR/2.0D0
      RATIOM=TSNDLY/TSAMP
C
      NSELB=0
      NSELT=0
      IF(ISKEL.EQ.0) GO TO 22
      IASEL=IAB
      IBSEL=IBB
      ICSEL=ICP
      NSELB=NK(ISKEL)
      IF(NSELB.EQ.0) GO TO 10
      IF(ISKEL.EQ.1) GO TO 10
      IBK=ISKEL-1
      DO 5 I=1,IBK
      NK2=2*NK(I)
      IASEL=IASEL+NK2
      IBSEL=IBSEL+NK2
    5 CONTINUE
   10 CONTINUE
      NSELT=NKT(I)
      IF(ISKEL.EQ.1) GO TO 20
      DO 15 I=1,IBK
      ICSEL=ICSEL+2*NKT(I)
   15 CONTINUE
   20 CONTINUE
      ILK=LK(ISKEL)
      LOC=3*(ILK-1)
   22 CONTINUE
C
      IF(IGSNSE.EQ.0) GO TO 25
C
      IDEP=NPLCS-1
      DO 23 I=1,3
      I1=IDEP+I
      UP(I1)=UPMSN
      DN(I1)=DNMSN
   23 CONTINUE
C
   25 CONTINUE
C
      NPRFRQ=FREQ/TSAMP
      IF(NPRFRQ.LT.1) NPRFRQ=1
      FRQ=TSAMP
C
      RETURN
C
C   ****************************************************************
      ENTRY DCSNSR
C   ****************************************************************
C
C     CALLED FROM DEREQ TO LOAD DERIVATIVES FOR SENSOR
C
      IF(IPCONT.EQ.0) RETURN
      IF(IMGNTS.EQ.0) CALL HAG
      CALL MATV(2,SA,SMAGI,SMAGB)
      CALL DNSMAG(ISKEL,DEPEND,SMAGB,SMAGM)
C
      DT=TIME-TSTART
      DO 27 I=1,3
      ARG=FREQNS(I)*DT+PHASNS(I)
      DIRT=ANOISE(I)*DSIN(ARG)
      SMAGM(I)=SMAGM(I)+DIRT
      REFV(I)=SMAGM(I)
   27 CONTINUE
C
      IF(LSAVE.NE.1) GO TO 29
      IF(IDATA.NE.0) GO TO 29
C
C     CALCULATIONS DONE ONLY AT THE START OF A SIMULATION
C
      DEN=REFV(1)*REFV(1)+REFV(2)*REFV(2)
      VMMAG=DEN+REFV(3)*REFV(3)
      DEN=DSQRT(DEN)
      VMMAG=DSQRT(VMMAG)
      SNSAZ=DATAN2(REFV(2),REFV(1))
      SNSEL=DATAN2(REFV(3),DEN)
C
      DO 26 I=1,3
      SNSVM1(I)=SMAGM(I)
   26 CONTINUE
C
      AZM=DMOD(AZ,TWOPI)
      IF(AZM.GT.PI) AZM=AZM-TWOPI
      ELM=EL
      AZMQ=AZM-DMOD(AZM,AZQNT)
      ELMQ=ELM-DMOD(ELM,ELQNT)
      SSAZ=DSIN(SNSAZ)
      CSAZ=DCOS(SNSAZ)
      SQAZ=DSIN(AZMQ)
      CQAZ=DCOS(AZMQ)
      DOTP=SSAZ*SQAZ+CSAZ*CQAZ
      CRSP=CSAZ*SQAZ-SSAZ*CQAZ
      CRSP=-CRSP
      ERRAZ=DATAN2(CRSP,DOTP)
      ERREL=SNSEL-ELMQ
      AZOUT=AZKP*ERRAZ
      ELOUT=ELKP*ERREL
      AZXIM1=0.0D0
      ELXIM1=0.0D0
      EAZM1=ERRAZ
      EELM1=ERREL
C
C
      IF(IGSNSE.EQ.0) GO TO 31
C
      DO 28 I=1,3
      I1=IDEP+I
      DEPEND(I1)=SMAGM(I)
   28 CONTINUE
C
   29 CONTINUE
C
      IF(IGSNSE.EQ.0) GO TO 31
C
      DO 30 I=1,3
      I1=IDEP+I
      DERIV(I1)=SNSWM(I)*(SMAGM(I)-DEPEND(I1))
      SNSV(I)=DEPEND(I1)
   30 CONTINUE
C
      RETURN
C
   31 CONTINUE
C
      DO 32 I=1,3
      SNSV(I)=SMAGM(I)
   32 CONTINUE
C
      RETURN
C
C
C   ****************************************************************
      ENTRY GMDCNT(AZCNT,ELCNT)
C   ****************************************************************
C
C     CALLED FROM GMBLD2
C
C     CALCULATE MOTOR TORQUES
C
      IF(IPCONT.EQ.0) RETURN
      VOPAZ=AZKA*AZOUT
      VOPEL=ELKA*ELOUT
C     MOTOR TORQUES
      AZMOTT=AZKT*(VOPAZ-AZKB*AZD+AZVBAS)
      ELMOTT=ELKT*(VOPEL-ELKB*ELD+ELVBAS)
C     TORQUE LIMITING
      IF(AZMOTT.GT.AZMTUP) AZMOTT=AZMTUP
      IF(AZMOTT.LT.AZMTDN) AZMOTT=AZMTDN
      IF(ELMOTT.GT.ELMTUP) ELMOTT=ELMTUP
      IF(ELMOTT.LT.ELMTDN) ELMOTT=ELMTDN
C     COULOMB FRICTION TORQUE
      AZMOTT=AZMOTT-AZD*AZTCUL/(AZDMIN+DABS(AZD))
      ELMOTT=ELMOTT-ELD*ELTCUL/(ELDMIN+DABS(ELD))
C     OUTPUT
      AZCNT=AZMOTT
      ELCNT=ELMOTT
C
C
      RETURN
C
C   ****************************************************************
      ENTRY DIDCNT(IPRFLG)
C   ****************************************************************
C
C     SIMULATION OF P I D CONTROLLER
C     CALLED FROM MAIN AFTER ADAMS RETURN
C
      IPRFLG=1
      IF(IPCONT.EQ.0) RETURN
      IPRFLG=0
      IF(MOD(ICNFRQ,NPRFRQ).EQ.0) IPRFLG=1
      ICNFRQ=ICNFRQ+1
C
      DO 35 I=1,3
      FILMAG(I)=SNSV(I)-RATIOM*(SNSV(I)-SNSVM1(I))
      SNSVM1(I)=SNSV(I)
      REFV(I)=FILMAG(I)
   35 CONTINUE
C
C     PLATFORM COMMAND COMPUTATION
C
      DEN=REFV(1)*REFV(1)+REFV(2)*REFV(2)
      VMMAG=DEN+REFV(3)*REFV(3)
      DEN=DSQRT(DEN)
      VMMAG=DSQRT(VMMAG)
C
      SNSAZ=DATAN2(REFV(2),REFV(1))
      SNSEL=DATAN2(REFV(3),DEN)
   36 CONTINUE
C
C     MEASURED PLATFORM POSITION
C
      AZM=DMOD(AZ,TWOPI)
      IF(AZM.GT.PI) AZM=AZM-TWOPI
      ELM=EL
      AZMQ=AZM-DMOD(AZM,AZQNT)
      ELMQ=ELM-DMOD(ELM,ELQNT)
C
C     CALCULATE AZIMUTH AND ELEVATION ERRORS
C
      SSAZ=DSIN(SNSAZ)
      CSAZ=DCOS(SNSAZ)
      SQAZ=DSIN(AZMQ)
      CQAZ=DCOS(AZMQ)
      DOTP=SSAZ*SQAZ+CSAZ*CQAZ
      CRSP=CSAZ*SQAZ-SSAZ*CQAZ
      CRSP=-CRSP
      ERRAZ=DATAN2(CRSP,DOTP)
      ERREL=SNSEL-ELMQ
      ERAZIM=ERRAZ/RADIAN
      ERELEV=ERREL/RADIAN
      AZXI=AZXIM1+TSAMP*ERRAZ
      AZXD=(ERRAZ-EAZM1)/TSAMP
      AZOUT=AZKP*ERRAZ+AZKI*AZXI+AZKD*AZXD
      IF(AZXI.GT.AZXIUP) AZXI=AZXIUP
      IF(AZXI.LT.AZXIDN) AZXI=AZXIDN
C
      ELXI=ELXIM1+TSAMP*ERREL
      IF(ELXI.GT.ELXIUP) ELXI=ELXIUP
      IF(ELXI.LT.ELXIDN) ELXI=ELXIDN
      ELXD=(ERREL-EELM1)/TSAMP
      ELOUT=ELKP*ERREL+ELKI*ELXI+ELKD*ELXD
C
      IF(IOUT.EQ.1) GO TO 40
      WRITE(6,1000)
 1000 FORMAT('0',10X,'DEBUG OUTPUT FROM PIDCNT')
 1001 FORMAT('0',1P10E13.5)
      WRITE(6,1001) SNSAZ,AZM,AZMQ,ERRAZ,ERAZIM,AZXI,AZXD,AZOUT,AZXIM1
      WRITE(6,1001) SNSEL,ELM,ELMQ,ERREL,ERELEV,ELXI,ELXD,ELOUT,ELXIM1
   40 CONTINUE
C
      AZXIM1=AZXI
      EAZM1=ERRAZ
      ELXIM1=ELXI
      EELM1=ERREL
C
      RETURN
C
C   ****************************************************************
      ENTRY DCSWRP(BUFF,INDX)
C   ****************************************************************
C
C     CALLED FROM GPPLOT TO LOAD PLOT RECORD
C
      INDEX=INDX
      INDX=INDX+9
      IF(IPCONT.EQ.0) RETURN
      IF(IMGNTS.NE.0) GO TO 62
      I1=192
      DO 60 I=1,3
      BUFF(I1+I)=SMAGB(I)
   60 CONTINUE
   62 CONTINUE
      I1=INDEX-1
      DO 64 I=1,3
      BUFF(I1+I)=FILMAG(I)
   64 CONTINUE
      I1=INDEX+2
      BUFF(I1+1)=ERAZIM
      BUFF(I1+2)=ERELEV
      BUFF(I1+3)=AZOUT
      BUFF(I1+4)=ELOUT
      BUFF(I1+5)=AZMOTT
      BUFF(I1+6)=ELMOTT
C
C
      RETURN
C
C   ****************************************************************
      ENTRY DCSPRN
C   ****************************************************************
C
C     CALLED FROM GPSOUT FOR PRINTED OUTPUT
C
      IF(IPCONT.EQ.0) RETURN
      IF(IMGNTS.NE.0) GO TO 72
      DO 66 I=1,3
   66 CALL SET('SMAGI   ',I,0,SMAGI(I),I8)
      DO 68 I=1,3
   68 CALL SET('SMAGB   ',I,0,SMAGB(I),I8)
   72 CONTINUE
      DO 74 I=1,3
   74 CALL SET('SMAGF   ',I,0,FILMAG(I),I8)
C
C
      CALL SET('AZIM ERR',0,0,ERAZIM,I8)
      CALL SET('ELEV ERR',0,0,ERELEV,I8)
      CALL SET('AZIM PID',0,0,AZOUT,I8)
      CALL SET('ELEV PID',0,0,ELOUT,I8)
      CALL SET('AZIM MOT',0,0,AZMOTT,I8)
      CALL SET('ELEV MOT',0,0,ELMOTT,I8)
C
C
      RETURN
C
C
      END
      SUBROUTINE DAMPER(ZMSDB,ZMDDB)
C
C        'DAMPER' COMPUTES INTERNAL FORCES FOR LIBRATION DAMPER SPRING
C        MOMENT,VISCOUS DAMPING MOMENT,AND MAGNETIC HYSTERESIS MOMENT
C        IF IDAMP=0 ALSO SETS ITIM=2
C        IF THE DAMPER HAS NOT HIT THE STOP, IT COMPUTES THE SPRING
C        RESTORING MOMENT FROM MSDB=K1D*PHILD
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/LIBDPR/ ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,
     .               ZMDO,ZMDBO,CNV,DECAY
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      DATA KNTRY /1/
C
      IF(IDAMP.EQ.0) GO TO 100
      PHA=DABS(PHI)
      IF(PHA-PHIS*RADIAN.GT.0.D0) GO TO 10
      ZMSDB=-ZK1D*PHI
      GO TO 30
C
   10 IF(PHI-PHIS*RADIAN.LE.0.D0) GO TO 20
      ZMSDB=-ZK1D*PHIS*RADIAN - ZK2D*(PHI - PHIS*RADIAN)
      GO TO 30
C
   20 ZMSDB= ZK1D*PHIS*RADIAN - ZK2D*(PHI - PHIS*RADIAN)
   30 ZMSDB=ZMSDB - CNV*PHID
      IF(KNTRY.EQ.2) GO TO 40
      KNTRY=2
      ZMDLM=ZMDBO
      ZMDLP=ZMDBO
      PHLP=PHI
      PHLM=PHI
      GO TO 60
C
   40 IF(PHID.GE.0.D0) GO TO 50
      PHLM=PHI
      ZMDLP=ZMDDB
      GO TO 60
C
   50 PHLP=PHI
      ZMDLM=ZMDDB
   60 IF(PHID.LT.0.D0) GO TO 80
      AB=(PHI-PHLM)
      ZMDDBP=-2.D0*ZMDO*(1.D0 - DEXP(-DECAY*AB)) + ZMDLP
      ZMDM=-ZMDO
      IF(ZMDDBP-ZMDM.GE.0.D0) GO TO 70
      ZMDDB=ZMDM
      RETURN
   70 ZMDDB=ZMDDBP
      RETURN
   80 AB=(PHLP-PHI)
      ZMDDBM=2.D0*ZMDO*(1.D0 - DEXP(-DECAY*AB)) + ZMDLM
      IF(ZMDDBM-ZMDO.GE.0.D0) GO TO 90
      ZMDDB=ZMDDBM
      RETURN
   90 ZMDDB=ZMDO
      RETURN
  100 ZMSDB=0.D0
      ZMDDB=0.D0
      ITIM=2
      RETURN
      END
      FUNCTION DARCOS(X)
      IMPLICIT REAL*8(A-H,O-Z)
      IF(X) 20,10,20
   10 DARCOS=1.5707963267948966D0
      RETURN
   20 IF(DABS(X).LT.1.D0) GO TO 30
      DARCOS=0.D0
      GO TO 40
   30 DARCOS=DATAN(DSQRT(1.D0-X**2)/X)
   40 IF(X.GT.0.D0) RETURN
      DARCOS=DARCOS + 3.141592653589793D0
      RETURN
      END
      FUNCTION DARSIN(X)
      IMPLICIT REAL *8(A-H,O-Z)
      IF(DABS(X).LT.1.D0) GO TO 1
      DARSIN=DSIGN(1.D0,X)*1.5707963267948966D0
      RETURN
    1 IF(DABS(X).GT.1.D-7) GO TO 2
      DARSIN=X
      RETURN
    2 DARSIN=DATAN(X/DSQRT(1.D0-X**2))
      RETURN
      END
      SUBROUTINE DBLFFT(Z,N,ISIGN)
      COMPLEX Z(1),TEMP,W,V,B1
      NH=N/2
      NN=NH
      CALL FOUR(Z,NN,ISIGN)
      NQ=N/4
      NQ1=NQ+1
      B1=AIMAG(Z(1))
      Z(1)=REAL(Z(1))
      DO 112 I=2,NQ
      TEMP=0.5*(Z(I)+CONJG(Z(NH+2-I)))
      Z(NH+2-I)=(0.,-0.5)*(Z(I)-CONJG(Z(NH+2-I)))
  112 Z(I)=TEMP
      TWOPI=6.28318
      THETA=TWOPI/FLOAT(N)
      W=CMPLX(COS(THETA),(ISIGN)*(SIN(THETA)))
C
      TEMP=Z(1)+B1
      B1=Z(1)-B1
      Z(1)=TEMP
      DO 113 I=2,NQ
      V=(Z(NH+2-I))*(W**(I-1))
      Z(NH+2-I)=Z(I)-V
  113 Z(I)=Z(I)+V
      RETURN
      END
      SUBROUTINE DEBANG(YAW,ROLL,PITCH)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/RPOOL1/HUMPTY(11),SA(3,3),DUMPTY(105)
C
      COMMON/VECTRS/XSAT(3),XSATDT(3)
C
C
      DIMENSION B(3,3),C(3,3)
C
C     TRANSFORMATION FROM LOCAL VERTICAL TO INERTIAL
C
      R=DSQRT(XSAT(1)*XSAT(1)+XSAT(2)*XSAT(2)+XSAT(3)*XSAT(3))
C
      B(1,3)=XSAT(1)/R
      B(2,3)=XSAT(2)/R
      B(3,3)=XSAT(3)/R
C
      W1=B(2,3)*XSATDT(3)-B(3,3)*XSATDT(2)
      W2=B(3,3)*XSATDT(1)-B(1,3)*XSATDT(3)
      W3=B(1,3)*XSATDT(2)-B(2,3)*XSATDT(1)
C
      W=DSQRT(W1*W1+W2*W2+W3*W3)
      B(1,2)=W1/W
      B(2,2)=W2/W
      B(3,2)=W3/W
C
      B(1,1)=B(2,2)*B(3,3)-B(3,2)*B(2,3)
      B(2,1)=B(3,2)*B(1,3)-B(1,2)*B(3,3)
      B(3,1)=B(1,2)*B(2,3)-B(2,2)*B(1,3)
C
C     C=BT*SA
C
      DO 5 I=1,3
      DO 5 J=1,3
      C(I,J)=B(1,I)*SA(1,J)+B(2,I)*SA(2,J)+B(3,I)*SA(3,J)
    5 CONTINUE
C
      ROLL=DARSIN(C(3,2))
      WS1=-C(1,2)
      YAW=DATAN2(WS1,C(2,2))
      WS1=-C(3,1)
      PITCH=DATAN2(WS1,C(3,3))
C
      RETURN
C
      END
      SUBROUTINE DEBOUT
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CSTAT /X(20),XDOT(20),CPARM(43)
C
      DATA I8/',A8,'/
C
      CALL SET('PTCH OUT',0,0,X(1),I8)
      CALL SET('ROLL OUT',0,0,X(6),I8)
      CALL SET('NUTD OUT',0,0,X(20),I8)
      CALL SET('COMP AMP',0,0,X(16),I8)
      CALL SET('TACH OUT',0,0,X(13),I8)
      CALL SET('TMOTOR  ',0,0,X(14),I8)
      CALL SET('WHL SPD ',0,0,X(15),I8)
C
      RETURN
C
      END
      SUBROUTINE DEREQ
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 MPRIME,NSUBX,JARRAY,ISUBD
      INTEGER*4 ACNTRL
C
C     SUBROUTINE DEREQ1 IS THE CENTER OF THE FSD PROGRAM. IT SETS
C     UP THE EQUATIONS OF MOTION AND DIRECTS THE CALCULATION OF
C     THE DERIVATIVES OF THE STATE VARIABLES, CALL ROUTINES TO
C     COMPUTE THE CONTROL AND EXTERNAL TORQUES
C
C     IT IS CALL BY  ADMIMP  THE ADAMS-MOULTON FOURTH ORDER
C     PREDICTOR AND CORRECTOR INTEGRATOR
C     DEREQ1 IS ORIGINALLY WRITTEN BY E.A. LAWLOR OF AVCO SYSTEM
C     DIVISION.  MODIFIED BY K. YONG OF COMPUTER SCIENCES CORP.
C     FOR VARIOUS ADDITIONAL CAPABILITIES
C
C
      COMMON/CONDMP/ IDPHLD
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CRATIO/ RATIO
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/DMMNT1/ ZKBM(6),FMAK(10),FMBK(10),ARTETA(3),CMTORK(3),
     .               ITORK,IBENDM,ITENSE,ITNS1
C
      COMMON/GRNTST/ ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY(3),
     *               GACC(3),GLOCAT(3),IGRUND,IALTUD,IGASBR
C
      COMMON/HVCOMP/ YBAR(3),YBARD(3),CIN(3,3),CID,CIND(3)
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/INEWR / NKT(10),ICP,ICPS
C
      COMMON/INTTRP/ ITPROT,NUMTIP(10),IRDBUG
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/ITCNTL/ IPULSE,ISPLSE,KPULSE,ITSW,IOTSW
C
      COMMON/ITW   / ITWIST,ITWST1
C
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/NODER / NDER,NOPT
C
      COMMON/OUTFOR/ SUMMTS(3)
C
      COMMON/RATTDE/ DTMXA,PXI,PXO,EIT,REFTIM,TMX1,TMX2,CMX,ISW
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
C
      COMMON/RPOOL1/ RHOK(10),TIM1,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON/RPOOL9/ RT1(7),RT2(10,9),ALP(7,7),GAM(10,9,7),DEL(10,9,9)
C
      COMMON/RVISCS/ NSUBX(3),YARRAY(3),RADTBE,VISCTY,RADRNG,DENSTY,
     .               JARRAY(3),SSUBY,OMEGL,ISUBD
C
      COMMON/SATPOS/ TLAST,TFRST,XLAST(3),XFRST(3),XDLAST(3),XDFRST(3),
     .               SDLAST(3),SDFRST(3),ADLAST(3),ADFRST(3),XDT
C
      COMMON/TRQOUT/ OUTTRQ(150)
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/ZSPINR/ DTZMA,PZDT,CMZO,ISPIN3,JSPIN
C
C
      DIMENSION DDEL(9,9),DELINV(10,9,9),ETA(7),ZML(7,7),RT(9)
C
      DIMENSION C(10),DUM(7,9),MT(10),VPRIME(3,2)
C
      DIMENSION OMEGDT(3),RWHEEL(3),XMB(3),MPRIME(3),YDOT(3)
C
      DIMENSION GAME(9,7)
C
      DIMENSION RVEC(28),AMAT(28),AUX(7)
C
      REAL*4 EPS/1.0E-6/
C
C        SPECIAL DEBUGGING OUTPUT
C
      NDER=NDER+1
      IF(NOPT.EQ.1) WRITE(6,302) NDER
  302 FORMAT(15X,' NDEREQ1 = ',I5)
      IF(JOUT.NE.2) GO TO 4
      IOUT=1
      TOUT=DMOD(TIM1,8.64D4)
      IF(TOUT.GT.FREQ) TOUT=DMOD(TOUT,FREQ)
      IF(TOUT.EQ.FREQ.OR.(FREQ-TOUT).LE.DELTAT) IOUT=2
    4 IF(JOUT.EQ.3) IOUT=2
C
C        SETUP FOR CONTROL FORCES,WHEELS,ATTITUDE CONTROL,VISCOUS
C        NUTATION DAMPING,SPIN UP TORQUEING
C
      N=NUMEQS - 4
      CMXO=0.D0
      DO 5 I=1,3
      RWHEEL(I)=0.D0
      XMB(I)=0.D0
      MPRIME(I)=0.D0
      VPRIME(I,1)=0.0D0
      VPRIME(I,2)=0.0D0
      IF(IVISCS.EQ.0) GO TO 5
      LL=N+I
      YARRAY(I)=DEPEND(LL)
    5 CONTINUE
      IF(IVISCS.EQ.1) SSUBY=DEPEND(NUMEQS)
      CMZO1=0.D0
      IF(ISPIN3.NE.0.AND.JSPIN.NE.0) CMZO1=CMZO
C
      DO 15 I=1,7
      DO 14 J=1,7
      ZML(I,J)=0.0D0
   14 CONTINUE
      ETA(I)=0.0D0
   15 CONTINUE
C
      IF(IOUT.EQ.1) GO TO 16
      WRITE(6,7001) ZLK
      WRITE(6,7002) ZLKP
 7001 FORMAT('0',1X,'ZLK(K)  1 ',1P10E12.4)
 7002 FORMAT('0',1X,'ZLKP(K) 1 ',1P10E12.4)
C
   16 CONTINUE
C
C        OBTAIN ORBITAL DATA
C
      CALL SETVAL(2)
C
C        ITIM IS SWITCH FOR CALCULATING - NEEDED AT TIME ZERO ONLY
C
      IF(ITIM.EQ.2) GO TO 20
      CALL COMBNZ
      GO TO 40
C
C        IF LENGTH IS CHANGING AFTER  TIME ZERO COMBNZ IS CALLED AT
C        EACH TIME
C
   20 DO 30 K=1,IK
      IF(ZLKP(K).EQ.0.D0) GO TO 30
      CALL COMBNZ
      GO TO 40
   30 CONTINUE
C
   40 IF(IOUT.EQ.1) GO TO 17
      WRITE(6,7003) ZLK
      WRITE(6,7004) ZLKP
 7003 FORMAT('0',1X,'ZLK(K)  2 ',1P10E12.4)
 7004 FORMAT('0',1X,'ZLKP(K) 2 ',1P10E12.4)
C
   17 CONTINUE
C
      CALL FINDGB
C
      CALL THERME
C
      CALL FNDALP
C
      IF(ITWIST.NE.0.OR.ITPROT.NE.0) CALL DEREQT(DEPEND)
C
      DO 35 I=1,3
      I3=I+3
      DO 35 J=1,3
      J3=J+3
      CIN(I,J)=ALP(I3,J3)
   35 CONTINUE
C
      IF(IOUT.EQ.1) GO TO 41
C
C        DEBUGGING OUTPUT FOR IOUT=2
C                       TEMPORARY WRITE'S
      WRITE(6,7005) ZLK
      WRITE(6,7006) ZLKP
 7005 FORMAT('0',1X,'ZLK(K)  3 ',1P10E12.4)
 7006 FORMAT('0',1X,'ZLKP(K) 3 ',1P10E12.4)
C
      T=DMOD(TIM1,8.64D4)
      WRITE(6,8000)
 8000 FORMAT(15X,'DEBUGGING OUTPUT FROM DEREQ1')
      WRITE(6,8001)
 8001 FORMAT(15X,' SA MATRIX')
      WRITE(6,9000) ((SA(I,J),J=1,3),I=1,3)
 9000 FORMAT(' ',2X,1P9E14.6//)
      WRITE(6,9001) (RT1(I),I=1,7)
 9001 FORMAT(' ',2X,'RT1',7E16.8/)
      WRITE(6,8002)
 8002 FORMAT(15X,' RT2 ARRAY ')
      WRITE(6,9002) ((RT2(I,J),J=1,9),I=1,10)
 9002 FORMAT(9E14.6)
      WRITE(6,8003)
 8003 FORMAT(15X,'DEPEND ARRAY FROM DEREQ1')
      WRITE(6,9002) (DEPEND(I),I=1,150)
      WRITE(6,8004)
 8004 FORMAT(15X,'DERIV ARRAY FROM DEREQ1')
      WRITE(6,9002) (DERIV(I),I=1,150)
      WRITE(6,9003) T,LSAVE,DELTAT
 9003 FORMAT('0',2X,'DEREQ - T=',E20.8,2X,'LLL=',I2,2X,'DELTAT=',E20.8)
      WRITE(6,8006)
 8006 FORMAT(15X,' FM1 ARRAY ')
      WRITE(6,9000) ((FM1(I,J),J=1,3),I=1,3)
C
   41 CONTINUE
      DO 50 I=1,7
      ETA(I)=RT1(I)
      DO 50 J=1,7
   50 ZML(I,J)=ALP(I,J)
C
      MAXD=9
      NALP=6
      IF(IDAMP.EQ.1) NALP=7
C
      DO 42 I=1,28
      RVEC(I)=0.0D0
   42 CONTINUE
C
      NRHS=1
      I1=NALP
      IF(IDPHLD.EQ.0) GO TO 43
      NRHS=NRHS+1
      I1=I1+NALP
      RVEC(I1)=1.0D0
   43 CONTINUE
      IF(IGRUND.EQ.0.OR.IGASBR.EQ.0) GO TO 44
      NRHS=NRHS+2
      I1AX=I1+4
      I2AX=I1AX+NALP+1
      RVEC(I1AX)=1.0D0
      RVEC(I2AX)=1.0D0
   44 CONTINUE
C
      CALL ACTFLT(1,TIM1,ETA)
C
      DO 130 K=1,IK
C
      CON=RHOK(K)*ZLK(K)
C
      NKB=NK(K)
      NTW=NKT(K)
      NSZ=2*NKB+NTW
C
      IF(NSZ.EQ.0) GO TO 130
C
      DO 60 I=1,NSZ
      DO 58 J=1,NSZ
      DDEL(I,J)=DEL(K,I,J)
   58 CONTINUE
      DO 59 J=1,7
      GAME(I,J)=GAM(K,I,J)
   59 CONTINUE
   60 CONTINUE
C
      IF(IOUT.EQ.1) GO TO 62
C
      WRITE(6,6010) ((DDEL(I,J),J=1,9),I=1,NSZ)
 6010 FORMAT(' DELTA         ',1P9E13.6)
      WRITE(6,6011) ((GAME(I,J),J=1,7),I=1,NSZ)
 6011 FORMAT(' GAMMA         ',1P7E13.6)
C
   62 CONTINUE
C
C     INVERSE OF DELTA MATRIX
C
      CALL INVERT(DDEL,NSZ,MAXD,IND,C,MT)
C
C
C
      IF(IOUT.EQ.1) GO TO 64
      WRITE(6,6012) ((DDEL(I,J),J=1,9),I=1,NSZ)
 6012 FORMAT(' DELTA INVERSE ',1P9E13.6)
C
   64 CONTINUE
C
C     STORE DELTA INVERSE
C
      DO 70 I=1,NSZ
      DO 70 J=1,NSZ
      DELINV(K,I,J)=DDEL(I,J)
   70 CONTINUE
C
      DO 80 I=1,NALP
      DO 80 J=1,NSZ
      DUM(I,J)=0.D0
      DO 80 L=1,NSZ
   80 DUM(I,J)=DUM(I,J) + GAM(K,L,I)*DDEL(L,J)
C
C
      DO 100 I=1,NALP
      DO 100 J=1,NALP
      SUM1=0.D0
      DO 90 L=1,NSZ
   90 SUM1=SUM1 + DUM(I,L)*GAM(K,L,J)
  100 ZML(I,J)=ZML(I,J) - SUM1*CON
C
C
      DO 120 I=1,NALP
      SUM2=0.D0
      DO 110 L=1,NSZ
  110 SUM2=SUM2 + DUM(I,L)*RT2(K,L)
  120 ETA(I)=ETA(I) - SUM2*CON
  130 CONTINUE
C
C
      IF(KPULSE.NE.IPULSE) CALL PULSER(ETA)
C
C     CALL GRDFCE TO OBTAIN THE GRAVITATIONAL FORCE ON THE GROUND
C
      IF(IGRUND.EQ.1) CALL GRDFCE(ETA)
C
C
      IF(IOUT.EQ.1)GO TO 131
      WRITE(6,7007) ZLK
      WRITE(6,7008) ZLKP
 7007 FORMAT('0',1X,'ZLK(K)  4 ',1P10E12.4)
 7008 FORMAT('0',1X,'ZLKP(K) 4 ',1P10E12.4)
C
      WRITE(6,9500) (ETA(I),I=1,7)
      WRITE(6,9501)
      WRITE(6,9502) ((ZML(I,J),J=1,7),I=1,7)
 9500 FORMAT('0','ETA=',7E17.8)
 9501 FORMAT('0','ZML')
 9502 FORMAT(' ',5X,7E17.8)
      WRITE(6,8005)
 8005 FORMAT(15X,' END OF DEBUGGING OUTPUT FROM DEREQ1')
C
  131 CONTINUE
C
C
C                       TEST FOR ADDING MOMENTUM WHEELS
C
      IF(IWHEEL.EQ.1) CALL WHEELS(1,RWHEEL)
C
      CALL WHREAC(ETA)
      CALL AWREAC(ETA)
C
      OUTTRQ(1)=RWHEEL(1)
      OUTTRQ(2)=RWHEEL(2)
      OUTTRQ(3)=RWHEEL(3)
C
C                       TEST FOR MAGNETIC MOMENTS
C
      IF(IMGMTS.NE.0) CALL MAGNTS(XMB,SA)
C
C                       TEST FOR ATTITUDE CONTROL
C
      IF(NPULSE.EQ.0) GO TO 140
      IF(IATTDE.EQ.1) CALL XACM(CMXO)
C
C
C                       TEST FOR VISCOUS DAMPER
C
  140 CONTINUE
      IF(IVISCS.EQ.1) CALL VISCUS(1,ZML,OMEG,OMEGDT,SYDOT,YDOT,MPRIME)
C
      CALL VISCS2(1,ZML,OMEG,OMEGDT,DEPEND,DERIV,VPRIME)
C
C
C                       ADD ATTITUDE CONTROL MOMENT TO X-AXIS(ETA(4))
C
      ETA(4)=ETA(4) + CMXO
      ETA(6)=ETA(6) + CMZO1
C
C                       ADD OTHER MOMENTS TO ETA
C
      ETA(4)=ETA(4) + VPRIME(1,1) + VPRIME(1,2)
      ETA(5)=ETA(5) + VPRIME(2,1) + VPRIME(2,2)
      ETA(6)=ETA(6) + VPRIME(3,1) + VPRIME(3,2)
C
      ETA(4)=ETA(4) + RWHEEL(1) + XMB(1) + MPRIME(1)
      ETA(5)=ETA(5) + RWHEEL(2) + XMB(2) + MPRIME(2)
      ETA(6)=ETA(6) + RWHEEL(3) + XMB(3) + MPRIME(3)
C
C                       SAVE THE TOTAL MOMENTS FOR OUTPUT
C
      SUMMTS(1)=SUMMTS(1)+XMB(1)+CMXO
      SUMMTS(2)=SUMMTS(2)+XMB(2)
      SUMMTS(3)=SUMMTS(3)+XMB(3)+CMZO1
C
      DO 150 I=1,NALP
      IF(ZML(I,I).EQ.0.D0) GO TO 150
      DO 150 J=1,NALP
      IF(DABS(ZML(I,J)/ZML(I,I)).LT.RATIO) ZML(I,J)=0.D0
  150 CONTINUE
C
      IF(ITORK.EQ.0) GO TO 759
      ETA(4)=ETA(4)+CMTORK(1)
      ETA(5)=ETA(5)+CMTORK(2)
      ETA(6)=ETA(6)+CMTORK(3)
      SUMMTS(1)=SUMMTS(1)+CMTORK(1)
      SUMMTS(2)=SUMMTS(2)+CMTORK(2)
      SUMMTS(3)=SUMMTS(3)+CMTORK(3)
  759 CONTINUE
C
      CALL SECBD2(1,ZML,ETA,NALP)
C
      CALL PCSNSR
C
      CALL DCSNSR
C
      CALL SACSNR
C
      CALL GIMBL2(1,ZML,ETA,NALP)
C
      CALL GMBLD2(1,ZML,ETA)
C
      CALL SAGIM2(1,ZML,ETA,NALP)
C
C
      K=0
      DO 152 I=1,NALP
      DO 151 J=1,I
      K=K+1
      AMAT(K)=ZML(J,I)
  151 CONTINUE
      RVEC(I)=ETA(I)
  152 CONTINUE
C
C
      CALL DGELS(RVEC,AMAT,NALP,NRHS,EPS,IER,AUX)
C
      IF(IER.GE.0) GO TO 153
      WRITE(6,8010) IER
 8010 FORMAT('0 ERROR RETURN FROM DGELS. IER=',I4)
      CALL EXIT
C
  153 CONTINUE
      IF(NRHS.LT.3) GO TO 156
      I1=I1AX
      I2=NALP+I1
      C11=RVEC(I1)
      C21=RVEC(I1+1)
      C12=RVEC(I2)
      C22=RVEC(I2+1)
      R1=RVEC(4)
      R2=RVEC(5)
      DEN=C11*C22-C12*C21
      IF(DEN.EQ.0.0D0) GO TO 155
      GIM1=(C12*R2-C22*R1)/DEN
      GIM2=(C21*R1-C11*R2)/DEN
      DO 154 I=1,NALP
      I1=I1AX-4+I
      I2=NALP+I1
      RVEC(I)=RVEC(I)+RVEC(I1)*GIM1+RVEC(I2)*GIM2
  154 CONTINUE
  155 CONTINUE
      IF(RVEC(4).NE.0.0D0) RVEC(4)=0.0D0
      IF(RVEC(5).NE.0.0D0) RVEC(5)=0.0D0
  156 CONTINUE
C
      IF(IDPHLD.EQ.0) GO TO 702
      IDM=NALP+NALP
      DC=-RVEC(NALP)/RVEC(IDM)
      DO 701 I=1,NALP
      I1=NALP+I
      RVEC(I)=RVEC(I)+DC*RVEC(I1)
  701 CONTINUE
  702 CONTINUE
C
      DO 157 I=1,NALP
      ETA(I)=RVEC(I)
  157 CONTINUE
C
      ARTETA(1)=ETA(1)
      ARTETA(2)=ETA(2)
      ARTETA(3)=ETA(3)
C
C
       DERIV(7)=ETA(4)
       DERIV(8)=ETA(5)
       DERIV(9)=ETA(6)
C
      OMEGDT(1)=ETA(4)
      OMEGDT(2)=ETA(5)
      OMEGDT(3)=ETA(6)
C
      CALL SECBD2(2,ZML,ETA,NALP)
C
      CALL GIMBL2(2,ZML,ETA,NALP)
C
      CALL GMBLD2(2,ZML,ETA)
C
      CALL SAGIM2(2,ZML,ETA,NALP)
C
      IF(IVISCS.EQ.1) CALL VISCUS(2,ZML,OMEG,OMEGDT,SYDOT,YDOT,MPRIME)
C
      CALL VISCS2(2,ZML,OMEG,OMEGDT,DEPEND,DERIV,VPRIME)
C
      IF(IVISCS.EQ.0) GO TO 170
C
      N=NUMEQS - 4
      DO 160 I=1,3
      LL=N+I
  160  DERIV(LL)=YDOT(I)
       DERIV(NUMEQS)=SYDOT
  170 IF(IDAMP.EQ.0) GO TO 180
       DERIV(10)=DEPEND(11)
       DERIV(11)=ETA(7)
  180 CONTINUE
C
C     LOAD QDERIV ARRAY FOR FLEXIBLE ELEMENTS
C
      IA=IAB-1
      IB=IBB-1
      IC=ICP-1
C
      DO 240 K=1,IK
C
      NKB=NK(K)
      NTW=NKT(K)
C
      NSZ=2*NKB+NTW
C
      IF(NSZ.EQ.0) GO TO 240
C
      DO 220 I=1,NSZ
C
      SUM=0.D0
C
      DO 190 J=1,NSZ
  190 SUM=SUM + DELINV(K,I,J)*RT2(K,J)
C
      SUM2=0.D0
C
      DO 210 L=1,NALP
      SUM1=0.D0
C
      DO 200 J=1,NSZ
  200 SUM1=SUM1 + DELINV(K,I,J)*GAM(K,J,L)
C
  210 SUM2=SUM2 + SUM1*ETA(L)
C
  220 RT(I)=SUM - SUM2
C
C
      NKB2=2*NKB
C
      IF(NKB.EQ.0) GO TO 225
      DO 222 I=1,NKB
      I1=IA+I
      I2=I1+NKB
      I3=IB+I
      I4=I3+NKB
C
       DERIV(I1)=DEPEND(I2)
       DERIV(I2)=RT(I)
       DERIV(I3)=DEPEND(I4)
       DERIV(I4)=RT(I+NKB)
C
  222 CONTINUE
C
      IA=IA+NKB2
      IB=IB+NKB2
C
  225 CONTINUE
C
      IF(NTW.EQ.0) GO TO 240
C
      DO 230 I=1,NTW
C
      I1=IC+I
      I2=I1+NTW
C
       DERIV(I1)=DEPEND(I2)
       DERIV(I2)=RT(I+NKB2)
C
  230 CONTINUE
C
      IC=IC+2*NTW
C
  240 CONTINUE
C
      CALL ACTFLT(2,TIM1,ETA)
C
C
      IF(IOUT.EQ.1) GO TO 260
      WRITE(6,7009) ZLK
      WRITE(6,7010) ZLKP
 7009 FORMAT('0',1X,'ZLK(K)  5 ',1P10E12.4)
 7010 FORMAT('0',1X,'ZLKP(K) 5 ',1P10E12.4)
C
      WRITE(6,8000)
      WRITE(6,9002) DERIV
      WRITE(6,9002) P1,XMB,MPRIME
  260 CONTINUE
C
      RETURN
      END
      SUBROUTINE DEREQ1(QDPEND,TIME,QDERIV)
C     BUFFER SUBROUTINE BETWEEN ADMIMP & DEREQ
C          DEPENDENT VARIABLES ARE SUPPLIED IN QDEPEND,
C          DERIVATIVES ARE RETURNED VIA QDERIV
C     DEREQ TAKES ITS VALUES FROM THE COMMON BLOCK VARBLS
C
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/ICSADM/ LADAM
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
      COMMON/RPOOL1/ RHOK(10),TIM1,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
      DIMENSION QDPEND(2),QDERIV(2)
C
C
C      LOAD THE STATE VARIABLES
      TIM1=TIME
      DO 10 I=1,NUMEQS
   10 DEPEND(I)=QDPEND(I)
C
C     COMPUTE DERIVATIVES
      CALL DEREQ
C
C     COLLECT THE RESULTS
      DO 250 J=1,NUMEQS
250   QDERIV(J)=DERIV(J)
C
      DO 270 I=1,6
      QDPEND(I)=DEPEND(I)
  270 CONTINUE
C
      IF(LADAM.NE.1) GO TO 300
C
      DO 260 J=7,NUMEQS
      QDPEND(J)=DEPEND(J)
  260 CONTINUE
C
  300 CONTINUE
C
      RETURN
      END
      SUBROUTINE DEREQT(DEP)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ADDMOM/ HDUMMY(9),HTIP(3)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/INEWR /NKT(10),ICP,ICPS
C
      COMMON/INTTRP/ITPROT,NUMTIP(10)
C
      COMMON/IPOOL1/IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10)
     1             ,LK(10),LLK(10)
C
      COMMON/RNEWC / ZGJ(10),ZEDQ(10),ZO(10),ZED2(10),ZED3(10)
C
      COMMON/RNEWR / ZA(10),CI3(10),C2OV3(10)
C
      COMMON/RPOOL1/RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3)
     1             ,ZLKP(10),ZLKPP(10),CMAT(3,3),GBAR(3,3),YBCM(3)
     2             ,ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL5/CKMAT(3,3,10),FM2(3,3)
C
      COMMON/RPOOL9/RT1(7),RT2(10,9),ALP(7,7),GAM(10,9,7),DEL(10,9,9)
C
      COMMON/ITWWRK/NKB,NTW,NTT,ILK,ILLK
C
      COMMON/TWWORK/FM(3,3),A(3),AD(3),B(3),BD(3),C(3),CD(3),ZL,RO
     1             ,RSQT(3),W2,W3,EIM,ED2,ED3,EDP,GJ,HKT(3)
C
      COMMON/TWWRK1/WV(228)
C
      COMMON/TMSINR/ TIPINR(3,10),RSQ(3,10),XIPL(6),BETL(6)
C
      COMMON/TPWORK/ XIPK(3),BETK(3)
C
      COMMON/TWIDMP/ CDTW(3,10)
C
      COMMON/WRKTDP/ CDMP(3)
C
C
      DIMENSION DEP(150),YY(3,3),YYD(3,3),ZZ(3,3),ZZD(3,3),YYDD(3)
C
      DIMENSION ZZDD(3)
C
      DIMENSION DUM1(3,3),DUM2(3,3),DUM3(3,3)
C
      DIMENSION GBY(3,3),GBK(3,3),OMK(3),VW1(3),VW2(3)
C
      DIMENSION YKYDD(3),YKYD(3,3),YKY(3,3)
C
      DIMENSION CON2(3),CON3(3),GGM(3),II(3),JJ(3)
C
      DIMENSION OMZ(3),GBZ(3,3),ZKZ(3,3),ZKZD(3,3),ZKZDD(3)
C
      DIMENSION     XX(3,3),XXD(3,3),XXDD(3),XXA(3,3,3),XXB(3,3,3)
     1             ,XXC(3,3,3),XDXA(3,3),XDXB(3,3),XDXC(3,3),XDDXA(3)
     2             ,XDDXB(3),XDDXC(3),XAX(3,3),XBX(3,3),XCX(3,3)
     3             ,DLAA(3,3),DLAB(3,3),DLAC(3,3),DLBB(3,3),DLBC(3,3)
     4             ,DLCC(3,3),VIFA(3),VIFB(3),VIFC(3)
C
      EQUIVALENCE (WV(1),XX(1,1)),(WV(10),XXD(1,1)),(WV(19),XXDD(1))
     1           ,(WV(22),XXA(1,1,1)),(WV(44),XXB(1,1,1))
     2           ,(WV(76),XXC(1,1,1)),(WV(103),XDXA(1,1))
     3           ,(WV(103),XDXA(1,1)),(WV(112),XDXB(1,1))
     4           ,(WV(121),XDXC(1,1)),(WV(130),XDDXA(1))
     5           ,(WV(133),XDDXB(1)),(WV(136),XDDXC(1))
     6           ,(WV(139),XAX(1,1)),(WV(148),XBX(1,1))
     7           ,(WV(157),XCX(1,1)),(WV(166),DLAA(1,1))
     8           ,(WV(175),DLAB(1,1)),(WV(184),DLAC(1,1))
     9           ,(WV(193),DLBB(1,1)),(WV(202),DLBC(1,1))
     A           ,(WV(211),DLCC(1,1)),(WV(220),VIFA(1))
     B           ,(WV(223),VIFB(1)),(WV(226),VIFC(1))
C
      DATA II/2,3,1/,JJ/3,1,2/
C
      DATA DZERO/0.0D0/
C
C     EXTRACT INTEGER DATA
      IF(IOUT.NE.1) WRITE(6,6004) RT1
C
      IA=IAB-1
      IB=IBB-1
      IC=ICP-1
C
C     ZERO OUT SYSTEM ARRAYS
C
      DO 2 I=1,3
      DO 1 J=1,3
      YY(I,J)=DZERO
      YYD(I,J)=DZERO
      ZZ(I,J)=DZERO
      ZZD(I,J)=DZERO
    1 CONTINUE
      YYDD(I)=DZERO
      ZZDD(I)=DZERO
      HTIP(I)=DZERO
    2 CONTINUE
C
      CALL MPYMAT(SA,GBAR,SA,2,2,DUM1,GBY)
C
      IF(IOUT.NE.1) WRITE(6,6001) DEP
C
C     CONSTRUCT K - LOOP FOR ELEMENTS
C
      DO 500 K=1,IK
C
C     EXTRACT INTEGER CONTROL VARIABLES
C
      NKB=NK(K)
      NTW=NKT(K)
      NTT=NUMTIP(K)
      ILK=LK(K)
      ILLK=LLK(K)
C
      ITEST=NTW+NTT
      IF(ITEST.EQ.0) GO TO 500
C
C     EXTRACT TRANSFORMATION MATRICES
C
      DO 5 I=1,3
      DO 4 J=1,3
      CMAT(I,J)=CKMAT(I,J,K)
      IF(K.GT.K1) GO TO 3
      FM(I,J)=FM1(I,J)
      GO TO 4
    3 CONTINUE
      FM(I,J)=FM2(I,J)
    4 CONTINUE
      HKT(I)=DZERO
    5 CONTINUE
C
      CALL MPYMAT(FM,CMAT,DUM1,1,1,FCM,DUM1)
C
C     EXTRACT ELEMENT DEPENDENT VARIABLES FROM DEP VECTOR
C
      DO 6 I=1,3
      A(I)=DZERO
      B(I)=DZERO
      C(I)=DZERO
      AD(I)=DZERO
      BD(I)=DZERO
      CD(I)=DZERO
    6 CONTINUE
C
      IF(NKB.EQ.0) GO TO 15
C
      DO 12 I=1,NKB
      I1=IA+I
      I2=I1+NKB
      I3=IB+I
      I4=I3+NKB
      A(I)=DEP(I1)
      AD(I)=DEP(I2)
      B(I)=DEP(I3)
      BD(I)=DEP(I4)
   12 CONTINUE
C
   15 CONTINUE
C
      IF(NTW.EQ.0) GO TO 20
C
      DO 17 I=1,NTW
      I1=IC+I
      I2=I1+NTW
      C(I)=DEP(I1)
      CD(I)=DEP(I2)
   17 CONTINUE
C
   20 CONTINUE
C
C     EXTRACT ELEMENT DATA
C
      ZL=ZLK(K)
      RO=RHOK(K)
C
C     FILL IN FOR RSQT,W2,W3,EIM,ED2,ED3,EDP,GJ
C
      EIM=ZO(K)
      ED2=ZED2(K)
      ED3=ZED3(K)
      EDP=ZEDQ(K)
      GJ=ZGJ(K)
      I11=0
      IF(ILK.EQ.2) I11=3
      WS1=ZL*RO
      DO 21 I=1,3
      IND=I11+I
      RSQT(I)=RSQ(I,K)/WS1
      CDMP(I)=CDTW(I,K)
      XIPK(I)=XIPL(IND)
      BETK(I)=BETL(IND)
   21 CONTINUE
      W3=CI3(K)/ZA(K)/144.0D0
      W2=W3*C2OV3(K)
C
C
C     ZERO OUT WORK COMMON
C
      DO 50 I=1,228
      WV(I)=DZERO
   50 CONTINUE
C
      IF(IOUT.NE.1) WRITE(6,6001) W2,W3,ZL,RO,EIM,ED2,ED3,EDP,GJ
      IF(IOUT.NE.1) WRITE(6,6001) A,B,C
      IF(IOUT.NE.1) WRITE(6,6001) XIPK,BETK,RSQT
C
C     CONSTRUCT BASIC ARRAYS FOR TIP MASS
C
      IF(NTT.EQ.0) GO TO 55
C
      CALL FNDTIP
C
      IF(IOUT.EQ.1) GO TO 55
      WRITE(6,6000)
      WRITE(6,6001) WV
   55 CONTINUE
C
C
C     ADD TWIST EQUATIONS IF TWIST IS PRESENT
C
      IF(NTW.EQ.0) GO TO 60
C
      CALL FNDINT
C
      CALL FINDTW
C
   60 CONTINUE
C
      IF(IOUT.EQ.1) GO TO 61
      WRITE(6,6000)
      WRITE(6,6001)  WV
 6000 FORMAT('0',10X,'WORK VECTOR FROM DEREQT'/)
 6001 FORMAT(' ',1P9E14.6)
   61 CONTINUE
C
      ITEST1=NKB+NTW
C
      IF(ITEST1.EQ.0) GO TO 400
C
C
C     ADD TIP MASS AND TWIST EFFECTS FOR THIS ELEMENT
C
      DO 62 I=1,3
      OMK(I)=FCM(1,I)*OMEG(1)+FCM(2,I)*OMEG(2)+FCM(3,I)*OMEG(3)
      HTIP(I)=HTIP(I)+FCM(1,I)*HKT(1)+FCM(2,I)*HKT(2)+FCM(3,I)*HKT(3)
   62 CONTINUE
C
      IF(IDAMP.EQ.0.OR.K.GT.K1) GO TO 70
      DO 65 I=1,3
      OMK(I)=OMK(I)+CMAT(I,2)*PHID
   65 CONTINUE
C
   70 CONTINUE
C
      O11=OMK(1)*OMK(1)
      O12=OMK(1)*OMK(2)
      O13=OMK(1)*OMK(3)
      O22=OMK(2)*OMK(2)
      O23=OMK(2)*OMK(3)
      O33=OMK(3)*OMK(3)
C
C     TRANSFORM GBY TO ELEMENT FRAME
C
      CALL MPYMAT(FCM,GBY,FCM,2,2,DUM1,GBK)
C
      NKB2=2*NKB
C
      IF(NKB.EQ.0) GO TO 200
C
      DO 100 I=1,NKB
      I1=NKB+I
C
C     AUGMENT DELTA MATRIX
C
      DO 72 J=1,NKB
      J1=NKB+J
      DEL(K,I,J)=DEL(K,I,J)+DLAA(I,J)
      DEL(K,I,J1)=DEL(K,I,J1)+DLAB(I,J)
      DEL(K,I1,J1)=DEL(K,I1,J1)+DLBB(I,J)
      DEL(K,J1,I)=DEL(K,I,J1)
   72 CONTINUE
C
      IF(NTW.EQ.0) GO TO 75
C
      DO 74 J=1,NTW
      J1=NKB2+J
      DEL(K,I,J1)=DEL(K,I,J1)+DLAC(I,J)
      DEL(K,I1,J1)=DEL(K,I1,J1)+DLBC(I,J)
      DEL(K,J1,I)=DEL(K,I,J1)
      DEL(K,J1,I1)=DEL(K,I1,J1)
   74 CONTINUE
C
   75 CONTINUE
C
C     AUGMENT GAMMA SYSTEM COUPLING MATRIX
C
      DO 76 J=1,3
      VW1(J)=FCM(J,1)*XAX(I,1)+FCM(J,2)*XAX(I,2)+FCM(J,3)*XAX(I,3)
      VW2(J)=FCM(J,1)*XBX(I,1)+FCM(J,2)*XBX(I,2)+FCM(J,3)*XBX(I,3)
   76 CONTINUE
C
      DO 78 J=1,3
      J1=J+3
      GAM(K,I,J1)=GAM(K,I,J1)+VW1(J)
      GAM(K,I1,J1)=GAM(K,I1,J1)+VW2(J)
   78 CONTINUE
C
      IF(IDAMP.EQ.0.OR.K.GT.K1) GO TO 80
C
      WS1=CMAT(2,1)*XAX(I,1)+CMAT(2,2)*XAX(I,2)+CMAT(2,3)*XAX(I,3)
      WS2=CMAT(2,1)*XBX(I,1)+CMAT(2,2)*XBX(I,2)+CMAT(2,3)*XBX(I,3)
C
      GAM(K,I,7)=GAM(K,I,7)+WS1
      GAM(K,I1,7)=GAM(K,I1,7)+WS2
C
   80 CONTINUE
C
C     FIND GRAVITY GRADIENT FORCES FOR AN AND BN EQUATIONS
C
      SUMA=DZERO
      SUMB=DZERO
      DO 85 J=1,3
      DO 85 L=1,3
      SUMA=SUMA+GBK(J,L)*XXA(I,J,L)
      SUMB=SUMB+GBK(J,L)*XXB(I,J,L)
   85 CONTINUE
C
C     FIND INERTIAL TERMS FOR AN AND BN EQUATIONS
C
      CONA2=OMK(1)*XDXA(I,1)+OMK(2)*XDXA(I,2)+OMK(3)*XDXA(I,3)
      CONB2=OMK(1)*XDXB(I,1)+OMK(2)*XDXB(I,2)+OMK(3)*XDXB(I,3)
      CONA2=2.0D0*CONA2
      CONB2=2.0D0*CONB2
C
      CONA3=-(O22+O33)*XXA(I,1,1)-(O33+O11)*XXA(I,2,2)
     1      -(O11+O22)*XXA(I,3,3)+O12*(XXA(I,1,2)+XXA(I,2,1))
     2      +O13*(XXA(I,1,3)+XXA(I,3,1))+O23*(XXA(I,2,3)+XXA(I,3,2))
      CONB3=-(O22+O33)*XXB(I,1,1)-(O33+O11)*XXB(I,2,2)
     1      -(O11+O22)*XXB(I,3,3)+O12*(XXB(I,1,2)+XXB(I,2,1))
     2      +O13*(XXB(I,1,3)+XXB(I,3,1))+O23*(XXB(I,2,3)+XXB(I,3,2))
C
      RT2(K,I)=RT2(K,I)+SUMA-XDDXA(I)-CONA2-CONA3-VIFA(I)
      RT2(K,I1)=RT2(K,I1)+SUMB-XDDXB(I)-CONB2-CONB3-VIFB(I)
C
C
      IF(IOUT.EQ.1) GO TO 100
      WRITE(6,6005) I
 6005 FORMAT('0 OUTPUT FROM BENDING LOOP FOR MODE',I2/)
      WRITE(6,6006) SUMA,XDDXA(I),CONA2,CONA3,VIFA(I)
      WRITE(6,6006) SUMB,XDDXB(I),CONB2,CONB3,VIFB(I)
 6006 FORMAT(' ',5X,1P5E14.6)
C
  100 CONTINUE
C
C
C
  200 CONTINUE
C
C     ADD TWIST EQUATION
C
      IF(NTW.EQ.0) GO TO 400
C
      DO 300 I=1,NTW
      I1=NKB2+I
C
C     AUGMENT DELTA MATRIX
C
      DO 210 J=1,NTW
      J1=NKB2+J
      DEL(K,I1,J1)=DLCC(I,J)
  210 CONTINUE
C
C
C
      DO 212 J=1,3
      VW1(J)=FCM(J,1)*XCX(I,1)+FCM(J,2)*XCX(I,2)+FCM(J,3)*XCX(I,3)
  212 CONTINUE
C
      DO 214 J=1,3
      J1=J+3
      GAM(K,I1,J1)=GAM(K,I1,J1)+VW1(J)
  214 CONTINUE
C
      IF(IDAMP.EQ.0.OR.K.GT.K1) GO TO 220
C
      WS1=CMAT(2,1)*XCX(I,1)+CMAT(2,2)*XCX(I,2)+CMAT(2,3)*XCX(I,3)
C
      GAM(K,I1,7)=GAM(K,I1,7)+WS1
C
  220 CONTINUE
C
C     GRAVITY GRADIENT FOR TWIST EQUATION
C
      SUMC=DZERO
      DO 230 J=1,3
      DO 230 L=1,3
      SUMC=SUMC+GBK(J,L)*XXC(I,J,L)
  230 CONTINUE
C
C     INERTIAL TERMS FOR TWIST EQUATION
C
      CONC2=OMK(1)*XDXC(I,1)+OMK(2)*XDXC(I,2)+OMK(3)*XDXC(I,3)
      CONC2=2.0D0*CONC2
C
      CONC3=-(O22+O33)*XXC(I,1,1)-(O33+O11)*XXC(I,2,2)
     1      -(O11+O22)*XXC(I,3,3)+O12*(XXC(I,1,2)+XXC(I,2,1))
     2      +O13*(XXC(I,1,3)+XXC(I,3,1))+O23*(XXC(I,2,3)+XXC(I,3,2))
C
      RT2(K,I1)=RT2(K,I1)+SUMC-XDDXC(I)-CONC2-CONC3-VIFC(I)
C
C
      IF(IOUT.EQ.1) GO TO 300
      WRITE(6,6007) I
 6007 FORMAT('0 OUTPUT FROM TWIST LOOP FOR MODE',I2/)
      WRITE(6,6006) SUMC,XDDXC(I),CONC2,CONC3,VIFC(I)
C
  300 CONTINUE
C
C
C
  400 CONTINUE
C
C     TRANSFORM SYSTEM TERMS TO MAIN BODY FRAME
C
      DO 410 J=1,3
      YKYDD(J)=FCM(J,1)*XXDD(1)+FCM(J,2)*XXDD(2)+FCM(J,3)*XXDD(3)
  410 CONTINUE
C
      CALL MPYMAT(FCM,XXD,FCM,2,2,DUM1,YKYD)
      CALL MPYMAT(FCM,XX,FCM,2,2,DUM1,YKY)
C
C     SUM CONTRIBUTION TO SYSTEM EQUATIONS
C
      CON=RO*ZL
C
      DO 420 I=1,3
      DO 419 J=1,3
      YY(I,J)=YY(I,J)+YKY(I,J)*CON
      YYD(I,J)=YYD(I,J)+YKYD(I,J)*CON
  419 CONTINUE
      YYDD(I)=YYDD(I)+YKYDD(I)*CON
  420 CONTINUE
C
C     INCREMENT COUNTERS
C
      IA=IA+NKB2
      IB=IB+NKB2
      IC=IC+2*NTW
C
C     ADD IF DAMPER ELEMENT
C
      IF(IDAMP.EQ.0.OR.K.GT.K1) GO TO 500
C
      DO 430 J=1,3
      ZKZDD(J)=CMAT(J,1)*XXDD(1)+CMAT(J,2)*XXDD(2)+CMAT(J,3)*XXDD(3)
  430 CONTINUE
C
      CALL MPYMAT(CMAT,XXD,CMAT,2,2,DUM1,ZKZD)
      CALL MPYMAT(CMAT,XX,CMAT,2,2,DUM1,ZKZ)
C
      DO 440 I=1,3
      DO 439 J=1,3
      ZZ(I,J)=ZZ(I,J)+ZKZ(I,J)*CON
      ZZD(I,J)=ZZD(I,J)+ZKZD(I,J)*CON
  439 CONTINUE
      ZZDD(I)=ZZDD(I)+ZKZDD(I)*CON
  440 CONTINUE
C
C
C
  500 CONTINUE
C
C
C     AUGMENT SYSTEM EQUATIONS
C
C     GRAVITY GRADIENT MOMENTS
      DO 540 I=1,3
      I1=II(I)
      J1=JJ(I)
      GGM(I)=DZERO
      DO 535 J=1,3
      GGM(I)=GGM(I)+YY(I1,J)*GBY(J1,J)-YY(J1,J)*GBY(I1,J)
  535 CONTINUE
  540 CONTINUE
C
C     CONSTRUCT INERTIAL TERMS
C
      WS1=YYD(1,1)+YYD(2,2)+YYD(3,3)
      DO 560 I=1,3
      CON2(I)=-YYD(1,I)*OMEG(1)-YYD(2,I)*OMEG(2)-YYD(3,I)*OMEG(3)
      CON2(I)=CON2(I)+OMEG(I)*WS1
      CON2(I)=2.0D0*CON2(I)
  560 CONTINUE
C
      WS1=OMEG(1)*OMEG(1)+OMEG(2)*OMEG(2)+OMEG(3)*OMEG(3)
C
      DO 580 I=1,3
      I1=II(I)
      J1=JJ(I)
      CON3(I)=DZERO
      DO 570 J=1,3
      CON3(I)=CON3(I)+OMEG(I)*OMEG(J)*(YY(I1,J)-YY(J1,J))
  570 CONTINUE
      CON3(I)=CON3(I)-WS1*(YY(I1,I)-YY(J1,I))
  580 CONTINUE
C
C     INCREMENT ALP MATRIX AND RT1
C
      WS1=YY(1,1)+YY(2,2)+YY(3,3)
      DO 600 I=1,3
      I1=I+3
      DO 595 J=1,3
      J1=J+3
      ALP(I1,J1)=ALP(I1,J1)-YY(I,J)
  595 CONTINUE
      ALP(I1,I1)=ALP(I1,I1)+WS1
      RT1(I1)=RT1(I1)+GGM(I)-YYDD(I)-CON2(I)-CON3(I)
  600 CONTINUE
C
C     IF DAMPER CASE AUGMENT DAMPER EQUATION
C
      IF(IDAMP.EQ.0) GO TO 800
C
C     GRAVITY GRADIENT MOMENT
C
      CALL MPYMAT(FM1,GBY,FM1,2,2,DUM1,GBZ)
C
      I1=3
      J1=1
      SUMD=DZERO
      DO 720 I=1,3
      SUMD=SUMD+GBZ(J1,I)*ZZ(I1,I)-GBZ(I1,I)*ZZ(J1,I)
  720 CONTINUE
C
C     INERTIA TERMS FOR DAMPER EQUATION
C
      DO 730 I=1,3
      OMZ(I)=FM1(1,I)*OMEG(1)+FM1(2,I)*OMEG(2)+FM1(3,I)*OMEG(3)
  730 CONTINUE
C
      COND2=-ZZD(1,2)*OMZ(1)+(ZZD(3,3)+ZZD(1,1))*(OMZ(2)+PHID)
     1      -ZZD(3,2)*OMZ(3)
      COND2=2.0D0*COND2
C
      COND3=(OMZ(1)*OMZ(1)-OMZ(3)*OMZ(3))*ZZ(1,3)
     1      +OMZ(1)*OMZ(3)*(ZZ(3,3)-ZZ(1,1))
     2      +OMZ(2)*(OMZ(1)*ZZ(2,3)-OMZ(3)*ZZ(1,2))
C
C     SYSTEM INERTIA TERMS DUE TO DAMPER MOTION
C
      WS1=2.0D0*PHID
      WS2=PHID*PHID
C
      VW1(1)=-WS1*ZZD(2,1)
      VW1(2)=WS1*(ZZD(3,3)+ZZD(1,1))
      VW1(3)=-WS1*ZZD(2,3)
C
      VW2(1)=-WS1*(OMZ(3)*ZZ(3,3)-OMZ(1)*ZZ(1,3)+OMZ(2)*ZZ(2,3))
     1       -WS2*ZZ(2,3)
      VW2(2)=DZERO
      VW2(3)=WS1*(OMZ(3)*ZZ(1,3)-OMZ(1)*ZZ(1,1)+OMZ(2)*ZZ(1,2))
     1       +WS2*ZZ(1,3)
C
      DO 735 I=1,3
      CON2(I)=FM1(I,1)*VW1(1)+FM1(I,2)*VW1(2)+FM1(I,3)*VW1(3)
      CON3(I)=FM1(I,1)*VW2(1)+FM1(I,2)*VW2(2)+FM1(I,3)*VW2(3)
      I3=I+3
      RT1(I3)=RT1(I3)-CON2(I)-CON3(I)
  735 CONTINUE
C
C     AUGMENT ALP MATRIX AND RT1
C
      WS1=ZZ(3,3)+ZZ(1,1)
C
      ALP(7,4)=ALP(7,4)-ZZ(1,2)*FM1(1,1)+WS1*FM1(1,2)-ZZ(2,3)*FM1(1,3)
      ALP(7,5)=ALP(7,5)-ZZ(1,2)*FM1(2,1)+WS1*FM1(2,2)-ZZ(2,3)*FM1(2,3)
      ALP(7,6)=ALP(7,6)-ZZ(1,2)*FM1(3,1)+WS1*FM1(3,2)-ZZ(2,3)*FM1(3,3)
      ALP(7,7)=ALP(7,7)+WS1
      ALP(4,7)=ALP(7,4)
      ALP(5,7)=ALP(7,5)
      ALP(6,7)=ALP(7,6)
C
      RT1(7)=RT1(7)+SUMD-ZZDD(2)-COND2-COND3
C
C
  800 CONTINUE
C
C
      IF(IOUT.EQ.1) GO TO 900
      WRITE(6,6002)
 6002 FORMAT('0',5X,'ALP FROM DEREQT'/)
      WRITE(6,6003) ALP
 6003 FORMAT(' ',1P7E14.6)
      WRITE(6,6001) GBY,YY,YYD,YYDD,GGM,CON2,CON3,OMEG
      WRITE(6,6004) RT1
 6004 FORMAT('0RT1  ',1P7E14.6)
  900 CONTINUE
C
C
      RETURN
C
      END
C
C     ..................................................................
C
C        SUBROUTINE DGELS
C
C        PURPOSE
C           TO SOLVE A SYSTEM OF SIMULTANEOUS LINEAR EQUATIONS WITH
C           SYMMETRIC COEFFICIENT MATRIX UPPER TRIANGULAR PART OF WHICH
C           IS ASSUMED TO BE STORED COLUMNWISE.
C
C        USAGE
C           CALL DGELS(R,A,M,N,EPS,IER,AUX)
C
C        DESCRIPTION OF PARAMETERS
C           R      - DOUBLE PRECISION M BY N RIGHT HAND SIDE MATRIX
C                    (DESTROYED). ON RETURN R CONTAINS THE SOLUTION OF
C                    THE EQUATIONS.
C           A      - UPPER TRIANGULAR PART OF THE SYMMETRIC DOUBLE
C                    PRECISION M BY M COEFFICIENT MATRIX.  (DESTROYED)
C           M      - THE NUMBER OF EQUATIONS IN THE SYSTEM.
C           N      - THE NUMBER OF RIGHT HAND SIDE VECTORS.
C           EPS    - SINGLE PRECISION INPUT CONSTANT WHICH IS USED AS
C                    RELATIVE TOLERANCE FOR TEST ON LOSS OF
C                    SIGNIFICANCE.
C           IER    - RESULTING ERROR PARAMETER CODED AS FOLLOWS
C                    IER=0  - NO ERROR,
C                    IER=-1 - NO RESULT BECAUSE OF M LESS THAN 1 OR
C                             PIVOT ELEMENT AT ANY ELIMINATION STEP
C                             EQUAL TO 0,
C                    IER=K  - WARNING DUE TO POSSIBLE LOSS OF SIGNIFI-
C                             CANCE INDICATED AT ELIMINATION STEP K+1,
C                             WHERE PIVOT ELEMENT WAS LESS THAN OR
C                             EQUAL TO THE INTERNAL TOLERANCE EPS TIMES
C                             ABSOLUTELY GREATEST MAIN DIAGONAL
C                             ELEMENT OF MATRIX A.
C           AUX    - DOUBLE PRECISION AUXILIARY STORAGE ARRAY
C                    WITH DIMENSION M-1.
C
C        REMARKS
C           UPPER TRIANGULAR PART OF MATRIX A IS ASSUMED TO BE STORED
C           COLUMNWISE IN M*(M+1)/2 SUCCESSIVE STORAGE LOCATIONS, RIGHT
C           HAND SIDE MATRIX R COLUMNWISE IN N*M SUCCESSIVE STORAGE
C           LOCATIONS. ON RETURN SOLUTION MATRIX R IS STORED COLUMNWISE
C           TOO.
C           THE PROCEDURE GIVES RESULTS IF THE NUMBER OF EQUATIONS M IS
C           GREATER THAN 0 AND PIVOT ELEMENTS AT ALL ELIMINATION STEPS
C           ARE DIFFERENT FROM 0. HOWEVER WARNING IER=K - IF GIVEN -
C           INDICATES POSSIBLE LOSS OF SIGNIFICANCE. IN CASE OF A WELL
C           SCALED MATRIX A AND APPROPRIATE TOLERANCE EPS, IER=K MAY BE
C           INTERPRETED THAT MATRIX A HAS THE RANK K. NO WARNING IS
C           GIVEN IN CASE M=1.
C           ERROR PARAMETER IER=-1 DOES NOT NECESSARILY MEAN THAT
C           MATRIX A IS SINGULAR, AS ONLY MAIN DIAGONAL ELEMENTS
C           ARE USED AS PIVOT ELEMENTS. POSSIBLY SUBROUTINE DGELG (WHICH
C           WORKS WITH TOTAL PIVOTING) WOULD BE ABLE TO FIND A SOLUTION.
C
C        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
C           NONE
C
C        METHOD
C           SOLUTION IS DONE BY MEANS OF GAUSS-ELIMINATION WITH
C           PIVOTING IN MAIN DIAGONAL, IN ORDER TO PRESERVE
C           SYMMETRY IN REMAINING COEFFICIENT MATRICES.
C
C     ..................................................................
C
      SUBROUTINE DGELS(R,A,M,N,EPS,IER,AUX)
C
C
      DIMENSION A(1),R(1),AUX(1)
      DOUBLE PRECISION R,A,AUX,PIV,TB,TOL,PIVI
      IF(M)24,24,1
C
C     SEARCH FOR GREATEST MAIN DIAGONAL ELEMENT
    1 IER=0
      PIV=0.D0
      L=0
      DO 3 K=1,M
      L=L+K
      TB=DABS(A(L))
      IF(TB-PIV)3,3,2
    2 PIV=TB
      I=L
      J=K
    3 CONTINUE
      TOL=EPS*PIV
C     MAIN DIAGONAL ELEMENT A(I)=A(J,J) IS FIRST PIVOT ELEMENT.
C     PIV CONTAINS THE ABSOLUTE VALUE OF A(I).
C
C
C     START ELIMINATION LOOP
      LST=0
      NM=N*M
      LEND=M-1
      DO 18 K=1,M
C
C     TEST ON USEFULNESS OF SYMMETRIC ALGORITHM
      IF(PIV)24,24,4
    4 IF(IER)7,5,7
    5 IF(PIV-TOL)6,6,7
    6 IER=K-1
    7 LT=J-K
      LST=LST+K
C
C     PIVOT ROW REDUCTION AND ROW INTERCHANGE IN RIGHT HAND SIDE R
      PIVI=1.D0/A(I)
      DO 8 L=K,NM,M
      LL=L+LT
      TB=PIVI*R(LL)
      R(LL)=R(L)
    8 R(L)=TB
C
C     IS ELIMINATION TERMINATED
      IF(K-M)9,19,19
C
C     ROW AND COLUMN INTERCHANGE AND PIVOT ROW REDUCTION IN MATRIX A.
C     ELEMENTS OF PIVOT COLUMN ARE SAVED IN AUXILIARY VECTOR AUX.
    9 LR=LST+(LT*(K+J-1))/2
      LL=LR
      L=LST
      DO 14 II=K,LEND
      L=L+II
      LL=LL+1
      IF(L-LR)12,10,11
   10 A(LL)=A(LST)
      TB=A(L)
      GO TO 13
   11 LL=L+LT
   12 TB=A(LL)
      A(LL)=A(L)
   13 AUX(II)=TB
   14 A(L)=PIVI*TB
C
C     SAVE COLUMN INTERCHANGE INFORMATION
      A(LST)=LT
C
C     ELEMENT REDUCTION AND SEARCH FOR NEXT PIVOT
      PIV=0.D0
      LLST=LST
      LT=0
      DO 18 II=K,LEND
      PIVI=-AUX(II)
      LL=LLST
      LT=LT+1
      DO 15 LLD=II,LEND
      LL=LL+LLD
      L=LL+LT
   15 A(L)=A(L)+PIVI*A(LL)
      LLST=LLST+II
      LR=LLST+LT
      TB=DABS(A(LR))
      IF(TB-PIV)17,17,16
   16 PIV=TB
      I=LR
      J=II+1
   17 DO 18 LR=K,NM,M
      LL=LR+LT
   18 R(LL)=R(LL)+PIVI*R(LR)
C     END OF ELIMINATION LOOP
C
C
C     BACK SUBSTITUTION AND BACK INTERCHANGE
   19 IF(LEND)24,23,20
   20 II=M
      DO 22 I=2,M
      LST=LST-II
      II=II-1
      L=A(LST)+.5D0
      DO 22 J=II,NM,M
      TB=R(J)
      LL=J
      K=LST
      DO 21 LT=II,LEND
      LL=LL+1
      K=K+LT
   21 TB=TB-A(K)*R(LL)
      K=J+L
      R(J)=R(K)
   22 R(K)=TB
   23 RETURN
C
C
C     ERROR RETURN
   24 IER=-1
      RETURN
      END
      SUBROUTINE DIFFDE (FKL   ,FLC4  ,HGT   ,TCIL  ,TINF  ,TZ    ,
     *                   VCDI  ,XCDI  ,RHO   )
      IMPLICIT REAL*8   (A-H,O-Z)
      DIMENSION          RH(6) ,SD(5) ,ZD(7)
C
C.......................................................................
C
C   VERSION OF MARCH 30, 1976
C
C   PURPOSE
C     DIFFDE IS CALLED BY LOWALT TO COMPUTE THE ATMOSPHERIC DENSITY
C     VALUES FROM 100 KM TO 125 KM.
C
C   INTERFACES
C
C     VARIABLE   COM/ARGLIST   I/O   DESCRIPTION
C     --------   -----------   ---   -----------------------------------
C     ADT(6)     /ORDRAG/       I    THERMAL DIFFUSION COEFFICIENTS
C     CM(6)      /ORDRAG/       I    MASSES OF ATMOSPHERIC
C                                    CONSTITUENTS (GM/MOLE)
C     FKL        ARG. LIST      I    FACTOR INVOLVED IN RHO COMPUTATION
C     FLC4       ARG. LIST      I    MODIFYING FACTOR
C     HGT        ARG. LIST      I    SPACECRAFT HEIGHT (KM)
C     RCM        /ORDRAG/       I    AVERAGE EARTH RADIUS (KM)
C     RHO        ARG. LIST      O    ATMOSPHERIC DENSITY
C     RL1        /ORDRAG/       I    ROOT OF POLYNOMIAL IN INTEGRAND
C     RL2        /ORDRAG/       I    ROOT OF POLYNOMIAL IN INTEGRAND
C     TCIL       ARG. LIST      I    TEMPERATURE AT 100 KM.
C     TINF       ARG. LIST      I    EXOSPHERIC TEMPERATURE
C     TZ         ARG. LIST      I    TEMPERATURE AT HGT
C     UC(2)      /ORDRAG/       I    FUNCTIONAL VALUES AT RL1 AND RL2
C     VCDI       ARG. LIST      I    FACTOR INCLUDED IN RHO COMPUTATION
C     WC(2)      /ORDRAG/       I    FUNCTIONAL VALUES AT RL1 AND RL2
C     XCDI       ARG. LIST      I    FACTOR INCLUDED IN RHO COMPUTATION
C     XLPS       /ORDRAG/       I    ROOT OF POLYNOMIAL IN INTEGRAND
C     YLPS       /ORDRAG/       I    ROOT OF POLYNOMIAL IN INTEGRAND
C
C   SUBROUTINES AND FUNCTIONS REQUIRED
C     NONE
C
C   COMMON BLOCKS REQUIRED
C     /ORDRAG/
C
C   SUBROUTINE DIFFDE IS CALLED FROM SUBROUTINE LOWALT
C
C.......................................................................
C
      COMMON/ORDRAG/ ADT(6),CM(6),GL0,RC,RCM,RL1,RL1MAG,
     *               RL2,RL2MAG,XLPS,YLPS,UC(2),WC(2)
C
C
C   SET COEFFICIENTS FOR COMPUTING NUMBER DENSITY AT 100 KM.
C
      DATA   SD /  .78110D0,
     *             .93432D-2,
     *             .61471D-5,
     *             .161778D0,
     *             .095544D0 /
C
C   SET POWER SERIES COEFFICIENTS FOR RHO(100)/M0
C
      DATA   ZD /  .1985549D-10,
     *            -.1833490D-14,
     *             .1711735D-17,
     *            -.1021474D-20,
     *             .3727894D-24,
     *            -.7734110D-28,
     *             .7026942D-32 /
C
C   R IS RHO(100)/M0
C
      R = ZD(7)
C
      DO 10 I=1,6
         R = R * TINF + ZD(7-I)
   10 CONTINUE
C
C   OTHER FACTORS
C
      Q2 = 1.D0 / UC(1)
      Q3 = -1.D0 /UC(2)
      Q5 = 1.D0 /   VCDI
      D1 = XLPS**2 + YLPS**2
      Q4 = (1.D0 + RL1*RL2*(RCM**2 - D1)*Q5 + WC(1)*Q2 + WC(2)*Q3)/XCDI
      Q6 = -Q5 - 2.D0*(XLPS + RCM)*Q4 - (RL2 + RCM)*Q3 -(RL1 + RCM)*Q2
      D2 = HGT + RCM
      D3 = RCM + 100.D0
      D4 = HGT - 100.D0
      Q1 = -2.D0*Q4 - Q3 - Q2
C
C   F-FACTORS
C
      F4 = D2/D3
      F3 = Q1*DLOG(F4)
      F4 = (HGT-RL1)/(100.D0-RL1)
      F3 = F3 +Q2*DLOG(F4)
      F4 = (HGT-RL2)/(100.D0-RL2)
      F3 = F3 + Q3*DLOG(F4)
      F4 = (HGT**2 - 2.D0*HGT*XLPS + D1)/(1.D4 - 2.D2*XLPS + D1)
      F3 = F3 + Q4*DLOG(F4)
      F4 = YLPS*D4/(YLPS**2 + (HGT-XLPS)*(100.D0-XLPS))
      F4 = Q5*D4/(D2*D3) + Q6*DATAN(F4)/YLPS
      D1 = TCIL/TZ
      D2 = FKL*FLC4*(F3 + F4)
      D1 = DLOG(D1)
      RHO = 0.D0
C
      DO 30 I=1,5
         D4 = CM(I)*D2
C
C      COMPUTATION OF D(I) = NUMBER OF PARTICLES / CM**3 AT Z=100KM.
C
         D = SD(I)*R
C
C      NUMBER DENSITIES AT THE ACTUAL HEIGHT -- D(I)
C
         D4 = (1.D0 + ADT(I))*D1 + D4
         D = D*DEXP(D4)
C
C      TOTAL DENSITY IS SUM OF CONSTITUENT DENSITIES
C
         RH(I) = CM(I)*D
         RHO = RHO + RH(I)
   30 CONTINUE
C
      RETURN
      END
      SUBROUTINE DMATVC(C,VI,VO)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C   THIS ROUTINE IS TO MULTIPLY A 3 BY 3 MATRIX BY A VECTOR
C
      DIMENSION C(3,3),VI(3),VO(3)
C
      DO 10 I=1,3
      VO(I)=0.0D0
      DO 10 J=1,3
      VO(I)=VO(I)+C(I,J)*VI(J)
 10   CONTINUE
      RETURN
      END
      SUBROUTINE DMOMNT
C
C           'DMOMNT' CALCULATES FLEXIBLE ELEMENT ROOT BENDING MOMENTS
C            AND ELEMENT ROOT TENSIONS
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/CANTNA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3)
C
      COMMON/COMALP/ SZ02(10),SZ03(10),SZ04(10),SZ12(3,10),SZ13(3,10),
     .               SZ14(3,10),SZ15(3,10),SZ16(3,10),SZ21(9,10),
     .               SZ22(9,10),SZ23(9,10),SZ25(9,10),
     .               SZ26(9,10),SZ27(9,10),SZ28(9,10),SZ31(27,10),
     .               SZ32(27,10),SZ33(27,10),SZ34(27,10),SZ35(27,10),
     .               SZ41(81,10),SZ42(81,10),SZ43(81,10)
C
      COMMON/CSOLAR/ SAO(10),SKA(9),SKB(9),SKOA(10,3),SKOB(10,3),
     .               STMK(10),SKAA(10,9),SKBB(10,9)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/DMMNT1/ ZKBM(6),EMAK(10),EMBK(10),ARTETA(3),CMTORK(3),
     .               ITORK,IBENDM,ITENSE,ITNS1
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/MRANG/ ADDOT(10,3),BDDOT(10,3),DOUTDD(10,3),DINDD(10,3)
C
      COMMON/PRCOM/ STORE(10,30),ILINE,ICOL,ICNT,IHD
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/RPOOL5/ CKMAT(3,3,10),FM2(3,3)
C
      COMMON/RPOOL8/ SZ01(10),SZ11(3,10),SZ24(9,10)
C
      COMMON/SPRESX/ SPRES(10,3)
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
      COMMON/TENSON/TSSO(10)
C
      DIMENSION VECTS(3),VECTT(3),VDOT(3),OMGD(3),OMEGDT(3),W(3),
     .          XMOM(3,3),DUM(3,3),RES(3,3),WDOT(3),VECTD(3),FM1T(3,3),
     .          FM2T(3,3),AT(3,3),PRD(3,3),SAP(3),RES2(3,3),
     .          XI(3),XID(3),SAT(3,3)
C
      NAMELIST/OOWWD/OMGD,OMEGDT,W,WDOT/D2/VECTS,VECTD,TDZ,VECTT,
     .               YBCM,ARTETA
C
C
      IF(IOUT.NE.1) WRITE(6,570)
      DO 10 L=1,10
      EMAK(L)=0.0D0
   10 EMBK(L)=0.0D0
      DO 11 J2=1,3
      IF(IOUT.NE.1) WRITE(6,600) (GBAR(J2,J1),J1=1,3)
      VECTT(J2)=0.0D0
      VDOT(J2)=0.0D0
      OMGD(J2)=0.0D0
      OMEGDT(J2)=0.0D0
      W(J2)=0.0D0
   11 WDOT(J2)=0.0D0
      IF(IBENDM.EQ.0) GO TO 35
      DO 50 K=1,IK
      LX=(LLK(K)-1)*3
      N=NK(K)
      IF(N.EQ.0) GO TO 50
   15 EIA=0.5D0*SKAA(K,1)
      EIB=0.5D0*SKBB(K,1)
      FLK=ZLK(K)
      DO 30 I=1,N
      ANT1=FUNA(K,K1,I)
      BNT1=FUNB(K,K1,I)
C
      AN0=SKOA(K,I)
      BN0=SKOB(K,I)
      IF(IOUT.NE.1) PRINT 25,AN0,BN0,ANT1,BNT1
   25 FORMAT(' AN0=',G20.12, ' BN0=',G20.12, ' ANT1=',G20.12,
     .  ' BNT1=',G20.12//)
C
      EMAK(K)=EMAK(K)+(ANT1-AN0)*ZKBM(LX+I)
      EMBK(K)=EMBK(K)+(BNT1-BN0)*ZKBM(LX+I)
   30 CONTINUE
      FLK2=FLK*FLK
      EMAK(K)=EIA/FLK2*EMAK(K)
      EMBK(K)=EIB/FLK2*EMBK(K)
   50 CONTINUE
   35 DO 150 K=1,IK
      IF(ITENSE.EQ.0) GO TO 533
      TDZ=RHOK(K)*ZLK(K)*2.0D0*SZ02(K)
C
      CALL XIMMT(K,XI,XID)
C
      DO 140 J3=1,3
      SAP(J3)=0.0D0
  140 CONTINUE
      DO 145 J2=1,3
      SAP(J2)=RHOK(K)*ZLK(K)*XI(J2)
      IF(IOUT.NE.1) PRINT 143,J2,SAP(J2)
  143 FORMAT(' VECTOR SAP ',I1, 2X, G20.12)
  145 CONTINUE
      SAPD=RHOK(K)*ZLK(K)*XID(1)
      IF(IDAMP.EQ.0.OR.K.GT.K1) GO TO 40
      IF(IDAMP.EQ.1.AND.K.LE.K1) GO TO 220
      PRINT 200,IDAMP,K,K1
  200 FORMAT ('0   DAMPER VALUE AND/OR MODES QUESTIONABLE, IDAMP = ',
     . I3, ' K = ', I3, ' K1 = ', I3)
      RETURN
  220 CONTINUE
      ICZ=1
      VECTS(1)=0.0D0
      VECTS(2)=DEPEND(11)
      VECTS(3)=0.0D0
      VECTD(1)=0.0D0
      VECTD(2)=DERIV(11)
      VECTD(3)=0.0D0
      DO 225 J4=1,3
      DO 225 J5=1,3
      FM1T(J4,J5)=FM1(J5,J4)
  225 CONTINUE
      GO TO 90
   40 CONTINUE
      ICZ=2
      DO 70 M1=1,3
      VECTS(M1)=0.0D0
   45 VECTD(M1)=0.0D0
      DO 70 L1=1,3
   70 FM1T(M1,L1)=FM2(L1,M1)
C
   90 CONTINUE
C
      DO 80 M1=1,3
      DO 80 L1=1,3
      XMOM(M1,L1)=CKMAT(L1,M1,K)
 80   CONTINUE
      CALL MPYMAT(XMOM,FM1T,DUM,1,1,RES,DUM)
C
      DO 250 M1=1,3
      DO 211 JX=1,3
      DO 211 JY=1,3
      RES2(JY,JX)=0.0D0
  211 CONTINUE
C
      OMGD(M1)=RES(M1,1)*DEPEND(7)+RES(M1,2)*DEPEND(8)
     .         +RES(M1,3)*DEPEND(9)
      OMEGDT(M1)=RES(M1,1)*DERIV(7)+RES(M1,2)*DERIV(8)
     .           +RES(M1,3)*DERIV(9)
C
      W(M1)=XMOM(M1,1)*VECTS(1)+XMOM(M1,2)*VECTS(2)
     .      +XMOM(M1,3)*VECTS(3)
      WDOT(M1)=XMOM(M1,1)*VECTD(1)+XMOM(M1,2)*VECTD(2)
     .         +XMOM(M1,3)*VECTD(3)
C
C          COMPUTE   1ST  TERM  -  ART
C
      VECTT(M1)=(RES(M1,1)*ARTETA(1)+RES(M1,2)*ARTETA(2)
     .          +RES(M1,3)*ARTETA(3))*TDZ
  250   CONTINUE
      SMULDT=2.0D0*RHOK(K)*ZLK(K)*((OMGD(2)+W(2))*XID(3)-(OMGD(3)
     .      +W(3))*XID(2))
       IF (IOUT .NE. 1) PRINT 147,SMULDT
  147  FORMAT(' SMULDT=', G20.12)
      DO  340  J2 =1, 3
  340 VECTS (J2) = 0.D0
       IF (IOUT .NE. 1) WRITE(6,OOWWD)
       T9=2.D0* SZ02 (K)
      DO  350   J2 = 1, 3
      VECTS(J2)=(XMOM(J2,1)*ZBZK(1,K)+XMOM(J2,2)*ZBZK(2,K)+XMOM(J2,3)*
     .          ZBZK(3,K))*T9+XI(J2)
  350  CONTINUE
      IF (IOUT .NE. 1) WRITE (6,D2)
      DO   300   J1 =  1, 3
      DO   300   J2 =  1, 3
C
       SAT (J1,J2) =SA (J2,J1)
  300 RES2  (J2, J1) =  0.D0
      DO 320 J1=1,3
      RES2(J1,1)=RES(J1,1)*YIZM(1,ICZ)+RES(J1,2)*YIZM(2,ICZ)+
     .           RES(J1,3)*YIZM(3,ICZ)
  320 CONTINUE
C
      SAPD1=TDZ*(-(OMGD(2)**2+OMGD(3)**2)*RES2(1,1)+(-OMEGDT(3)+
     .      OMGD(1)*OMGD(2))*RES2(2,1)+(OMEGDT(2)+OMGD(1)*OMGD(3))
     .      *RES2(3,1))
C
C
C
      SAP1=RHOK(K)*ZLK(K)*((-(OMGD(2)+W(2))**2-(OMGD(3)+W(3))**2)*
     .     VECTS(1)+(-OMEGDT(3)-WDOT(3)+OMGD(2)*(OMGD(1)+W(1))+(OMGD(2)
     .     +W(2))*W(1))*VECTS(2)+(OMEGDT(2)+WDOT(2)+OMGD(3)*(OMGD(1)
     .     +W(1))+(OMGD(3)+W(3))*W(1))*VECTS(3))
C
C
C
      TERMS=SAPD1+SAP1+SAPD+SMULDT+VECTT(1)+XID(1)
      IF(IOUT.NE.1)PRINT 999,TERMS
  999  FORMAT('0 INERTIA FORCES',G20.12)
       IF (IOUT .NE. 1) PRINT 610,SAPD1     ,SAP1     ,SAPD
  610  FORMAT(' SAPD1 ',G20.12, ' SAP1 ',G20.12,' SAPD ',G20.12)
C
C          GRAVITY   GRADIENT
C
      CALL  MPYMAT (RES, SAT,  DUM,  1, 1,  RES2, DUM)
      CALL MPYMAT (RES2, GBAR, DUM,  1, 1,  PRD, DUM)
      CALL MPYMAT (PRD,  SA,   DUM,  1, 1,  AT, DUM)
C
       IF (IOUT .EQ. 1)GO TO 407
       WRITE(6,403)
  403  FORMAT('0 AT'//)
       DO 406 I1=1, 3
       WRITE (6,405)(AT(I1,K2),K2=1,3)
  405  FORMAT('   ', 3G20.12)
  406  CONTINUE
  407  CONTINUE
      DO  410  J1 = 1, 3
      VECTS (J1) =  0.D0
      DO 410 J2 =1,3
      PRD (J1,J2) =  0.D0
      FM2T (J1,J2) =  FM1T(J2,J1)
  410 CONTINUE
C
C
C
      DO   420   J2 = 1, 3
      VECTS(J2)=((FM2T(J2,1)*ZBZK(1,K)+FM2T(J2,2)*ZBZK(2,K)+FM2T(J2,3)
     .          *ZBZK(3,K))+YIZM(J2,ICZ))*TDZ
  420 CONTINUE
C
C     COMBINE AT MATRIX X VECTS VECTOR
      DO  440  J1 =  1, 3
      PRD(J1,1)=AT(J1,1)*VECTS(1)+AT(J1,2)*VECTS(2)+AT(J1,3)*VECTS(3)
  440 CONTINUE
      IF (IOUT .EQ. 1) GO TO 450
       WRITE (6,445)
  445 FORMAT('0 PRD - 1ST EQUATION'//)
      DO 447 L7=1,3
       WRITE (6,405)(PRD(L7,L8),L8=1,3)
  447  CONTINUE
  450  CONTINUE
C
C       COMPUTE   2D  TERM  GRAVITY GRADIENT
C
      CALL  MPYMAT (AT, FM1T, DUM,  1, 2,  RES2, DUM)
      CALL  MPYMAT (RES2, XMOM, DUM, 1, 2, FM1T, DUM)
C
C   FINISH 2D LINE OF GRAVITY GRADIENT FORCES EQUATION
C
      DO   460   J1 =  1, 3
  460 FM2T(J1,1)=FM1T(J1,1)*SAP(1)+FM1T(J1,2)*SAP(2)+FM1T(J1,3)*SAP(3)
       IF (IOUT .EQ. 1) GO TO 470
       WRITE (6,471)
  471  FORMAT('0  FM2T - 2D EQUATION'//)
       DO 473 L7=1,3
  473  WRITE (6,405)(FM2T(L7,L8),L8=1,3)
  470  CONTINUE
      DO    490  J1 =  1, 3
  490 FM1T(J1,1)=(AT(J1,1)*YBCM(1)+AT(J1,2)*YBCM(2)+
     .           AT(J1,3)*YBCM(3))*(TDZ/ZMS)
       IF (IOUT .EQ. 1) GO TO 498
       WRITE (6, 492)
  492  FORMAT('0 FM1T - 3RD  EQUATION'//)
       DO 495 L7=1,3
       WRITE (6,405)(FM1T(L7,L8),L8=1,3)
  495  CONTINUE
  498  CONTINUE
C
C       GRAVITY   GRADIENT   FORMULA
C
      DO 510 J1=1,3
      RES2(J1,1)=PRD(J1,1)+FM2T(J1,1)-FM1T(J1,1)
  510 CONTINUE
       IF (IOUT .EQ. 1) GO TO 530
       WRITE (6,540)(RES2(J1,1), J1=1,3), SPRES(K,1)
  540  FORMAT(' GRAV ',3G20.12, ' SOLAR ',G20.12/)
  520  CONTINUE
  530 CONTINUE
C
       TSS1=-TERMS +RES2(1,1)+SPRES(K,1)
      TSSO(K)=TSS1
 533  CONTINUE
  150 CONTINUE
  570  FORMAT ('0  GBAR ARRAY'//)
  600  FORMAT('  ',3G20.12)
      RETURN
      END
      SUBROUTINE DNSMAG(ISKEL,DEP,SMAGB,SMAGM)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/IPOOL1/IGRAV,IDAMP,IK,K1,ITIM,IDUM1(34)
C
      COMMON/RPOOL1/RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),DUM01(86)
C
      COMMON/RPOOL5/CKMAT(3,3,10),FM2(3,3)
C
      COMMON/DNSWRK/NSELB,NSELT,IASEL,IBSEL,ICSEL,LOC
C
      COMMON/TMSINR/TIPINR(3,10),RSQ(3,10),XIPL(6),BETL(6)
C
C
      DIMENSION DEP(150),SMAGB(3),SMAGM(3)
      DIMENSION SMAT(3,3),FCM(3,3),DM1(3,3),DM2(3,3)
C
C
      IFLAG=NSELB+NSELT
      IF(IFLAG.NE.0) GO TO 10
      DO 5 I=1,3
      SMAGM(I)=SMAGB(I)
    5 CONTINUE
C
      RETURN
C
   10 CONTINUE
C
      ZL=ZLK(ISKEL)
      U1P=1.0D0
      U2P=0.0D0
      U3P=0.0D0
      F=0.5D0
      W22=0.0D0
      W33=0.0D0
C
      IF(NSELB.EQ.0) GO TO 35
      IA=IASEL-1
      IB=IBSEL-1
      DO 20 I=1,NSELB
      I1=IA+I
      I2=IB+I
      I3=LOC+I
      WS=XIPL(I3)/ZL
      U2P=U2P+DEP(I1)*WS
      U3P=U3P+DEP(I2)*WS
   20 CONTINUE
      W22=U2P*U2P
      W33=U3P*U3P
      U1P=1.0D0-W22-W33
      IF(U1P.LT.0.0D0) U1P=0.0D0
      U1P=DSQRT(U1P)
      F=1.0D0/(1.0D0+U1P)
C
   35 CONTINUE
C
      TWI=0.0D0
      ST=0.0D0
      CT=1.0D0
C
      IF(NSELT.EQ.0) GO TO 45
C
      IC=ICSEL-1
      DO 40 I=1,NSELT
      I1=IC+I
      I2=LOC+I
      TWI=TWI+DEP(I1)*BETL(I2)
   40 CONTINUE
      ST=DSIN(TWI)
      CT=DCOS(TWI)
C
   45 CONTINUE
C
      SMAT(1,1)=U1P
      SMAT(1,2)=U2P
      SMAT(1,3)=U3P
      SMAT(2,1)=-U3P*ST-U2P*CT
      SMAT(3,1)=U2P*ST-U3P*CT
      WS1=U2P*U3P*F
      WS2=1.0D0-W22*F
      WS3=1.0D0-W33*F
      SMAT(2,2)=-WS1*ST+WS2*CT
      SMAT(3,2)=-WS2*ST-WS1*CT
      SMAT(2,3)=WS3*ST-WS1*CT
      SMAT(3,3)=WS1*ST+WS3*CT
C
      IF(ISKEL.GT.K1) GO TO 46
      CALL MPYMAT(FM1,CKMAT(1,1,ISKEL),DM1,1,1,FCM,DM1)
      GO TO 47
C
   46 CONTINUE
C
      CALL MPYMAT(FM2,CKMAT(1,1,ISKEL),DM1,1,1,FCM,DM1)
C
   47 CONTINUE
C
      CALL MPYMAT(FCM,SMAT,FCM,2,2,DM1,DM2)
      CALL MATV(1,DM2,SMAGB,SMAGM)
C
C
      RETURN
C
C
      END
      SUBROUTINE DROUT(A,B,AD,BD,NDAMPR)
C
C        'DROUT' CHECKS FOR MAXIMUM MODE SHAPE AND SAVES FOR UPPER
C        LIMIT TO OUTPUT DEFLECTIONS
C
      IMPLICIT REAL * 8 (A-H,O-Z)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      DIMENSION A(10,3),B(10,3),AD(10,3),BD(10,3)
C
C
      N=NDAMPR
      M=0
      DO 10 I=1,N
   10 M=MAX0(NK(I),M)
C
      CALL AVAL('DIN     ',3,A,10,N,M,2)
C
      CALL AVAL('DINDOT  ',6,AD,10,N,M,2)
C
      CALL AVAL('DOUT    ',4,B,10,N,M,2)
C
      CALL AVAL('DOUTDT  ',6,BD,10,N,M,2)
C
C
      RETURN
      END
      SUBROUTINE DSAVE(ZL1,ZLA,NELMTS,NDAMPR)
C
C      SUBROUTINE DSAVE SAVES ANTENNA LENGTHS FOR DEPLOYMENT
C
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER*4 DDPLY
C
      COMMON/DEPLOY/ DDPLY,MDPLY
C
      DIMENSION ZL1(10),ZLA(10),ZL1S(10),ZLAS(10)
C
      IK=NELMTS + NDAMPR
      DO 10 I=1,IK
      ZL1S(I)=ZL1(I)
   10 ZLAS(I)=ZLA(I)
C
      DO 20 I=1,NELMTS
      K=I+NDAMPR
      ZL1(K)=ZL1S(I)
   20 ZLA(K)=ZLAS(I)
C
      IF(NDAMPR.EQ.0) RETURN
C
      DO 30 I=1,NDAMPR
      K=I+NELMTS
      IF(DDPLY.NE.0) GO TO 25
      ZL1(I)=0.0D0
      ZLA(I)=0.0D0
      GO TO 30
   25 ZL1(I)=ZL1S(K)
      ZLA(I)=ZLAS(K)
   30 CONTINUE
C
      RETURN
      END
      SUBROUTINE DTR312(A1,A2,A3,C)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      DIMENSION C(3,3)
C
      CGAM=DCOS(A1)
      SGAM=DSIN(A1)
      CALP=DCOS(A2)
      SALP=DSIN(A2)
      CBET=DCOS(A3)
      SBET=DSIN(A3)
C
      SASB=SALP*SBET
      SACB=SALP*CBET
C
      C(1,1)=CBET*CGAM-SASB*SGAM
      C(2,1)=CBET*SGAM+SASB*CGAM
      C(3,1)=-CALP*SBET
      C(1,2)=-CALP*SGAM
      C(2,2)=CALP*CGAM
      C(3,2)=SALP
      C(1,3)=SBET*CGAM+SACB*SGAM
      C(2,3)=SBET*SGAM-SACB*CGAM
      C(3,3)=CALP*CBET
C
      RETURN
C
      END
      SUBROUTINE ECHO
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 ISUBD,JARRAY,J2,J3,J4,J22,NSUBX
      INTEGER*4 ACNTRL,DDPLY
C
      COMMON/ANTENA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3),ZBZ(3,10),
     .               NELMTS,NDAMPR,MODES(10)
C
      COMMON/CANTNA/ AA(10,3),AADOT(10,3),BB(10,3),BBDOT(10,3),
     .               DDIN(10,3),DDINDT(10,3),DDOUT(10,3),DDTOUT(10,3)
C
      COMMON/CCNVRT/ BDYMI(3,3),DPRMI(3,3),EMODLS(10),RTUBE(10),
     .               HTUBE(10),THERMC(10),TIPMS(10),C(10)
C
      COMMON/CFNALP/ SCO,CIZO(3,3),CIYO(3,3),DONA(3,10),DONB(3,10)
     .              ,CDAMP(3,10)
C
      COMMON/CNBODY/ J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/CSOLAR/ SAO(10),SKA(9),SKB(9),SKOA(10,3),SKOB(10,3),
     .               STMK(10),SKAA(10,9),SKBB(10,9)
C
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10)
C
      COMMON/DATOUT/ IDATA,MLAST
C
      COMMON/DEPLOY/ DDPLY,MDPLY
C
      COMMON/DMMNT1/ ZKBM(6),FMAK(10),FMBK(10),ARTETA(3),CMTORK(3),
     .               ITORK,IBENDM,ITENSE,ITNS1
C
      COMMON/DEBUG1/IAFM1,IAFM2,IAFM3,IAFM4,IAFM5
C
      COMMON/DRGCOM/ ER(3),HUBCDA(3),HUBCP(3),UJD0,HUBF(3),HUBM(3),IDRAG
C
      COMMON/HAMOUT/ HAMILT,IHAMLT
C
      COMMON/HEAD22/ HEAD1(5),HEAD2(5),ILINE
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IODPLY/ ISDPLY,IRAXIS,ISAXIS,NCROSS,NPRINT
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/ISHADE/ IPLANS,ISATSH,IWRTTF
C
      COMMON/JBTEST/ IBTEST
C
      COMMON/LIBDPR/ ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,
     .               ZMDO,ZMDBO,CNV,DECAY
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/CONSTS/PI,TWOPI,RADIAN
C
      COMMON/PLOTIT/ XMIN(11),XMAX(11),YMIN(11),YMAX(11),IFSCAL,
     .               KPLOTS(253)
C
      COMMON/PRESUR/ DTOO,POO
C
      COMMON/PWHEEL/ XMOMIN(3),DVMOM(3),VMOM(3)
C
      COMMON/RATTDE/ DTMXA,PXI,PXO,EIT,REFTIM,TMX1,TMX2,CMX,ISW
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
C
      COMMON/RMGNTC/ SMAGI(3),DPMAG(3),SFMAG,MAGFLD
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/RSUNCL/ WE,TVER,ECLPTC
C
      COMMON/RUNOUT/ LCPU
C
      COMMON/RVISCS/ NSUBX(3),YARRAY(3),RADTBE,VISCTY,RADRNG,DENSTY,
     .               JARRAY(3),SSUBY,OMEGL,ISUBD
C
      COMMON/SOLOUT/ FTAKIN(10,3),FTAKOT(10,3),FTBKIN(10,3),FTBKOT(10,3)
C
      COMMON/TJAN1/ T
C
      COMMON/TMSINR/ TIPINR(3,10)
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/XIN1  / PSI1,THET1,PHI1,ETTA,ZETTA,ITEST1
C
      COMMON/XIN2  / ALFAE,BETAE,GAMAE,OMBC(3),ITEST2
C
      COMMON/XIN3  / ALFAEK(10),BETAEK(10),GAMAEK(10),ETTAD,ZETTAD
C
      COMMON/ZSPINR/ DTZMA,PZDT,CMZO,ISPIN3,JSPIN
C   CODES ARE ADDED FOR THE ADDITIONAL ECHO OUTPUT
C   BY K.YONG FEB 1975
C
      COMMON/ITCNTL/IPULSE,ISPLSE
C
      COMMON/INUMP/ISPNP
C
      COMMON/IKPLER/IKPLR
C
      COMMON/HOUTPT/IHCALC,IHREF
C
      COMMON/THRUST/TVECTR(3),TLOCAT(3),TTIMES(4),TPARAM(4),REFANG
C
      COMMON/XKPLER/AS,E,F,EI,BW,W
C
C   ADD COMMON FOR ACCELERATION COMPUTATION
C
      COMMON/IACC/IACOMP,IHUBAC,ITIPAC
C
      COMMON/NUMACC/NUMHUB
C
      COMMON/ACCHUB/YHUB(3,6),HUBACC(3,6)
C
      COMMON/CECHON/CEI20(10),CEI21(10),CEI30(10),CEI31(10)
     1             ,CGJ0(10),CGJ1(10),TWI0(3,10),TWI1(3,10)
     2             ,TWID0(3,10),TWID1(3,10),MODEST(10)
C
      COMMON/INEWR/NKT(10),ICP,ICPS
C
      COMMON/ITW/ITWIST,ITWST1
C
      DIMENSION OMEB(3)
      DIMENSION HED0(5),HED1(5),HED2(5),HED3(5),HED4(5),HED5(5),HED6(5),
     .          HED7(5),HED8(5),HED9(5),HED10(5),HED11(5),HED12(5),
     .      HED13(5),HED14(5),
     .      HED15(5),HED16(5),HED17(5),A1(10,3),B1(10,3),
     .       AD1(10,3),BD1(10,3)
C
      DIMENSION HED22(5),HED23(5),HED24(5),HED27(5)
C
      DATA HED0 /'** ECHO ','PRINTOUT',' OF INPU','T PARAME','TERS ** '/
      DATA HED1 /'OPTION C','ONTROL W','ORDS    ','        ','        '/
      DATA HED2 /'TIME CON','TROL WOR','DS      ','        ','        '/
      DATA HED3 /'SATELLIT','E CORE P','ROPERTIE','S       ','        '/
      DATA HED4 /'ELEMENT ','PHYSICAL',' PROPERT','IES     ','        '/
      DATA HED5 /'ELEMENT ','GEOMETRY',' AND INI','TIAL CON','DITIONS '/
      DATA HED6 /'LIBRATIO','N DAMPER',' OPTION ','        ','        '/
      DATA HED7 /'SPINNING',' BODY AT','TITUDE A','ND BODY ','RATES   '/
      DATA HED8 /'GRAVITY ','GRADIENT',' ATTITUD','E AND BO','DY RATES'/
      DATA HED9 /'CONTROL ','WORDS FO','R DAMPER',', SPIN A','XIS     '/
      DATA HED10/'MOMENT, ','ATTITUDE',' CONTROL',', MOMENT','UM WHEEL'/
      DATA HED11/'AND MAGN','NETIC TO','RQUER OP','TIONS   ','        '/
      DATA HED12/'CONTROL ','WORDS FO','R SUN VE','CTOR, PU','NCH CARD'/
      DATA HED13/'AND PRIN','TOUT OPT','ION     ','        ','        '/
      DATA HED14/'INTEGRAT','ION CONT','ROL WORD','S       ','        '/
      DATA HED15/'CONTROL ','WORDS FO','R THERMA','L LAG, E','XTERNAL '/
      DATA HED16/'TORQUES,',' SHADOWI','NG, TENS','ION CALC','ULATIONS'/
      DATA HED17/' AND BEN','DING MOM','ENTS    ','        ','        '/
      DATA HED22/'CONTROL ','WORDS FO','R THRUST','ING OPTI','ON      '/
      DATA HED23/'CONTROL ','WORDS FO','R ANGULA','R MOMENT','UM OPT  '/
      DATA HED24/'CONTROL ','WORDS FO','R ORBIT ','INPUT OP','TION    '/
      DATA HED27/'CONTROL ','WORDS FO','R ACCELE','RATION O','PTION   '/
C
C
      ILINE=0
      IK=NDAMPR+NELMTS
C
      DO 10 I=1,5
      HEAD1(I)=HED0(I)
   10 HEAD2(I)=HED1(I)
C
      CALL IVAL('IGRAV   ',5,IGRAV,0,0,0)
      CALL IVAL('IDRAG   ',5,IDRAG,0,0,0)
      CALL IVAL('IHAMLT  ',6,IHAMLT,0,0,0)
      CALL IVAL('INOPT   ',5,INOPT,0,0,0)
      CALL IVAL('DDPLY   ',5,DDPLY,0,0,0)
      CALL IVAL('MDPLY   ',5,MDPLY,0,0,0)
      CALL IVAL('IDATA   ',5,IDATA,0,0,0)
      CALL IVAL('MLAST   ',5,MLAST,0,0,0)
      CALL IVAL('IBTEST  ',6,IBTEST,0,0,0)
      CALL IVAL('ISDPLY  ',6,ISDPLY,0,0,0)
C
      CALL HVAL(HED15)
      CALL HVAL(HED16)
      CALL HVAL(HED17)
      CALL IVAL('ITORK   ',5,ITORK,0,0,0)
      CALL IVAL('IPLANS  ',6,IPLANS,0,0,0)
      CALL IVAL('ISATSH  ',6,ISATSH,0,0,0)
      CALL IVAL('IWRTTF  ',6,IWRTTF,0,0,0)
      CALL IVAL('IBENDM  ',6,IBENDM,0,0,0)
      CALL IVAL('ITENSE  ',6,ITENSE,0,0,0)
      CALL HVAL(HED9)
      CALL HVAL(HED10)
      CALL HVAL(HED11)
      CALL IVAL('IDAMP   ',5,IDAMP,0,0,0)
      CALL IVAL('IVISCS  ',6,IVISCS,0,0,0)
      CALL IVAL('ISPIN3  ',6,ISPIN3,0,0,0)
      CALL IVAL('IATTDE  ',6,IATTDE,0,0,0)
      CALL IVAL('IWHEEL  ',6,IWHEEL,0,0,0)
      CALL IVAL('IMGMTS  ',6,IMGMTS,0,0,0)
C   ADD EXTRA CONTROL WORDS
      CALL HVAL(HED22)
      CALL IVAL('IPULSE  ',6,IPULSE,0,0,0)
      CALL IVAL('ISPLSE  ',6,ISPLSE,0,0,0)
      CALL IVAL('ISPNP   ',5,ISPNP,0,0,0)
      CALL HVAL(HED23)
      CALL IVAL('IHCALC  ',6,IHCALC,0,0,0)
      CALL IVAL('IHREF   ',5,IHREF,0,0,0)
      CALL HVAL(HED27)
      CALL IVAL('IACOMP  ',6,IACOMP,0,0,0)
      CALL IVAL('IHUBAC  ',6,IHUBAC,0,0,0)
      CALL IVAL('ITIPAC  ',6,ITIPAC,0,0,0)
      CALL HVAL(HED24)
      CALL IVAL('IKPLR   ',5,IKPLR,0,0,0)
C
      CALL HVAL(HED12)
      CALL HVAL(HED13)
      CALL IVAL('IAFM1   ',5,IAFM1,0,0,0)
      CALL IVAL('IAFM2   ',5,IAFM2,0,0,0)
      CALL IVAL('IAFM3   ',5,IAFM3,0,0,0)
C
      CALL HVAL(HED2)
      CALL IVAL('IDATE   ',5,IDATE,0,0,0)
      IF(IDATA.EQ.0) GO TO 15
      CALL FVAL('TIME    ',4,TIME,0,0,0)
      GO TO 16
 15   CALL FVAL('TIME    ',4,T,0,0,0)
 16   CONTINUE
      CALL FVAL('TSTOP   ',5,TSTOP,0,0,0)
      CALL FVAL('FREQ    ',4,FREQ,0,0,0)
      CALL IVAL('LCPU    ',4,LCPU,0,0,0)
C
      CALL HVAL(HED14)
      CALL FVAL('DELTAT  ',6,DELTAT,0,0,0)
      CALL FVAL('DELMIT  ',6,DELMIT,0,0,0)
      CALL FVAL('FACTOR  ',6,FACTOR,0,0,0)
      CALL H1(IVISCS,IATTDE,IWHEEL,IMGMTS)
C
      CALL HVAL(HED3)
      CALL FVAL('BDYMI   ',5,BDYMI,3,3,2)
      CALL FVAL('HUBCDA  ',6,HUBCDA,3,0,1)
      CALL FVAL('HUBCP   ',5,HUBCP,3,0,1)
      CALL FVAL('ZMS     ',3,ZMS,0,0,0)
C
      CALL HVAL(HED4)
      CALL FVAL('EMODLS  ',6,EMODLS,IK,0,1)
      CALL FVAL('RTUBE   ',5,RTUBE,IK,0,1)
      CALL FVAL('HTUBE   ',5,HTUBE,IK,0,1)
      IF(IDATA.EQ.0) CALL FVAL('EI2     ',3,CEI20,IK,0,1)
      IF(IDATA.EQ.1) CALL FVAL('EI2     ',3,CEI21,IK,0,1)
      IF(IDATA.EQ.0) CALL FVAL('EI3     ',3,CEI30,IK,0,1)
      IF(IDATA.EQ.1) CALL FVAL('EI3     ',3,CEI31,IK,0,1)
      IF(ITWIST.EQ.0) GO TO 17
      IF(IDATA.EQ.0) CALL FVAL('GJ      ',2,CGJ0,IK,0,1)
      IF(IDATA.EQ.1) CALL FVAL('GJ      ',2,CGJ1,IK,0,1)
   17 CONTINUE
      CALL FVAL('THERMC  ',6,THERMC,IK,0,1)
      CALL FVAL('TIPMS   ',5,TIPMS,IK,0,1)
C
      CALL FVAL('TIPI    ',4,TIPINR,3,IK,2)
      CALL FVAL('SAO     ',3,SAO,IK,0,1)
      CALL FVAL('STMK    ',4,STMK,IK,0,1)
      CALL FVAL('RHOK    ',4,RHOK,IK,0,1)
      CALL FVAL('POO     ',3,POO,0,0,0)
      CALL FVAL('DTOO    ',4,DTOO,0,0,0)
      CALL FVAL('AERO    ',4,AERO,0,0,0)
C
      CALL HVAL(HED5)
      CALL IVAL('NELMTS  ',6,NELMTS,0,0,0)
      CALL IVAL('MODES-B ',7,MODES,IK,0,1)
      IF(ITWIST.EQ.0) GO TO 18
      IF(IDATA.EQ.0) CALL IVAL('MODES-T ',7,MODEST,IK,0,1)
      IF(IDATA.EQ.1) CALL IVAL('MODES-T ',7,NKT,IK,0,1)
   18 CONTINUE
      CALL FVAL('ZL0     ',3,ZL0,IK,0,1)
      CALL FVAL('ZL1     ',3,ZL1,IK,0,1)
      CALL FVAL('ZLA     ',3,ZLA,IK,0,1)
      CALL FVAL('ZBZ     ',3,ZBZ,3,IK,2)
      CALL FVAL('ALFAEK  ',6,ALFAEK,IK,0,1)
      CALL FVAL('BETAEK  ',6,BETAEK,IK,0,1)
      CALL FVAL('GAMAEK  ',6,GAMAEK,IK,0,1)
C
      IF (IDATA .EQ. 0)  GO TO 116
      CALL CHECK(A1,AA,NELMTS)
      CALL CHECK(AD1,AADOT,NELMTS)
      CALL CHECK(B1,BB,NELMTS)
      CALL CHECK(BD1,BBDOT,NELMTS)
      GO TO 117
C
  116 CALL CHECK(A1,A,NELMTS)
      CALL CHECK(AD1,ADOT,NELMTS)
      CALL CHECK(B1,B,NELMTS)
      CALL CHECK(BD1,BDOT,NELMTS)
C
  117 CALL ELOUT(A1,B1,AD1,BD1,NELMTS)
      IF(ITWIST.EQ.0) GO TO 22
      IF(IDATA.EQ.1) GO TO 21
      CALL FVAL('TWIST   ',5,TWI0,3,IK,2)
      CALL FVAL('TWISTD  ',6,TWID0,3,IK,2)
      GO TO 22
   21 CONTINUE
      CALL FVAL('TWIST   ',5,TWI1,3,IK,2)
      CALL FVAL('TWISTD  ',6,TWID1,3,IK,2)
   22 CONTINUE
      CALL IVAL('LK      ',2,LK,IK,0,1)
      CALL IVAL('LLK     ',3,LLK,IK,0,1)
      CALL FVAL('SKOA    ',4,SKOA,NELMTS,3,2)
      CALL FVAL('SKOB    ',4,SKOB,NELMTS,3,2)
      CALL FVAL('CDAMP   ',5,CDAMP,3,IK,2)
C
      IF(IDAMP.EQ.0) GO TO 20
C
      CALL HVAL(HED6)
      CALL IVAL('IDAMP   ',5,IDAMP,0,0,0)
      CALL IVAL('NDAMPR  ',6,NDAMPR,0,0,0)
      CALL FVAL('YIZM    ',4,YIZM,3,2,2)
      CALL FVAL('PHIS    ',4,PHIS,0,0,0)
      CALL FVAL('PHILD   ',5,PHILD,0,0,0)
      CALL FVAL('DPHILD  ',6,DPHILD,0,0,0)
      CALL FVAL('BETLD   ',5,BETLD,0,0,0)
      CALL FVAL('GAMLD   ',5,GAMLD,0,0,0)
C
      IF (IDATA .EQ. 0)  GO TO 118
      CALL CHECK(A1,DDIN,NDAMPR)
      CALL CHECK(AD1,DDINDT,NDAMPR)
      CALL CHECK(B1,DDOUT,NDAMPR)
      CALL CHECK(BD1,DDTOUT,NDAMPR)
C
      GO TO 119
  118 CALL CHECK(A1,DIN,NDAMPR)
      CALL CHECK(AD1,DINDOT,NDAMPR)
      CALL CHECK(B1,DOUT,NDAMPR)
      CALL CHECK(BD1,DOUTDT,NDAMPR)
  119 CALL DROUT(A1,B1,AD1,BD1,NDAMPR)
      CALL FVAL('ZK1D    ',4,ZK1D,0,0,0)
      CALL FVAL('ZK2D    ',4,ZK2D,0,0,0)
      CALL FVAL('ZMDO    ',4,ZMDO,0,0,0)
      CALL FVAL('ZMDBO   ',5,ZMDBO,0,0,0)
      CALL FVAL('DECAY   ',5,DECAY,0,0,0)
      CALL FVAL('DPRMI   ',5,DPRMI,3,3,2)
      CALL FVAL('CNV     ',3,CNV,0,0,0)
C
   20 IF(INOPT.EQ.2) GO TO 30
C
      CALL HVAL(HED7)
      DO 222 I=1,3
      OMEB(I)=OMEG(I)
      IF(IDATA.EQ.1)    OMEB(I)=OMEG(I)/RADIAN
 222  CONTINUE
      CALL FVAL('PSI1    ',4,PSI1,0,0,0)
      CALL FVAL('THET1   ',5,THET1,0,0,0)
      CALL FVAL('PHI1    ',4,PHI1,0,0,0)
      CALL FVAL('OMEG    ',4,OMEB,3,0,1)
      CALL FVAL('ETTA    ',4,ETTA,0,0,0)
      CALL FVAL('ZETTA   ',5,ZETTA,0,0,0)
      GO TO 40
C
   30 CALL HVAL(HED8)
      CALL FVAL('ALFAE   ',5,ALFAE,0,0,0)
      CALL FVAL('BETAE   ',5,BETAE,0,0,0)
      CALL FVAL('GAMAE   ',5,GAMAE,0,0,0)
      CALL FVAL('OMBC    ',4,OMBC,3,0,1)
 40   CONTINUE
      CALL ECHOA
C
      RETURN
      END
      SUBROUTINE ECHO1
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 ISUBD,JARRAY,NSUBX
      INTEGER*4 ACNTRL
C
C
C     MODIFICATIONS TO ECHO1 FOR PUNCHED CARD OUTPUT
C     AUGUST,1977
C
C
      COMMON/ANTENA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3),ZBZ(3,10),
     .               NELMTS,NDAMPR,MODES(10)
C
      COMMON/CANTNA/ AA(10,3),AADOT(10,3),BB(10,3),BBDOT(10,3),
     .               DDIN(10,3),DDINDT(10,3),DDOUT(10,3),DDTOUT(10,3)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10)
C
      COMMON/HEAD22/ HEAD1(5),HEAD2(5),ILINE
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/INEWR / NKT(10),IDUMM(2)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/ITW   / ITWIST,ITWST1
C
      COMMON/LIBDPR/ ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,
     .               ZMDO,ZMDBO,CNV,DECAY
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RVISCS/ NSUBX(3),YARRAY(3),RADTBE,VISCTY,RADRNG,DENSTY,
     .               JARRAY(3),SSUBY,OMEGL,ISUBD
C
      COMMON/TWIOUT/ CW(10,3),CWD(10,3)
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/XIN1  / PSI1,THET1,PHI1,ETTA,ZETTA,ITEST1
C
      COMMON/XIN2  / ALFAE,BETAE,GAMAE,OMBC(3),ITEST2
C
C
C
      IK=NDAMPR+NELMTS
      CALL TCNVRT(DATE,DM1,TOD,TL,TIME,2)
      DATE=DATE+0.1D0
      ID=DATE
      NDF=0
      KP=0
      WRITE(7,699) NDF,KP
  699 FORMAT(1X,'IORB',I2,' IKPLR',I2)
      WRITE(7,700) ID,TOD
  700 FORMAT(1X,'IDATE',I7,' TIME ',F12.4)
C
C     USE POSITION AND VELOCITY FOR CARD RESTART
C
      WRITE(7,701) (XSAT(I),I=1,3)
      WRITE(7,702) (XSATDT(I),I=1,3)
  701 FORMAT(1X,'XSAT ',1P3E15.7)
  702 FORMAT(1X,'XSATDT ',1P3E15.7)
C
C     ELEMENT LENGTHS AND VELOCITIES
C
      IF(IK.EQ.0) GO TO 25
      DO 12 I=1,10
      IF(I.LE.K1) ZL0(NELMTS+I)=ZLK(I)
      IF(I.LE.K1) ZL1(NELMTS+I)=ZLKP(I)
      IF(I.GT.K1) ZL0(I-K1)=ZLK(I)
      IF(I.GT.K1) ZL1(I-K1)=ZLKP(I)
   12 CONTINUE
      WRITE(7,703) (ZL0(I),I=1,IK)
  703 FORMAT(1X,'ZL0 ',1P5E13.5/5X,5E13.5)
      WRITE(7,704) (ZL1(I),I=1,IK)
  704 FORMAT(1X,'ZL1 ',1P5E13.5/5X,5E13.5)
C
C     ELEMENT INITIAL CONDITIONS
C
      IF(NELMTS.EQ.0) GO TO 19
      DO 15 I=1,NELMTS
      NDF=MODES(I)
      IF(NDF.EQ.0) GO TO 15
      WRITE(7,705) I,(   AA(I,J),J=1,NDF)
      WRITE(7,706) I,(AADOT(I,J),J=1,NDF)
      WRITE(7,707) I,(   BB(I,J),J=1,NDF)
      WRITE(7,708) I,(BBDOT(I,J),J=1,NDF)
   15 CONTINUE
  705 FORMAT(1X,'   A(',I2,',1)2',1P3E13.5)
  706 FORMAT(1X,'ADOT(',I2,',1)2',1P3E13.5)
  707 FORMAT(1X,'   B(',I2,',1)2',1P3E13.5)
  708 FORMAT(1X,'BDOT(',I2,',1)2',1P3E13.5)
   19 CONTINUE
      IF(NDAMPR.EQ.0) GO TO 25
      DO 20 I=1,NDAMPR
      ID=NELMTS+I
      NDF=MODES(I)
      IF(NDF.EQ.0) GO TO 20
      WRITE(7,709) I,(  DDIN(I,J),J=1,NDF)
      WRITE(7,710) I,(DDINDT(I,J),J=1,NDF)
      WRITE(7,711) I,( DDOUT(I,J),J=1,NDF)
      WRITE(7,712) I,(DDTOUT(I,J),J=1,NDF)
   20 CONTINUE
  709 FORMAT(1X,'   DIN(',I2,',1)2',1P3E13.5)
  710 FORMAT(1X,'DINDOT(',I2,',1)2',1P3E13.5)
  711 FORMAT(1X,'  DOUT(',I2,',1)2',1P3E13.5)
  712 FORMAT(1X,'DOUTDT(',I2,',1)2',1P3E13.5)
   25 CONTINUE
C
      IF(ITWIST.EQ.0) GO TO 28
      DO 26 I=1,IK
      NTW=NKT(I)
      IF(NTW.EQ.0) GO TO 26
      WRITE(7,720) I,( CW(I,J),J=1,NTW)
      WRITE(7,721) I,(CWD(I,J),J=1,NTW)
  720 FORMAT(1X,' CW(',I2,',1)2',1P3E13.5)
  721 FORMAT(1X,'CDW(',I2,',1)2',1P3E13.5)
   26 CONTINUE
   28 CONTINUE
C
      IF(IDAMP.EQ.0) GO TO 30
      WRITE(7,713) PHILD,DPHILD
  713 FORMAT(1X,'PHILD ',1PE13.5,'  DPHILD',E13.5)
   30 CONTINUE
      IF(INOPT.EQ.2) GO TO 35
      DO 32 I=1,3
      OMEG(I)=OMEG(I)/RADIAN
   32 CONTINUE
      WRITE(7,714) PSI1,THET1,PHI1
  714 FORMAT(1X,'PSI1',1PE13.5,' THET1',E13.5,' PHI1',E13.5)
      WRITE(7,715) (OMEG(I),I=1,3)
  715 FORMAT(1X,'OMEG',1P3E13.5)
      GO TO 40
   35 CONTINUE
      WRITE(7,716) ALFAE,BETAE,GAMAE
  716 FORMAT(1X,'ALFAE',1PE13.5,' BETAE',E13.5,' GAMAE',E13.5)
      WRITE(7,717) (OMBC(I),I=1,3)
  717 FORMAT(1X,'OMBC',1P3E13.5)
   40 CONTINUE
      IF(IVISCS.EQ.0) GO TO 50
      WRITE(7,718) (YARRAY(I),I=1,3),OMEGL
  718 FORMAT(1X,'YARRAY',1P3E13.5,' OMEGL',E13.5)
   50 CONTINUE
C
      RETURN
C
      END
      SUBROUTINE ECHOA
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 ISUBD,JARRAY,J2,J3,J4,J22,NSUBX
      INTEGER*4 ACNTRL,DDPLY
C
      COMMON/ICNTRL/KNTRL(10)
      COMMON/CSTAT /SVIC(20),SVDOT(20),CPARM(43)
      COMMON/CNBODY/ J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
      COMMON/PLOTIT/ XMIN(11),XMAX(11),YMIN(11),YMAX(11),IFSCAL,
     .               KPLOTS(253)
      COMMON/CWHEEL/VW(3),VSUR(3),VSDR(3)
      COMMON/DMMNT1/ ZKBM(6),FMAK(10),FMBK(10),ARTETA(3),CMTORK(3),
     .               ITORK,IBENDM,ITENSE,ITNS1
      COMMON/PWHEEL/ XMOMIN(3),DVMOM(3),VMOM(3)
      COMMON/RATTDE/ DTMXA,PXI,PXO,EIT,REFTIM,TMX1,TMX2,CMX,ISW
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
      COMMON/RMGNTC/ SMAGI(3),DPMAG(3),SFMAG,MAGFLD
      COMMON/RSUNCL/ WE,TVER,ECLPTC
      COMMON/RVISCS/ NSUBX(3),YARRAY(3),RADTBE,VISCTY,RADRNG,DENSTY,
     .               JARRAY(3),SSUBY,OMEGL,ISUBD
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
      COMMON/XIN3  / ALFAEK(10),BETAEK(10),GAMAEK(10),ETTAD,ZETTAD
      COMMON/ZSPINR/ DTZMA,PZDT,CMZO,ISPIN3,JSPIN
      COMMON/IKPLER/IKPLR
      COMMON/ITCNTL/IPULSE,ISPLSE,KPULSE,ITSW,IOTSW,IPLPRP
      COMMON/THRUST/TV(3,2),TLOC(3,2),TTIM(4,2),TPAR(4,2),REF(2)
      COMMON/XKPLER/AS,E,F,EI,BW,W
      COMMON/IACC/IACOMP,IHUBAC,ITIPAC
      COMMON/NUMACC/NUMHUB
      COMMON/ACCHUB/ YHUB(3,6),HUBACC(3,6),ACCRED(6),ALFAEA(6),
     .  BETAEA(6),GAMAEA(6),DKAT(3,3,6)
      DIMENSION HED9(5),HED10(5),HED11(5),HED12(5),
     1       HED13(5),HED14(5),HED18(5),HED19(5),HED20(5),HED21(5)
      DIMENSION HED25(5),HED26(5),HED28(5)
      DIMENSION HED15(5)
      DATA HED9 /'NUTATION',' VISCOUS',' RING DA','MPER OPT','ION     '/
      DATA HED10/'ATTITUDE',' CONTROL',' MOMENT ','OPTION  ','        '/
      DATA HED11/'MOMENTUM',' WHEEL O','PTION   ','        ','        '/
      DATA HED12/'MAGNETIC',' MOMENT ','OPTION  ','        ','        '/
      DATA HED13/'EARTH PR','OPERTIES','        ','        ','        '/
      DATA HED14/'TORQUE A','BOUT BOD','Y AXIS  ','        ','        '/
      DATA HED15/'DEB CONT','ROL SYST','EM PARAM','ETERS   ','        '/
      DATA HED18/'ORBITAL ','INPUT CO','NTROL   ','        ','        '/
      DATA HED19/'SPIN AXI','S MOMENT','        ','        ','        '/
      DATA HED20/'PRINTER ','PLOT CON','TROL    ','        ','        '/
      DATA HED21/'INTERNAL',' ORBIT S','TARTING ','VECTORS ','        '/
      DATA HED25/'THRUSTIN','G PARAME','TERS    ','        ','        '/
      DATA HED26/'KEPLERIA','N ORBIT ','PARAMETE','RS      ','        '/
      DATA HED28/'NUMBER O','F ACCELE','ROMETER ','IN HUB  ','        '/
      IF(ITORK.EQ.0) GO TO 40
      CALL HVAL(HED14)
      CALL IVAL('ITORK   ',5,ITORK,0,0,0)
      CALL FVAL('CMTORK  ',6,CMTORK,3,0,1)
 40   CONTINUE
      IF(IVISCS.EQ.0) GO TO 50
C
      CALL HVAL(HED9)
      CALL IVAL('IVISCS  ',6,IVISCS,0,0,0)
      CALL FVAL('VISCTY  ',6,VISCTY,0,0,0)
      CALL FVAL('RADTBE  ',6,RADTBE,0,0,0)
      CALL FVAL('RADRNG  ',6,RADRNG,0,0,0)
      CALL FVAL('DENSTY  ',6,DENSTY,0,0,0)
      CALL FVAL('ZETTAD  ',6,ZETTAD,0,0,0)
      CALL FVAL('ETTAD   ',5,ETTAD,0,0,0)
      CALL FVAL('YARRAY  ',6,YARRAY,3,0,1)
      CALL FVAL('OMEGL   ',5,OMEGL,0,0,0)
C
   50 IF(IATTDE.EQ.0) GO TO 55
C
      CALL HVAL(HED10)
      CALL IVAL('IATTDE  ',6,IATTDE,0,0,0)
      CALL FVAL('DTMXA   ',5,DTMXA,0,0,0)
      CALL FVAL('PXI     ',3,PXI,0,0,0)
      CALL FVAL('PXO     ',3,PXO,0,0,0)
      CALL FVAL('CMX     ',3,CMX,0,0,0)
      CALL IVAL('NPULSE  ',6,NPULSE,0,0,0)
C
   55 IF(ISPIN3.EQ.0) GO TO 60
C
      CALL HVAL(HED19)
      CALL IVAL('ISPIN3  ',6,ISPIN3,0,0,0)
      CALL FVAL('DTZMA   ',5,DTZMA,0,0,0)
      CALL FVAL('PZDT    ',4,PZDT,0,0,0)
      CALL FVAL('CMZO    ',4,CMZO,0,0,0)
 60   IF(IHUBAC.EQ.0) GO TO 62
      CALL HVAL(HED28)
      CALL IVAL('NUMHUB  ',6,NUMHUB,0,0,0)
      CALL FVAL('YHUB    ',4,YHUB,3,NUMHUB,2)
      CALL FVAL('ALFAEA  ',6,ALFAEA,NUMHUB,0,1)
      CALL FVAL('BETAEA  ',6,BETAEA,NUMHUB,0,1)
      CALL FVAL('GAMAEA  ',6,GAMAEA,NUMHUB,0,1)
 62   IF(IPULSE.EQ.0) GO TO 65
      CALL HVAL(HED25)
      CALL IVAL('IPULSE  ',6,IPULSE,0,0,0)
      CALL IVAL('ISPLSE  ',6,ISPLSE,0,0,0)
      CALL IVAL('IPLPRP  ',6,IPLPRP,0,0,0)
      CALL FVAL('TVECTR  ',6,TV,3,IPLPRP,2)
      CALL FVAL('TLOCAT  ',6,TLOC,3,IPLPRP,2)
      CALL FVAL('TTIMES  ',6,TTIM,4,IPLPRP,2)
      CALL FVAL('TPARAM  ',6,TPAR,4,IPLPRP,2)
      CALL FVAL('REFANG  ',6,REF,IPLPRP,0,1)
C
 65   IF(IWHEEL.EQ.0) GO TO 70
C
      CALL HVAL(HED11)
      CALL IVAL('IWHEEL  ',6,IWHEEL,0,0,0)
      CALL FVAL('XMOMIN  ',6,XMOMIN,3,0,1)
      CALL FVAL('VMOM    ',4,VMOM,3,0,1)
      CALL FVAL('DVMOM   ',5,DVMOM,3,0,1)
      CALL FVAL('VSUR    ',4,VSUR,3,0,1)
      CALL FVAL('VSDR    ',4,VSDR,3,0,1)
C
      IF(KNTRL(1).EQ.0) GO TO 70
C
      CALL HVAL(HED15)
      CALL IVAL('KNTRL   ',5,KNTRL,10,0,1)
      CALL FVAL('CPARM   ',5,CPARM,43,0,1)
      CALL FVAL('CSICS   ',5,SVIC,20,0,1)
C
   70 CONTINUE
C
      CALL ECHOSB
C
      CALL ECHOGP
C
      CALL ECHOGM
C
      CALL ECHOPC
C
      IF(IMGMTS.EQ.0) GO TO 75
C
      CALL HVAL(HED12)
      CALL IVAL('IMGMTS  ',6,IMGMTS,0,0,0)
      CALL FVAL('DPMAG   ',5,DPMAG,3,0,1)
      CALL IVAL('MAGFLD  ',6,MAGFLD,0,0,0)
C
   75 IF(IPLOT.EQ.0) GO TO 80
C
      CALL HVAL(HED20)
      CALL IVAL('IPLOT   ',5,IPLOT,0,0,0)
      CALL IVAL('IFSCAL  ',6,IFSCAL,0,0,0)
      CALL FVAL('XMIN    ',4,XMIN,11,0,1)
      CALL FVAL('XMAX    ',4,XMAX,11,0,1)
      CALL FVAL('YMIN    ',4,YMIN,11,0,1)
      CALL FVAL('YMAX    ',4,YMAX,11,0,1)
C
 80   CONTINUE
C
      CALL HVAL(HED13)
      CALL FVAL('AEARTH  ',6,AEARTH,0,0,0)
      CALL FVAL('ZMU     ',3,ZMU,0,0,0)
      CALL FVAL('ZJ20    ',4,ZJ20,0,0,0)
      CALL FVAL('FLAT    ',4,FLAT,0,0,0)
      CALL FVAL('WWO     ',3,WWO,0,0,0)
      CALL FVAL('WE      ',2,WE,0,0,0)
      CALL FVAL('J2      ',2,J2,0,0,0)
      CALL FVAL('J3      ',2,J3,0,0,0)
      CALL FVAL('J4      ',2,J4,0,0,0)
      CALL FVAL('J22     ',3,J22,0,0,0)
      CALL FVAL('TVER    ',4,TVER,0,0,0)
      CALL FVAL('ECLPTC  ',6,ECLPTC,0,0,0)
C
      CALL HVAL(HED18)
      CALL IVAL('IORB    ',4,IORB,0,0,0)
      CALL IVAL('ITAPE   ',5,ITAPE,0,0,0)
C
      IF(IORB.NE.0) RETURN
      IF(IKPLR.EQ.0) GO TO 200
      CALL HVAL(HED26)
      CALL FVAL('AS      ',2,AS,0,0,0)
      CALL FVAL('E       ',1,E,0,0,0)
      CALL FVAL('EI      ',2,EI,0,0,0)
      CALL FVAL('F       ',1,F,0,0,0)
      CALL FVAL('BW      ',2,BW,0,0,0)
      CALL FVAL('W       ',1,W,0,0,0)
      GO TO 210
 200  CONTINUE
C
      CALL HVAL(HED21)
      CALL FVAL('XSAT    ',4,XSAT,3,0,1)
      CALL FVAL('XSATDT  ',6,XSATDT,3,0,1)
 210  CONTINUE
      RETURN
      END
      SUBROUTINE ECHOGD
C
      IMPLICIT REAL*8(A-H,O-Z)
C
C     SUBROUTINE ECHOGD IS THE ECHO ROUTINE TO PRINT GROUND
C     TESTING RELATED INPUT VARIABLES FOR CHECKING
C
C     WRITTEN BY K. YONG OF COMPUTER SCIENCES CORP IN MARCH 1976
C
      COMMON/GRNTST/ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY(3),
     *      GACC(3),GLOCAT(3),IGRUND,IALTUD,IGASBR
C
      COMMON/GMATRX/GMAX(3,3),GMAXT(3,3)
C
      COMMON/HEAD22/HEAD1(5),HEAD2(5),ILINE
C
      DIMENSION HED0(5),HED1(5),HED2(5),HED3(5)
C
      DATA HED0/'**ECHO G','ROUND TE','STING IN','PUT PARA','METERS**'/
      DATA HED1/'CONTROL ',' WORDS  ','        ','        ','        '/
      DATA HED2/'INPUT   ','PARAMETE','RS      ','        ','        '/
      DATA HED3/'DIRECTIO','N COSINE',' AND ACC','. VECTOR','        '/
C
      ILINE=0
C
      CALL HVAL(HED0)
      CALL HVAL(HED1)
      CALL IVAL('IGRUND  ',6,IGRUND,0,0,0)
      CALL IVAL('IALTUD  ',6,IALTUD,0,0,0)
      CALL IVAL('IGASBR  ',6,IGASBR,0,0,0)
C
      CALL HVAL(HED2)
      CALL FVAL('ALFAEG  ',6,ALFAEG,0,0,0)
      CALL FVAL('DELTAG  ',6,DELTAG,0,0,0)
      CALL FVAL('PHASEG  ',6,PHASEG,0,0,0)
      CALL FVAL('OMGY    ',4,OMGY,3,0,1)
      CALL FVAL('GLOCAT  ',6,GLOCAT,3,0,1)
      IF(IALTUD.EQ.1) CALL FVAL('ALTUDE  ',6,ALTUDE,0,0,0)
C
C
      CALL HVAL(HED3)
      CALL FVAL('GMAX    ',4,GMAX,3,3,2)
      CALL FVAL('GACC    ',4,GACC,3,0,1)
C
      RETURN
      END
      SUBROUTINE ECHOGP
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      CALL ECHDPC
C
      CALL ECHDGM
C
      CALL ECHOSA
C
      CALL ECHOVD
C
      CALL ECHSAC
C
      CALL WHECHO
C
      CALL AWECHO
C
      RETURN
C
      END
      SUBROUTINE ECHOSB
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ACFILT/ACPARM(20),IACFLT(20)
C
      COMMON/CSECBD/SECM,SECI(3,3),ZBAR2(3),YI02(3)
C
      COMMON/ISECBD/I2BDY,NDOF2,IRAST,NDEP2,IARST(3),IRSCY(3)
C
      COMMON/SECICS/GAM20,ALP20,BET20,B0(3,3),GAM2I,ALP2I,BET2I
     1             ,OM2I(3),SBUP(2),SBDN(2)
C
C
      DIMENSION HED1(5),HED2(5),HED3(5),HED4(5)
C
      DATA HED1/'SECONDAR','Y BODY P','ROPERTIE','S       ','        '/
      DATA HED2/'SECONDAR','Y BODY I','NITIAL C','ONDITION','S       '/
      DATA HED3/'RASTERIN','G OPTION',' SPECIFI','ED      ','        '/
      DATA HED4/'SENSOR C','ONTROL O','F ACTUAT','OR      ','      '/
C
C
      IF(I2BDY.EQ.0) GO TO 10
      CALL HVAL(HED1)
      CALL FVAL('SBMOI   ',5,SECI,3,3,2)
      CALL FVAL('SBMASS  ',6,SECM,0,0,0)
      CALL FVAL('YPIVOT  ',6,YI02,3,0,1)
      CALL FVAL('SBCG    ',4,ZBAR2,3,0,1)
C
      IF(NDOF2.EQ.0) GO TO 5
      CALL HVAL(HED2)
      CALL IVAL('NDOFSB  ',6,NDOF2,0,0,0)
      CALL FVAL('GAM2I   ',5,GAM2I,0,0,0)
      CALL FVAL('ALP2I   ',5,ALP2I,0,0,0)
      CALL FVAL('BET2I   ',5,BET2I,0,0,0)
      CALL FVAL('OMEG2I  ',6,OM2I,3,0,1)
C
      GO TO 10
C
    5 CONTINUE
C
      IF(IRAST.EQ.0) GO TO 10
      CALL HVAL(HED3)
      CALL IVAL('IRAST   ',5,IRAST,0,0,0)
      CALL IVAL('IARAST  ',6,IARST,3,0,1)
C
   10 CONTINUE
C
      IF(IACFLT(1).EQ.0) RETURN
C
      CALL HVAL(HED4)
      CALL FVAL('GAIN    ',4,ACPARM(1),0,0,0)
      CALL FVAL('TAU     ',3,ACPARM(2),0,0,0)
C
C
      RETURN
C
      END
      SUBROUTINE ELOUT(A,B,AD,BD,NELMTS)
      IMPLICIT REAL * 8 (A-H,O-Z)
C
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      DIMENSION A(10,3),B(10,3),AD(10,3),BD(10,3)
C
C
      N=NELMTS
      M=0
      DO 10 I=1,N
   10 M=MAX0(NK(I),M)
C
      CALL AVAL('A       ',1,A,10,N,M,2)
C
      CALL AVAL('ADOT    ',4,AD,10,N,M,2)
C
      CALL AVAL('B       ',1,B,10,N,M,2)
C
      CALL AVAL('BDOT    ',4,BD,10,N,M,2)
C
C
      RETURN
      END
      SUBROUTINE ENERGY(INOPT,JTEST)
C
C     'ENERGY' IS AN EXECUTIVE SUBROUTINE THAT CONTROLS CALCULATION
C     OF THE HAMILTONIAN BY CALLING SEVERAL SUBROUTINES
C
      IMPLICIT REAL * 8(A-H,O-Z)
      REAL*8 IG(3,3),ISO(3,3),IXDB(3,3),IP,J1,J2,J3
C
C
      NAMELIST/  NSE / SE
C
      NAMELIST/NNERGY/ ZF,ZT,YOZ,YT,FC,YF,YFYF,YY,ZZDB,YYDB
C
C
      COMMON/CCNVRT/ BDYMI(3,3),DPRMI(3,3),EMODLS(10),RTUBE(10),
     .               HTUBE(10),THERMC(10),TIPMS(10),C(10)
C
      COMMON/COMALP/ SZ02(10),SZ03(10),SZ04(10),SZ12(3,10),SZ13(3,10),
     .               SZ14(3,10),SZ15(3,10),SZ16(3,10),SZ21(9,10),
     .               SZ22(9,10),SZ23(9,10),SZ25(9,10),
     .               SZ26(9,10),SZ27(9,10),SZ28(9,10),SZ31(27,10),
     .               SZ32(27,10),SZ33(27,10),SZ34(27,10),SZ35(27,10),
     .               SZ41(81,10),SZ42(81,10),SZ43(81,10)
C
      COMMON/COMBCR/ OMBC1(3)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/DEBUG3/ ISWTCH
C
      COMMON/HAMOUT/ HAMILT,IHAMLT
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/KNERGY/ S(3,3),OMBC(3),BT(3,3)
C
      COMMON/LIBDPR/ ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,
     .               ZMDO,ZMDBO,CNV,DECAY
C
      COMMON/RNRGY1/ ZF(3),ZT(3),YOZ(3),YT(3),FC(3,3),YF(3),YFYF(3,3),
     .               YY(3,3)
C
      COMMON/RNRGY2/ ZZDB(3,3),YYDB(3,3)
C
      COMMON/RNRGY3/ J1(3,3),J2(3,3),J3(3,3),XICODT(3),W(3),ETA(3),
     .               ZETA(3)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/RPOOL5/ CKMAT(3,3,10),FM2(3,3)
C
      COMMON/RPOOL8/ SZ01(10),SZ11(3,10),SZ24(9,10)
C
      COMMON/RXCAL / XI(3),XID(3),XX(3,3),XXD(3,3),XDXD(3,3)
C
C
C
C
      DIMENSION ZZT1(3,3),ZZT(3,3),SUM(6),RSUM(3),XICO(3),RO(3),RDB(3),
     .          XDTF(3),FMT(3,3),YYSO(3,3),DUM(3,3),SE(10),ZBZ(3)
C
C
C
      W(1)=0.0D0
      W(2)=PHID
      W(3)=0.0D0
      TBM2=0.0D0
      IF(JTEST.EQ.1) GO TO 10
      ITIME=1
      GO TO 20
   10 CONTINUE
      JTEST=JTEST + 1
      ITIME=0
   20 CONTINUE
C
C                       START K LOOP
C
      DO 200 K=1,IK
      DO 25 I=1,3
      ZBZ(I)=ZBZK(I,K)
      DO 25 J=1,3
   25 CMAT(I,J)=CKMAT(I,J,K)
      SE(K)=0.0D0
      M=NK(K)
      DO 40 I=1,3
      XI(I)=0.0D0
      XID(I)=0.0D0
      DO 30 J=1,3
      XX(I,J)=0.0D0
      XXD(I,J)=0.0D0
   30 XDXD(I,J)=0.0D0
   40 CONTINUE
   55 IF(M.NE.0) GO TO 60
C
      XI(1)=ZLK(K)*SZ01(K)
      XX(1,1)=ZLK(K)*ZLK(K)*SZ03(K)
C
      GO TO 70
   60 CALL XICAL(XI,ZLK,SZ11,SZ24,SZ01,M,K)
C
      CALL XXCAL(XX,ZLK,K,M)
C
C
      CALL XIDCAL(XID,ZLK,SZ11,SZ24,M,K)
C
      CALL XXDCAL(XXD,ZLK,K,M)
C
      CALL XDXDCL(XDXD,ZLK,K,M)
C
      TBM2=TBM2 + TWOTBM(K)
C
      CALL STRAIN(ZLK,SE,K,K1,M)
C
   70 CALL NERGY(K,ITIME,ZBZ)
C
      IF(K.NE.IK) GO TO 75
      IF(ISWTCH.EQ.0) WRITE(6,NSE)
      IF(ISWTCH.EQ.0) WRITE(6,NNERGY)
C
   75 IF(K.GT.1) GO TO 100
      DO 80 I=1,3
      ETA(I)=0.0D0
      ZETA(I)=0.0D0
      XICO(I)=0.0D0
      XICODT(I)=0.0D0
      DO  80 J=1,3
      J1(I,J)=0.0D0
      J2(I,J)=0.0D0
      J3(I,J)=0.0D0
      ZZT1(I,J)=0.0D0
   80 IXDB(I,J)=0.0D0
C
      DO 90 I=1,6
   90 SUM(I)=0.0D0
C
C                       START SECOND K LOOP
C
  100 RHOKLK=RHOK(K)*ZLK(K)
C
      IF(IDAMP.EQ.0) GO TO 130
      IF((K-K1).GT.0) GO TO 130
C
C
      CALL J2CAL(ZBZ,CMAT,XX,ZF,ZZT)
C
      IF(ISWTCH.EQ.0) WRITE(6,20000)
      IF(ISWTCH.EQ.0) WRITE(6,10000) ((ZZT(I,J),J=1,3),I=1,3)
C
      DO 110 I=1,3
      DO 110 J=1,3
  110 ZZT1(I,J)=ZZT1(I,J) + RHOKLK*ZZT(I,J)
C
C                       CALCULATE IXDB
C
      CALL J3CAL(ZBZ,YT,YOZ,YF,YFYF,FM1,RHOKLK,IXDB)
C
      IF(ISWTCH.EQ.0) WRITE(6,20001)
      IF(ISWTCH.EQ.0) WRITE(6,10000) ((IXDB(I,J),J=1,3),I=1,3)
C
      CALL ZETACL(CMAT,XID,XXD,ZBZ,RSUM)
C
      IF(ISWTCH.EQ.0) WRITE(6,20002)
      IF(ISWTCH.EQ.0) WRITE(6,10001) (RSUM(I),I=1,3)
C
      DO 120 I=1,3
  120 ZETA(I)=ZETA(I) + RHOKLK*RSUM(I)
C
      IF(ISWTCH.EQ.0) WRITE(6,10002) (ZETA(I),I=1,3)
C
  130 CALL ETACAL(RSUM,K)
      IF(ISWTCH.EQ.0) WRITE(6,20003)
      IF(ISWTCH.EQ.0) WRITE(6,10001) (RSUM(I),I=1,3)
C
      DO 140 I=1,3
  140 ETA(I)=ETA(I) + RHOKLK*RSUM(I)
      IF(ISWTCH.EQ.0) WRITE(6,10003) (ETA(I),I=1,3)
C
      SUM(1)=SUM(1) + RHOKLK*(YY(2,2) + YY(3,3))
      SUM(2)=SUM(2) + RHOKLK*(YY(1,1) + YY(3,3))
      SUM(3)=SUM(3) + RHOKLK*(YY(1,1) + YY(2,2))
      SUM(4)=SUM(4) + RHOKLK*YY(1,2)
      SUM(5)=SUM(5) + RHOKLK*YY(1,3)
      SUM(6)=SUM(6) + RHOKLK*YY(2,3)
C
      DO 150 I=1,3
  150 XICO(I)=XICO(I) + RHOKLK*YT(I)
C
      IF(ISWTCH.EQ.0) WRITE(6,20004)
      IF(ISWTCH.EQ.0) WRITE(6,10001) (XICO(I),I=1,3)
C
      IF(INOPT.EQ.1) RL=ROFUN(RO,OMEG,YT)
      IF(INOPT.EQ.2) RL=ROFUN(RO,OMBC,YT)
C
      DO 170 I=1,3
  170 RDB(I)=0.0D0
C
      IF(IDAMP.EQ.0) GO TO 180
      IF((K-K1).GT.0) GO TO 180
C
      RSUM(1)=W(2)*ZT(3) - W(3)*ZT(2)
      RSUM(2)=W(3)*ZT(1) - W(1)*ZT(3)
      RSUM(3)=W(1)*ZT(2) - W(2)*ZT(1)
      CALL MULTM(FM1,RSUM,RDB,3,1,3)
  180 CALL MULTM(FC,XID,XDTF,3,1,3)
      CALL MSUM(RO,XDTF,RSUM,3)
C
      DO 190 I=1,3
  190 XICODT(I)=RHOKLK*(RSUM(I) + RDB(I)) + XICODT(I)
C
      IF(ISWTCH.EQ.0) WRITE(6,20005)
      IF(ISWTCH.EQ.0) WRITE(6,10001) (XICODT(I),I=1,3)
C
  200 CONTINUE
C
C            END OF K LOOP
C
      DO 210 I=1,3
      XICO(I)=-XICO(I)/ZMS
  210 XICODT(I)=-XICODT(I)/ZMS
C
      IF(ISWTCH.EQ.0) WRITE(6,20006)
      IF(ISWTCH.EQ.0) WRITE(6,10001) (XICO(I),I=1,3)
      IF(ISWTCH.EQ.0) WRITE(6,20007)
      IF(ISWTCH.EQ.0) WRITE(6,10001) (XICODT(I),I=1,3)
C
C
      CALL J1CAL(J1,SUM,YYDB,BDYMI,ISO)
      IF(ISWTCH.EQ.0) WRITE(6,20008)
      IF(ISWTCH.EQ.0) WRITE(6,10000) ((ISO(I,J),J=1,3),I=1,3)
      SPRNG=0.0D0
C
      IF(IDAMP.EQ.0) GO TO 240
C
      SPRNG=SPRING(ZK1D,ZK2D,PHI,PHIS,RADIAN)
C
      DO 220 I=1,3
      DO 220 J=1,3
  220 ZZT1(I,J)=ZZT1(I,J) + ZZDB(I,J)
      IF(ISWTCH.EQ.0) WRITE(6,20009)
      IF(ISWTCH.EQ.0) WRITE(6,10000) ((ZZT1(I,J),J=1,3),I=1,3)
C
      J2(1,1)=ZZT1(2,2) + ZZT1(3,3)
      J2(2,2)=ZZT1(3,3) + ZZT1(1,1)
      J2(3,3)=ZZT1(1,1) + ZZT1(2,2)
C
      DO 230 I=1,3
      DO 230 J=1,3
  230 IF(I.NE.J) J2(I,J)=-ZZT1(I,J)
      IF(ISWTCH.EQ.0) WRITE(6,20010)
      IF(ISWTCH.EQ.0) WRITE(6,10000) ((J2(I,J),J=1,3),I=1,3)
C
      CALL MATRAN(FM1,FMT,3,3)
      CALL MULTM(FMT,IXDB,J3,3,3,3)
C
  240 YYSO(1,1)=(ISO(2,2) + ISO(3,3) - ISO(1,1))/2
      YYSO(2,2)=(ISO(3,3) + ISO(1,1) - ISO(2,2))/2
      YYSO(3,3)=(ISO(1,1) + ISO(2,2) - ISO(3,3))/2
C
      DO 250 I=1,3
      DO 250 J=1,3
  250 IF(I.NE.J) YYSO(I,J)=ISO(I,J)
C
      IF(ISWTCH.EQ.0) WRITE(6,20011)
      IF(ISWTCH.EQ.0) WRITE(6,10000) ((YYSO(I,J),J=1,3),I=1,3)
C
      CALL IGCAL(INOPT,YYSO,XICO,ZMS,SA,S,IG)
C
      IF(ISWTCH.EQ.0) WRITE(6,20012)
      IF(ISWTCH.EQ.0) WRITE(6,10000) ((IG(I,J),J=1,3),I=1,3)
C
      IP=IG(1,1) + IG(2,2) + IG(3,3)
C
      VRG=VRG1(IP,IG)
      IF(ISWTCH.EQ.0) WRITE(6,10004) VRG
C
      IF(INOPT.EQ.1) GO TO 260
C
      TRSP=TWOT(OMBC,S,ZMS,TBM2)
      VRG=VRG+VGG(BT,OMBC1,IG,IP)
      IF(ISWTCH.EQ.0) WRITE(6,10005) VRG
      IF(ISWTCH.EQ.0) WRITE(6,10006) TRSP
      GO TO 270
  260 TRSP=TWOT(OMEG,SA,ZMS,TBM2)
      IF(ISWTCH.EQ.0) WRITE(6,10007) TRSP
C
  270 HAMILT=TRSP + SPRNG + STRN(SE,IK) + VRG
      IF(ISWTCH.EQ.0) WRITE(6,10008) SPRNG
      IF(ISWTCH.EQ.0) WRITE(6,10009) HAMILT
      RETURN
C
C
10000 FORMAT('0',5X,3(G20.13,2X)/6X,3(G20.13,2X)/6X,3(G20.13,2X))
C
10001 FORMAT('0',5X,3(G20.13,2X))
C
10002 FORMAT('0',2X,'ZETA ',3(G20.13,2X))
C
10003 FORMAT('0',2X,'ETA ',3(G20.13,2X))
C
10004 FORMAT('0',2X,'VRG FOR G.G. ',G20.13)
C
10005 FORMAT('0',2X,'VRG PLUS VCG ',G20.13)
C
10006 FORMAT('0',2X,'TRSP FOR G.G. ',G20.13)
C
10007 FORMAT('0',2X,'TRSP FOR S.S. ',G20.13)
C
10008 FORMAT('0',2X,'SPRING ',G20.13)
C
10009 FORMAT('0',2X,'HAMILTONIAN ',G20.13)
C
20000 FORMAT('0',2X,'ZZT FROM J2CAL')
C
20001 FORMAT('0',2X,'IXDB FROM J3CAL')
C
20002 FORMAT('0',2X,'RSUM FROM ZETACL')
C
20003 FORMAT('0',2X,'RSUM FROM ETACAL')
C
20004 FORMAT('0',2X,'XICO IN K-LOOP')
C
20005 FORMAT('0',2X,'XICODT IN K-LOOP')
C
20006 FORMAT('0',2X,'SUM OVER K OF XICO')
C
20007 FORMAT('0',2X,'SUM OVER K OF XICODT')
C
20008 FORMAT('0',2X,'ISO FROM J1CAL')
C
20009 FORMAT('0',2X,'SUM OF ZZT1 + ZZDB')
C
20010 FORMAT('0',2X,'J2 = SUM OF ZZT1')
C
20011 FORMAT('0',2X,'YYSO = ISO')
C
20012 FORMAT('0',2X,'IG FROM IGCAL')
C
C
      END
      SUBROUTINE ETACAL(RSUM,K)
C
C     'ETACAL' CALCULATES THE COMPONENTS OF MOMENTS OF LINEAR
C     MOMENTUM OF EACH ANTENNA ELEMENT IN THE BODY FRAME
C
      IMPLICIT REAL * 8 (A-H,O-Z)
C
      COMMON/RNRGY1/ ZF(3),ZT(3),YOZ(3),YT(3),FC(3,3),YF(3),YFYF(3,3),
     .               YY(3,3)
C
      COMMON/RXCAL / XI(3),XID(3),XX(3,3),XXD(3,3),XDXD(3,3)
C
      DIMENSION RSUM(3),RF(3),RO(3),YDTF(3),X(3)
C
C
      CALL MULTM(FC,XID,YDTF,3,1,3)
      RO(1)=YOZ(2)*YDTF(3) - YOZ(3)*YDTF(2)
      RO(2)=YOZ(3)*YDTF(1) - YOZ(1)*YDTF(3)
      RO(3)=YOZ(1)*YDTF(2) - YOZ(2)*YDTF(1)
C
      X(1)=XXD(2,3) - XXD(3,2)
      X(2)=XXD(3,1) - XXD(1,3)
      X(3)=XXD(1,2) - XXD(2,1)
C
      CALL MULTM(FC,X,RF,3,1,3)
      CALL MSUM(RO,RF,RSUM,3)
C
      RETURN
      END
      SUBROUTINE EXCSD(Q,Z,KEY,NSTEP,HEXTTL,AOPT)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C    *****************************************************************
C    *                                                               *
C    *   THIS IS A CSC EXECUTIVE ROUTINE FOR FAST FOURIER TRANSFORM  *
C    *   ANALYSIS. MODIFIED TO CHANGE CALLING SEQUENCE SEPT. 1977.   *
C    *                                                               *
C    *****************************************************************
C
      COMPLEX*16 HEXTTL,AOPT
      COMPLEX*8    Z(1025),ZSTORE(1025)
      REAL*4 DELT, Q(2050),QSTORE(2050),DUMMY(7)
C     EQUIVALENCE (Q(1),Z(1))
      COMMON/RMAIN1/DELTAT,FACTOR,FREQ,TSTOP,DELMIT
      WRITE(6,937)
 937  FORMAT(1H1)
      WRITE(6,938)
 938  FORMAT(' ********************************     FAST    FOURIER
     1 TRANSFORM    ANALYSIS    ***********************')
C
      WRITE(6,600) KEY
  600 FORMAT(/,20X,'&&&&    FOR KEY =',I3,/)
C
      WRITE(6,6000) HEXTTL,AOPT
 6000 FORMAT('0',5X,10('*'),5X,'DATA RELATED TO ',2A8,2A8,' PLOT',5X,
     *       10('*'),/)
C
C
      WRITE(6,625) NSTEP
  625 FORMAT(/,20X,'NO. OF POINTS =',I4,/)
C
      NHALF=(NSTEP+1)/2
      DELT=FREQ
      DO 201 I=1,NHALF
  201 ZSTORE(I)=Z(I)
      DO 301 I=1,NSTEP
  301 QSTORE(I)=Q(I)
      CALL CSD(Z,Q,NSTEP,NHALF,IWIN,DELT,DUMMY)
      DO 202 I=1,NHALF
  202 Z(I)=ZSTORE(I)
      DO 302 I=1,NSTEP
  302 Q(I)=QSTORE(I)
   15 CONTINUE
      RETURN
      END
      SUBROUTINE EXPN(T,TLAST,T1,VLAST,V1,SSN,TCOR,OUT)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ICSADM/L,IRAND,NCHAN
C
      REAL*4 GAS,ONE,ZERO
      DATA ONE/1.0E0/,ZERO/0.0E0/
C
      DIMENSION VLAST(1),V1(1),SSN(1),TCOR(1),OUT(1)
C
      DO 50 I=1,NCHAN
      OUT(I)=VLAST(I)
      IF(T.EQ.TLAST) GO TO 50
      IF(T.LT.TLAST) GO TO 10
      DEL=T-TLAST
      V=VLAST(I)
      IF(L.EQ.2) GO TO 30
      V1(I)=VLAST(I)
      GO TO 30
   10 CONTINUE
      OUT(I)=V1(I)
      IF(T.EQ.T1) GO TO 50
      DEL=T-T1
      IF(DEL.LT.0.0D0) GO TO 50
      V=V1(I)
   30 CONTINUE
      CALL GAUSS(IRAND,ONE,ZERO,GAS)
      ARG=-DEL/TCOR(I)
      PHI=0.0D0
      IF(ARG.GT.-10.0D0) PHI=DEXP(ARG)
      OUT(I)=PHI*V+SSN(I)*DSQRT(1.0D0-PHI*PHI)*GAS
      IF(L.EQ.2) GO TO 50
      VLAST(I)=OUT(I)
   50 CONTINUE
C
      IF(L.EQ.2) GO TO 100
      IF(T.GT.TLAST) T1=TLAST
      IF(T.LT.TLAST) TLAST=T
  100 CONTINUE
      RETURN
      END
      SUBROUTINE FINDGB
C
C      SUBROUTINE FINDGB CALCULATES THE GRAVITY GRADIENT MATRIX,
C             SUNLINE VECTOR FOR INTERNAL ORBIT GENERATOR, AND
C             THE SOLAR ILLUMINATION FACTOR
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 J2,J3,J4,J22
C
C
      COMMON/CNBODY/ J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10)
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/ISHADE/ IPLANS,ISATSH,IWRTTF
C
      COMMON/OUTTWO/ SOLILL,EPSERR
C
      COMMON/PRESUR/ DTOO,POO
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON /RSUNCL/ WE,TVER,ECLPTC
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/ORBNEW/ROD(3),VOD(3),TST
C
      DIMENSION XSAT1(3),XSAT2(3)
C
C
      DATA CONV/7.905355D0/
      IF(IORB.GT.0) GO TO 5
      IF(TIME-TSTART.GT.0) GO TO 4
C
      DO 3 I=1,3
      ROD(I)=XSAT(I)
    3 VOD(I)=XSATDT(I)
      TST=TSTART
    4 CALL XFIND(ROD,VOD,ZMU,TST   ,TIME,XSAT,XSATDT)
      GO TO 559
 5    CONTINUE
      TORB=TIME
      CALL TCNVRT(DDATE,MM,SEC,TLAST,TORB,2)
      CALL DTAPRE(ITAPE,IERR,DDATE,SEC,RX,RY,RZ,VX,VY,VZ)
      XSAT(1)=RX*AEARTH
      XSAT(2)=RY*AEARTH
      XSAT(3)=RZ*AEARTH
      XSATDT(1)=VX*CONV
      XSATDT(2)=VY*CONV
      XSATDT(3)=VZ*CONV
      IF(IERR.LT.3) GO TO 2000
      IF(IERR.LT.6) GO TO 3000
 559  CONTINUE
      RADSQR=0
      DO 10 I=1,3
   10 RADSQR=RADSQR + XSAT(I)*XSAT(I)
      RADIUS=DSQRT(RADSQR)
C
      DO 20 I=1,3
      XSAT1(I)=XSAT(I)/RADIUS
   20 XSAT2(I)=XSAT1(I)*XSAT1(I)
C
      DO 30 I=1,3
      DO 30 J=1,3
   30 GBAR(I,J)=0.D0
C
      IF(IGRAV.EQ.0) GO TO 60
C
      RAD3RD=RADIUS*RADSQR
      RAD4TH=RADIUS*RAD3RD
      RAD5TH=RADIUS*RAD4TH
C
      ZJ2OMU=-(ZJ20*ZMU*AEARTH*AEARTH)/(2.D0*RAD5TH)
      ZMUR3=-ZMU/RAD3RD
C
      DO 40 I=1,2
C
      GBAR(I,I)=  ZMUR3*(1.D0 - 3.D0*XSAT2(I))
     .          + ZJ2OMU*(3.D0 - 15.D0*(XSAT2(I) + XSAT2(3))
     .                  + 105.D0*XSAT2(I)*XSAT2(3))
C
   40 GBAR(3,I)=- 3.D0*ZMUR3*XSAT1(I)*XSAT1(3)
     .          + ZJ2OMU*(105.D0*XSAT1(I)*XSAT1(3)*XSAT2(3)
     .                  - 45.D0*XSAT1(I)*XSAT1(3))
C
C
C
      X21=XSAT1(1)*XSAT1(2)
      GBAR(2,1)=- 3.D0*ZMUR3*X21 + ZJ2OMU*(105.D0*X21*XSAT2(3)
     .          - 15.D0*X21)
C
      X34=XSAT2(3)*XSAT2(3)
C
      GBAR(3,3)=  ZMUR3*(1.D0 - 3.D0*XSAT2(3))
     .          + ZJ2OMU*(9.D0 - 90.D0*XSAT2(3) + 105.D0*X34)
C
C
      DO 50 I=1,3
      DO 50 J=I,3
   50 GBAR(I,J)=GBAR(J,I)
C
C                       SOLAR ILLUMINATION
C
   60 COSC=0.D0
C
      EPS=ECLPTC*RADIAN
      CEPS=DCOS(EPS)
      SEPS=DSIN(EPS)
      WS=WE*(TIME-TVER)*RADIAN
      SINWS=DSIN(WS)
      COSWS=DCOS(WS)
      SD(1)=-COSWS
      SD(2)=-SINWS*CEPS
      SD(3)=-SINWS*SEPS
C
   65 DO 70 I=1,3
   70 COSC=COSC + SD(I)*XSAT1(I)
C
      IF(COSC.LE.0.D0) GO TO 80
C
      SINC=DSQRT(1.D0 - COSC*COSC)
      RADCOS=RADIUS*COSC
      RADSIN=RADIUS*SINC - AEARTH
C
      H1=RADSIN + 0.00461D0*RADCOS
C
      IF(H1.LE.0.D0) GO TO 90
C
      H2=RADSIN - 0.004695D0*RADCOS
C
      IF(H2.GE.0.D0) GO TO 80
C
      H3=0.004653D0*RADCOS
      H4=1.D0 + H2/H3
C
      SOLILL=1.D0 - DARCOS(H4)/PI + H4/PI*DSQRT(1.D0 - H4*H4)
      GO TO 100
   80 SOLILL=1.D0
      GO TO 100
   90 SOLILL=0.D0
  100 DTO=SOLILL*DTOO
      PO=SOLILL*POO
      DT1=0.D0
C
      IF(IPLANS.EQ.0.AND.ISATSH.EQ.0) RETURN
      CALL SHADEP(SOLILL)
C
      RETURN
 2000 WRITE(6,2001)
 2001 FORMAT(' I/O ERROR ON EPHERMIS FILE')
 3000 WRITE(6,3001)
 3001 FORMAT(' INFORMATION NOT AVAILABLE FOR REQUESTED TIME')
      RETURN
      END
      SUBROUTINE FINDN(L,M,N,NS)
C     COMPUTE N ((L+M)<N=SMALLEST(2**P)) AND NS (M<NS=SMALLEST(2**P))
      K=5
    2 K=K+1
      N=2**K
      IF(N-L) 3,3,4
    3 GO TO 2
    4 NL=N-L
      IF(NL-M) 5,5,6
    5 GO TO 2
    6 CONTINUE
      K=1
   12 K=K+1
      NS=2**K
      IF(NS-M) 13,13,14
   13 GO TO 12
   14 CONTINUE
      RETURN
      END
      SUBROUTINE FINDS(S,ZBK,OMK,K,CON3,DCON,ADCON,ZMG,FGA,FGB,
     .                 YIYI,XLK,XLKP,XLKDP,XLK2,WS1,WS2,WS11,CON,ID,NN)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
C     'FINDS' AND 'FNDALP' OPERATE AS A UNIT.  THEIR PURPOSE IS TO
C     COMPUTE  0,1,2,3, AND 4, ORDER MASS TERMS INVOLVED IN
C     EQUATIONS OF MOTION FOR FLEXIBLE ELEMENTS AND CENTRAL BODY
C
      COMMON/COMALP/ SZ02(10),SZ03(10),SZ04(10),SZ12(3,10),SZ13(3,10),
     .               SZ14(3,10),SZ15(3,10),SZ16(3,10),SZ21(9,10),
     .               SZ22(9,10),SZ23(9,10),SZ25(9,10),
     .               SZ26(9,10),SZ27(9,10),SZ28(9,10),SZ31(27,10),
     .               SZ32(27,10),SZ33(27,10),SZ34(27,10),SZ35(27,10),
     .               SZ41(81,10),SZ42(81,10),SZ43(81,10)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL7/ X1A(3),X1B(3),X2A(3),X3B(3),X1AX(3,3),X1BX(3,3),
     .               X2AX(3,3),X3BX(3,3)
C
      COMMON/RPOOL8/ SZ01(10),SZ11(3,10),SZ24(9,10)
C
      COMMON/RPOOL9/ RT1(7),RT2(10,9),ALP(7,7),GAM(10,9,7),DEL(10,9,9)
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
C
C
      DIMENSION S(200),ZBK(3),OMK(3),CON3(7,3),DCON(7,3),ADCON(7,3),
     .          ZMG(7),FGA(3,10),FGB(3,10),YIYI(3)
C
      LTAP5=6
      NKN=NK(K)
      CM23=CMAT(2,3)
      CM21=CMAT(2,1)
      CM22=CMAT(2,2)
        OKM1 = OMK(1)
       OKM2 = OMK(2)
       OKM3 = OMK(3)
       ZB1 = ZBK(1)
       ZB2 = ZBK(2)
        ZB3 = ZBK(3)
        YIY1 = YIYI(1)
       YIY2 = YIYI(2)
       YIY3 = YIYI(3)
       WW1 = OKM1 * OKM1 + OKM2 * OKM2
       WW2 = OKM1 * OKM1 + OKM3 * OKM3
       WW3 = OKM2 * OKM2 + OKM3 * OKM3
       WW4 = OKM1 * OKM2
       WW5 = OKM1 * OKM3
       WW6 = OKM2 * OKM3
       CON = RHOK(K) * XLK
       XLK2  = XLK * XLK
       XLKP = ZLKP(K)
      XLKDP =ZLKDP(K)
C
C                       TEST ON DERIVATIVE OF ANTENNA
C
      WS1=0.D0
      WS2=0.D0
      WS11=0.D0
       IF(XLKP)1,2,1
    1  ID = 1
       WS1= XLKP/XLK
       WS2= XLKDP/XLK
      WS11= WS1 * WS1
       GO TO 3
    2  ID = 2
    3 CONTINUE
C
C                       MODE TEST FOR K-TH ELEMENT
C                       IF MODE EQUAL ZERO RETURN
C
      IF(NK(K).EQ.0) RETURN
       I1 = IAB + NN
       I2 = IBB + NN
       I3 = IAPS+ NN
       I4 = IBPS+ NN
          IN =1
 2001   DO 101 IP =1,NKN
      IZ=(IP-1)*3
        IPKN = IP + NKN
        N1 = IP-1
        NPQ = 1+N1*3
        AP = DEPEND(I1 +N1)
        BP = DEPEND(I2 +N1)
       APP = DEPEND(I3 +N1)
       BPP = DEPEND(I4 +N1)
        V1 = SZ11(IN,K)
        V4 = SZ14(IN,K)
       S(1)= S(1) + AP * V1
       S(4)= S(4) + BP * V1
       S(5)= S(5) +APP * V1
       S(6)= S(6) +BPP * V1
      S(11)= S(11)+ AP * V4
      S(12)= S(12)+ BP * V4
      S(13)= S(13)+APP * V4
      S(14)= S(14)+BPP * V4
       GO TO (5,6),ID
    5  V2 = SZ12(IN,K)
       S(2)= S(2) + AP * V2
       S(7)= S(7) + BP * V2
       V3  =SZ13(IN,K)
       S(3)= S(3) + AP * V3
       S(9)= S(9) + BP * V3
       S(8)= S(8) +APP * V2
      S(10) =S(10) +BPP * V2
       V5  = SZ15(IN,K)
      S(15)= S(15) + AP * V5
      S(16)= S(16) + BP * V5
      S(18)= S(18) +APP * V5
      S(20)= S(20) +BPP * V5
       V6  = SZ16(IN,K)
      S(17)= S(17) + AP * V6
      S(19)= S(19) + BP * V6
    6 CONTINUE
C
        DO 7 IL=80, 160
    7    S(IL) = 0.0D0
C
       S(167) = 0.0D0
       S(168) = 0.0D0
       DO 102 IQ = 1,NKN
      IZ=IZ+1
      S( 97)=0.0D0
      S( 98)=0.0D0
      S(101)=0.0D0
      S(102)=0.0D0
      S(103)=0.0D0
      S(104)=0.0D0
      S(105)=0.0D0
      S(106)=0.0D0
      S(107)=0.0D0
      S(109)=0.0D0
      S(117)=0.0D0
      S(118)=0.0D0
      S(119)=0.0D0
      NPQ=(IP-1)*9+(IQ-1)*3
      S(130)=0.0D0
      S(131)=0.0D0
      S(158)=0.0D0
         IQ1 = IQ -1
          AQ = DEPEND(I1 + IQ1)
          BQ = DEPEND(I2 + IQ1)
         APQ = DEPEND(I3 + IQ1)
         BPQ = DEPEND(I4 + IQ1)
        APA  = APP * AQ
        BPB  = BPP * BQ
          AA = AQ * AP
          BB = BQ * BP
         Z24 = SZ24(IZ,K)
         Z27 = SZ27(IZ,K)
         Z21 = SZ21(IZ,K)
          AB = AA +BB
       S(21) = S(21) + AB * Z24
        APAB = APA  + BPB
       S(22) = S(22) + APAB * Z24
        XAPAB= APP * APQ + BPP * BPQ
       S(24) = S(24) + XAPAB * Z24
       S(29) = S(29) +   AB * Z27
       S(34) = S(34)+APA * Z21
       S(35) = S(35)+ BPP* AQ * Z21
       S(36) = S(36)+ APP* BQ * Z21
       S(37) = S(37) + BPB* Z21
       S(33) = S(33) + APAB * Z27
       GO TO (8,9),ID
    8   Z25 = SZ25(IZ,K)
       S(23)= S(23) + AB * Z25
       S(26)= S(26) + APAB * Z25
        Z26 = SZ26(IZ,K)
       S(25)= S(25) + AB * Z26
        Z22 = SZ22(IZ,K)
       S(38)= S(38) + AA * Z22
       S(39)= S(39) + AP * BQ * Z22
       S(40)= S(40) + BP * AQ * Z22
       S(41)= S(41) + BB * Z22
       S(43)= S(43) + AP * BPQ* Z22
        S( 47) = S( 47) + (SZ28(IZ,K) + Z24) * AA
       S( 48) = S( 48) + (SZ28(IZ,K) + Z24) * BB
        Z23 = SZ23(IZ,K)
       S(42)= S(42) + AP * BQ * Z23
       S(45)= S(45) + BP * AQ * Z23
       S(46)= S(46) + BP * APQ* Z22
       S(150) = S(150) + AQ * Z22
       S(152) = S(152) + AQ * Z23
       S(153) = S(153) + APQ* Z22
       S(154) = S(154) + BQ * Z22
       S(156) = S(156) + BQ * Z23
       S(157) = S(157) + BPQ* Z22
    9   S(30) = S(30) + AA * Z21
       S(31)= S(31) + BB * Z21
       S(32)= S(32) + AP * BQ * Z21
C
C
       DO 103 IR = 1,NKN
      NPQ=NPQ+1
      IX=(IQ-1)*9+(IR-1)*3+IP
      IY=27*(IP-1)+9*(IQ-1)+3*(IR-1)
      I21=27*(IP-1)+9*(IR-1)+IQ
        IR1 = IR-1
         AR = DEPEND(I1+IR1)
         BR = DEPEND(I2+IR1)
        Z31 = SZ31(IX,K)
       S(97)= S(97) + AR*Z31
       S(98)= S(98) + BR*Z31
        APR = DEPEND(I3+IR1)
        BPR = DEPEND(I4+IR1)
      ZQ31=SZ31(NPQ,K)
       S(159) = S(159) + ZQ31*(AR*AQ + BR * BQ)
       S(160) = S(160) + ZQ31 * (APQ * AR + BPQ * BR)
       S(168) = S(168) + ZQ31 * (APQ*APR + BPQ * BPR)
       S(103) = S(103) + APR * Z31
       S(104)= S(104) + BPR*Z31
       GO TO (10,11),ID
   10   Z33=  SZ33(IX,K)
       ZQ33 = SZ33(NPQ,K)
       S(140) = S(140) + AQ * AR * Z33
       S(141) = S(141) + BQ * AR * Z33
       S(142) = S(142) + AQ * BR * Z33
       S(143) = S(143) + BQ * BR * Z33
       S(167) = S(167) + ZQ33 * (AR * AQ + BR * BQ)
       S(99) = S(99) +(AR*Z33)* AQ + (BR* Z33)* BQ
        Z32  = SZ32(IX,K)
        Z35  = SZ35(IX,K)
      S(101) = S(101) + AR*Z32
      S(102) = S(102) + BR*Z32
      S(105) = S(105) + AR*Z35
      S(106) = S(106) + BR*Z35
        Z34  = SZ34(IX,K)
      S(111) = S(111) +(AR* Z34)* AQ + (BR* Z34)* BQ
   11  CONTINUE
C
        DO 104 IS = 1,NKN
       ZZ41 = SZ41(I21,K)
      IY=IY+1
         IS1 = IS-1
          AS = DEPEND(I1+IS1)
          BS = DEPEND(I2+IS1)
       S(130) = S(130) + AR*BS*ZZ41
       S(131) = S(131) + BR * BS *ZZ41
       S(158) = S(158) + AR*AS * ZZ41
         Z41 = SZ41(IY,K)
          ARS = AR * AS
          BRS = BR * BS
        SUMAB = ARS + BRS
       S(117) = S(117) + (APR* DEPEND(I3+ IS1)+ BPR* DEPEND(I4+IS1))*Z41
       S(107) = S(107) + SUMAB * Z41
        GO TO (12,13),ID
   12   Z42 = SZ42(IY,K)
        Z43 = SZ43(IY,K)
       S(118) = S(118) + SUMAB * Z43
       S(119) = S(119) +(APR* AS + BPR* BS) * Z42
       S(109) = S(109) + SUMAB * Z42
   13 CONTINUE
      I21=I21+3
  104 CONTINUE
C
  103 CONTINUE
C
C
       S(53) = S(53) +AA * S(107)
       S(54) = S(54) +BB * S(107)
       S(55) = S(55) +APP* AQ * S(107)
       S(56) = S(56) +BPP* BQ * S(107)
       S(120) = S(120) + AQ * S(107)
       S(121) = S(121) + BQ * S(107)
       S(122) = S(122) + AQ * S(117)
       S(123) = S(123) + BQ * S(117)
       S(132) = S(132) + AQ * S(97)
       S(133) = S(133) + BQ * S(97)
       S(134) = S(134) + AQ * S(98)
       S(135) = S(135) + BQ * S(98)
       S(136) = S(136) + APQ* S(97)
       S(137) = S(137) + BPQ* S(97)
       S(138) = S(138) + APQ* S(98)
       S(139) = S(139) + BPQ* S(98)
       S(100) = S(132) + S(135)
       S(108) = S(136) + S(139)
       S(112)= S(112)+ APQ* S(103) + BPQ* S(104)
       S(144) = S(144) + AQ * Z21
       S(145) = S(145) + BQ * Z21
       S(146) = S(146) + AQ * Z27
       S(147) = S(147) + BQ * Z27
       S(148) = S(148) +APQ * Z21
       S(149) = S(149) +BPQ * Z21
       S(151) = S(151) + AQ * Z24
       S(155) = S(155) + BQ * Z24
       GO TO (14,15),ID
   14  S(57) = S(57) + AA * S(109)
       S(58) = S(58) + BB * S(109)
       S(110)= S(110)+ AQ * S(101) + BQ * S(102)
       S(113)= S(113)+ AQ * S(105) + BQ * S(106)
       S(114)= S(114)+ APQ* S(101) + BPQ* S(102)
       S(124) = S(124) + AQ * S(109)
       S(127) = S(127) + BQ * S(109)
       S(125) = S(125) + AQ * S(118)
       S(128) = S(128) + BQ * S(118)
       S(126) = S(126) + AQ * S(119)
       S(129) = S(129) + BQ * S(119)
   15 CONTINUE
       ZZ21 = SZ21(IZ,K)
       DEL(K,IP,IQ) = ZZ21 + S(158)/XLK2
       DEL(K,IP,IQ+NKN) = S(130)/XLK2
        DEL(K,IPKN,IQ+NKN) = ZZ21 + S(131)/XLK2
  102 CONTINUE
       S(59) = S(59) + AP * S(100)
       S(60) = S(60) + BP * S(100)
       S(169) = S(169) + AP*S(168)
       S(170) = S(170) + BP * S(168)
        S(161) = S(161) + AP * S(159)
       S(162) = S(162) + BP * S(159)
       S(163) = S(163) + APP * S(159)
        S(164) = S(164) + BPP * S(159)
       S(165) = S(165) + AP * S(160)
       S(166) = S(166) + BP * S(160)
       S(61) = S(61) + APP* S(100)
       S(62) = S(62) + BPP* S(100)
       S(63) = S(63) + AP * S(108)
       S(64) = S(64) + BP * S(108)
       S(70) = S(70) + AP * S(112)
       S(71) = S(71) + BP * S(112)
        GO TO (16,17),ID
   16   S(65) = S(65) + AP *S(99)
        S(66) = S(66) + BP *S(99)
       S(171) = S(171) + AP * S(167)
       S(172) = S(172) + APP * S(167)
       S(173) = S(173) + BP * S(167)
       S(174) = S(174) + BPP * S(167)
        S(67) = S(67) + AP *S(110)
        S(68) = S(68) + BP *S(110)
        S(72) = S(72) + AP *S(113)
        S(73) = S(73) + BP *S(113)
        S(74) = S(74) + APP*S(99)
        S(75) = S(75) + BPP*S(99)
        S(76) = S(76) + AP *S(111)
        S(77) = S(77) + AP *S(114)
        S(78) = S(78) + BP *S(114)
        S(79) = S(79) + BP *S(111)
   17 CONTINUE
       CON3(IP,1) = S(122)/XLK2
       CON3(IPKN,1) = S(123)/XLK2
       CON3(IP,2) = -2.0D0 * S(149) * OKM1 - 2.0D0 * S(137)/XLK*OKM2 -
     1  2.D0*(S(160)-S(136))*OKM3/XLK
       CON3(IPKN,2) =   2.0D0 * S(148) * OKM1
     1 + 2.D0*(S(160)-S(139))*OKM2/XLK + 2.D0*S(138)/XLK*OKM3
        X1A(IP) = -S(151)/XLK
       X2A(IP) =  V1
      X1AX(IP,1)=  -S(146) + S(120)/(2.0D0*XLK2)
      X1AX(IP,2)=  -S(132)/XLK
      X1AX(IP,3)=  -S(133)/XLK
      X2AX(IP,1)=  XLK * V4 - 0.5D0* S(159)/XLK
      X2AX(IP,2)=  S(144)
      X2AX(IP,3)=  S(145)
       X1B(IP) =  -S(155)/XLK
       X3B(IP) =  V1
      X1BX(IP,1)=  -S(147) + 0.5D0* S(121)/XLK2
      X1BX(IP,2)=  -S(134)/XLK
      X1BX(IP,3)=  -S(135)/XLK
      X3BX(IP,1)=  XLK* V4 - 0.5D0 * S(159)/XLK
       X3BX(IP,2) = S(144)
       X3BX(IP,3) = S(145)
C
C                       CALL RTSIDE
C
      CALL RTSIDE(ZMG,FGA,FGB,1,K)
C
       IN = IN+1
       CON3(IP,3) = - WW2 *(YIY2 * V1 + S(144))+ WW3*(YIY1* S(151)/XLK
     1          - X1AX(IP,1))+ WW4* (YIY1* V1 -YIY2*S(151)/XLK +X2AX(IP,
     1         1) + X1AX(IP,2)) - WW5*(YIY3*S(151)/XLK - X1AX(IP,3))
     1         + WW6 *(YIY3 * V1 + S(145))
C
C
       CON3(IPKN,3)  = - WW1* (YIY3 * V1+ S(145))- WW3*(-YIY1*S(155)/XLK
     1             +X1BX(IP,1)) + WW4*(-YIY2* S(155)/XLK -S(134)/XLK)
     1             +WW5 *(YIY1 * V1 +YIY3 * X1B(IP) + X3BX(IP,1)+X1BX(IP
     1             ,3)) + WW6 * (YIY2* V1 + S(144))
C
C
       GO TO (2011,2010),ID
 2011  DCON(IP,1)= WS2* (S(150) -S(151))+ WS11* S(152) +2.0D0* WS1*
     1            S(153) + 0.5D0* WS2/XLK2* S(124)+ 0.5D0* WS11/XLK2*
     1            S(125) + 2.0D0* WS1/XLK2* S(126)
C
C
       DCON(IPKN,1)  = WS2*(S(154)- S(155))+ WS11*S(156)+2.0D0*WS1*S(157
     1             ) + 0.5D0* WS2/XLK2*S(127)+ 0.5D0*WS11/XLK2 * S(128)
     1            + 2.0D0* WS1/XLK2 * S(129)
C
C
       DCON(IP,2) = -2.0D0*(OKM1* WS1* S(154) + WS1/XLK * S(141)*  OKM2
     1   +(0.5D0*WS1/XLK*S(110) - XLKP*SZ11(IP,K) -WS1/XLK*S(140))
     1             * OKM3)
C
C
       DCON(IPKN,2)   = 2.0D0*( WS1 *S(150) * OKM1 +(WS1/XLK* S(110)
     1     *0.5D0 - XLKP*SZ11(IP,K) - WS1/XLK*S(143))*OKM2+WS1/XLK*
     1    S(142)* OKM3)
C
C
C
C                       TEST ON DAMPER
C
 2010 IF(IDAMP.EQ.0) GO TO 720
C
C   ***** DAMPER UNCAGED
      IF(K-K1) 722,722,720
  722  CON3(IP,2) = CON3(IP,2) -2.0D0* PHID *(CM21 * S(149)+ CM22 *
     1              S(137)/XLK + CM23 * (S(160) - S(136))/XLK)
C
       CON3(IPKN,2)  =CON3(IPKN,2)   + 2.0D0* PHID *(CM21 * S(148)
     1    +CM23*S(138)/XLK + CM22/XLK * (S(160) - S(139)))
C
       A1 = (2.0D0*OKM1 + CM21 * PHID) * PHID
       A2 = (2.0D0*OKM2 + CM22 * PHID) * PHID
       A3 = (2.0D0 * OKM3 + CM23 * PHID) * PHID
        A4 =  ZB2  * V1 + S(144)
        A5 =  ZB1  * V1 + X2AX(IP,1)
        A6 =  ZB2  * S(144)/XLK - S(132)/XLK
        A7 =  ZB1  * S(144)/XLK + X1AX(IP,1)
C
       CON3(IP,3) = CON3(IP,3) + A1 *(CM22 *A5 - CM21* A4) + A2*(CM21
     1             *A6 -CM22* A7) +A3 *(CM21* (ZB3* S(144)/XLK -S(133)/
     1           XLK) + CM22 * (ZB3 * V1 +  S(145))-CM23 * (A7 + A4))
C
C
        A4 =  ZB3 * V1 + S(145)
        A5 =  ZB1 * V1 + X3BX(IP,1)
        A6 = -ZB3 * S(145)/XLK - S(135)/XLK
        A7 = -ZB1 * S(145)/XLK + X1BX(IP,1)
C
       CON3(IPKN,3) =  CON3(IPKN,3)+ A1 * (CM23* A5-CM21* A4) + A3*(
     1              CM21 *A6-CM23* A7) + A2* (CM21* (-ZB2*S(145)/XLK -
     1            S(134)/XLK) + CM23*( ZB2* V1 +S(144)) -CM22*(A4+A7))
C
C
        GO TO (723,720),ID
  723  ADCON(IP,2) = 2.0D0*PHID* (-CM21* WS1* S(154) -CM22* WS1/XLK*
     1    S(141) + CM23*(XLKP*SZ11(IP,K)-0.5D0*WS1/XLK*S(110)
     1            + WS1/XLK * S(140)))
C
C
       ADCON(IPKN,2) = 2.0D0* PHID *(CM21 * WS1* S(150) + CM23* WS1/XLK
     1   *S(142) + CM22*(WS1/XLK*S(110) * 0.5D0 -XLKP*SZ11(IP,K)-WS1/
     1          XLK * S(143)))
C
C
  720 CONTINUE
       GO TO (20000,20001),IOUT
20001  CONTINUE
      WRITE (LTAP5,9600)X1A(IP),X2A(IP),X1B(IP),X3B(IP)
 9600 FORMAT(1H0,'9600',4E20.8)
      WRITE (LTAP5,9601)(X1AX(IP,J),X2AX(IP,J),J=1,3)
      WRITE (LTAP5,9601)(X1BX(IP,J),X3BX(IP,J),J=1,3)
 9601 FORMAT(1H0,'9601',6E20.8)
       WRITE (LTAP5,9003)
 9003 FORMAT(1H0,'CON3,ADCON,DCON')
       WRITE (LTAP5,9004) ((CON3(I,J),ADCON(I,J),DCON(I,J),J=1,3),I=1,7)
 9004 FORMAT(1P9E14.6)
20000  CONTINUE
  101 CONTINUE
      RETURN
      END
      SUBROUTINE FINDTW
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/ITWWRK/NKB,NTW,NTT,ILK,ILLK
C
      COMMON/SCDINT/D01S2,D01SC,D01C2,D11S2(3),D11SC(3),D11C2(3)
     1             ,D12S2(3),D12SC(3),D12C2(3),D21S2(3,3),D21SC(3,3)
     2             ,D21C2(3,3),D22S2(3,3),D22SC(3,3),D22C2(3,3)
     3             ,D23(3,3),D24(3,3),D31S2(3,3,3),D31SC(3,3,3)
     4             ,D31C2(3,3,3),D32(3,3,3)
C
      COMMON/SCIFIN/DK21C2(3,3),DK21S2(3,3),DK22S(3,3),DK22C(3,3)
     1             ,DK23(3,3),DK24(3,3),DK31S2(3,3,3),DK31C2(3,3,3)
     2             ,DK32S(3,3,3),DK32C(3,3,3),DK33(3,3,3),DK34(3,3,3)
C
      COMMON/TWWORK/FM(3,3),A(3),AD(3),B(3),BD(3),C(3),CD(3),ZL,RO
     1             ,TSQT(3),W2,W3,EIM,ED2,ED3,EDP,GJ
C
      COMMON/TWWRK1/XX(3,3),XXD(3,3),XXDD(3),XXA(3,3,3),XXB(3,3,3)
     1             ,XXC(3,3,3),XDXA(3,3),XDXB(3,3),XDXC(3,3),XDDXA(3)
     2             ,XDDXB(3),XDDXC(3),XAX(3,3),XBX(3,3),XCX(3,3)
     3             ,DLAA(3,3),DLAB(3,3),DLAC(3,3),DLBB(3,3),DLBC(3,3)
     4             ,DLCC(3,3),VIFA(3),VIFB(3),VIFC(3)
C
      COMMON/WRKTDP/ CDMP(3)
C
      DIMENSION SK(28),SK2(6),SK3(22)
C
      DIMENSION S(139),TS1(15),TS2(59),TS3(65)
C
      EQUIVALENCE (TS1(1),S(1)),(TS2(1),S(16)),(TS3(1),S(75))
C
      EQUIVALENCE (SK2(1),SK(1)),(SK3(1),SK(7))
C
      DATA DZERO/0.0D0/
C
C
C     ZERO OUT SUMMING ARRAY S(I)
C
      DO 2 I=1,139
      S(I)=DZERO
    2 CONTINUE
C
      DO 3 I=1,28
      SK(I)=DZERO
    3 CONTINUE
C
      ZL2=ZL*ZL
      ZL3=ZL*ZL2
      CON=RO*ZL
C
C     CONSTRUCT TERMS FOR AN AND BN EQUATIONS
C
      IF(NKB.EQ.0) GO TO 100
C
      DO 80 I=1,NKB
C
C     ZERO OUT INTERMEDIATE SUMMS
C
      DO 5 II=1,12
      TS3(II)=DZERO
    5 CONTINUE
C
      DO 6 II=1,9
      TS2(II)=DZERO
    6 CONTINUE
C
      DO 7 II=1,6
      SK2(II)=DZERO
      SK3(II)=DZERO
    7 CONTINUE
C
      W11S2=D11S2(I)/ZL
      W11SC=D11SC(I)/ZL
      W11C2=D11C2(I)/ZL
C
C
      DO 40 J=1,NKB
C
      AJ=A(J)
      ADJ=AD(J)
      BJ=B(J)
      BDJ=BD(J)
C
      W21S2=D21S2(I,J)/ZL2
      W21SC=D21SC(I,J)/ZL2
      W21C2=D21C2(I,J)/ZL2
C
      WK21S=DK21S2(I,J)
      WK21C=DK21C2(I,J)
C
      DO 18 II=19,21
      TS3(II)=DZERO
   18 CONTINUE
C
      SK3(1)=DZERO
      SK3(2)=DZERO
C
      DO 20 L=1,NTW
C
      CL=C(L)
      CDL=CD(L)
C
      W31S2=D31S2(L,I,J)/ZL2
      W31SC=D31SC(L,I,J)/ZL2
      W31C2=D31C2(L,I,J)/ZL2
C
      TS3(19)=TS3(19)+CDL*W31S2
      TS3(20)=TS3(20)+CDL*W31SC
      TS3(21)=TS3(21)+CDL*W31C2
C
      WK33=DK33(L,I,J)-DK33(L,J,I)
      WK34=DK34(L,I,J)-DK34(L,J,I)
C
      SK3(1)=SK3(1)+CL*WK33
      SK3(2)=SK3(2)+CL*WK34
C
   20 CONTINUE
C
C     TWO DIMENSIONAL ARRAYS
C
C     XIU2P
C
      TS2(1)=TS2(1)+AJ*W21S2
      TS2(2)=TS2(2)+AJ*W21SC
      TS2(3)=TS2(3)+AJ*W21C2
C
C     XIU3P
C
      TS2(4)=TS2(4)+BJ*W21S2
      TS2(5)=TS2(5)+BJ*W21SC
      TS2(6)=TS2(6)+BJ*W21C2
C
C     THREE DIMENSIONAL ARRAYS
C
C     XIBETDU2P
C
      TS3(1)=TS3(1)+AJ*TS3(19)
      TS3(2)=TS3(2)+AJ*TS3(20)
      TS3(3)=TS3(3)+AJ*TS3(21)
C
C     XIBETDU3P
C
      TS3(4)=TS3(4)+BJ*TS3(19)
      TS3(5)=TS3(5)+BJ*TS3(20)
      TS3(6)=TS3(6)+BJ*TS3(21)
C
C     XIBETDU2PD
C
      TS3(7)=TS3(7)+ADJ*TS3(19)
      TS3(8)=TS3(8)+ADJ*TS3(20)
      TS3(9)=TS3(9)+ADJ*TS3(21)
C
C     XIBETDU3PD
C
      TS3(10)=TS3(10)+BDJ*TS3(19)
      TS3(11)=TS3(11)+BDJ*TS3(20)
      TS3(12)=TS3(12)+BDJ*TS3(21)
C
C     LOAD DELTA ARRAYS
C
      DLAA(I,J)=DLAA(I,J)+W2*W21C2+W3*W21S2
      DLAB(I,J)=DLAB(I,J)+W2*W21SC-W3*W21SC
      DLBB(I,J)=DLBB(I,J)+W2*W21S2+W3*W21C2
C
      SK2(1)=SK2(1)+AJ*WK21S
      SK2(2)=SK2(2)+BJ*WK21S
      SK2(3)=SK2(3)+AJ*WK21C
      SK2(4)=SK2(4)+BJ*WK21C
C
      SK3(3)=SK3(3)+AJ*SK3(1)
      SK3(4)=SK3(4)+BJ*SK3(1)
      SK3(5)=SK3(5)+AJ*SK3(2)
      SK3(6)=SK3(6)+BJ*SK3(2)
C
   40 CONTINUE
C
C     SECOND TWIST LOOP
C
      DO 45 II=7,9
      TS2(II)=DZERO
   45 CONTINUE
C
C
      DO 50 L=1,NTW
C
      CL=C(L)
      CDL=CD(L)
C
      W22S2=D22S2(L,I)/ZL
      W22SC=D22SC(L,I)/ZL
      W22C2=D22C2(L,I)/ZL
C
C     XIBETD
C
      TS2(7)=TS2(7)+CDL*W22S2
      TS2(8)=TS2(8)+CDL*W22SC
      TS2(9)=TS2(9)+CDL*W22C2
C
      SK2(5)=SK2(5)+CL*DK22S(L,I)
      SK2(6)=SK2(6)+CL*DK22C(L,I)
C
   50 CONTINUE
C
C
      XXA(I,1,1)=XXA(I,1,1)+W2*(TS2(5)+TS2(3))+W3*(TS2(1)-TS2(5))
      XXA(I,2,1)=XXA(I,2,1)-W2*W11C2-W3*W11S2
      XXA(I,2,2)=XXA(I,2,2)-W2*(0.5D0*TS2(5)+TS2(3))
     1                     +W3*(0.5D0*TS2(5)-TS2(1))
      XXA(I,2,3)=XXA(I,2,3)-0.5D0*(W2*TS2(6)+W3*TS2(4))
      XXA(I,3,1)=XXA(I,3,1)-W2*W11SC+W3*W11SC
      XXA(I,3,2)=XXA(I,3,2)-W2*(0.5D0*TS2(4)+TS2(2))
     1                     +W3*(TS2(2)-0.5D0*TS2(6))
      XXA(I,3,3)=XXA(I,3,3)-0.5D0*(W2-W3)*TS2(5)
C
      XXB(I,1,1)=XXB(I,1,1)+W2*(TS2(4)+TS2(2))-W3*(TS2(2)+TS2(6))
      XXB(I,2,1)=XXB(I,2,1)-(W2-W3)*W11SC
      XXB(I,2,2)=XXB(I,2,2)-0.5D0*(W2-W3)*TS2(2)
      XXB(I,2,3)=XXB(I,2,3)-W2*(TS2(5)+0.5D0*TS2(3))
     1                     +W3*(TS2(5)-0.5D0*TS2(1))
      XXB(I,3,1)=XXB(I,3,1)-W2*W11S2-W3*W11C2
      XXB(I,3,2)=XXB(I,3,2)-0.5D0*(W2*TS2(1)+W3*TS2(3))
      XXB(I,3,3)=XXB(I,3,3)-W2*(TS2(4)+0.5D0*TS2(2))
     1                     -W3*(TS2(6)-0.5D0*TS2(2))
C
      XDXA(I,1)=XDXA(I,1)+W2*(TS3(5)+TS3(3))+W3*(TS3(1)-TS3(5))
      XDXA(I,2)=XDXA(I,2)-W2*TS2(9)-W3*TS2(7)
      XDXA(I,3)=XDXA(I,3)-TS2(8)*(W2+W3)
C
      XDXB(I,1)=XDXB(I,1)+W2*(TS3(2)+TS3(4))-W3*(TS3(2)-TS3(6))
      XDXB(I,2)=XDXB(I,2)-TS2(8)*(W2+W3)
      XDXB(I,3)=XDXB(I,3)-W2*TS2(7)-W3*TS2(9)
C
      XDDXA(I)=XDDXA(I)+2.0D0*(W2*(TS3(12)-TS3(8))+W3*(TS3(8)+TS3(10)))
      XDDXB(I)=XDDXB(I)+2.0D0*(W2*(TS3(11)-TS3(7))+W3*(TS3(9)+TS3(11)))
C
      XAX(I,1)=XXA(I,2,3)-XXA(I,3,2)
      XAX(I,2)=XXA(I,3,1)-XXA(I,1,3)
      XAX(I,3)=XXA(I,1,2)-XXA(I,2,1)
C
      XBX(I,1)=XXB(I,2,3)-XXB(I,3,2)
      XBX(I,2)=XXB(I,3,1)-XXB(I,1,3)
      XBX(I,3)=XXB(I,1,2)-XXB(I,2,1)
C
C     INSERT GENERALISED FORCE CALCULATION
C
      VIFA(I)=(EIM*(SK2(3)+0.5D0*SK2(2))+ED2*SK2(6)-ED3*SK2(5)
     1        -EDP*SK3(4)/ZL2-GJ*SK3(6))/ZL3
C
      VIFB(I)=(EIM*(-SK2(4)+0.5D0*SK2(1))+ED2*SK2(5)+ED3*SK2(6)
     1        +EDP*SK3(3)/ZL2+GJ*SK3(5))/ZL3
C
      VIFA(I)=VIFA(I)/CON
      VIFB(I)=VIFB(I)/CON
C
   80 CONTINUE
C
      IF(IOUT.EQ.1) GO TO 85
      WRITE(6,6000)
      WRITE(6,6001) S
      WRITE(6,6000)
      WRITE(6,6001) SK
 6000 FORMAT('0',10X,'DEBUGGING OUTPUT FROM FINDTW'/)
 6001 FORMAT(' ',1P10E13.6)
   85 CONTINUE
C
C
C     ZERO OUT SUMS FOR TWIST EQUATIONS
C
      DO 90 II=1,139
      S(II)=DZERO
   90 CONTINUE
C
      DO 95 II=1,28
      SK(II)=DZERO
   95 CONTINUE
C
C
  100 CONTINUE
C
C     CONSTRUCT TWIST EQUATION
C
      DO 180 I=1,NTW
C
      CDI=CD(I)
C
      W12S2=D12S2(I)
      W12SC=D12SC(I)
      W12C2=D12C2(I)
C
      IF(NKB.EQ.0) GO TO 150
C
      DO 105 II=1,12
      TS2(II)=DZERO
  105 CONTINUE
C
      DO 140 J=1,NKB
C
      AJ=A(J)
      ADJ=AD(J)
      BJ=B(J)
      BDJ=BD(J)
C
      W22S2=D22S2(I,J)/ZL
      W22SC=D22SC(I,J)/ZL
      W22C2=D22C2(I,J)/ZL
C
      WK22S=DK22S(I,J)
      WK22C=DK22C(I,J)
C
      DO 116 II=1,7
      SK3(II)=DZERO
  116 CONTINUE
C
      DO 117 II=13,22
      TS2(II)=DZERO
  117 CONTINUE
C
      DO 118 II=1,14
      TS3(II)=DZERO
  118 CONTINUE
C
      DO 120 L=1,NKB
C
      AL=A(L)
      ADL=AD(L)
      BL=B(L)
      BDL=BD(L)
C
      W31S2=D31S2(I,J,L)/ZL2
      W31SC=D31SC(I,J,L)/ZL2
      W31C2=D31C2(I,J,L)/ZL2
C
      W32=D32(I,J,L)/ZL2
C
      WK31S=DK31S2(I,J,L)
      WK31C=DK31C2(I,J,L)
      WK33=DK33(I,J,L)
      WK34=DK34(I,J,L)
C
      TS3(1)=TS3(1)+AL*W31S2
      TS3(2)=TS3(2)+AL*W31SC
      TS3(3)=TS3(3)+AL*W31C2
C
      TS3(4)=TS3(4)+BL*W31S2
      TS3(5)=TS3(5)+BL*W31SC
      TS3(6)=TS3(6)+BL*W31C2
C
      TS3(7)=TS3(7)+ADL*W31S2
      TS3(8)=TS3(8)+ADL*W31SC
      TS3(9)=TS3(9)+ADL*W31C2
C
      TS3(10)=TS3(10)+BDL*W31S2
      TS3(11)=TS3(11)+BDL*W31SC
      TS3(12)=TS3(12)+BDL*W31C2
C
      TS3(13)=TS3(13)+AL*W32
      TS3(14)=TS3(14)+BL*W32
C
      SK3(1)=SK3(1)+AL*WK31S
      SK3(2)=SK3(2)+BL*WK31S
      SK3(3)=SK3(3)+BL*WK31C
      SK3(4)=SK3(4)+AL*WK33
      SK3(5)=SK3(5)+BL*WK33
      SK3(6)=SK3(6)+AL*WK34
      SK3(7)=SK3(7)+BL*WK34
C
      IF(I.GT.1) GO TO 120
C
      W21S2=D21S2(J,L)
      W21SC=D21SC(J,L)
      W21C2=D21C2(J,L)
C
      TS2(13)=TS2(13)+AL*W21S2
      TS2(14)=TS2(14)+AL*W21SC
      TS2(15)=TS2(15)+AL*W21C2
C
      TS2(16)=TS2(16)+BL*W21S2
      TS2(17)=TS2(17)+BL*W21SC
      TS2(18)=TS2(18)+BL*W21C2
C
      TS2(19)=TS2(19)+ADL*W21S2
      TS2(20)=TS2(20)+ADL*W21SC
      TS2(21)=TS2(21)+ADL*W21C2
C
      TS2(22)=TS2(22)+BDL*W21SC
C
C
C
  120 CONTINUE
C
C     BETU2P
C
      TS2(1)=TS2(1)+AJ*W22S2
      TS2(2)=TS2(2)+AJ*W22SC
      TS2(3)=TS2(3)+AJ*W22C2
C
C     BETU3P
C
      TS2(4)=TS2(4)+BJ*W22S2
      TS2(5)=TS2(5)+BJ*W22SC
      TS2(6)=TS2(6)+BJ*W22C2
C
C     BETU2PD
C
      TS2(7)=TS2(7)+ADJ*W22S2
      TS2(8)=TS2(8)+ADJ*W22SC
      TS2(9)=TS2(9)+ADJ*W22C2
C
C     BETU3PD
C
      TS2(10)=TS2(10)+BDJ*W22S2
      TS2(11)=TS2(11)+BDL*W22SC
      TS2(12)=TS2(12)+BDJ*W22C2
C
C     BETU2PU2P
      TS3(15)=TS3(15)+AJ*TS3(1)
      TS3(16)=TS3(16)+AJ*TS3(2)
      TS3(17)=TS3(17)+AJ*TS3(3)
C
C     BETU2PU3P
C
      TS3(18)=TS3(18)+AJ*TS3(4)
      TS3(19)=TS3(19)+AJ*TS3(5)
      TS3(20)=TS3(20)+AJ*TS3(6)
C
C     BETU3PU3P
C
      TS3(21)=TS3(21)+BJ*TS3(4)
      TS3(22)=TS3(22)+BJ*TS3(5)
      TS3(23)=TS3(23)+BJ*TS3(6)
C
C     BETU2PU2PD
C
      TS3(24)=TS3(24)+AJ*TS3(7)
      TS3(25)=TS3(25)+AJ*TS3(8)
      TS3(26)=TS3(26)+AJ*TS3(9)
C
C     BETU2PU3PD
C
      TS3(27)=TS3(27)+AJ*TS3(10)
      TS3(28)=TS3(28)+AJ*TS3(11)
      TS3(29)=TS3(29)+AJ*TS3(12)
C
C     BETU3PU2PD
C
      TS3(30)=TS3(30)+BJ*TS3(7)
      TS3(31)=TS3(31)+BJ*TS3(8)
      TS3(32)=TS3(32)+BJ*TS3(9)
C
C     BETU3PU3PD
C
      TS3(33)=TS3(33)+BJ*TS3(10)
      TS3(34)=TS3(34)+BJ*TS3(11)
      TS3(35)=TS3(35)+BJ*TS3(12)
C
C     BETU2PDU2PD
C
      TS3(36)=TS3(36)+ADJ*TS3(7)
      TS3(37)=TS3(37)+ADJ*TS3(8)
      TS3(38)=TS3(38)+ADJ*TS3(9)
C
C     BETU2PDU3PD
C
      TS3(39)=TS3(39)+ADJ*TS3(10)
      TS3(40)=TS3(40)+ADJ*TS3(11)
      TS3(41)=TS3(41)+ADJ*TS3(12)
C
C     BETU3PDU3PD
C
      TS3(42)=TS3(42)+BDJ*TS3(10)
      TS3(43)=TS3(43)+BDJ*TS3(11)
      TS3(44)=TS3(44)+BDJ*TS3(12)
C
C     LOAD DELTA COUPLING MATRICES
C
      DLAC(J,I)=DLAC(J,I)+0.5D0*TS3(14)*(W2+W3)
      DLBC(J,I)=DLBC(J,I)+0.5D0*TS3(13)*(W2+W3)
C
C     INTERNAL GENERALISED FORCE FOR TWIST EQUATION
C
      SK2(1)=SK2(1)+AJ*WK22S
      SK2(2)=SK2(2)+BJ*WK22S
      SK2(3)=SK2(3)+AJ*WK22C
      SK2(4)=SK2(4)+BJ*WK22C
C
      SK3(9)=SK3(9)+AJ*SK3(1)
      SK3(10)=SK3(10)+BJ*SK3(2)
      SK3(11)=SK3(11)+AJ*SK3(3)
C
      SK3(12)=SK3(12)+BJ*SK3(4)
      SK3(13)=SK3(13)+AJ*SK3(5)
C
      SK3(14)=SK3(14)+BJ*SK3(6)
      SK3(15)=SK3(15)+AJ*SK3(7)
C
      SK3(20)=DZERO
      SK3(21)=DZERO
C
      DO 130 L=1,NTW
      CL=C(L)
C
      SK3(20)=SK3(20)+CL*DK32S(I,L,J)
      SK3(21)=SK3(21)+CL*DK32C(I,L,J)
C
  130 CONTINUE
C
      SK3(16)=SK3(16)+AJ*SK3(20)
      SK3(17)=SK3(17)+BJ*SK3(20)
      SK3(18)=SK3(18)+AJ*SK3(21)
      SK3(19)=SK3(19)+BJ*SK3(21)
C
C     CONSTRUCT BENDING TERMS FOR SYSTEM EQUATIONS - ONE TIME ONLY
C
      IF(I.GT.1) GO TO 140
C
C     U2P
      W11S2=D11S2(J)
      W11SC=D11SC(J)
      W11C2=D11C2(J)
C
      TS1(1)=TS1(1)+AJ*W11S2
      TS1(2)=TS1(2)+AJ*W11SC
      TS1(3)=TS1(3)+AJ*W11C2
C
C     U3P
C
      TS1(4)=TS1(4)+BJ*W11S2
      TS1(5)=TS1(5)+BJ*W11SC
      TS1(6)=TS1(6)+BJ*W11C2
C
C     U2PD
C
      TS1(7)=TS1(7)+ADJ*W11S2
      TS1(8)=TS1(8)+ADJ*W11SC
      TS1(9)=TS1(9)+ADJ*W11C2
C
C     U3PD
C
      TS1(10)=TS1(10)+BDJ*W11S2
      TS1(11)=TS1(11)+BDJ*W11SC
      TS1(12)=TS1(12)+BDJ*W11C2
C
C     TWO DIMENSIONAL SUMS
C
C     U2PU2P
C
      TS2(23)=TS2(23)+AJ*TS2(13)
      TS2(24)=TS2(24)+AJ*TS2(14)
      TS2(25)=TS2(25)+AJ*TS2(15)
C
C     U2PU3P
C
      TS2(26)=TS2(26)+BJ*TS2(13)
      TS2(27)=TS2(27)+BJ*TS2(14)
      TS2(28)=TS2(28)+BJ*TS2(15)
C
C     U3PU3P
C
      TS2(29)=TS2(29)+BJ*TS2(16)
      TS2(30)=TS2(30)+BJ*TS2(17)
      TS2(31)=TS2(31)+BJ*TS2(18)
C
C     U2PU2PD
C
      TS2(32)=TS2(32)+ADJ*TS2(13)
      TS2(33)=TS2(33)+ADJ*TS2(14)
      TS2(34)=TS2(34)+ADJ*TS2(15)
C
C     U3PU3PD
C
      TS2(35)=TS2(35)+BDJ*TS2(16)
      TS2(36)=TS2(36)+BDJ*TS2(17)
      TS2(37)=TS2(37)+BDJ*TS2(18)
C
C     U3PU2PD
C
      TS2(38)=TS2(38)+ADJ*TS2(16)
      TS2(39)=TS2(39)+ADJ*TS2(17)
      TS2(40)=TS2(40)+ADJ*TS2(18)
C
C     U2PU3PD
C
      TS2(41)=TS2(41)+BDJ*TS2(13)
      TS2(42)=TS2(42)+BDJ*TS2(14)
      TS2(43)=TS2(43)+BDJ*TS2(15)
C
C     U2PDU2PDSC
      TS2(44)=TS2(44)+ADJ*TS2(20)
C     U3PDU3PDSC
      TS2(45)=TS2(45)+BDJ*TS2(22)
C     U2PDU3PDS2
      TS2(46)=TS2(46)+BDJ*TS2(19)
C     U2PDU3PDC2
      TS2(47)=TS2(47)+BDJ*TS2(21)
C
C
C
  140 CONTINUE
C
C
  150 CONTINUE
C
C     CALCULATE TWIST EQUATION BASIC ARRAYS
C
      XXC(I,1,1)=XXC(I,1,1)+(W2-W3)*(TS3(17)-TS3(15)+TS3(22)-TS3(16))
      XXC(I,1,2)=XXC(I,1,2)+W2*(TS2(4)+TS2(2))+W3*(TS2(6)-TS2(2))
      XXC(I,1,3)=XXC(I,1,3)-W2*(TS2(5)+TS2(3))+W3*(TS2(5)-TS2(1))
      XXC(I,2,1)=XXC(I,2,1)+W2*(TS2(2)-TS2(6))-W3*(TS2(2)+TS2(4))
      XXC(I,2,2)=XXC(I,2,2)-(W2-W3)*(W12SC-TS3(16)+0.5D0*(TS3(20)
     1                                 -TS3(18)))
      XXC(I,2,3)=XXC(I,2,3)+W2*(W12C2-0.5D0*(TS3(17)+TS3(23)))
     1                     +W3*(W12S2-0.5D0*(TS3(15)+TS3(21)))
      XXC(I,3,1)=XXC(I,3,1)+W2*(-TS2(5)+TS2(1))+W3*(TS2(5)+TS2(3))
      XXC(I,3,2)=XXC(I,3,2)-W2*(W12S2-0.5D0*(TS3(15)+TS3(21)))
     1                     -W3*(W12C2-0.5D0*(TS3(17)+TS3(23)))
      XXC(I,3,3)=XXC(I,3,3)+(W2-W3)*(W12SC-TS3(22)
     1                             -0.5D0*(TS3(20)-TS3(18)))
C
      XDXC(I,1)=XDXC(I,1)-W2*(TS3(26)+TS3(33)+TS3(28)+TS3(31))
     1                   +W3*(TS3(28)+TS3(31)-TS3(24)-TS3(35))
      XDXC(I,2)=XDXC(I,2)+W2*(TS2(11)+TS2(9))+W3*(TS2(11)-TS2(7))
      XDXC(I,3)=XDXC(I,3)+W2*(TS2(10)+TS2(8))+W3*(TS2(12)-TS2(8))
C
      XDDXC(I)=XDDXC(I)+W2*(TS3(37)-TS3(43)-TS3(41)+TS3(39))
     1                 +W3*(TS3(43)-TS3(37)+TS3(41)-TS3(39))
C
      XCX(I,1)=XXC(I,2,3)-XXC(I,3,2)
      XCX(I,2)=XXC(I,3,1)-XXC(I,1,3)
      XCX(I,3)=XXC(I,1,2)-XXC(I,2,1)
C
C
      DO 160 J=1,NTW
      DLCC(I,J)=DLCC(I,J)+(W2+W3)*D23(I,J)
C
      CJ=C(J)
C
      SK2(5)=SK2(5)+CJ*DK23(I,J)
      SK2(6)=SK2(6)+CJ*DK24(I,J)
C
  160 CONTINUE
C
      VIFC(I)=(EIM*(SK3(10)-SK3(9)+SK3(11))
     1        +ED2*(SK2(2)+SK2(3)-SK3(16)+SK3(19))
     2        -ED3*(SK2(1)-SK2(4)+SK3(17)+SK3(18))
     3        +EDP*(SK2(5)+(SK3(12)-SK3(13))/ZL2)
     4        +GJ*(SK2(6)*ZL2+SK3(14)-SK3(15)))/ZL3
C
C
      VIFC(I)=VIFC(I)+CDMP(I)*CDI
      VIFC(I)=VIFC(I)/CON
C
C     CONSTRUCT TERMS FOR SYSTEM EQUATIONS
C
C     PHID
C
      TS1(13)=TS1(13)+CDI*W12S2
      TS1(14)=TS1(14)+CDI*W12SC
      TS1(15)=TS1(15)+CDI*W12C2
C
C     TWO DIMENSIONAL TERMS
C
C     PHIDU2P
C
      TS2(48)=TS2(48)+CDI*TS2(1)
      TS2(49)=TS2(49)+CDI*TS2(2)
      TS2(50)=TS2(50)+CDI*TS2(3)
C
C     PHIDU3P
C
      TS2(51)=TS2(51)+CDI*TS2(4)
      TS2(52)=TS2(52)+CDI*TS2(5)
      TS2(53)=TS2(53)+CDI*TS2(6)
C
C     PHIDU2PD
C
      TS2(54)=TS2(54)+CDI*TS2(7)
      TS2(55)=TS2(55)+CDI*TS2(8)
      TS2(56)=TS2(56)+CDI*TS2(9)
C
C     PHIDU3PD
C
      TS2(57)=TS2(57)+CDI*TS2(10)
      TS2(58)=TS2(58)+CDI*TS2(11)
      TS2(59)=TS2(59)+CDI*TS2(12)
C
C     THREE DIMENSIONAL TERMS
C
C     PHIDU2PU2P
C
      TS3(45)=TS3(45)+CDI*TS3(15)
      TS3(46)=TS3(46)+CDI*TS3(16)
      TS3(47)=TS3(47)+CDI*TS3(17)
C
C     PHIDU2PU3P
C
      TS3(48)=TS3(48)+CDI*TS3(18)
      TS3(49)=TS3(49)+CDI*TS3(19)
      TS3(50)=TS3(50)+CDI*TS3(20)
C
C     PHIDU3PU3P
C
      TS3(51)=TS3(51)+CDI*TS3(21)
      TS3(52)=TS3(52)+CDI*TS3(22)
      TS3(53)=TS3(53)+CDI*TS3(23)
C
C     PHIDU2PU2PD
C
      TS3(54)=TS3(54)+CDI*TS3(24)
      TS3(55)=TS3(55)+CDI*TS3(25)
      TS3(56)=TS3(56)+CDI*TS3(26)
C
C     PHIDU2PU3PD
C
      TS3(57)=TS3(57)+CDI*TS3(27)
      TS3(58)=TS3(58)+CDI*TS3(28)
      TS3(59)=TS3(59)+TS3(29)
C
C     PHIDU3PU2PD
C
      TS3(60)=TS3(60)+CDI*TS3(30)
      TS3(61)=TS3(61)+CDI*TS3(31)
      TS3(62)=TS3(62)+CDI*TS3(32)
C
C     PHIDU3PU3PD
C
      TS3(63)=TS3(63)+CDI*TS3(33)
      TS3(64)=TS3(64)+CDI*TS3(34)
      TS3(65)=TS3(65)+CDI*TS3(35)
C
C
C
  180 CONTINUE
C
C     AUGMENT SYSTEM MATRICES
C
      XX(1,1)=XX(1,1)+W2*(TS2(29)+TS2(25)+2.0D0*TS2(27))
     1               +W3*(TS2(23)+TS2(31)-2.0D0*TS2(27))
      XX(1,2)=XX(1,2)-W2*(TS1(3)+TS1(5))-W3*(TS1(1)-TS1(5))
      XX(1,3)=XX(1,3)-W2*(TS1(2)+TS1(4))+W3*(TS1(2)-TS1(6))
      XX(2,1)=XX(1,2)
      XX(2,2)=XX(2,2)+W2*(D01C2-TS2(31)-TS2(27))
     1               +W3*(D01S2-TS2(23)+TS2(27))
      XX(2,3)=XX(2,3)+W2*(D01SC-0.5D0*(TS2(24)+TS2(30)+TS2(26)+TS2(28)))
     1               -W3*(D01SC-0.5D0*(TS2(24)+TS2(30)-TS2(26)-TS2(28)))
      XX(3,1)=XX(1,3)
      XX(3,2)=XX(2,3)
      XX(3,3)=XX(3,3)+W2*(D01S2-TS2(29)-TS2(27))
     1               +W3*(D01C2-TS2(31)+TS2(27))
C
C
C
      XXD(1,1)=XXD(1,1)+W2*(TS2(35)+TS2(34)+TS2(42)+TS2(39)
     1                     +TS3(50)-TS3(48)+TS3(52)-TS3(46))
     2                 +W3*(TS2(32)+TS2(37)-TS2(42)-TS2(39)
     3                     -TS3(53)+TS3(46)-TS3(52)+TS3(46))
      XXD(1,2)=XXD(1,2)+W2*(TS2(51)+TS2(49))+W3*(TS2(53)-TS2(49))
      XXD(1,3)=XXD(1,3)-W2*(TS2(52)+TS2(50))-W3*(TS2(48)-TS2(52))
      XXD(2,1)=XXD(2,1)-W2*(TS1(9)+TS1(11)-TS2(49)+TS2(53))
     1                 -W3*(TS1(7)-TS1(11)+TS2(51)+TS2(49))
      XXD(2,2)=XXD(2,2)-W2*(TS2(34)+0.5D0*(TS2(42)+TS2(39))
     1                     +TS1(14)-TS3(46)-0.5D0*(TS3(50)-TS3(48)))
     2                 -W3*(TS2(32)-0.5D0*(TS2(42)+TS2(39))
     3                     -TS1(14)+TS3(46)+0.5D0*(TS3(50)-TS3(48)))
      XXD(2,3)=XXD(2,3)-W2*(TS2(36)+0.5D0*(TS2(43)+TS2(40))
     1                     -TS1(15)+0.5D0*(TS3(47)+TS3(53)))
     2                 +W3*(TS2(36)-0.5D0*(TS2(41)+TS2(38))
     3                     +TS1(13)-0.5D0*(TS3(45)+TS3(51)))
      XXD(3,1)=XXD(3,1)-W2*(TS1(10)+TS1(8)-TS2(48)+TS2(52))
     1                 +W3*(TS1(8)-TS1(10)+TS2(50)+TS2(52))
      XXD(3,2)=XXD(3,2)-W2*(TS2(33)+0.5D0*(TS2(41)+TS2(38))
     1                     +TS1(13)-0.5D0*(TS3(45)+TS3(51)))
     2                 +W3*(TS2(33)-0.5D0*(TS2(43)+TS2(40))
     3                     -TS1(15)+0.5D0*(TS3(47)+TS3(53)))
      XXD(3,3)=XXD(3,3)-W2*(TS2(35)+0.5D0*(TS2(42)+TS2(39))
     1                     -TS1(14)+TS3(52)+0.5D0*(TS3(50)-TS3(48)))
     2                 -W3*(TS2(37)-0.5D0*(TS2(42)+TS2(39))
     3                     +TS1(14)-TS3(52)-0.5D0*(TS3(50)-TS3(48)))
C
C
C
      XXDD(1)=XXDD(1)-W2*(TS2(45)-TS2(44)+TS2(47)-TS2(46)
     1                   +2.0D0*(TS3(54)+TS3(65)-TS3(58)-TS3(61)))
     2               +W3*(TS2(47)-TS2(46)+TS2(45)-TS2(44)
     3                   -2.0D0*(TS3(63)+TS3(56)+TS3(58)+TS3(61)))
      XXDD(2)=XXDD(2)+2.0D0*(W2*(TS2(54)-TS2(58))+W3*(TS2(56)+TS2(58)))
      XXDD(3)=XXDD(3)+2.0D0*(W2*(TS2(59)-TS2(55))+W3*(TS2(55)+TS2(57)))
C
C
      IF(IOUT.EQ.1) GO TO 190
      WRITE(6,6000)
      WRITE(6,6001) S
      WRITE(6,6000)
      WRITE(6,6001) SK
      WRITE(6,6000)
      WRITE(6,6001) XX
      WRITE(6,6001) XXD
      WRITE(6,6001) XXDD
  190 CONTINUE
C
C
C
      RETURN
C
C
      END
      SUBROUTINE FNDALP
C
C     'FINDS' AND 'FNDALP' OPERATE AS A UNIT.  THEIR PURPOSE IS TO
C     COMPUTE  0,1,2,3, AND 4, ORDER MASS TERMS INVOLVED IN
C     EQUATIONS OF MOTION FOR FLEXIBLE ELEMENTS AND CENTRAL BODY
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CENVRN/ GGMOM(3),SPMOM(3),ADMOM(3)
C
      COMMON/CFNALP/ SCO,CIZO(3,3),CIYO(3,3),DONA(3,10),DONB(3,10)
     .              ,CDAMP(3,10)
C
      COMMON/CODPLY/ STANG,ANGTOL
C
      COMMON/COMALP/ SZ02(10),SZ03(10),SZ04(10),SZ12(3,10),SZ13(3,10),
     .               SZ14(3,10),SZ15(3,10),SZ16(3,10),SZ21(9,10),
     .               SZ22(9,10),SZ23(9,10),SZ25(9,10),
     .               SZ26(9,10),SZ27(9,10),SZ28(9,10),SZ31(27,10),
     .               SZ32(27,10),SZ33(27,10),SZ34(27,10),SZ35(27,10),
     .               SZ41(81,10),SZ42(81,10),SZ43(81,10)
C
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/DRGCOM/ ER(3),HUBCDA(3),HUBCP(3),UJD0,HUBF(3),HUBM(3),IDRAG
C
      COMMON/IODPLY/ ISDPLY,IRAXIS,ISAXIS,NCROSS,NPRINT
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/OUTFOR/ SUMMTS(3)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/RPOOL4/ CIYZ(3,3),FCMT(3,3),ZBCD(3)
C
      COMMON/RPOOL5/ CKMAT(3,3,10),FM2(3,3)
C
      COMMON/RPOOL6/ FM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
      COMMON/RPOOL7/ X1A(3),X1B(3),X2A(3),X3B(3),X1AX(3,3),X1BX(3,3),
     .               X2AX(3,3),X3BX(3,3)
C
      COMMON/RPOOL8/ SZ01(10),SZ11(3,10),SZ24(9,10)
C
      COMMON/RPOOL9/ RT1(7),RT2(10,9),ALP(7,7),GAM(10,9,7),DEL(10,9,9)
C
      COMMON/SUNVTR/ SSSLLL(3)
C
C     MODIFICATION TO FNDALP
      COMMON/HVCOMP/YBAR(3),YBARD(3),CIN(3,3),CID,CIND(3)
C
C
      DIMENSION SUMMBP(3),SUMFB(3),SUM(40),S(200),YIYI(3),DUM1(3,3),
     .          DUM2(3,3),DIY(3),YID(3),OMK(3),FPAN(3),FPBN(3),
     .          FSDTKA(3),FSDTKB(3),CCON(7,3),XXZ(3,3),ZMG(7),FGA(3,10),
     .          FGB(3,10),ZBK(3),YBZM(3),DXXD(3,3),XXDD(3,3),
     .          DXXDD(3,3),XXY(3,3),XIZ(3,3),XIY(3,3),ZKD(3),FB(3),XI(3)
     .         ,DXI(3),DXIDD(3),XIDD(3),XX(3,3),XID(3),CON3(7,3),
     .          ADCON(7,3),DCON(7,3),XXD(3,3),SSUMFB(3)
C
      DIMENSION XZZ(3,3)
C
C
       LTAP5 = 6
C
C                       ZERO ARRAYS
C
        DO 2050 I=1,7
      RT1(I)=0.D0
      ZMG(I)=0.0D0
         DO 2050 J=1,7
 2050  ALP(I,J) = 0.0D0
C
C
C
C                       CALL FNYBCM
C
      CALL FNYBCM
C
        NN = 0
C
C                  CALCULATE DUM1,DUM2 USING CIZO AND FM1
C
       CALL MPYMAT(FM1,CIZO,FM1,2,2,DUM1,DUM2)
C
C                       CALCULATE CIY AND CIZ
C
       DO 300 I=1,3
       YID(I) = 0.0D0
       DO 300 J=1,3
       CIYZ(I,J) = 0.0D0
       CIY(I,J) =  CIYO(I,J) + DUM2(I,J)
  300  CIZ(I,J) =  CIZO(I,J)
       SZ1 = 0.0D0
       SZ2 = 0.0D0
       SZ3 = 0.0D0
       SY1 = 0.0D0
       SY2 = 0.0D0
       SY3 = 0.0D0
      CALL SECBD1(SY1,SY2,SY3,CIY)
      CALL JETDM1(SY1,SY2,SY3,CIY)
      CALL GIMBL1(SY1,SY2,SY3,CIY)
      CALL SAGIM1(SY1,SY2,SY3,CIY)
C
      CALL GMBLD1(SY1,SY2,SY3,SZ1,SZ2,SZ3,CIY,CIZ)
C
C     TRANSFORM SUN VECTOR TO BODY FRAME
C
       DO 707 I=1,3
       SSSUM = 0.0D0
        SSUM = 0.0D0
       DO 706 J=1,3
  706  SSUM =SSUM + SAT(I,J) * SD(J)
       DIY(I) =SSUM
      SSSLLL(I)=SSUM
       SUMMBP(I) = 0.0D0
       SSUMFB(I) = 0.0D0
      GGMOM(I)   = 0.0D0
      SPMOM(I)   = 0.0D0
      ADMOM(I)   = 0.0D0
  707 SUMFB(I)= 0.0D0
C
C                       CALL AIRDRG
C
      CALL AIRDRG(1)
C
       SUMDBP = 0.0D0
         IT = 1
        DO 804 I=1,40
  804   SUM(I) = 0.0D0
C
      IF(ISDPLY.EQ.1) CALL SUNDEP(1,DIY)
C
C                       START K LOOP
C
C
      DO 100 K=1,IK
       DO 2000 I=1,6
       DO 2000 J=1,3
       CON3(I,J) = 0.0D0
       ADCON(I,J) = 0.0D0
 2000  DCON(I,J) = 0.0D0
       NKN = NK(K)
        XLK = ZLK(K)
      IAPS=IAB + NK(K)
      IBPS=IBB + NK(K)
C
C                       ZERO DEL GAM
C
      DO 8000 I=1,9
      DO 8001 J=1,9
 8001  DEL(K,I,J) = 0.0D0
       DO 8002 J=1,7
 8002   GAM(K,I,J) = 0.0D0
      RT2(K,I)=0.0D0
 8000   CONTINUE
C
       SSUM = 0.0D0
C
C                       SET DAN (DBN) = DONA (DONB)
C
        DO 700 I=1,3
       DAN(I,K) = DONA(I,K)
       DBN(I,K) = DONB(I,K)
C
C                       SELECT K-TH CKMAT
C
        DO 700 J=1,3
  700   CMAT(I,J) = CKMAT(I,J,K)
       CM23 = CMAT(2,3)
       CM21 = CMAT(2,1)
       CM22 = CMAT(2,2)
C
C                       TEST FOR DAMPER OR ELEMENT
C
       IF(K-K1)701,701,702
C
C                       CALCULATE FOR DAMPER
C
  701  CALL MPYMAT(FM1,CMAT,DUM1,1,1,FCM,DUM1)
C
      CALL MPYMAT(CMAT,FM1,DUM1,1,3,CFMT,DUM1)
        DO 800 I=1,3
       YBZM(I) = YIZM(I,1)
        SM = 0.0D0
       SSM = 0.0D0
C
        DO 801 J=1,3
       SSM = SSM + CFMT(I,J) * YIZM(I,1) + CMAT(J,I) * ZBZK(J,K)
       FM(I,J) = FM1(I,J)
  801   SM = SM + FM1(I,J) * ZBZK(J,K)
C
       YIYI(I) = SSM
  800   YIZK(I) = YIZM(I,1) + SM
C
       GO TO 703
C
C                       CALCULATION FOR ELEMENTS
C
  702  CALL MPYMAT(FM2,CMAT,DUM1,1,1,FCM,DUM1)
C
      CALL MPYMAT(CMAT,FM2,DUM1,1,3,CFMT,DUM1)
C
       DO 802 I=1,3
       YBZM(I) = YIZM(I,2)
       SSM = 0.0D0
       SM = 0.0D0
C
       DO 803 J=1,3
       FM(I,J) = FM2(I,J)
       SSM = SSM + CFMT(I,J) * YIZM(I,2) + CMAT(J,I) * ZBZK(J,K)
  803   SM = SM + FM2(I,J) *ZBZK(J,K)
C
       YIYI(I) = SSM
  802   YIZK(I) = YIZM(I,2) + SM
C
  703  DO 704 I=1,3
       OOSM = 0.0D0
       OSUM = 0.0D0
       DO 705 J=1,3
       OOSM = OOSM + CMAT(J,I) * ZBZK(J,K)
  705   OSUM = OSUM + FCM(J,I) *OMEG(J)
       ZBK(I) = OOSM
  704  OMK(I) = OSUM
C
       DO 4 IL =1,200
    4    S(IL) = 0.0D0
C
C                       CALL FINDS
C
      CALL FINDS(S,ZBK,OMK,K,CON3,DCON,ADCON,ZMG,FGA,FGB,YIYI,XLK,
     .           XLKP,XLKDP,XLK2,WS1,WS2,WS11,CON,ID,NN)
C
C
C    ****** DAMPER CAGED
C
C
C                       CALCULATIONS FOR MODE EQUAL ZERO
C
      DO 602 I=1,3
         XI(I) = 0.0D0
       DXI(I) = 0.0D0
       DXIDD(I) = 0.0D0
         XID(I) = 0.0D0
       XIDD(I) = 0.0D0
C
       DO 602 J=1,3
        XX(I,J)   = 0.0D0
       DXXD(I,J)  = 0.0D0
        XXD(I,J)  = 0.0D0
       XXDD(I,J)  = 0.0D0
  602 DXXDD(I,J)  = 0.0D0
       IF(NKN)600,600,601
C
  600 XI(1)=XLK * SZ01(K)
       DXI(1)   =         XLKP * SZ02(K)
      DXIDD(1)  =         XLKDP* SZ02(K)
        XID(1)  = DXI(1)
       XIDD(1)  = DXIDD(1)
       XX(1,1)  = XLK2 * SZ03(K)
       DXXD(1,1)  = XLK2 * WS1 * SZ04(K)
        XXD(1,1)  = DXXD(1,1)
C
          GO TO 25
C
C                       CALCULATIONS FOR MODES NOT EQUAL ZERO
C
  601  XI(1)   = XLK * SZ01(K) - 0.5D0 * S(21)/XLK
       XI(2)   = S(1)
       XI(3)   = S(4)
       XID(1) = -S(22)/XLK
       XID(2)   = S(5)
       XID(3)   = S(6)
       XIDD(1) = -S(24)/XLK
       XIDD(2) = 0.0D0
       XIDD(3) = 0.0D0
       GO TO (18,19),ID
   18  DXI(1)   =         XLKP *SZ02(K) -0.5D0 * WS1 * S(23)/XLK
       DXI(2)   = WS1 * S(2)
       DXI(3)   = WS1 * S(7)
       DXIDD(1)  =         XLKDP * SZ02(K)-0.5D0*WS2 *S(23)/XLK
     1     -0.5D0 * WS11* S(25)/XLK- 2.0D0 * WS1* S(26)/XLK
       DXIDD(2)  = WS2 * S(2) + WS11* S(3) + WS1 * S(8)
       DXIDD(3)  = WS2 * S(7) + WS11* S(9) + WS1 * S(10)
C
        DO 20 I=1,3
       XID(I) = XID(I) +  DXI(I)
   20   XIDD(I) = XIDD(I) + DXIDD(I)
C
   19 CONTINUE
       XX(1,1)   = XLK2 * SZ03(K) - S(29) + 0.25*(S(53)+ S(54))/XLK2
       XX(1,2)   = XLK * S(11) - 0.5D0 * S(161)/XLK
       XX(2,1)   = XX(1,2)
       XX(1,3)   = XLK * S(12) -0.5D0* S(162)/XLK
       XX(3,1) = XX(1,3)
       XX(2,2) = S(30)
       XX(2,3) = S(32)
       XX(3,2) = S(32)
       XX(3,3) = S(31)
       XXD(1,1)  = -S(33) + 0.5D0* (S(55)  + S(56))/XLK2
       XXD(1,2)  = XLK * S(13) - 0.5D0 *  S(163)/XLK
       XXD(1,3)  = XLK * S(14) - 0.5D0 *  S(164)/XLK
       XXD(2,1) = -S(165)/XLK
       XXD(2,2)  = S(34)
       XXD(2,3)  = S(35)
       XXD(3,1) = -S(166)/XLK
       XXD(3,2) = S(36)
       XXD(3,3) = S(37)
       GO TO (21,22),ID
   21  DXXD(1,1)   =  WS1 *(XLK2 * SZ04(K)- 0.5D0 *(S( 47)+ S( 48)))
     1        + WS1 *0.25D0 * (S(57) + S(58))/XLK2
       DXXD(1,2)   = XLKP * S(15) -0.5D0 * WS1 * S(171)/XLK
       DXXD(1,3)   = XLKP * S(16) -0.5D0 * WS1 * S(173)/XLK
       DXXD(2,1)   = XLKP * S(1)  -0.5D0 * WS1 * S(67)/XLK
       DXXD(2,2)   = WS1 * S(38)
       DXXD(2,3)   = WS1 * S(39)
       DXXD(3,1)   = XLKP* S( 4)-0.5D0* WS1 * S(68)/XLK
       DXXD(3,2)   = WS1 * S(40)
       DXXD(3,3)   = WS1 * S(41)
C
       DO 23 I=1,3
       DO 23 J=1,3
   23   XXD(I,J) = XXD(I,J) + DXXD(I,J)
C
   22 CONTINUE
       XXDD(1,2) = 0.0D0
       XXDD(1,3) = 0.0D0
       XXDD(2,1) = -S(169)/XLK
       XXDD(2,3) = 0.0D0
       XXDD(3,1) = -S(170)/XLK
       XXDD(3,2) = 0.0D0
       GO TO (24,25),ID
   24  DXXDD(1,2) = WS2 *( XLK * S(15) -0.5D0*S(171)/XLK) + WS11* (XLK *
     1        S(17) -0.5D0 *S(172)/XLK) + 2.0D0* WS1 *(XLK* S(18) -0.5D0
     1       *S(74)/XLK)
C
       DXXDD(1,3) = WS2 *( XLK * S(16)- 0.5D0*S(173)/XLK) + WS11* (XLK *
     1        S(19)-0.5D0* S(73)/XLK)+ 2.0D0*WS1*(XLK*S(20)-0.5D0*S(174)
     1        /XLK)
C
       DXXDD(2,1) =WS2* (XLK * S(1) -0.5D0* S(67)/XLK) -0.5D0* WS11/XLK
     1         * S(76)-2.0D0* WS1/XLK* S(77)
C
       DXXDD(2,3) =WS2* S(39) +WS11* S(42) +2.0D0*WS1* S(43)
C
       DXXDD(3,1) = WS2*(S(4) * XLK - 0.5D0 * S(68)/XLK)-WS11*0.5D0/XLK*
     1       S(79)-2.0D0* WS1/XLK * S(78)
C
       DXXDD(3,2) = WS2* S(40)+ WS11* S(45) +2.0D0* WS1* S(46)
C
        DO 26 I=1,3
        DO 26 J=1,3
   26    XXDD(I,J) = XXDD(I,J) + DXXDD(I,J)
C
   25 CONTINUE
C
C                       CALL SOLAR
C
      CALL SOLAR(K,NKN,XLK,DIY,SUMFB,SUMMBP,SUMDBP,FPAN,FPBN,
     .           FSDTKA,FSDTKB,NN,SSUMFB)
C
       NN = NN + 2 * NKN
C
C                       TEST ON MODE EQUAL ZERO
C
       IF(NKN)501,501,502
C
C                       CALCULATIONS FOR NON-ZERO MODES
C
  502  DO 500 I=1,NKN
       INK = I + NKN
       SSA = 0.0D0
        SSB = 0.0D0
C
       DO 5000 J=1,3
       SSA = SSA + CON3(I,J) + DCON(I,J) + ADCON(I,J)
      SSB = SSB + CON3(INK,J) + DCON(INK,J) + ADCON(INK,J)
 5000  CONTINUE
C
      RT2(K,I) = FPAN(I) -FSDTKA(I) - SSA
      RT2(K,INK) = FPBN(I) - FSDTKB(I) - SSB
       DO 500 J=1,NKN
        IJ = J + NKN
  500  DEL(K,IJ,I) = DEL(K,I,IJ)
C
      DO 1003 I=1,NKN
       INK = I + NKN
       RT2(K,I) = RT2(K,I) + FGA(I,K)
 1003   RT2(K,INK) = RT2(K,INK) + FGB(I,K)
C
C                       CALL FNDGAM
C
      CALL FNDGAM(K,NKN,YIZK)
  501  CONTINUE
       GO TO (20002,20003),IOUT
20003  CONTINUE
       WRITE (LTAP5,9602) (XI(J),XID(J),XIDD(J),J=1,3)
 9602 FORMAT(1H0,'9602',1P9E14.6)
      WRITE (LTAP5,9603) ((XX(I,J),J=1,3),I=1,3)
 9603 FORMAT(1H0,'XX=',1P9E14.6)
       WRITE (LTAP5,9604) ((XXD(I,J),J=1,3),I=1,3)
 9604 FORMAT(1H0,'XXD=',1P9E14.6)
      WRITE (LTAP5,9605) ((XXDD(I,J),J=1,3),I=1,3)
 9605 FORMAT(1H0,'XXDD=',1P9E14.6)
      WRITE (LTAP5,9006) (FPAN(I),FPBN(I),FSDTKA(I),FSDTKB(I),I=1,3)
 9006 FORMAT(4E20.8)
      WRITE(6,22000)
      WRITE(6,22001) (FGA(I,K),I=1,3)
      WRITE(6,22002)
      WRITE(6,22001) (FGB(I,K),I=1,3)
      WRITE(6,22003)
      WRITE(6,22004) (RT2(K,I),I=1,6)
22000 FORMAT('0',3X,'FGA')
22001 FORMAT('0',3X,3E20.10)
22002 FORMAT('0',3X,'FGB')
22003 FORMAT('0',3X,'RT2 IN K LOOP  FNDALP')
22004 FORMAT('0',3X,6E20.10)
20002  CONTINUE
C
C                       CALCULATIONS FOR ZERO MODE
C
C
C                       CALL SUBCON
C
      CALL SUBCON(1,K,SUM,IT,XIDD,XID,XXDD,YIZK,XXD,YID,CCON,ADCON)
C
      DO 201 I=1,3
       ZKD(I) = CMAT(I,1) * XI(1)   + CMAT(I,2)*XI(2)   + CMAT(I,3)*
     1         XI(3)
  201 CONTINUE
C
C                       ANTENNA OR DAMPER TEST
C
        IF(K-K1)50,50,51
C
C    ****** DAMPER
C
   50  SZ1 = SZ1 + CON * ZKD(1)
       SZ2 = SZ2 + CON * ZKD(2)
       SZ3 = SZ3 + CON * ZKD(3)
   51  CONTINUE
C
       DO 251 I=1,3
       DO 251 I1 = 1,3
       SS1 = 0.0D0
       SS2 = 0.0D0
       YB = YBZM(I1)
       ZB = ZBZK(I1,K)
C
       DO 270 J=1,3
       WS = FCM(I,J) * XI(J)
       SS1 = SS1 + YB * WS
  270   SS2 = SS2 + WS * ZB
C
       XIY(I,I1) = SS1
  251   DUM2(I,I1) = SS2
C
      CALL MPYMAT(FCM,XX,FCM,2,2,DUM1,XXY)
      CALL MPYMAT(DUM2,FM,DUM1,1,2,XIZ,DUM1)
C   AN ERROR IS DETECTED WHEN THE OFFSETS OF THE
C   BOOM IS INCLUDED
C   MODIFICATION IS MADE TO INCLUDE THIS SECOND ORDER
C   MATRIX
C
      ZB1=YIZK(1)
      ZB2=YIZK(2)
      ZB3=YIZK(3)
      SS1=2.0D0*SZ02(K)
C   CONSTRUCT THE OFFSET MATRIX
C
      XZZ(1,1)=SS1*ZB1*ZB1
      XZZ(1,2)=SS1*ZB1*ZB2
      XZZ(1,3)=SS1*ZB1*ZB3
      XZZ(2,1)=XZZ(1,2)
      XZZ(3,1)=XZZ(1,3)
      XZZ(2,2)=SS1*ZB2*ZB2
      XZZ(2,3)=SS1*ZB2*ZB3
      XZZ(3,2)=XZZ(2,3)
      XZZ(3,3)=SS1*ZB3*ZB3
C
C
      DO 252 I=1,3
      DO 252 J=1,3
  252  CIY(I,J)=  CIY(I,J) +CON*(XXY(I,J)+ XIY(I,J)+ XIY(J,I)
     1           + XIZ(I,J) + XIZ(J,I)+XZZ(I,J))
C
C                       TEST ON DAMPER POSITION
C
      IF (IDAMP.EQ.0) GO TO 253
C
C    ****** DAMPER UNCAGED
C
      IF(K-K1) 255,255,253
  255 CALL MPYMAT(CMAT,XX,CMAT,2,2,DUM1,XXZ)
C
        DO 256 I=1,3
       DO 256 I1=1,3
       SS1 = 0.0D0
       ZB = ZBZK(I1,K)
C
       DO 271 J=1,3
  271  SS1 = SS1 + CMAT(I,J) * XI(J) * ZB
C
  256   XIZ(I,I1) = SS1
C
      ZB1=ZBZK(1,K)
      ZB2=ZBZK(2,K)
      ZB3=ZBZK(3,K)
      SS1=2.0D0*SZ02(K)
      XZZ(1,1)=SS1*ZB1*ZB1
      XZZ(1,2)=SS1*ZB1*ZB2
      XZZ(1,3)=SS1*ZB1*ZB3
      XZZ(2,1)=XZZ(1,2)
      XZZ(3,1)=XZZ(1,3)
      XZZ(2,2)=SS1*ZB2*ZB2
      XZZ(2,3)=SS1*ZB2*ZB3
      XZZ(3,2)=XZZ(2,3)
      XZZ(3,3)=SS1*ZB3*ZB3
C
       DO 257 I=1,3
       DO 257 J=1,3
      CIZ(I,J)=CIZ(I,J)+CON*(XXZ(I,J)+XIZ(I,J)+XIZ(J,I)+XZZ(I,J))
  257 CIYZ(I,J) =CIYZ(I,J)+CON* XIY(J,I)
C
C    ****** DAMPER CAGED
C
  253 CONTINUE
       SY1 = SY1 +(FM(1,1)*ZKD(1)+ FM(1,2) *ZKD(2)+ FM(1,3)* ZKD(3)
     1  ) * CON
       SY2 = SY2 +(FM(2,1)*ZKD(1)+ FM(2,2) *ZKD(2)+ FM(2,3)* ZKD(3)
     1  ) * CON
       SY3 = SY3 +(FM(3,1)*ZKD(1)+ FM(3,2) *ZKD(2)+ FM(3,3)* ZKD(3)
     1  ) * CON
  200 CONTINUE
       GO TO (20004,20005),IOUT
20005  CONTINUE
       WRITE (LTAP5,9007) ((XXY(I,J),J=1,3),I=1,3)
 9007 FORMAT(1X,'XXY',1X,1P9E14.6)
       WRITE (LTAP5,9008) ((XIZ(I,J),J=1,3),I=1,3)
 9008 FORMAT(1X,'XIZ',1X,1P9E14.6)
      WRITE(LTAP5,9005) ((XZZ(I,J),J=1,3),I=1,3)
 9005 FORMAT(1X,'XXZ',1X,1P9E14.6)
       WRITE (LTAP5,9010) ((CIY(I,J),J=1,3),I=1,3)
 9010 FORMAT(1X,'CIY',1X,1P9E14.6)
       WRITE (LTAP5,9009) ((XIY(I,J),J=1,3),I=1,3)
 9009 FORMAT(1X,'XIY',1X,1P9E14.6)
       WRITE (LTAP5,9011) ((CIZ(I,J),J=1,3),I=1,3)
 9011 FORMAT(1X,'CIZ',1X,1P9E14.6)
      WRITE (LTAP5,9012) ((CIYZ(I,J),J=1,3),I=1,3)
 9012 FORMAT(1X,'CIYZ',1X,1P9E14.6)
20004  CONTINUE
  100 CONTINUE
C
C
C   ------ END OF K-TH LOOP
C
C
       CALL MPYMAT(FM1,CIZ,FM1,2,2,DUM1,DUM2)
C
       DO 110 I=1,3
       DO 110 J=1,3
  110   CIYZ(I,J) = CIYZ(I,J) + DUM2(I,J)
C
       ZBCD(1) = SZ1
       ZBCD(2) = SZ2
       ZBCD(3) = SZ3
C
C                       CALL DAMPER
C
      CALL DAMPER(ZMSDB,ZMDDB)
C
C                       CALL RTSIDE
C
       CALL RTSIDE(ZMG,FGA,FGB,2,K)
C
C                       CALL SUBCON
C
      CALL SUBCON(2,K,SUM,IT,XIDD,XID,XXDD,YIZK,XXD,YID,CCON,ADCON)
      GO TO (20010,20011),IOUT
20011  CONTINUE
      WRITE (LTAP5, 7347) RT1(7),ZMG(7),SUMDBP,ZMSDB,ZMDDB
 7347 FORMAT ('   RT1(7)   ZMG(7)   SUMDBP   ZMSDB   ZMDDB'/5G15.5)
      WRITE (LTAP5,9014) (FGA(1,K),FGA(2,K),FGA(3,K),FGB(1,K),FGB(2,K),
     1FGB(3,K),ZMG(K),K=1,IK)
 9014 FORMAT(7E18.8)
      WRITE (LTAP5,9000)
 9000 FORMAT(1H0,3X,'I','CCON(I,1),(I,2),(I,3), - ADCON(I,1),(I,2),(I,3)
     1'/ )
      WRITE (LTAP5,9001) (I,CCON(I,1),CCON(I,2),CCON(I,3),ADCON(I,1),
     1ADCON(I,2),ADCON(I,3),I=1,7)
 9001 FORMAT(3X,I2,6E20.8)
20010  CONTINUE
C
C
       DO 1000 I=1,6
      SSUM = 0.0D0
C
       DO 1001 J=1,3
 1001  SSUM = SSUM - CCON(I,J) - ADCON(I,J)
C
 1000  RT1(I) = SSUM + ZMG(I)
C
       RT1(7) = 0.0D0
C
      DO 1002 J=1,3
       J3 = J+3
       RT1(7) = RT1(7) - CCON(7,J)
      RT1(J)=RT1(J)+HUBF(J)+SUMFB(J)+SSUMFB(J)
      SUMMTS(J)=ZMG(J3)+SUMMBP(J)+HUBM(J)
      GGMOM(J)=ZMG(J3)
 1002 RT1(J3)=RT1(J3)+SUMMBP(J)+HUBM(J)
C
      RT1(7) = RT1(7) + ZMG(7) + SUMDBP +ZMSDB+ZMDDB
C
C                       ALP CALCULATIONS
C
       ALP(1,1) = ZMS
       ALP(1,5) = SY3
       ALP(1,6) =-SY2
       ALP(2,2) = ZMS
       ALP(2,4) =-SY3
       ALP(2,6) = SY1
       ALP(3,3) = ZMS
       ALP(3,4) = SY2
       ALP(3,5) =-SY1
       ALP(4,4) = CIY(2,2) + CIY(3,3)
       ALP(4,5) = -CIY(1,2)
       ALP(4,6) = -CIY(1,3)
       ALP(5,5) =  CIY(1,1)+ CIY(3,3)
       ALP(5,6) = -CIY(2,3)
       ALP(6,6) =  CIY(1,1)+ CIY(2,2)
C
C                       TEST ON DAMPER POSITION
C
      IF (IDAMP.EQ.0) GO TO 55
C
C                       ALP CALCULATIONS FOR DAMPER UNCAGED
C
       ALP(1,7) = FM1(1,1)* SZ3 -FM1(1,3) * SZ1
       ALP(2,7) = FM1(2,1)* SZ3 -FM1(2,3) * SZ1
       ALP(3,7) = FM1(3,1)* SZ3 -FM1(3,3) * SZ1
       ALP(4,7) = FM1(1,2)*(CIYZ(2,2)+ CIYZ(3,3))-FM1(2,2)* CIYZ(1,2)
     1           -FM1(3,2)* CIYZ(1,3)
       ALP(5,7) =-FM1(1,2)* CIYZ(2,1)+ FM1(2,2)* (CIYZ(1,1)+CIYZ(3,3))
     1           -FM1(3,2)* CIYZ(2,3)
       ALP(6,7) =-FM1(1,2)* CIYZ(3,1)- FM1(2,2)* CIYZ(3,2)
     1           +FM1(3,2)* (CIYZ(1,1) + CIYZ(2,2))
       ALP(7,7) = CIZ(1,1) + CIZ(3,3)
C
   55   DO 302 I=1,6
        I1 = I+1
       DO 302 J= I1,7
  302   ALP(J,I) = ALP(I,J)
C
C     ADD TO END OF ROUTINE
      DO 304 I=1,3
      YBAR(I)=YBCM(I)
      YBARD(I)=YID(I)
      I3=I+3
      DO 303 J=1,3
      J3=J+3
      CIN(I,J)=ALP(I3,J3)
  303 CONTINUE
  304 CONTINUE
      CID=0.0D0
      IF(IDAMP.NE.0) CID=ALP(7,7)
      CIND(1)=SUM(15)-SUM(11)
      CIND(2)=SUM(13)-SUM(12)
      CIND(3)=SUM(14)-SUM(10)
C
C     END OF MODIFICATIONS FOR FSD PROGRAM
      GO TO (20020,20021),IOUT
20021  CONTINUE
       WRITE (LTAP5,9050)
 9050  FORMAT(1H0,'ALPHA')
       WRITE (LTAP5,9444) ((ALP(I,J),J=1,7),I=1,7)
 9444 FORMAT(7E18.8)
20020  CONTINUE
      RETURN
      END
      SUBROUTINE FNDGAM(K,NKN,YIZK)
C
C     CONSTRUCTS THE COUPLING MATRIX,GAMMA,BETWEEN THE ELEMENT HIGHEST
C     DERIVATIVES AND THE SYSTEM TRANSLATIONAL AND ROTATIONAL HIGHEST
C     DERIVATIVES
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL7/ X1A(3),X1B(3),X2A(3),X3B(3),X1AX(3,3),X1BX(3,3),
     .               X2AX(3,3),X3BX(3,3)
C
      COMMON/RPOOL9/ RT1(7),RT2(10,9),ALP(7,7),GAM(10,9,7),DEL(10,9,9)
C
      DIMENSION TERM2(3),YIZK(3)
       DO 4 I=1,NKN
        INK = I+ NKN
        X1AI = X1A(I)
        X2AI = X2A(I)
       X1BI = X1B(I)
       X3BI = X3B(I)
       DO 5 J=1,3
       WS4 = X2AX(I,1)-X1AX(I,2)
       TERM2(J) = -FCM(J,1)*X2AX(I,3)+FCM(J,2)*X1AX(I,3)+FCM(J,3)* WS4
        GAM(K,INK,J) = FCM(J,1) * X1BI + FCM(J,3) * X3BI
    5  GAM(K,I,J) = FCM(J,1)* X1AI   + FCM(J,2) * X2AI
       WS1 = FCM(2,1)* X1AI + FCM(2,2)* X2AI
       WS2 = FCM(1,1)* X1AI + FCM(1,2)* X2AI
       WS3 = FCM(3,1)* X1AI + FCM(3,2)* X2AI
       GAM(K,I,4) =(-YIZK(3)* WS1 + YIZK(2)* WS3) + TERM2(1)
       GAM(K,I,5) =( YIZK(3)* WS2 - YIZK(1)* WS3) + TERM2(2)
       GAM(K,I,6) =(-YIZK(2)* WS2 + YIZK(1)* WS1) + TERM2(3)
       WS4 = X1BX(I,3) - X3BX(I,1)
       X3B2= X3BX(I,2)
       X1B2= X1BX(I,2)
       DO 6 J=1,3
    6   TERM2(J)= FCM(J,1)*X3B2 +FCM(J,2)* WS4 - FCM(J,3)* X1B2
        WS1 = FCM(2,1)* X1BI + FCM(2,3) * X3BI
        WS2 = FCM(1,1)* X1BI + FCM(1,3) * X3BI
        WS3 = FCM(3,1)* X1BI + FCM(3,3) * X3BI
       GAM(K,INK,4)= -YIZK(3)* WS1 +YIZK(2) * WS3 + TERM2(1)
       GAM(K,INK,5)=  YIZK(3)* WS2 -YIZK(1) * WS3 + TERM2(2)
       GAM(K,INK,6)= -YIZK(2)* WS2 +YIZK(1) * WS1 + TERM2(3)
      IF (IDAMP.EQ.0) GO TO 4
       IF(K-K1)7,7,8
    7   ZB3 = ZBZK(3,K)
       ZB1 = ZBZK(1,K)
       GAM(K,I,7) = ZB3    *(CMAT(1,1)* X1AI+CMAT(1,2)* X2AI) -
     1ZB1*(CMAT(3,1)*X1AI+CMAT(3,2)*X2AI)-CMAT(2,1)*X2AX(I,3)+CMAT(2,2)
     2*X1AX(I,3)+CMAT(2,3)*(X2AX(I,1)-X1AX(I,2))
       GAM(K,INK,7)=ZB3    *(CMAT(1,1)* X1BI+CMAT(1,3)* X3BI) -
     1ZB1*(CMAT(3,1)*X1BI+CMAT(3,3)*X3BI)+CMAT(2,1)*X3BX(I,2)+CMAT(2,2)
     2*(X1BX(I,3)-X3BX(I,1))-CMAT(2,3)*X1BX(I,2)
       GO TO 4
    8  GAM(K,I,7) = 0.0D0
       GAM(K,INK,7)=0.0D0
    4 CONTINUE
      RETURN
      END
      SUBROUTINE FNDINT
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      REAL*4 D21,D22,D31,DI01,DI11,DI12,DI21,DI22,DI31,DA
C
      REAL*4 DK21,DK22,DK23,DK24,DK31,DK32,DK33,DK34
C
      REAL*4 TWI,ST,CT,S2,SC,C2,S2T,C2T
C
      REAL*4 W01,W11,W12,W21,W22,W31,WK21,WK22,WK31,WK32
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/DITCOM/D21(3,3,2),D22(3,3,2),D31(3,3,3,2),DI01(40)
     1             ,DI11(40,3),DI12(40,3),DI21(40,3,3),DI22(40,3,3)
     2             ,DI31(40,3,3,3),DA(40,3)
C
      COMMON/ITWWRK/NKB,NTW,NTT,ILK,ILLK
C
      COMMON/SCDINT/D01S2,D01SC,D01C2,D11S2(3),D11SC(3),D11C2(3)
     1             ,D12S2(3),D12SC(3),D12C2(3),D21S2(3,3),D21SC(3,3)
     2             ,D21C2(3,3),D22S2(3,3),D22SC(3,3),D22C2(3,3)
     3             ,D23(3,3),D24(3,3),D31S2(3,3,3),D31SC(3,3,3)
     4             ,D31C2(3,3,3),D32(3,3,3)
C
      COMMON/SCIFIN/DK21C2(3,3),DK21S2(3,3),DK22S(3,3),DK22C(3,3)
     1             ,DKK23(3,3),DKK24(3,3),DK31S2(3,3,3),DK31C2(3,3,3)
     2             ,DK32S(3,3,3),DK32C(3,3,3),DKK33(3,3,3),DKK34(3,3,3)
C
      COMMON/TWIFCM/DK23(3,3,2),DK24(3,3,2),DK33(3,3,3,2),DK34(3,3,3,2)
     1             ,DK21(40,3,3),DK22(40,3,3),DK31(40,3,3,3)
     2             ,DK32(40,3,3,3)
C
      COMMON/TWWORK/FM(3,3),A(3),AD(3),B(3),BD(3),C(3),CD(3),ZL,RO
     1             ,RSQT(3)
C
C
      DATA DZERO/0.0D0/
C
C
      ID1=0
      ID2=0
      IF(ILK.EQ.2) ID1=20
      IF(ILLK.EQ.2) ID2=20
C
C     ZERO OUT ARRAYS
C
      D01S2=DZERO
      D01SC=DZERO
      D01C2=DZERO
      DO 5 I=1,3
      D11S2(I)=DZERO
      D11SC(I)=DZERO
      D11C2(I)=DZERO
      D12S2(I)=DZERO
      D12SC(I)=DZERO
      D12C2(I)=DZERO
      DO 4 J=1,3
      D21S2(I,J)=DZERO
      D21SC(I,J)=DZERO
      D21C2(I,J)=DZERO
      D22S2(I,J)=DZERO
      D22SC(I,J)=DZERO
      D22C2(I,J)=DZERO
      D23(I,J)=D21(I,J,ILK)
      D24(I,J)=D22(I,J,ILK)
      DK21C2(I,J)=DZERO
      DK21S2(I,J)=DZERO
      DK22S(I,J)=DZERO
      DK22C(I,J)=DZERO
      DKK23(I,J)=DK23(I,J,ILLK)
      DKK24(I,J)=DK24(I,J,ILLK)
      DO 3 L=1,3
      D31S2(I,J,L)=DZERO
      D31SC(I,J,L)=DZERO
      D31C2(I,J,L)=DZERO
      D32(I,J,L)=D31(I,J,L,ILK)
      DK31S2(I,J,L)=DZERO
      DK31C2(I,J,L)=DZERO
      DK32S(I,J,L)=DZERO
      DK32C(I,J,L)=DZERO
      DKK33(I,J,L)=DK33(I,J,L,ILLK)
      DKK34(I,J,L)=DK34(I,J,L,ILLK)
    3 CONTINUE
    4 CONTINUE
    5 CONTINUE
C
C     OBTAIN INTEGRATED ARRAYS
C
      DO 20 I=1,20
      I1=ID1+I
      I2=ID2+I
      TWI=0.0E0
      DO 8 J=1,NTW
      TWI=TWI+C(J)*DA(I1,J)
    8 CONTINUE
      ST=SIN(TWI)
      CT=COS(TWI)
      S2=ST*ST
      SC=ST*CT
      C2=CT*CT
      S2T=2.0E0*SC
      C2T=C2-S2
      W01=DI01(I1)
      D01S2=D01S2+S2*W01
      D01SC=D01SC+SC*W01
      D01C2=D01C2+C2*W01
C
      DO 12 J=1,NTW
      W12=DI12(I1,J)
      D12S2(J)=D12S2(J)+S2*W12
      D12SC(J)=D12SC(J)+SC*W12
      D12C2(J)=D12C2(J)+C2*W12
C
      IF(NKB.EQ.0) GO TO 12
C
      DO 11 L=1,NKB
      W22=DI22(I1,J,L)
      D22S2(J,L)=D22S2(J,L)+S2*W22
      D22SC(J,L)=D22SC(J,L)+SC*W22
      D22C2(J,L)=D22C2(J,L)+C2*W22
      WK22=DK22(I1,J,L)
      DK22S(J,L)=DK22S(J,L)+ST*WK22
      DK22C(J,L)=DK22C(J,L)+CT*WK22
C
      DO 9 M=1,NKB
      W31=DI31(I1,J,L,M)
      D31S2(J,L,M)=D31S2(J,L,M)+S2*W31
      D31SC(J,L,M)=D31SC(J,L,M)+SC*W31
      D31C2(J,L,M)=D31C2(J,L,M)+C2*W31
C
      WK31=DK31(I1,J,L,M)
      DK31S2(J,L,M)=DK31S2(J,L,M)+S2T*WK31
      DK31C2(J,L,M)=DK31C2(J,L,M)+C2T*WK31
    9 CONTINUE
C
      DO 10 M=1,NTW
      WK32=DK32(I1,J,M,L)
      DK32S(J,M,L)=DK32S(J,M,L)+ST*WK32
      DK32C(J,M,L)=DK32C(J,M,L)+CT*WK32
   10 CONTINUE
C
   11 CONTINUE
C
   12 CONTINUE
C
C
C
      IF(NKB.EQ.0) GO TO 20
C
      DO 16 J=1,NKB
      W11=DI11(I1,J)
      D11S2(J)=D11S2(J)+S2*W11
      D11SC(J)=D11SC(J)+SC*W11
      D11C2(J)=D11C2(J)+C2*W11
C
      DO 14 L=1,NKB
      W21=DI21(I1,J,L)
      D21S2(J,L)=D21S2(J,L)+S2*W21
      D21SC(J,L)=D21SC(J,L)+SC*W21
      D21C2(J,L)=D21C2(J,L)+C2*W21
C
      WK21=DK21(I1,J,L)
      DK21S2(J,L)=DK21S2(J,L)+S2T*WK21
      DK21C2(J,L)=DK21C2(J,L)+C2T*WK21
C
   14 CONTINUE
C
   16 CONTINUE
C
   20 CONTINUE
C
C
      IF(IOUT.EQ.1) GO TO 30
      WRITE(6,6000)
 6000 FORMAT('0',10X,'DEBUGGING OUTPUT FROM FNDINT'/)
      WRITE(6,6001) D01S2,D01SC,D01C2,D11S2,D11SC
      WRITE(6,6001) D11C2,D12S2,D12SC
      WRITE(6,6001) D12C2,D21S2,D21SC,D21C2,D22S2,D22SC,D22C2
      WRITE(6,6001) D23,D24,D31S2,D31SC,D31C2,D32
      WRITE(6,6000)
      WRITE(6,6001) DK21C2,DK21S2,DK22S,DK22C,DKK23,DKK24
      WRITE(6,6001) DK31S2,DK31C2,DK32S,DK32C,DKK33,DKK34
 6001 FORMAT(' ',1P9E14.6)
   30 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE FNDTIP
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/DEBUG2/IOUT,JOUT,KLUGE
C
      COMMON/ITWWRK/NKB,NTW,NTT,ILK,ILLK
C
      COMMON/TWWORK/FM(3,3),A(3),AD(3),B(3),BD(3),C(3),CD(3),ZL,RO
     1             ,RSQT(3),W2,W3,EIM,ED2,ED3,EDP,GJ,HKT(3)
C
      COMMON/TWWRK1/XX(3,3),XXD(3,3),XXDD(3),XXA(3,3,3),XXB(3,3,3)
     1             ,XXC(3,3,3),XDXA(3,3),XDXB(3,3),XDXC(3,3),XDDXA(3)
     2             ,XDDXB(3),XDDXC(3),XAX(3,3),XBX(3,3),XCX(3,3)
     3             ,DLAA(3,3),DLAB(3,3),DLAC(3,3),DLBB(3,3),DLBC(3,3)
     4             ,DLCC(3,3),VIFA(3),VIFB(3),VIFC(3)
C
C
      COMMON/TPWORK/XIP(3),BETL(3)
C
      DIMENSION DK(3,3),DKD(3,3),DKDD(3,3),DKU2(3,3),DKU3(3,3),DKT(3,3)
C
      DIMENSION II(3),JJ(3),OMT(3),HTIP(3)
C
      DATA DZERO/0.0D0/,II/2,3,1/,JJ/3,1,2/
C
C     ZERO OUT BASIC QUANTITIES
C
      U1P=1.0D0
      U2P=DZERO
      U3P=DZERO
      F=0.5D0
      U1PD=DZERO
      U2PD=DZERO
      U3PD=DZERO
      FD  =DZERO
      U1PDD=DZERO
      FDD  =DZERO
      U1PU2=DZERO
      FU2  =DZERO
      U1PU3=DZERO
      FU3  =DZERO
      W22=DZERO
      W23=DZERO
      W33=DZERO
      WD22=DZERO
      WD23=DZERO
      WD33=DZERO
      WDD22=DZERO
      WDD23=DZERO
      WDD33=DZERO
C
C     BASIC BENDING TERMS FOR TIP MASS INERTIAS
C
      IF(NKB.EQ.0) GO TO 5
C
      DO 2 I=1,NKB
      WS=XIP(I)/ZL
      U2P=U2P+A(I)*WS
      U3P=U3P+B(I)*WS
      U2PD=U2PD+AD(I)*WS
      U3PD=U3PD+BD(I)*WS
    2 CONTINUE
C
      W22=U2P*U2P
      W23=U2P*U3P
      W33=U3P*U3P
C
      U1P=1.0D0-W22-W33
      IF(U1P.LT.DZERO) U1P=DZERO
      U1P=DSQRT(U1P)
C
      WD22=2.0D0*U2P*U2PD
      WD23=U2P*U3PD+U3P*U2PD
      WD33=2.0D0*U3P*U3PD
C
      U1PD=-(WD22+WD33)/2.0D0
      U1PD=U1PD/U1P
C
      WDD22=2.0D0*U2PD*U2PD
      WDD23=2.0D0*U2PD*U3PD
      WDD33=2.0D0*U3PD*U3PD
C
      U1PDD=-(WDD22+WDD33)/2.0D0-U1PD*U1PD
      U1PDD=U1PDD/U1P
C
      U1PU2=-U2P/U1P
      U1PU3=-U3P/U1P
C
      F=1.0D0/(1.0D0+U1P)
      F2=F*F
      FD=-U1PD*F2
      FDD=-U1PDD*F2-2.0D0*U1PD*FD*F
C
      FU2=-U1PU2*F2
      FU3=-U1PU3*F2
C
C
    5 CONTINUE
C
C
      TWI=DZERO
      TWID=DZERO
C
      IF(NTW.EQ.0) GO TO 7
C
      DO 6 I=1,NTW
      TWI=TWI+C(I)*BETL(I)
      TWID=TWID+CD(I)*BETL(I)
    6 CONTINUE
C
C
    7 CONTINUE
C
C
      ST=DSIN(TWI)
      CT=DCOS(TWI)
C
C     CONSTRUCT TIP TRANSFORMATION MATRIX
C
      DK(1,1)=U1P
      DK(2,1)=U2P
      DK(3,1)=U3P
      DK(1,2)=-U3P*ST-U2P*CT
      DK(1,3)=U2P*ST-U3P*CT
C
      WS1=W23*F
      WS2=1.0D0-W22*F
      WS3=1.0D0-W33*F
C
      DK(2,2)=-WS1*ST+WS2*CT
      DK(3,2)=WS3*ST-WS1*CT
      DK(2,3)=-WS2*ST-WS1*CT
      DK(3,3)=WS1*ST+WS3*CT
C
      OMT(1)=TWID
      OMT(2)=-U3PD
      OMT(3)=U2PD
C
      HTIP(1)=RO*ZL*OMT(1)*(RSQT(2)+RSQT(3))
      HTIP(2)=RO*ZL*OMT(2)*(RSQT(3)+RSQT(1))
      HTIP(3)=RO*ZL*OMT(3)*(RSQT(1)+RSQT(2))
C
C     ZERO OUT REMAINING ARRAYS
C
      DO 10 I=1,3
      HKT(I)=DK(I,1)*HTIP(1)+DK(I,2)*HTIP(2)+DK(I,3)*HTIP(3)
      DO 9 J=1,3
      DKD(I,J)=DZERO
      DKDD(I,J)=DZERO
      DKU2(I,J)=DZERO
      DKU3(I,J)=DZERO
      DKT(I,J)=DZERO
    9 CONTINUE
   10 CONTINUE
C
      ITEST=NKB+NTW
      IF(ITEST.EQ.0) GO TO 50
C
C     CONSTRUCT DERIVATIVE MATRICES
C
      DKD(1,1)=U1PD
      DKD(2,1)=U2PD
      DKD(3,1)=U3PD
      DKD(1,2)=-U3PD*ST-U2PD*CT+TWID*(-U3P*CT+U2P*ST)
      DKD(1,3)=U2PD*ST-U3PD*CT+TWID*(U2P*CT+U3P*ST)
C
      WSD1=WD23*F+W23*FD
      WSD2=-WD22*F-W22*FD
      WSD3=-WD33*F-W33*FD
C
      WSDD1=WDD23*F+2.0D0*WD23*FD+W23*FDD
      WSDD2=-WDD22*F-2.0D0*WD22*FD-W22*FDD
      WSDD3=-WDD33*F-2.0D0*WD33*FD-W33*FDD
C
      DKD(2,2)=-WSD1*ST+WSD2*CT+TWID*(-WS1*CT-WS2*ST)
      DKD(2,3)=-WSD2*ST-WSD1*CT+TWID*(-WS2*CT+WS1*ST)
      DKD(3,2)=WSD3*ST-WSD1*CT+TWID*(WS3*CT+WS1*ST)
      DKD(3,3)=WSD1*ST+WSD3*CT+TWID*(WS1*CT-WS3*ST)
C
      DKDD(1,1)=U1PDD
      DKDD(1,2)=2.0D0*TWID*(-U3PD*CT+U2PD*ST)
      DKDD(1,3)=2.0D0*TWID*(U2PD*CT+U3PD*ST)
      DKDD(2,2)=-WSDD1*ST+WSDD2*CT+2.0D0*TWID*(-WSD1*CT-WSD2*ST)
      DKDD(2,3)=-WSDD2*ST-WSDD1*CT+2.0D0*TWID*(-WSD2*CT+WSD1*ST)
      DKDD(3,2)=WSDD3*ST-WSDD1*CT+2.0D0*TWID*(WSD3*CT+WSD1*ST)
      DKDD(3,3)=WSDD1*ST+WSDD3*CT+2.0D0*TWID*(WSD1*CT-WSD3*ST)
C
      IF(NKB.EQ.0) GO TO 40
C
      DKU2(1,1)=U1PU2
      DKU2(2,1)=1.0D0
      DKU2(1,2)=-CT
      DKU2(1,3)=ST
C
      WU21=U3P
      WU22=-2.0D0*U2P
C
      DKU2(2,2)=(-WU21*F-W23*FU2)*ST+(WU22*F-W22*FU2)*CT
      DKU2(2,3)=(-WU22*F-W22*FU2)*ST-(WU21*F+W23*FU2)*CT
      DKU2(3,2)=-W33*FU2*ST-(WU21*F+W23*FU2)*CT
      DKU2(3,3)=(WU21*F+W23*FU2)*ST-W33*FU2*CT
C
C
C
      DKU3(1,1)=U1PU3
      DKU3(3,1)=1.0D0
      DKU3(1,2)=-ST
      DKU3(1,3)=-CT
C
      WU31=U2P
      WU33=-2.0D0*U3P
C
      DKU3(2,2)=(-WU31*F-W23*FU3)*ST-W22*FU3*CT
      DKU3(2,3)=W22*FU3*ST-(WU31*F+W23*FU3)*CT
      DKU3(3,2)=(WU33*F-W33*FU3)*ST-(WU31*F+W23*FU3)*CT
      DKU3(3,3)=(WU31*F+W23*FU3)*ST+(WU33*F-W33*FU3)*CT
C
      IF(NTW.EQ.0) GO TO 50
C
C
   40 CONTINUE
C
C
      DKT(1,2)=-U3P*CT+U2P*ST
      DKT(1,3)=U2P*CT+U3P*ST
      DKT(2,2)=-WS1*CT-WS2*ST
      DKT(2,3)=-WS2*CT+WS1*ST
      DKT(3,2)=WS3*CT+WS1*ST
      DKT(3,3)=WS1*CT-WS3*ST
C
C
   50 CONTINUE
C
C
C     CONSTRUCT SYSTEM MATRICES FOR THIS ELEMENT
C
      DO 54 I=1,3
      I1=II(I)
      J1=JJ(I)
      DO 53 J=1,3
      XXDD(I)=XXDD(I)+RSQT(J)*(DKDD(I1,J)*DK(J1,J)-DKDD(J1,J)*DK(I1,J))
      DO 52 M=1,3
      XX(I,J)=XX(I,J)+RSQT(M)*DK(I,M)*DK(J,M)
      XXD(I,J)=XXD(I,J)+RSQT(M)*DK(I,M)*DKD(J,M)
   52 CONTINUE
   53 CONTINUE
   54 CONTINUE
C
      IF(IOUT.EQ.1) GO TO 55
      WRITE(6,6000)
      WRITE(6,6001) DK,DKD,DKDD,DKU2,DKU3,DKT
 6000 FORMAT('0',10X,'DEBUGGING OUTPUT FROM FNDTIP'/)
 6001 FORMAT(' ',1P9E14.6)
   55 CONTINUE
C
      IF(ITEST.EQ.0) GO TO 100
C
C
      XAXA=DZERO
      XAXB=DZERO
      XAXC=DZERO
      XBXB=DZERO
      XBXC=DZERO
      XCXC=DZERO
      XDDA=DZERO
      XDDB=DZERO
      XDDC=DZERO
C
      DO 58 I=1,3
      WAA=DZERO
      WAB=DZERO
      WAC=DZERO
      WBB=DZERO
      WBC=DZERO
      WCC=DZERO
      WDDA=DZERO
      WDDB=DZERO
      WDDC=DZERO
      DO 57 J=1,3
      WAA=WAA+DKU2(J,I)*DKU2(J,I)
      WAB=WAB+DKU2(J,I)*DKU3(J,I)
      WAC=WAC+DKU2(J,I)*DKT(J,I)
      WBB=WBB+DKU3(J,I)*DKU3(J,I)
      WBC=WBC+DKU3(J,I)*DKT(J,I)
      WCC=WCC+DKT(J,I)*DKT(J,I)
      WDDA=WDDA+DKDD(J,I)*DKU2(J,I)
      WDDB=WDDB+DKDD(J,I)*DKU3(J,I)
      WDDC=WDDC+DKDD(J,I)*DKT(J,I)
   57 CONTINUE
      WS=RSQT(I)
      XAXA=XAXA+WS*WAA
      XAXB=XAXB+WS*WAB
      XAXC=XAXC+WS*WAC
      XBXB=XBXB+WS*WBB
      XBXC=XBXC+WS*WBC
      XCXC=XCXC+WS*WCC
      XDDA=XDDA+WS*WDDA
      XDDB=XDDB+WS*WDDB
      XDDC=XDDC+WS*WDDC
   58 CONTINUE
C
C
      IF(NKB.EQ.0) GO TO 80
C
      DO 70 L=1,NKB
      WX=XIP(L)/ZL
C
      DO 64 I=1,3
      I1=II(I)
      J1=JJ(I)
      DO 63 J=1,3
      WS=RSQT(J)*WX
      XDXA(L,I)=XDXA(L,I)+WS*(DKD(I1,J)*DKU2(J1,J)-DKD(J1,J)*DKU2(I1,J))
      XDXB(L,I)=XDXB(L,I)+WS*(DKD(I1,J)*DKU3(J1,J)-DKD(J1,J)*DKU3(I1,J))
      DO 62 M=1,3
      WT=RSQT(M)*WX*DK(I,M)
      XXA(L,I,J)=XXA(L,I,J)+WT*DKU2(J,M)
      XXB(L,I,J)=XXB(L,I,J)+WT*DKU3(J,M)
C
   62 CONTINUE
   63 CONTINUE
C
   64 CONTINUE
      DO 65 I=1,3
      I1=II(I)
      J1=JJ(I)
      XAX(L,I)=XXA(L,I1,J1)-XXA(L,J1,I1)
      XBX(L,I)=XXB(L,I1,J1)-XXB(L,J1,I1)
C
   65 CONTINUE
C
      DO 66 I=1,NKB
      WS=WX*XIP(I)/ZL
      DLAA(L,I)=WS*XAXA
      DLAB(L,I)=WS*XAXB
      DLBB(L,I)=WS*XBXB
   66 CONTINUE
C
      IF(NTW.EQ.0) GO TO 70
C
      DO 67 I=1,NTW
      WS=WX*BETL(I)
      DLAC(L,I)=WS*XAXC
      DLBC(L,I)=WS*XBXC
   67 CONTINUE
C
      XDDXA(L)=WX*XDDA
      XDDXB(L)=WX*XDDB
C
   70 CONTINUE
C
      IF(NTW.EQ.0) GO TO 100
C
   80 CONTINUE
C
      DO 90 L=1,NTW
      WX=BETL(L)
      DO 84 I=1,3
      I1=II(I)
      J1=JJ(I)
      DO 83 J=1,3
      WS=RSQT(J)*WX
      XDXC(L,I)=XDXC(L,I)+WS*(DKD(I1,J)*DKT(J1,J)-DKD(J1,J)*DKT(I1,J))
      DO 82 M=1,3
      WT=RSQT(M)*DK(I,M)*WX
      XXC(L,I,J)=XXC(L,I,J)+WT*DKT(J,M)
C
   82 CONTINUE
C
   83 CONTINUE
C
   84 CONTINUE
C
      DO 85 I=1,3
      I1=II(I)
      J1=JJ(I)
      XCX(L,I)=XXC(L,I1,J1)-XXC(L,J1,I1)
   85 CONTINUE
C
      DO 86 I=1,NTW
      WS=BETL(I)*WX
      DLCC(L,I)=WS*XCXC
   86 CONTINUE
C
      XDDXC(L)=WX*XDDC
C
   90 CONTINUE
C
  100 CONTINUE
C
      RETURN
C
      END
      SUBROUTINE FNYBCM
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     ***********  'FNYBCM' DETERMINES THE POSITIONAL VECTOR FROM THE
C                  ORIGIN OF THE BODY FRAME TO THE CENTER OF MASS OF
C                  THE SATELLITE.
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMA1(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL5/ CKMAT(3,3,10),FM2(3,3)
C
      COMMON/RPOOL8/ SZ01(10),SZ11(3,10),SZ24(9,10)
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
      DIMENSION FM(3,3),XI(3),ZKD(3),CMAT(3,3)
        SY1 = 0.0D0
       SY2 = 0.0D0
       SY3 = 0.0D0
        NN = 0
       DO 100 K=1,IK
       S1 = 0.0D0
       S4 = 0.0D0
        S21 = 0.0D0
       I1 = IAB + NN
       I2 = IBB + NN
       NKN = NK(K)
       XLK = ZLK(K)
       CON = RHOK(K) * XLK
       IF(K-K1)1,1,2
    1  DO 3 I=1,3
       DO 3 J=1,3
       FM(I,J) = FM1(I,J)
       CMAT(I,J) = CKMAT(I,J,K)
    3  CONTINUE
        GO TO 5
    2  DO 4 I=1,3
       DO 4 J=1,3
       FM(I,J) = FM2(I,J)
    4  CMAT(I,J) = CKMAT(I,J,K)
    5  IF(NKN)6,6,7
    6  XI(1) = XLK * SZ01(K)
       XI(2) = 0.0D0
       XI(3) = 0.0D0
       GO TO 50
    7   IN = 1
       IZ = 1
       DO 102 IP=1,NKN
         N1 = IP-1
       AP = DEPEND(I1+N1)
       BP = DEPEND(I2+N1)
       V1 = SZ11(IN,K)
       S1 = S1 + AP * V1
       S4 = S4 + BP * V1
       DO 103 IQ = 1,NKN
       IQ1 = IQ-1
       Z24 = SZ24(IZ,K)
       S21 = S21 + Z24 * (DEPEND(I1+IQ1) *AP + DEPEND(I2 +IQ1)*BP)
  103  IZ = IZ +1
  102   IN = IN +1
       XI(1) = XLK * SZ01(K) - 0.5D0 * S21/XLK
       XI(2) = S1
       XI(3) = S4
   50   CONTINUE
       DO 300 I=1,3
       ZKD(I) = CMAT(I,1) * XI(1) + CMAT(I,2) * XI(2) + CMAT(I,3) *
     1  XI(3)
  300  CONTINUE
       SY1 = SY1 +(FM(1,1)*ZKD(1)+ FM(1,2) *ZKD(2)+ FM(1,3)* ZKD(3)
     1  ) * CON
       SY2 = SY2 +(FM(2,1)*ZKD(1)+ FM(2,2) *ZKD(2)+ FM(2,3)* ZKD(3)
     1  ) * CON
       SY3 = SY3 +(FM(3,1)*ZKD(1)+ FM(3,2) *ZKD(2)+ FM(3,3)* ZKD(3)
     1  ) * CON
       NN = NN + 2 * NKN
  100  CONTINUE
       YBCM(1) = SY1
       YBCM(2) = SY2
       YBCM(3) = SY3
       RETURN
       END
      SUBROUTINE FOUR(DATA,NN,ISIGN)
C
C     THE COOLEY-TUKEY FAST FOURIER TRANSFORM IN USASI BASIC FORTRAN
C
C     TRANSFORM(K)=SUM(DATA(J)*EXP(ISIGN*2*PI*SQRT(-1)*(K-1)*(J-1)/NN)),
C     SUMMED FOR ALL J, K, BETWEEN 1 AND NN.  DATA IS A COMPLEX ARRAY OF
C     LENGTH NN.  THE REAL AND IMAGINARY PARTS ARE ADJACENT IN STORAGE
C     SUCH AS FORTRAN IV PLACES THEM.  ITS DIMENSION IS A POWER OF TWO
C     (.GE. 1).  IF NECESSARY, APPEND ZEROES TO THE DATA TO GET A POWER
C     OF TWO.   ISIGN IS +1 OR -1.  IF A -1 TRANSFORM IS FOLLOWED BY A
C     +1 (OR A +1 BY A -1) THE ORIGINAL DATA REAPPEAR, MULTIPLIED BY NN.
C     TRANSFORM VALUES ARE RETURNED IN ARRAY DATA, REPLACING THE INPUT.
C     WRITTEN BY NORMAN BRENNER FROM THE BASIC PROGRAM OF CHARLES RADER.
C     RALPH ALTER SUGGESTED THE METHOD OF BIT REVERSAL. MIT LINCOLN
C     LABORATORY, AUGUST 1967.
C     SEE-- IEEE AUDIO TRANSACTIONS (JUNE 1967), SPECIAL ISSUE ON FFT.
C
      DIMENSION DATA(1)
      DATA TWOPI /6.283185/
      NTOT=2*NN
C
      NP1=2
      N=NN
      NP2=NP1*N
      IF(N-1)700,600,100
C
C     SHUFFLE DATA BY BIT REVERSAL, SINCE N=2**K.  AS THE SHUFFLING
C     CAN BE DONE BY SIMPLE INTERCHANGE, NO WORKING ARRAY IS NEEDED
C
100   NP2HF=NP2/2
      J=1
      DO 160 I2=1,NP2,NP1
      IF(J-I2)110,130,130
110   I1MAX=I2+NP1-2
      DO 120 I1=I2,I1MAX,2
      DO 120 I3=I1,NTOT,NP2
      J3=J+I3-I2
      TEMPR=DATA(I3)
      TEMPI=DATA(I3+1)
      DATA(I3)=DATA(J3)
      DATA(I3+1)=DATA(J3+1)
      DATA(J3)=TEMPR
120   DATA(J3+1)=TEMPI
130   M=NP2HF
140   IF(J-M)160,160,150
150   J=J-M
      M=M/2
      IF(M-NP1)160,140,140
160   J=J+M
C
C     MAIN LOOP.  PERFORM FOURIER TRANSFORMS OF LENGTH FOUR, WITH ONE OF
C     LENGTH TWO IF NEEDED.  THE TWIDDLE FACTOR W=EXP(ISIGN*2*PI*
C     SQRT(-1)*M/(4*MMAX)).  CHECK FOR THE SPECIAL CASE W=ISIGN*SQRT(-1)
C     AND REPEAT FOR W=ISIGN*SQRT(-1)*CONJUGATE(W).
C
      NP1TW=NP1+NP1
      IPAR=N
310   IF(IPAR-2)350,330,320
320   IPAR=IPAR/4
      GO TO 310
330   DO 340 I1=1,NP1,2
      DO 340 K1=I1,NTOT,NP1TW
      K2=K1+NP1
      TEMPR=DATA(K2)
      TEMPI=DATA(K2+1)
      DATA(K2)=DATA(K1)-TEMPR
      DATA(K2+1)=DATA(K1+1)-TEMPI
      DATA(K1)=DATA(K1)+TEMPR
340   DATA(K1+1)=DATA(K1+1)+TEMPI
350   MMAX=NP1
360   IF(MMAX-NP2HF)370,600,600
370   LMAX=MAX0(NP1TW,MMAX/2)
      IF(MMAX-NP1)405,405,380
380   THETA=-TWOPI*FLOAT(NP1)/FLOAT(4*MMAX)
      IF(ISIGN)400,390,390
390   THETA=-THETA
400   WR=COS(THETA)
      WI=SIN(THETA)
      WSTPR=-2.*WI*WI
      WSTPI=2.*WR*WI
405   DO 570 L=NP1,LMAX,NP1TW
      M=L
      IF(MMAX-NP1)420,420,410
410   W2R=WR*WR-WI*WI
      W2I=2.*WR*WI
      W3R=W2R*WR-W2I*WI
      W3I=W2R*WI+W2I*WR
420   DO 530 I1=1,NP1,2
      KMIN=IPAR*M+I1
      IF(MMAX-NP1)430,430,440
430   KMIN=I1
440   KDIF=IPAR*MMAX
450   KSTEP=4*KDIF
      DO 520 K1=KMIN,NTOT,KSTEP
      K2=K1+KDIF
      K3=K2+KDIF
      K4=K3+KDIF
      IF(MMAX-NP1)460,460,480
460   U1R=DATA(K1)+DATA(K2)
      U1I=DATA(K1+1)+DATA(K2+1)
      U2R=DATA(K3)+DATA(K4)
      U2I=DATA(K3+1)+DATA(K4+1)
      U3R=DATA(K1)-DATA(K2)
      U3I=DATA(K1+1)-DATA(K2+1)
      IF(ISIGN)470,475,475
470   U4R=DATA(K3+1)-DATA(K4+1)
      U4I=DATA(K4)-DATA(K3)
      GO TO 510
475   U4R=DATA(K4+1)-DATA(K3+1)
      U4I=DATA(K3)-DATA(K4)
      GO TO 510
480   T2R=W2R*DATA(K2)-W2I*DATA(K2+1)
      T2I=W2R*DATA(K2+1)+W2I*DATA(K2)
      T3R=WR*DATA(K3)-WI*DATA(K3+1)
      T3I=WR*DATA(K3+1)+WI*DATA(K3)
      T4R=W3R*DATA(K4)-W3I*DATA(K4+1)
      T4I=W3R*DATA(K4+1)+W3I*DATA(K4)
      U1R=DATA(K1)+T2R
      U1I=DATA(K1+1)+T2I
      U2R=T3R+T4R
      U2I=T3I+T4I
      U3R=DATA(K1)-T2R
      U3I=DATA(K1+1)-T2I
      IF(ISIGN)490,500,500
490   U4R=T3I-T4I
      U4I=T4R-T3R
      GO TO 510
500   U4R=T4I-T3I
      U4I=T3R-T4R
510   DATA(K1)=U1R+U2R
      DATA(K1+1)=U1I+U2I
      DATA(K2)=U3R+U4R
      DATA(K2+1)=U3I+U4I
      DATA(K3)=U1R-U2R
      DATA(K3+1)=U1I-U2I
      DATA(K4)=U3R-U4R
520   DATA(K4+1)=U3I-U4I
      KMIN=4*(KMIN-I1)+I1
      KDIF=KSTEP
      IF(KDIF-NP2)450,530,530
530   CONTINUE
      M=MMAX-M
      IF(MMAX-NP1) 580,580,535
535   CONTINUE
      IF(ISIGN)540,550,550
540   TEMPR=WR
      WR=-WI
      WI=-TEMPR
      GO TO 560
550   TEMPR=WR
      WR=WI
      WI=TEMPR
560   IF(M-LMAX)565,565,410
565   TEMPR=WR
      WR=WR*WSTPR-WI*WSTPI+WR
570   WI=WI*WSTPR+TEMPR*WSTPI+WI
580   CONTINUE
      IPAR=3-IPAR
      MMAX=MMAX+MMAX
      GO TO 360
C
C     END OF LOOP OVER EACH DIMENSION
C
600   NP1=NP2
700   RETURN
      END
      FUNCTION FUNA(K,K1,I)
C
C     'FUNA' EQUIVALENCES ANTENNA TIP DISPLACEMENTS AND VELOCITIES TO
C     OTHER FORTRAN SYMBOLS FOR THE HAMILTONIAN CALCULATIONS.  ENTRY
C     POINTS ARE ADFUN,BDFUN,FUNB
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C
      COMMON/CANTNA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3)
C
      COMMON/MRANG/ ADDOT(10,3),BDDOT(10,3),DOUTDD(10,3),DINDD(10,3)
C
      L=K-K1
      IF(L.GT.0) GO TO 10
      FUNA=DIN(K,I)
      RETURN
   10 FUNA=A(L,I)
      RETURN
C
      ENTRY FUNB(K,K1,I)
C
      L=K-K1
      IF(L.GT.0) GO TO 20
      FUNB=DOUT(K,I)
      RETURN
   20 FUNB=B(L,I)
      RETURN
C
      ENTRY ADFUN(K,K1,I)
C
      L=K-K1
      IF(L.GT.0) GO TO 30
      ADFUN=DINDOT(K,I)
      RETURN
   30 ADFUN=ADOT(L,I)
      RETURN
C
      ENTRY BDFUN(K,K1,I)
C
      L=K-K1
      IF(L.GT.0) GO TO 40
      BDFUN=DOUTDT(K,I)
      RETURN
   40 BDFUN=BDOT(L,I)
      RETURN
C
      ENTRY ADDFUN(K,K1,I)
      L=K-K1
      IF (L.GT.0) GO TO 50
      ADDFUN=DINDD(K,I)
      RETURN
C
   50 ADDFUN=ADDOT(L,I)
      RETURN
C
      ENTRY BDDFUN(K,K1,I)
      L=K-K1
      IF(L.GT.0) GO TO 60
      BDDFUN=DOUTDD(K,I)
      RETURN
C
   60 BDDFUN=BDDOT(L,I)
      RETURN
      END
      SUBROUTINE FVAL(VNAME,NCHAR,VALUE,ISUB1,ISUB2,ISUB)
C
C              OUTPUT SUBROUTINE USING VARIABLE FORMAT
C              ROUTINE HAS MULTIPLE ENTRIES
C                  AVAL
C                  HVAL
C                  IVAL
C
        IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON /HEAD22/ HEAD1(5),HEAD2(5),ILINE
C
C
      DIMENSION IFORM(13),ISKIP(12),IFXFL(6)
      DIMENSION DIM2(10,10),IDIM(10,10)
      DIMENSION VALUE(100),HED(5),IVALUE(100)
      DIMENSION IMAT (21)
      DATA  BLANC/ '        '/
      DATA IBLANK /'    '/
      DATA  IMAT / ',10X',',A1,',',A2,',',A3,',',A4,',
     .             ',A5,',',A6,',',A7,',',A8,','    ',
     .             '1H(,','I1, ','1H),','1H,,',')   ',
     .             '(1H ','    ','    ','    ','    ','1H  '/
      DATA ISKIP /'19X,','18X,','17X,','16X,','15X,','14X,',
     .            '13X,','12X,','11X,','10X,',' 9X,',' 8X,'/
      DATA IFXFL /'6(G1','5.8,','1X))','6(I1','5,1X','))  ' /
      DATA I1/1/,I2/2/
  100 FORMAT ('1',50X,5A8//51X,5A8)
  121 FORMAT ('0',50X,5A8)
      EQUIVALENCE (II1,VI1),(IJ,VIJ),(II2,VI2)
C
      DO 5 I=1,ISUB2
      DO 5 J=1,ISUB1
    5 DIM2(J,I)=VALUE((I-1)*ISUB1+J)
      IN=48
      INT=0
      GO TO 77
C
      ENTRY AVAL(VNAME,NCHAR,VALUE,IS,ISUB1,ISUB2,ISUB)
      DO 200 I=1,ISUB2
      DO 200 J=1,ISUB1
  200 DIM2(J,I)=VALUE((I-1)*IS+J)
      IN=48
      INT=0
      GO TO 77
C
      ENTRY IVAL (VNAME,NCHAR,IVALUE,ISUB1,ISUB2,ISUB)
      IN=48
      INT=1
      DO 6 I=1,ISUB2
      DO 6 J=1,ISUB1
    6 IDIM(J,I)=IVALUE((I-1)*ISUB1+J)
      GO TO 77
C
      ENTRY HVAL (HED)
      IN=48
      DO 16 I=1,5
   16 HEAD2(I)=HED(I)
      IF(MOD(ILINE,IN).EQ.0) RETURN
      WRITE(6,121) HED
      ILINE=ILINE+1
      RETURN
C
   77 K=0
      I=0
      DO 10 IQ=1,13
   10 IFORM(IQ)=IBLANK
      IFORM(1)=IMAT(16)
      IFORM(2)=IMAT(1)
      IFORM(3)=IMAT(NCHAR+1)
      IF (ISUB2 .NE. 0)  I=6
      IF (INT .NE. 0)  K=3
      IFORM(I+4)=ISKIP(NCHAR+I)
      DO 3 J=1,3
    3 IFORM(I+J+4)=IFXFL(K+J)
   30 IF(ISUB2.NE.0) GO TO 60
      VNAME1 = VNAME
      DO 66 N=1,ISUB1,6
      NN=(ISUB1-N+1)
      IF(NN.GT.6) NN=6
      NN=NN+N-1
      IF(MOD(ILINE,IN).EQ.0) WRITE(6,100) HEAD1,HEAD2
      IF (INT .EQ. 1)  WRITE (6,IFORM) VNAME1,(IVALUE(I),I=N,NN)
      IF (INT .EQ. 0)  WRITE (6,IFORM) VNAME1,( VALUE(I),I=N,NN)
      ILINE=ILINE+1
      VNAME1=BLANC
   66 CONTINUE
      RETURN
   60 IF(ISUB.EQ.2) GO TO 70
      DO 80 J=1,ISUB2
      IFORM(4)=IMAT(11)
      IFORM(5)=IMAT(12)
      IFORM(6)=IMAT(14)
      IFORM(7)=IMAT(12)
      IFORM(8)=IMAT(13)
      IFORM(9)=IMAT(12)
      VNAME1=VNAME
      II1=I1
      IJ=J
      IF(MOD(ILINE,IN).EQ.0) WRITE(6,100) HEAD1,HEAD2
      DO 85 N=1,ISUB1,6
      NN=(ISUB1-N+1)
      IF (NN .GT. 6)  NN=6
      NN=NN+N-1
      IF (INT .EQ. 1)  WRITE (6,IFORM) VNAME,II1,IJ,II1,
     .                 (IDIM(I,J),I=N,NN)
      IF (INT .EQ. 0)  WRITE (6,IFORM) VNAME1,II1,IJ,II1,
     .                 (DIM2(I,J),I=N,NN)
      ILINE=ILINE+1
      VNAME1=BLANC
      VI1=BLANC
      VIJ=BLANC
      IFORM(4)=IMAT(21)
      IFORM(5)=IMAT(2)
      IFORM(6)=IMAT(21)
      IFORM(7)=IMAT(2)
      IFORM(8)=IMAT(21)
      IFORM(9)=IMAT(2)
   85 CONTINUE
   80 CONTINUE
      RETURN
   70 DO 90 J=1,ISUB1
      IFORM(4)=IMAT(11)
      IFORM(5)=IMAT(12)
      IFORM(6)=IMAT(14)
      IFORM(7)=IMAT(12)
      IFORM(8)=IMAT(13)
      IFORM(9)=IMAT(12)
      VNAME1=VNAME
      II1=I1
      IJ=J
      II2=I2
      IF(MOD(ILINE,IN).EQ.0) WRITE(6,100) HEAD1,HEAD2
      DO 95 N=1,ISUB2,6
      NN=ISUB2-N+1
      IF (NN .GT. 6)  NN=6
      NN=NN+N-1
      IF (INT .EQ. 1)  WRITE (6,IFORM) VNAME1,IJ,II1,II2,
     .                 (IDIM(J,I),I=N,NN)
      IF (INT .EQ. 0)  WRITE (6,IFORM) VNAME1,IJ,II1,II2,
     .                 (DIM2(J,I),I=N,NN)
      ILINE=ILINE+1
      VNAME1=BLANC
      VI1=BLANC
      VIJ=BLANC
      VI2=BLANC
      IFORM(4)=IMAT(21)
      IFORM(5)=IMAT(2)
      IFORM(6)=IMAT(21)
      IFORM(7)=IMAT(2)
      IFORM(8)=IMAT(21)
      IFORM(9)=IMAT(2)
   95 CONTINUE
   90 CONTINUE
C
   50 RETURN
      END
C
C     ..................................................................
C
C        SUBROUTINE GAUSS
C
C        PURPOSE
C           COMPUTES A NORMALLY DISTRIBUTED RANDOM NUMBER WITH A GIVEN
C           MEAN AND STANDARD DEVIATION
C
C        USAGE
C           CALL GAUSS(IX,S,AM,V)
C
C        DESCRIPTION OF PARAMETERS
C           IX -IX MUST CONTAIN AN ODD INTEGER NUMBER WITH NINE OR
C               LESS DIGITS ON THE FIRST ENTRY TO GAUSS. THEREAFTER
C               IT WILL CONTAIN A UNIFORMLY DISTRIBUTED INTEGER RANDOM
C               NUMBER GENERATED BY THE SUBROUTINE FOR USE ON THE NEXT
C               ENTRY TO THE SUBROUTINE.
C           S  -THE DESIRED STANDARD DEVIATION OF THE NORMAL
C               DISTRIBUTION.
C           AM -THE DESIRED MEAN OF THE NORMAL DISTRIBUTION
C           V  -THE VALUE OF THE COMPUTED NORMAL RANDOM VARIABLE
C
C        REMARKS
C           THIS SUBROUTINE USES RANDU WHICH IS MACHINE SPECIFIC
C
C        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
C           RANDU
C
C        METHOD
C           USES 12 UNIFORM RANDOM NUMBERS TO COMPUTE NORMAL RANDOM
C           NUMBERS BY CENTRAL LIMIT THEOREM. THE RESULT IS THEN
C           ADJUSTED TO MATCH THE GIVEN MEAN AND STANDARD DEVIATION.
C           THE UNIFORM RANDOM NUMBERS COMPUTED WITHIN THE SUBROUTINE
C           ARE FOUND BY THE POWER RESIDUE METHOD.
C
C     ..................................................................
C
      SUBROUTINE GAUSS(IX,S,AM,V)
      A=0.0
      DO 50 I=1,12
      CALL RANDO(IX,IY,Y)
      IX=IY
   50 A=A+Y
      V=(A-6.0)*S+AM
      RETURN
      END
      SUBROUTINE GDALMG(MODEL,TM,GDLAT,GDLON,GDALT,X,Y,Z,F,H,DEC,AINC)
C ****  GEODETIC VERSION OF GEOMAGNETIC FIELD SUBROUTINE
C ****  PROGRAM DESIGNED AND TESTED BY G D MEAD AND E G STASSINOPOULOS,
C ****  CODE 641, NASA GODDARD SPACE FLT CTR, GREENBELT, MD 20771
C***INPUT   MODEL = 1-7; CHOICE OF SEVEN MODELS - SEE ALLMAG
C           TM = TIME IN YEARS FOR DESIRED FIELD (E.G. 1971.25)
C           GDLAT = GEODETIC LATITUDE (DEGREES)
C           GDLON = EAST LONGITUDE (DEGREES)
C           GDALT = ALTITUDE ABOVE GEOID (KMS)
C***OUTPUT  X,Y,Z = GEODETIC FIELD COMPONENTS (GAUSS)
C           F = MAGNITUDE OF FIELD (GAUSS)
C           H = HORIZONTAL INTENSITY (GAUSS)
C           DEC, AINC = DECLINATION AND INCLINATION ANGLES (DEGREES)
C***  NOTE  FOR GREATEST EFFICIENCY, COMPLETE ALL CALCULATIONS WITH ONE
C     MODEL AND ONE TIME BEFORE CHANGING MODEL OR TIME.
C   REFERENCE GEOID IS THAT ADOPTED BY IAU IN 1964
      IMPLICIT REAL*8(A-H,O-Z)
      DATA RAD,A,AB2,E2/57.29578D0,6378.165D0,1.0067397D0,.0067397D0/
      SINLAT = DSIN(GDLAT/RAD)
      COSLAT = DSQRT(1.-SINLAT**2)
      IF(MODEL.EQ.6) GO TO 2
    1 SINBET = SINLAT /DSQRT(SINLAT**2+(AB2*COSLAT)**2)
C***   BETA = GEOCENTRIC LATITUDE AT SURFACE OF GEOID
      COSBET =DSQRT(1.-SINBET*SINBET)
      RGEOID = A /DSQRT(1.+E2*SINBET*SINBET)
      XKM = RGEOID*COSBET + GDALT*COSLAT
      YKM = RGEOID*SINBET + GDALT*SINLAT
      RKM = DSQRT(XKM**2+YKM**2)
      ST = XKM/RKM
      CT = YKM/RKM
      GO TO 3
    2 RKM = 6371.2 + GDALT
      ST = COSLAT
      CT = SINLAT
    3 SP = DSIN(GDLON/RAD)
      CP = DCOS(GDLON/RAD)
      CALL ALLMAG(MODEL,TM,RKM,ST,CT,SP,CP,BR,BT,Y,F)
      SIND = ST*SINLAT - CT*COSLAT
      COSD = CT*SINLAT + ST*COSLAT
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     X = -BT*COSD - BR*SIND
C     Z =  BT*SIND - BR*COSD
C   REPLACE BY THE FOLLOWING CARDS
C    IN THIS CASE THE VECTOR OF FIELD IS OUTWARD POSITIVE
      X=-BT
      Z=BR
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      H = DSQRT(X*X+Y*Y)
      DEC = RAD * DATAN2(Y,X)
      AINC = RAD * DATAN(Z/H)
      RETURN
      END
      SUBROUTINE GIMBL1(SY1,SY2,SY3,CIY)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CGIMBL/ AZIN(3,3),AZAX(3),AZCG(3),AZMS,AZYY(3,3),AZIAX(3,3)
     1              ,ELIN(3,3),ELAX(3),ELCG(3),ELMS,ELYY(3,3),ELIAX(3,3)
     2              ,ZZAZ(3,3)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/GMBLWK/ DELT(2,2),GAMGM(2,6),GMRHS(2),DI(2,2),DIGAM(2,6)
     1              ,DZML(6,6),YAZB(3),YELC(3)
C
      COMMON/GMBOUT/ AZ,AZD,EL,ELD,B(3,3),B0(3,3),B0B(3,3),C(3,3)
     1              ,B0BC(3,3),ZEL(3),YEL(3),YAZ(3),ZAZM(3),ZELM(3)
C
      COMMON/GMPRPL/ GMBAZ,GMBAZD,GMBEL,GMBELD
C
      COMMON/GMRSOT/ AZDD,ELDD,RSRHST(3),RSRHSR(3)
C
      COMMON/IGIMBL/ IGMBL,NAZIM,NELEV,NA1,NE1
C
      COMMON/IRSTGM/ IGMRST,IARST(3),IRSCY(3)
C
      COMMON/RPOOL1/ DUMV1(80),YBCM(3),DUMV2(42)
C
      COMMON/VARBLS/ DEP(150),DER(150)
C
C
C
      DIMENSION CIY(3,3),DM1(3,3),DM2(3,3),DM3(3,3),DM4(3,3),DM5(3,3)
      DIMENSION DM0(3,3),DM6(3,3),DM7(3,3),DM8(3,3),DM9(3,3)
      DIMENSION V1(3),V2(3),V3(3),V4(3),V5(3),V6(3),V7(3),V8(3),V9(3)
      DIMENSION ANGM(3),ANGMD(3),ANGMDD(3)
C
      IF(IGMBL.EQ.0) RETURN
C
C     GIMBL1 IS CALLED FROM FNDALP TO INCLUDE GIMBLE MASS PROPERTIES
C     IN SYSTEM INERTIA PROPERTIES
C
C     GIMBLE RASTERING OPTION
C
      IF(IGMRST.EQ.0) GO TO 110
C
      DO 103 I=1,3
      ANGM(I)=0.0D0
      ANGMD(I)=0.0D0
      ANGMDD(I)=0.0D0
  103 CONTINUE
C
      CALL RASTGM(ANGM,ANGMD,ANGMDD)
C
      AZ=ANGM(1)
      AZD=ANGMD(1)
      AZDD=ANGMDD(1)
C
      EL=ANGM(3)
      ELD=ANGMD(3)
      ELDD=ANGMDD(3)
C
      GO TO 120
C
  110 CONTINUE
C
C
      AZ=DEP(NAZIM)
      AZD=DEP(NA1)
      EL=DEP(NELEV)
      ELD=DEP(NE1)
C
  120 CONTINUE
C
      GMBAZ=AZ/RADIAN
      GMBAZD=AZD/RADIAN
      GMBEL=EL/RADIAN
      GMBELD=ELD/RADIAN
C
      SAZ=DSIN(AZ)
      CAZ=DCOS(AZ)
      SEL=DSIN(EL)
      CEL=DCOS(EL)
C
      C(1,1)=CEL
      C(3,3)=CEL
      C(1,3)=SEL
      C(3,1)=-SEL
      B(1,1)=CAZ
      B(2,2)=CAZ
      B(1,2)=-SAZ
      B(2,1)=SAZ
C
      CALL MPYMAT(B0,B,DM1,1,1,B0B,DM1)
      CALL MPYMAT(B0B,C,DM1,1,1,B0BC,DM1)
C
      CALL MATV(1,C,ELCG,V5)
      CALL ADDV(V5,ELAX,ZEL)
      CALL MATV(1,B0B,ZEL,V6)
      CALL MATV(2,C,ZEL,V9)
      CALL ADDV(AZAX,V6,YEL)
      CALL MATV(2,B0B,AZAX,V7)
      CALL MATV(1,B0B,AZCG,V1)
      CALL ADDV(AZAX,V1,YAZ)
C
      CALL MPYMAT(C,ELYY,C,2,2,DM2,DM1)
      CALL MPYMAT(B0BC,ELYY,B0BC,2,2,DM3,DM2)
      CALL MPYMAT(B0B,AZYY,B0B,2,2,DM4,DM3)
C
      DO 5 I=1,3
      DO 4 J=1,3
      ZZAZ(I,J)=AZIAX(I,J)+DM1(I,J)+ELMS*ZEL(I)*ZEL(J)
      DM5(I,J)=DM1(I,J)+AZYY(I,J)+ELMS*ZEL(I)*V7(J)+AZMS*AZCG(I)*V7(J)
      DM6(I,J)=ELIAX(I,J)+ELMS*ELCG(I)*V9(J)
      CIY(I,J)=CIY(I,J)+DM2(I,J)+DM3(I,J)+ELMS*YEL(I)*YEL(J)
     1         +AZMS*YAZ(I)*YAZ(J)
    4 CONTINUE
      V3(I)=ELMS*YEL(I)+AZMS*YAZ(I)
      YBCM(I)=YBCM(I)+V3(I)
      ZAZM(I)=ELMS*ZEL(I)+AZMS*AZCG(I)
      ZELM(I)=ELMS*ELCG(I)
    5 CONTINUE
C
      SY1=SY1+V3(1)
      SY2=SY2+V3(2)
      SY3=SY3+V3(3)
C
      DELT(1,1)=ZZAZ(1,1)+ZZAZ(2,2)
      DELT(2,2)=ELIAX(3,3)+ELIAX(1,1)
      CALL MATV(2,C,ELAX,V1)
      DELT(2,1)=-C(3,3)*(ELYY(3,2)+ELMS*ELCG(3)*(ELCG(2)+V1(2)))
     1          -C(3,1)*(ELYY(1,2)+ELMS*ELCG(1)*(ELCG(2)+V1(2)))
      DELT(1,2)=DELT(2,1)
C
      CALL MATV(2,B0B,AZAX,YAZB)
      CALL ADDV(YAZB,ELAX,V2)
      CALL MATV(2,C,V2,YELC)
      V4(1)=-(ELIAX(1,2)+ZELM(1)*YELC(2))
      V4(2)=ELIAX(3,3)+ZELM(3)*YELC(3)+ELIAX(1,1)+ZELM(1)*YELC(1)
      V4(3)=-(ELIAX(3,2)+ZELM(3)*YELC(2))
      CALL MATV(1,B0BC,V4,V2)
      V4(1)=-(ZZAZ(1,3)+ZAZM(1)*YAZB(3))
      V4(2)=-(ZZAZ(2,3)+ZAZM(2)*YAZB(3))
      V4(3)=ZZAZ(1,1)+ZAZM(1)*YAZB(1)+ZZAZ(2,2)+ZAZM(2)*YAZB(2)
      CALL MATV(1,B0B,V4,V1)
C
      DO 10 I=1,3
      GAMGM(1,I)=B0B(I,2)*ZAZM(1)-B0B(I,1)*ZAZM(2)
      GAMGM(2,I)=B0BC(I,1)*ZELM(3)-B0BC(I,3)*ZELM(1)
      I3=I+3
      GAMGM(1,I3)=V1(I)
      GAMGM(2,I3)=V2(I)
   10 CONTINUE
C
C
      DEN=DELT(1,1)*DELT(2,2)-DELT(1,2)*DELT(2,1)
      DI(1,1)=DELT(2,2)/DEN
      DI(2,2)=DELT(1,1)/DEN
      DI(1,2)=-DELT(1,2)/DEN
      DI(2,1)=-DELT(2,1)/DEN
C
      DO 15 I=1,2
      DO 15 J=1,6
      DIGAM(I,J)=DI(I,1)*GAMGM(1,J)+DI(I,2)*GAMGM(2,J)
   15 CONTINUE
C
      DO 20 I=1,6
      DO 20 J=1,6
      DZML(I,J)=GAMGM(1,I)*DIGAM(1,J)+GAMGM(2,I)*DIGAM(2,J)
   20 CONTINUE
C
C
      IF(IGMRST.EQ.0) RETURN
C
      V8(1)=-DM5(1,3)*AZDD
      V8(2)=-DM5(2,3)*AZDD
      V8(3)=(DM5(1,1)+DM5(2,2))*AZDD
C
      CALL MATV(1,B0B,V8,V1)
C
      V8(1)=-DM6(1,2)*ELDD
      V8(2)=(DM6(3,3)+DM6(1,1))*ELDD
      V8(3)=-DM6(3,2)*ELDD
C
      CALL MATV(1,B0BC,V8,V2)
C
      V8(1)=-ZAZM(2)*AZDD
      V8(2)= ZAZM(1)*AZDD
      V8(3)=0.0D0
C
      CALL MATV(1,B0B,V8,V3)
C
      V8(1)= ZELM(3)*ELDD
      V8(2)= 0.0D0
      V8(3)=-ZELM(1)*ELDD
C
      CALL MATV(1,B0BC,V8,V4)
C
      DO 140 I=1,3
      RSRHST(I)=-V3(I)-V4(I)
      RSRHSR(I)=-V1(I)-V2(I)
  140 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE GIMBL2(ITEST,ZML,ETA,NALP)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CGIMBL/ AZIN(3,3),AZAX(3),AZCG(3),AZMS,AZYY(3,3),AZIAX(3,3)
     1              ,ELIN(3,3),ELAX(3),ELCG(3),ELMS,ELYY(3,3),ELIAX(3,3)
     2              ,ZZAZ(3,3)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/GMBLWK/ DELT(2,2),GAMGM(2,6),GMRHS(2),DI(2,2),DIGAM(2,6)
     1              ,DZML(6,6),YAZB(3),YELC(3)
C
      COMMON/GMBOUT/ AZ,AZD,EL,ELD,B(3,3),B0(3,3),B0B(3,3),C(3,3)
     1              ,B0BC(3,3),ZEL(3),YEL(3),YAZ(3),ZAZM(3),ZELM(3)
C
      COMMON/GMRSOT/ AZDD,ELDD,RSRHST(3),RSRHSR(3)
C
      COMMON/HGIMBL/ HGMB(3)
C
      COMMON/IGIMBL/ IGMBL,NAZIM,NELEV,NA1,NE1
C
      COMMON/IRSTGM/ IGMRST,IARST(3),IRSCY(3)
C
      COMMON/RPOOL1/ DUMV1(39),OMEG(3),DUMV2(38),YBCM(3),DUMV3(42)
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/TRQOUT/ OUTTRQ(150)
C
      COMMON/VARBLS/ DEP(150),DER(150)
C
C
      DIMENSION ZML(7,7),ETA(7),OMB(3),OMC(3)
      DIMENSION DM1(3,3),DM2(3,3),DM3(3,3),DM4(3,3)
      DIMENSION V1(3),V2(3),V3(3),V4(3),V5(3),V6(3)
      DIMENSION RHST(3),RHSR(3)
      DIMENSION DRHST(3),DRHSR(3),DIR(2)
      DIMENSION ZELBM(3)
      DIMENSION OMCPG(3)
      DIMENSION ZELC(3)
C
C
      IF(IGMBL.EQ.0) RETURN
C
      IF(ITEST.EQ.2) GO TO 100
C
C     SYSTEM TRANSLATION EQUATION
C
      AZD2=AZD*AZD
      V1(1)=-AZD2*ZAZM(1)
      V1(2)=-AZD2*ZAZM(2)
      V1(3)=0.0D0
      CALL MATV(1,B0B,V1,RHST)
C
      ELD2=ELD*ELD
      V1(1)=-ELD2*ZELM(1)
      V1(2)=0.0D0
      V1(3)=-ELD2*ZELM(3)
      CALL MATV(1,B0BC,V1,V2)
      CALL ADDV(V2,RHST,RHST)
C
      V1(1)=-AZD*ZAZM(2)
      V1(2)=AZD*ZAZM(1)
      V1(3)=0.0D0
      CALL MATV(1,B0B,V1,V2)
      V1(1)=ELD*ZELM(3)
      V1(2)=0.0D0
      V1(3)=-ELD*ZELM(1)
      CALL MATV(1,B0BC,V1,V3)
      CALL ADDV(V2,V3,V4)
      RHST(1)=RHST(1)+2.0D0*(OMEG(2)*V4(3)-OMEG(3)*V4(2))
      RHST(2)=RHST(2)+2.0D0*(OMEG(3)*V4(1)-OMEG(1)*V4(3))
      RHST(3)=RHST(3)+2.0D0*(OMEG(1)*V4(2)-OMEG(2)*V4(1))
C
      CALL MATV(1,C,V1,V2)
      V1(1)=-V2(2)
      V1(2)=V2(1)
      V1(3)=0.0D0
      CALL MATV(1,B0B,V1,V2)
      TWOAZD=2.0D0*AZD
      RHST(1)=RHST(1)+TWOAZD*V2(1)
      RHST(2)=RHST(2)+TWOAZD*V2(2)
      RHST(3)=RHST(3)+TWOAZD*V2(3)
C
C     SYSTEM ROTATION EQUATION
C
      V1(1)=ZZAZ(2,3)+ZAZM(2)*YAZB(3)
      V1(2)=-ZZAZ(1,3)-ZAZM(1)*YAZB(3)
      V1(3)=ZAZM(1)*YAZB(2)-ZAZM(2)*YAZB(1)
      CALL MATV(1,B0B,V1,V2)
      RHSR(1)=AZD2*V2(1)
      RHSR(2)=AZD2*V2(2)
      RHSR(3)=AZD2*V2(3)
C
      V1(1)=-ELIAX(3,2)-ZELM(3)*YELC(2)
      V1(2)=ZELM(3)*YELC(1)-ZELM(1)*YELC(3)
      V1(3)=ELIAX(1,2)+ZELM(1)*YELC(2)
      CALL MATV(1,B0BC,V1,V2)
      RHSR(1)=RHSR(1)+ELD2*V2(1)
      RHSR(2)=RHSR(2)+ELD2*V2(2)
      RHSR(3)=RHSR(3)+ELD2*V2(3)
C
      CALL MATV(2,B0B,OMEG,OMB)
      CALL MATV(2,C,OMB,OMC)
C
      OMCPG(1)=OMC(1)+AZD*C(3,1)
      OMCPG(2)=OMC(2)+AZD*C(3,2)
      OMCPG(3)=OMC(3)+AZD*C(3,3)
C
      TWOELD=2.0D0*ELD
C
      V1(1)=OMB(1)*(ZZAZ(1,2)+ZAZM(1)*YAZB(2))
     1     +OMB(2)*(ZZAZ(2,2)+ZAZM(2)*YAZB(2))
     2     +OMB(3)*(ZZAZ(2,3)+ZAZM(2)*YAZB(3))
C
      V1(2)=-OMB(1)*(ZZAZ(1,1)+ZAZM(1)*YAZB(1))
     1      -OMB(2)*(ZZAZ(2,1)+ZAZM(2)*YAZB(1))
     2      -OMB(3)*(ZZAZ(1,3)+ZAZM(1)*YAZB(3))
C
      V1(3)=OMB(3)*(ZAZM(1)*YAZB(2)-ZAZM(2)*YAZB(1))
C
      CALL MATV(1,B0B,V1,V2)
C
      RHSR(1)=RHSR(1)+TWOAZD*V2(1)
      RHSR(2)=RHSR(2)+TWOAZD*V2(2)
      RHSR(3)=RHSR(3)+TWOAZD*V2(3)
C
      V1(1)=-OMCPG(1)*(ELIAX(1,3)+ZELM(1)*YELC(3))
     1      -OMCPG(2)*(ELIAX(3,2)+ZELM(3)*YELC(2))
     2      -OMCPG(3)*(ELIAX(3,3)+ZELM(3)*YELC(3))
C
      V1(2)=OMCPG(2)*(ZELM(3)*YELC(1)-ZELM(1)*YELC(3))
C
      V1(3)=OMCPG(1)*(ELIAX(1,1)+ZELM(1)*YELC(1))
     1     +OMCPG(2)*(ELIAX(1,2)+ZELM(1)*YELC(2))
     2     +OMCPG(3)*(ELIAX(3,1)+ZELM(3)*YELC(1))
C
      CALL MATV(1,B0BC,V1,V2)
C
      RHSR(1)=RHSR(1)+TWOELD*V2(1)
      RHSR(2)=RHSR(2)+TWOELD*V2(2)
      RHSR(3)=RHSR(3)+TWOELD*V2(3)
C
      IF(IGMRST.EQ.0) GO TO 2
C
      DO 1 I=1,3
      RHST(I)=RHST(I)-RSRHST(I)
      RHSR(I)=RHSR(I)-RSRHSR(I)
      DRHSR(I)=0.0D0
      I3=I+3
      ETA(I)=ETA(I)-RHST(I)
      ETA(I3)=ETA(I3)-RHSR(I)
    1 CONTINUE
C
      GO TO 35
C
C
    2 CONTINUE
C
C     RELATIVE ROTATION EQUATIONS  AZIMUTH AND ELEVATION
C
      RHAZ=-OMB(1)*OMB(1)*(ZZAZ(1,2)+ZAZM(1)*YAZB(2))
     1     +OMB(1)*OMB(2)*(ZZAZ(1,1)+ZAZM(1)*YAZB(1)
     2                    -ZZAZ(2,2)-ZAZM(2)*YAZB(2))
     3     -OMB(1)*OMB(3)*(ZZAZ(2,3)+ZAZM(2)*YAZB(3))
     4     +OMB(2)*OMB(2)*(ZZAZ(2,1)+ZAZM(2)*YAZB(1))
     5     +OMB(2)*OMB(3)*(ZZAZ(1,3)+ZAZM(1)*YAZB(3))
     6     +OMB(3)*OMB(3)*(ZAZM(2)*YAZB(1)-ZAZM(1)*YAZB(2))
C
      RHEL= OMC(1)*OMC(1)*(ELIAX(1,3)+ZELM(1)*YELC(3))
     1     +OMC(1)*OMC(2)*(ELIAX(3,2)+ZELM(3)*YELC(2))
     2     +OMC(1)*OMC(3)*(ELIAX(3,3)+ZELM(3)*YELC(3)
     3                    -ELIAX(1,1)-ZELM(1)*YELC(1))
     4     +OMC(2)*OMC(2)*(ZELM(1)*YELC(3)-ZELM(3)*YELC(1))
     5     -OMC(2)*OMC(3)*(ELIAX(1,2)+ZELM(1)*YELC(2))
     6     -OMC(3)*OMC(3)*(ELIAX(3,1)+ZELM(3)*YELC(1))
C
      CALL MATV(2,C,ELAX,ZELC)
      RHEL=RHEL+
     1     AZD2*(C(3,1)*C(3,1)*(ELIAX(1,3)+ZELM(1)*ZELC(3))
     2          +C(3,1)*C(3,2)*(ELIAX(3,2)+ZELM(3)*ZELC(2))
     3          +C(3,1)*C(3,3)*(ELIAX(3,3)+ZELM(3)*ZELC(3)
     4                        -ELIAX(1,1)-ZELM(1)*ZELC(1))
     5          +C(3,2)*C(3,2)*(ZELM(1)*ZELC(3)-ZELM(3)*ZELC(1))
     6          -C(3,2)*C(3,3)*(ELIAX(1,2)+ZELM(1)*ZELC(2))
     7          -C(3,3)*C(3,3)*(ELIAX(3,1)+ZELM(3)*ZELC(1)))
C
      CALL MATV(1,C,ZELM,ZELBM)
      CALL MPYMAT(C,ELIAX,C,2,2,DM2,DM1)
C
      RHAZ=RHAZ+
     1     ELD2*(-C(1,2)*C(1,2)*(DM1(2,1)+ZELBM(2)*ELAX(1))
     2           +C(1,2)*C(2,2)*(DM1(1,1)+ZELBM(1)*ELAX(1)
     3                          -DM1(2,2)-ZELBM(2)*ELAX(2))
     4           -C(1,2)*C(3,2)*(DM1(3,2)+ZELBM(3)*ELAX(2))
     5           +C(2,2)*C(2,2)*(DM1(1,2)+ZELBM(1)*ELAX(2))
     6           +C(2,2)*C(3,2)*(DM1(3,1)+ZELBM(3)*ELAX(1))
     7           +C(3,2)*C(3,2)*(ZELBM(1)*ELAX(2)-ZELBM(2)*ELAX(1)))
C
      V1(1)=OMB(1)
      V1(2)=OMB(2)
      V1(3)=OMB(3)+AZD
C
      RHAZ=RHAZ+TWOELD*
     1    ((C(2,2)*V1(2)+C(3,2)*V1(3))*(DM1(1,2)+ZELBM(1)*ELAX(2))
     2     -C(1,2)*V1(2)*(DM1(2,2)+ZELBM(2)*ELAX(2))
     3     -C(1,2)*V1(3)*(DM1(3,2)+ZELBM(3)*ELAX(2))
     4     +C(2,2)*V1(1)*(DM1(1,1)+ZELBM(1)*ELAX(1))
     5     -(C(3,2)*V1(3)+C(1,2)*V1(1))*(DM1(2,1)+ZELBM(2)*ELAX(1))
     6     +C(2,2)*V1(3)*(DM1(3,1)+ZELBM(3)*ELAX(1)))
C
      RHEL=RHEL+TWOAZD*
     1    (C(3,1)*(OMC(1)*(ELIAX(1,3)+ZELM(1)*ZELC(3))
     2            +OMC(2)*(ELIAX(3,2)+ZELM(3)*ZELC(2))
     3            +OMC(3)*(ELIAX(3,3)+ZELM(3)*ZELC(3)))
     4    +C(3,2)*OMC(2)*(ZELM(1)*ZELC(3)-ZELM(3)*ZELC(1))
     5    -C(3,3)*(OMC(1)*(ELIAX(1,1)+ZELM(1)*ZELC(1))
     6            +OMC(2)*(ELIAX(1,2)+ZELM(1)*ZELC(2))
     7            +OMC(3)*(ELIAX(3,1)+ZELM(3)*ZELC(1))))
C
      CALL GMBINF(AZIF,ELIF)
C
      CALL GMBCNT(AZCNT,ELCNT)
C
      OUTTRQ(31)=AZCNT
      OUTTRQ(32)=ELCNT
C
      GMRHS(1)=-RHAZ-AZIF+AZCNT
      GMRHS(2)=-RHEL-ELIF+ELCNT
C
      DIR(1)=DI(1,1)*GMRHS(1)+DI(1,2)*GMRHS(2)
      DIR(2)=DI(2,1)*GMRHS(1)+DI(2,2)*GMRHS(2)
C
      DO 10 I=1,3
      I3=I+3
      DRHST(I)=GAMGM(1,I)*DIR(1)+GAMGM(2,I)*DIR(2)
      DRHSR(I)=GAMGM(1,I3)*DIR(1)+GAMGM(2,I3)*DIR(2)
      ETA(I)=ETA(I)-RHST(I)-DRHST(I)
      ETA(I3)=ETA(I3)-RHSR(I)-DRHSR(I)
   10 CONTINUE
C
      DO 20 I=1,6
      DO 20 J=1,6
      ZML(I,J)=ZML(I,J)-DZML(I,J)
   20 CONTINUE
C
      IF(IOUT.EQ.1) GO TO 30
      WRITE(6,1000)
 1000 FORMAT('0',10X,'DEBUG OUTPUT FROM GIMBL2')
      WRITE(6,1001) DELT,DI
 1001 FORMAT('0',1P12E11.4)
      WRITE(6,1001) GAMGM
      WRITE(6,1001) DIGAM
      WRITE(6,1001) RHAZ,RHEL,AZIF,ELIF,AZCNT,ELCNT,RHST,RHSR
      WRITE(6,1001) DRHST,DRHSR
      WRITE(6,1002) ZML
      WRITE(6,1003) ETA
 1002 FORMAT('0',2X,'ZML',6X,1P7E13.5)
 1003 FORMAT('0',2X,'ETA',6X,1P7E13.5)
   30 CONTINUE
C
   35 CONTINUE
C
      DO 40 I=1,3
      I1=I+20
      OUTTRQ(I1)=RHSR(I)+DRHSR(I)
   40 CONTINUE
C
C
      RETURN
C
C
  100 CONTINUE
C
      IF(IGMRST.NE.0) GO TO 112
C
C     CONSTRUCT DERIVATIVES FOR AZIMUTH AND ELEVATION
C
      DAZD=0.0D0
      DELD=0.0D0
      DO 110 I=1,6
      DAZD=DAZD-DIGAM(1,I)*ETA(I)
      DELD=DELD-DIGAM(2,I)*ETA(I)
  110 CONTINUE
C
C
      DER(NAZIM)=DEP(NA1)
      DER(NA1)=DIR(1)+DAZD
      DER(NELEV)=DEP(NE1)
      DER(NE1)=DIR(2)+DELD
C
  112 CONTINUE
C
C     CALCULATE MOMENTUM FOR OUTPUT
C
      DO 115 I=1,3
      V1(I)=YBCM(I)/ZMS
  115 CONTINUE
      CALL MATV(2,B0B,V1,V2)
      CALL MATV(2,B0BC,V1,V3)
C
      V4(1)=AZD*(-ZZAZ(3,1)-(YAZB(3)-V2(3))*ZAZM(1))
      V4(2)=AZD*(-ZZAZ(3,2)-(YAZB(3)-V2(3))*ZAZM(2))
      V4(3)=AZD*(ZZAZ(1,1)+ZZAZ(2,2)+(YAZB(1)-V2(1))*ZAZM(1)
     1                              +(YAZB(2)-V2(2))*ZAZM(2))
      V5(1)=ELD*(-ELIAX(1,2)-(YELC(1)-V3(1))*ZELM(2))
      V5(2)=ELD*(ELIAX(3,3)+ELIAX(1,1)+(YELC(3)-V3(3))*ZELM(3)
     1                                +(YELC(1)-V3(1))*ZELM(1))
      V5(3)=ELD*(-ELIAX(3,2)-(YELC(3)-V3(3))*ZELM(2))
C
      CALL MATV(1,B0B,V4,V1)
      CALL MATV(1,B0BC,V5,V2)
C
      DO 120 I=1,3
      HGMB(I)=V1(I)+V2(I)
  120 CONTINUE
C
C
C
      RETURN
C
      END
      SUBROUTINE GINPUT(DEPEND)
C
C        'GINPUT' COMPUTES VARIABLES FROM INPUT FOR LATER USE
C
        IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON /IPRYRT/ IPRY
      COMMON/KNERGY/ S,OMC,BT
C
      COMMON/LIBDPR/ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,ZMDO,
     *              ZMDBO,CNV,DECAY
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL6/ FM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/XIN2  / ALFAE,BETAE,GAMAE,OMBC(3),ITEST2
C
C
      COMMON/PRYRAT/PRAT,RRAT,YRAT
C
      DIMENSION S(3,3),ST(3,3),BS(3,3),BT(3,3),OMC(3),SXOMC(3),
     .          DEPEND(150)
C
      RADIUS=0.D0
      DO 5 I=1,3
    5 RADIUS=RADIUS + XSAT(I)*XSAT(I)
      RADIUS=DSQRT(RADIUS)
C
      ALFAE=ALFAE*RADIAN
      BETAE=BETAE*RADIAN
      GAMAE=GAMAE*RADIAN
C
      SALFAE=DSIN(ALFAE)
      CALFAE=DCOS(ALFAE)
      SBETAE=DSIN(BETAE)
      CBETAE=DCOS(BETAE)
      SGAMAE=DSIN(GAMAE)
      CGAMAE=DCOS(GAMAE)
C
      ANG1=CBETAE*CGAMAE
      ANG2=CBETAE*SGAMAE
      ANG3=SBETAE*SGAMAE
      ANG4=SBETAE*CGAMAE
C
      S(1,1)= ANG1 + SALFAE*ANG3
      S(2,1)=-ANG2 + SALFAE*ANG4
      S(3,1)= CALFAE*SBETAE
C
      S(1,2)= CALFAE*SGAMAE
      S(2,2)= CALFAE*CGAMAE
      S(3,2)=-SALFAE
C
      S(1,3)=-ANG4 + SALFAE*ANG2
      S(2,3)= ANG3 + SALFAE*ANG1
      S(3,3)= CALFAE*CBETAE
C
      DO 10 I=1,3
      DO 10 J=1,3
   10 ST(I,J)=S(J,I)
C
      DO 20 I=1,3
   20 BS(3,I)=XSAT(I)/RADIUS
      YZ=XSAT(2)*XSATDT(3) - XSAT(3)*XSATDT(2)
      ZX=XSAT(3)*XSATDT(1) - XSAT(1)*XSATDT(3)
      XY=XSAT(1)*XSATDT(2) - XSAT(2)*XSATDT(1)
C
      RXVMAG=DSQRT(YZ*YZ + ZX*ZX + XY*XY)
C
      BS(2,1)=YZ/RXVMAG
      BS(2,2)=ZX/RXVMAG
      BS(2,3)=XY/RXVMAG
C
      BS(1,1)=BS(2,2)*BS(3,3)-BS(2,3)*BS(3,2)
      BS(1,2)=BS(2,3)*BS(3,1)-BS(2,1)*BS(3,3)
      BS(1,3)=BS(2,1)*BS(3,2)-BS(2,2)*BS(3,1)
C
      DO 30 I=1,3
      DO 30 J=1,3
   30 BT(I,J)=BS(J,I)
C
      CALL MATMPY(BT,ST,SA,3,3)
C
      DO 40 I=1,3
      DO 40 J=1,3
   40 SAT(I,J)=SA(J,I)
C
C
      OMC(1)=0.D0
      OMC(2)=RXVMAG/RADIUS**2
      DOTX=AD(1)*YZ
      DOTY=AD(2)*ZX
      DOTZ=AD(3)*XY
C
      OMC(3)=((DOTX + DOTY + DOTZ)*RADIUS)/RXVMAG**2
C
      DO 50 I=1,3
      SXOMC(I)=0.D0
      DO 50 J=1,3
   50 SXOMC(I)=SXOMC(I) + S(I,J)*OMC(J)
      IF(IPRY .EQ. 0) GO TO 60
      OMBC(1) = (CALFAE*SGAMAE*PRAT + CGAMAE*RRAT)/RADIAN
      OMBC(2) = (CALFAE*CGAMAE*PRAT - SGAMAE*RRAT)/RADIAN
      OMBC(3) = (-SALFAE*PRAT + YRAT)/RADIAN
   60 CONTINUE
C
      DO 70 I=1,3
   70 OMEG(I)=OMBC(I) + SXOMC(I)/RADIAN
C
      ALFAE=ALFAE/RADIAN
      BETAE=BETAE/RADIAN
      GAMAE=GAMAE/RADIAN
C
      L=0
      DO 80 I=1,2
      DO 80 J=1,3
      L=L + 1
   80 DEPEND(L)=SA(I,J)
C
      DO 90 I=1,3
      OMEG(I)=OMEG(I)*RADIAN
   90 DEPEND(I+6)=OMEG(I)
C
C
      IF(IDAMP.EQ.0) RETURN
      PHI=PHILD*RADIAN
      PHID=DPHILD*RADIAN
      DEPEND(10)=PHI
      DEPEND(11)=PHID
C
C
      RETURN
      END
      SUBROUTINE GMBDRD
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CGIMBD/ELIN(3,3),ELAX(3),ELCG(3),ELMS,ZTZT(3,3)
C
      COMMON/DMBICS/ELEVI,ELEVID,GMUP(2),GMDN(2)
C
      COMMON/DMINTF/GMK1(2),GMK2(2),GMDMP(2),GMSTP(2)
C
      COMMON/DMPRPL/ GMBAZ,GMBAZD,GMBEL,GMBELD
C
      COMMON/ELKDMP/ OMKDMP(3,10),IOMKDM(10)
C
      COMMON/IGIMBD/IGMBL,NELEV,NE1
C
      DIMENSION HEDGM(5)
      DIMENSION HEDIC(5)
      DIMENSION HEDJD(5)
      REAL*4 BUFF(450)
C
      DATA I8/',A8,'/
      DATA HEDGM/'    ELEV',' GIMBLE ','PHYSICAL',' PROPERT','IES     '/
      DATA HEDIC/'GIMBLE I','NITIAL C','ONDITION','S       ','        '/
      DATA HEDJD/'JET DAMP','ING OPTI','ON INVOK','ED      ','        '/
C
      CALL SETUP(8HDELIN   ,8,ELIN,3,3)
      CALL SETUP(8HDELAX   ,8,ELAX,3)
      CALL SETUP(8HDELCG   ,8,ELCG,3)
      CALL SETUP(8HDELMS   ,8,ELMS)
C
      CALL SETUP(8HDLEVI   ,8,ELEVI)
      CALL SETUP(8HDLEVID  ,8,ELEVID)
      CALL SETUP(8HDMUP    ,8,GMUP,2)
      CALL SETUP(8HDMDN    ,8,GMDN,2)
C
      CALL SETUP(8HDMK1    ,8,GMK1,2)
      CALL SETUP(8HDMK2    ,8,GMK2,2)
      CALL SETUP(8HDMDMP   ,8,GMDMP,2)
      CALL SETUP(8HDMSTP   ,8,GMSTP,2)
C
      CALL SETUP(8HIGMBLD  ,4,IGMBL)
C
      CALL SETUP(8HOMKDMP  ,8,OMKDMP,3,10)
      CALL SETUP(8HIOMKDM  ,4,IOMKDM,10)
C
      CALL DAMPCS
C
C
      RETURN
C
C    ***************************************************************
      ENTRY ECHDGM
C    ***************************************************************
C
      IF(IGMBL.EQ.0) GO TO 10
C
      CALL HVAL(HEDGM)
C
      CALL FVAL('ELIN    ',4,ELIN,3,3,2)
      CALL FVAL('ELAX    ',4,ELAX,3,0,1)
      CALL FVAL('ELCG    ',4,ELCG,3,0,1)
      CALL FVAL('ELMS    ',4,ELMS,0,0,0)
C
      CALL HVAL(HEDIC)
C
      CALL FVAL('ELEVI   ',5,ELEVI,0,0,0)
      CALL FVAL('ELEVID  ',6,ELEVID,0,0,0)
C
   10 CONTINUE
C
      RETURN
C
C    ***************************************************************
      ENTRY DMBPLT(BUFF,INDX)
C    ***************************************************************
C
      INDEX=INDX-1
      INDX=INDX+4
C
      IF(IGMBL.EQ.0) RETURN
C
      BUFF(INDEX+1)=GMBAZ
      BUFF(INDEX+2)=GMBAZD
      BUFF(INDEX+3)=GMBEL
      BUFF(INDEX+4)=GMBELD
C
      RETURN
C
C    ***************************************************************
      ENTRY DMPRNT
C    ***************************************************************
C
      IF(IGMBL.EQ.0) RETURN
C
      CALL SET('GMBL AZ ',0,0,GMBAZ,I8)
      CALL SET('GMBL AZD',0,0,GMBAZD,I8)
      CALL SET('GMBL EL ',0,0,GMBEL,I8)
      CALL SET('GMBL ELD',0,0,GMBELD,I8)
C
C
      RETURN
C
C
C
      END
      SUBROUTINE GMBINF(AZIF,ELIF)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/GMINTF/GMK1(2),GMK2(2),GMDMP(2),GMSTP(2)
C
      COMMON/GMBOUT/AZ,AZD,EL,ELD
C
C
      WSA=0.0D0
      DENA=DABS(AZ)
      IF(DENA.GT.GMSTP(1)) WSA=DENA-GMSTP(1)
      WSE=0.0D0
      DENE=DABS(EL)
      IF(DENE.GT.GMSTP(2)) WSE=DENE-GMSTP(2)
      IF(DENA.NE.0.0D0) WSA=WSA*AZ/DENA
      IF(DENE.NE.0.0D0) WSE=WSE*EL/DENE
      AZIF=GMK1(1)*AZ+GMK2(1)*WSA+GMDMP(1)*AZD
      ELIF=GMK1(2)*EL+GMK2(2)*WSE+GMDMP(2)*ELD
C
C
      RETURN
C
C
      END
      SUBROUTINE GMBLD1(SY1,SY2,SY3,SZ1,SZ2,SZ3,CIY,CIZ)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CGIMBD/DELIN(3,3),DELAX(3),DELCG(3),DELMS,ZTZT(3,3)
C
      COMMON/CONSTS/PI,TWOPI,RADIAN
C
      COMMON/GMBDWK/DELT,GAMGM(7),GMRHS,DI,DZML(7,7),Y1(3),Y2(3),Y4(3)
C
     1             ,Y5(3),Z1(3),Z3(3),Z4(3),Z5(3),ZT2(3),ZT3(3),ZT4(3)
C
     2             ,ZT5(3)
C
      COMMON/GMBDUT/AZ,AZD,EL,ELD,B(3,3),F(3,3),FB(3,3)
C
      COMMON/DMPRPL/GMBAZ,GMBAZD,GMBEL,GMBELD
C
      COMMON/IGIMBD/IGMBLD,NELEV,NE1
C
      COMMON/RPOOL1/DUM1(10),T,SA(3,3),FM1(3,3),DUM2(51),YBCM(3)
C
     1             ,DUM3(40),PHID,PHI
C
      COMMON/RPOOL3/ZMS,YIZM(3,2)
C
      COMMON/VARBLS/DEP(150),DER(150)
C
C
      DIMENSION CIY(3,3),CIZ(3,3),DM1(3,3),DM2(3,3),DM3(3,3)
      DIMENSION DM4(3,3),DM5(3,3),ZZ(3,3),YY(3,3)
      DIMENSION Y3(3),Z2(3),ZT1(3)
C
      EQUIVALENCE (ZT1(1),DELCG(1)),(Z2(1),DELAX(1))
      EQUIVALENCE (Y3(1),YIZM(1,1))
C
C
      IF(IGMBLD.EQ.0) RETURN
C
      DELT=ZTZT(2,2)+ZTZT(3,3)
      DI=1.0D0/DELT
      AZ=PHI
      AZD=PHID
      EL=DEP(NELEV)
      ELD=DEP(NE1)
      SEL=DSIN(EL)
      CEL=DCOS(EL)
      GMBAZ=AZ/RADIAN
      GMBAZD=AZD/RADIAN
      GMBEL=EL/RADIAN
      GMBELD=ELD/RADIAN
      DO 2 I=1,3
      DO 1 J=1,3
      B(I,J)=0.0D0
      F(I,J)=FM1(I,J)
    1 CONTINUE
      B(I,I)=CEL
    2 CONTINUE
      B(1,1)=1.0D0
      B(2,3)=-SEL
      B(3,2)=SEL
C
      CALL MPYMAT(F,B,DM1,1,1,FB,DM1)
      CALL MATV(1,B,ZT1,Z1)
      CALL MATV(1,FB,ZT1,Y1)
      CALL MATV(1,F,Z2,Y2)
      CALL MATV(2,B,Z2,ZT2)
      CALL MATV(2,F,Y3,Z3)
      CALL MATV(2,FB,Y3,ZT3)
      CALL ADDV(Y2,Y3,Y4)
      CALL ADDV(Z2,Z3,Z4)
      CALL ADDV(ZT2,ZT3,ZT4)
      CALL ADDV(Y1,Y4,Y5)
      CALL ADDV(Z1,Z4,Z5)
      CALL ADDV(ZT1,ZT4,ZT5)
      CALL MPYMAT(B,ZTZT,B,2,2,DM1,ZZ)
      CALL MPYMAT(FB,ZTZT,FB,2,2,DM1,YY)
C
      DO 5 I=1,3
      DO 4 J=1,3
      CIY(I,J)=CIY(I,J)+YY(I,J)+DELMS*Y5(I)*Y5(J)
      CIZ(I,J)=CIZ(I,J)+ZZ(I,J)+DELMS*(Z1(I)+Z2(I))*(Z1(J)+Z2(J))
    4 CONTINUE
      YBCM(I)=YBCM(I)+DELMS*Y5(I)
    5 CONTINUE
C
      SY1=SY1+DELMS*Y5(1)
      SY2=SY2+DELMS*Y5(2)
      SY3=SY3+DELMS*Y5(3)
      SZ1=SZ1+DELMS*(Z1(1)+Z2(1))
      SZ2=SZ2+DELMS*(Z1(2)+Z2(2))
      SZ3=SZ3+DELMS*(Z1(3)+Z2(3))
C
      YTR=0.0D0
      DO 10 I=1,3
      GAMGM(I)=DELMS*(FB(I,3)*ZT1(2)-FB(I,2)*ZT1(3))
      DO 9 J=1,3
      DM4(I,J)=YY(I,J)+DELMS*Y1(I)*Y5(J)
      DM3(I,J)=ZZ(I,J)+DELMS*(Z1(I)+Z2(I))*Z1(J)
    9 CONTINUE
      YTR=YTR+DM4(I,I)
   10 CONTINUE
C
      DO 15 I=1,3
      DO 14 J=1,3
      DM5(I,J)=-DM4(I,J)
   14 CONTINUE
      DM5(I,I)=DM5(I,I)+YTR
   15 CONTINUE
C
      DO 16 I=1,3
      I3=I+3
      GAMGM(I3)=FB(1,1)*DM5(I,1)+FB(2,1)*DM5(I,2)+FB(3,1)*DM5(I,3)
   16 CONTINUE
C
      GAMGM(7)=-B(1,1)*DM3(1,2)+B(2,1)*(DM3(3,3)+DM3(1,1))
     1         -B(3,1)*DM3(3,2)
C
      DO 18 I=1,7
      DO 18 J=1,7
      DZML(I,J)=DI*GAMGM(I)*GAMGM(J)
   18 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE GMBLD2(ITEST,ZML,ETA)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ADDMOM/HAWH(3),HAXWH(3),HELGM(3)
C
      COMMON/CGIMBD/DELIN(3,3),DELAX(3),DELCG(3),DELMS,ZTZT(3,3)
C
      COMMON/GMBDWK/DELT,GAMGM(7),GMRHS,DI,DZML(7,7),Y1(3),Y2(3),Y4(3)
C
     1             ,Y5(3),Z1(3),Z3(3),Z4(3),Z5(3),ZT2(3),ZT3(3),ZT4(3)
C
     2             ,ZT5(3)
C
      COMMON/GMBDUT/AZ,AZD,EL,ELD,B(3,3),F(3,3),FB(3,3)
C
      COMMON/IGIMBD/IGMBLD,NELEV,NE1
C
      COMMON/RPOOL1/DUM1(39),OMEG(3),DUM2(38),YBCM(3),DUM3(42)
C
      COMMON/RPOOL3/ZMS,YIZM(3,2)
C
      COMMON/TRQOUT/OUTTRQ(150)
C
      COMMON/VARBLS/DEP(150),DER(150)
C
C
      DIMENSION ZML(7,7),ETA(7)
      DIMENSION ZT01(3),ZT02(3),ZT03(3),ZT04(3),ZT05(3)
      DIMENSION O1(3),O2(3),O3(3),O4(3),O5(3)
      DIMENSION U1(3),U2(3),U3(3),U4(3),U5(3)
      DIMENSION Y3(3),Z2(3),ZT1(3)
C
C
      EQUIVALENCE (ZT1(1),DELCG(1)),(Z2(1),DELAX(1))
      EQUIVALENCE (Y3(1),YIZM(1,1))
C
      IF(IGMBLD.EQ.0) RETURN
C
      IF(ITEST.EQ.2) GO TO 100
C
      DO 2 I=1,3
      ZT01(I)=0.0D0
      O1(I)=0.0D0
    2 CONTINUE
      O1(2)=AZD
      ZT01(1)=ELD
      CALL MATV(2,B,O1,ZT02)
      CALL MATV(2,FB,OMEG,ZT03)
      DO 3 I=1,3
      ZT04(I)=ZT01(I)+2.0D0*(ZT02(I)+ZT03(I))
    3 CONTINUE
C
C     SYSTEM TRANSLATION ADDED TERMS FROM ELEVATION PLATFORM
C
      WS=ELD*DELMS
      U2(1)=WS*(ZT04(2)*ZT1(2)+ZT04(3)*ZT1(3))
      U2(2)=-WS*ZT04(1)*ZT1(2)
      U2(3)=-WS*ZT04(1)*ZT1(3)
      CALL MATV(1,FB,U2,U1)
C
C      SYSTEM ROTATION ADDED TERMS FROM ELEVATION PLATFORM (U2)
C
      U3(1)=ELD*ZT04(1)*DELMS*(ZT1(2)*ZT5(3)-ZT1(3)*ZT5(2))
      U3(2)=ELD*(ZT04(1)*(DELMS*ZT1(3)*ZT5(1)+ZTZT(1,3))
     1          +ZT04(2)*(DELMS*ZT1(2)*ZT5(3)+ZTZT(3,2))
     2          +ZT04(3)*(DELMS*ZT1(3)*ZT5(3)+ZTZT(3,3)))
      U3(3)=-ELD*(ZT04(1)*(DELMS*ZT1(2)*ZT5(1)+ZTZT(1,2))
     1           +ZT04(2)*(DELMS*ZT1(2)*ZT5(2)+ZTZT(2,2))
     2           +ZT04(3)*(DELMS*ZT1(3)*ZT5(2)+ZTZT(2,3)))
      CALL MATV(1,FB,U3,U2)
C
C     DAMPER EQUATION ADDED TERM FROM ELEVATION PLATFORM
C
      U4(1)=ELD*ZT04(1)*DELMS*(ZT1(2)*ZT2(3)-ZT1(3)*ZT2(2))
      U4(2)=ELD*(ZT04(1)*(DELMS*ZT1(3)*(ZT1(1)+ZT2(1))+ZTZT(1,3))
     1          +ZT04(2)*(DELMS*ZT1(2)*(ZT1(3)+ZT2(3))+ZTZT(3,2))
     2          +ZT04(3)*(DELMS*ZT1(3)*(ZT1(3)+ZT2(3))+ZTZT(3,3)))
      U4(3)=-ELD*(ZT04(1)*(DELMS*ZT1(2)*(ZT1(1)+ZT2(1))+ZTZT(1,2))
     1           +ZT04(2)*(DELMS*ZT1(2)*(ZT1(2)+ZT2(2))+ZTZT(2,2))
     2           +ZT04(3)*(DELMS*ZT1(3)*(ZT1(2)+ZT2(2))+ZTZT(2,3)))
      CALL MATV(1,B,U4,U3)
C
      DO 6 I=1,3
      I3=I+3
      ETA(I)=ETA(I)-U1(I)
      ETA(I3)=ETA(I3)-U2(I)
    6 CONTINUE
      ETA(7)=ETA(7)-U3(2)
C
C     TERMS FOR ELEVATION GIMBLE EQUATION OF MOTION
C
      GMRHS=ZT03(1)*ZT03(3)*(DELMS*ZT5(1)*ZT1(2)+ZTZT(1,2))
     1     +ZT03(2)*ZT03(3)*(DELMS*ZT5(2)*ZT1(2)+ZTZT(2,2))
     2     -(ZT03(1)*ZT03(1)+ZT03(2)*ZT03(2))*(DELMS*ZT5(3)*ZT1(2)
     3                                        +ZTZT(3,2))
     4     -ZT03(1)*ZT03(2)*(DELMS*ZT5(1)*ZT1(3)+ZTZT(1,3))
     5
     5     +(ZT03(3)*ZT03(3)+ZT03(1)*ZT03(1))*(DELMS*ZT5(2)*ZT1(3)
     6                                        +ZTZT(2,3))
     7     -ZT03(2)*ZT03(3)*(DELMS*ZT5(3)*ZT1(3)+ZTZT(3,3))
C
      DO 8 I=1,3
      ZT05(I)=ZT02(I)+2.0D0*ZT03(I)
    8 CONTINUE
C
      GMRHS=GMRHS
     1     +ZT05(1)*ZT02(3)*(DELMS*(ZT1(1)+ZT2(1))*ZT1(2)+ZTZT(1,2))
     2     +ZT05(2)*ZT02(3)*(DELMS*(ZT1(2)+ZT2(2))*ZT1(2)+ZTZT(2,2))
     3     -(ZT05(1)*ZT02(1)+ZT05(2)*ZT02(2))*(DELMS*(ZT1(3)+ZT2(3))*
     4                                        ZT1(2)+ZTZT(3,2))
     5     -ZT05(1)*ZT02(2)*(DELMS*(ZT1(1)+ZT2(1))*ZT1(3)+ZTZT(1,3))
     6     +(ZT05(3)*ZT02(3)+ZT05(1)*ZT02(1))*(DELMS*(ZT1(2)+ZT2(2))*
     7                                        ZT1(3)+ZTZT(2,3))
     8     -ZT05(3)*ZT02(2)*(DELMS*(ZT1(3)+ZT2(3))*ZT1(3)+ZTZT(3,3))
C
C
      CALL GMDINF(ELIF)
C
      CALL GMDCNT(AZCNT,ELCNT)
C
C
      GMRHS=GMRHS+ELIF-ELCNT
C
      ETA(7)=ETA(7)+AZCNT
C
      OUTTRQ(37)=AZCNT
      OUTTRQ(38)=ELCNT
C
      DO 12 I=1,7
      DO 11 J=1,7
      ZML(I,J)=ZML(I,J)-DZML(I,J)
   11 CONTINUE
      ETA(I)=ETA(I)+GMRHS*DI*GAMGM(I)
   12 CONTINUE
C
C
      RETURN
C
  100 CONTINUE
C
C
      DELD=-DI*GMRHS
C
      DO 110 I=1,7
      DELD=DELD-DI*GAMGM(I)*ETA(I)
  110 CONTINUE
C
      DER(NELEV)=DEP(NE1)
      DER(NE1)=DELD
C
      DO 115 I=1,3
      U4(I)=YBCM(I)/ZMS
  115 CONTINUE
      CALL MATV(2,FB,U4,U5)
C  CALCULATE MOMENTUM FOR ELEVATION GIMBLE
      O5(1)=ELD*(ZTZT(2,2)+ZTZT(3,3)+DELMS*((ZT4(2)-U5(2))*ZT1(2)+
     1(ZT4(3)-U5(3))*ZT1(3)))
      O5(2)=-ELD*(ZTZT(1,2)+DELMS*(ZT4(1)-U5(1))*ZT1(2))
      O5(3)=-ELD*(ZTZT(1,3)+DELMS*(ZT4(1)-U5(1))*ZT1(3))
      CALL MATV(1,FB,O5,HELGM)
C
C
      RETURN
C
C
      END
      SUBROUTINE GMBLRD
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CGIMBL/ AZIN(3,3),AZAX(3),AZCG(3),AZMS,AZYY(3,3),AZIAX(3,3)
     1              ,ELIN(3,3),ELAX(3),ELCG(3),ELMS,ELYY(3,3),ELIAX(3,3)
     2              ,ZZAZ(3,3)
C
      COMMON/CRSTGM/ DELA(3),TAUA(4,3),ANG20(3),ADD0(3),TC(3),TTAB(4,3)
C
      COMMON/GMBICS/ AZIM0,ROLL0,ELEV0,AZIMI,AZIMID,ELEVI,ELEVID
     1              ,GMUP(2),GMDN(2)
C
      COMMON/GMINTF/ GMK1(2),GMK2(2),GMDMP(2),GMSTP(2)
C
      COMMON/GMPRPL/ GMBAZ,GMBAZD,GMBEL,GMBELD
C
      COMMON/IGIMBL/ IGMBL,NAZIM,NELEV,NA1,NE1
C
      COMMON/IRSTGM/ IGMRST,IARST(3),IRSCY(3)
C
      COMMON/JETDMP/ ZMS0,TANKCG(3),FUELPP(2),FUELM,DMDT(2)
     1              ,RGYFL(3),IJTDMP
C
C
      DIMENSION HEDGM(5)
      DIMENSION HEDIC(5)
      DIMENSION HEDR1(5)
      DIMENSION HEDR2(5)
      DIMENSION HEDJD(5)
      REAL*4 BUFF(450)
C
      DATA I8/',A8,'/
      DATA HEDGM/'TWO AXIS',' GIMBLE ','PHYSICAL',' PROPERT','IES     '/
      DATA HEDR1/'TWO AXIS',' GIMBLE ','RASTERIN','G OPTION','        '/
      DATA HEDIC/'GIMBLE I','NITIAL C','ONDITION','S       ','        '/
      DATA HEDJD/'JET DAMP','ING OPTI','ON INVOK','ED      ','        '/
C
      CALL SETUP(8HAZIN    ,8,AZIN,3,3)
      CALL SETUP(8HAZAX    ,8,AZAX,3)
      CALL SETUP(8HAZCG    ,8,AZCG,3)
      CALL SETUP(8HAZMS    ,8,AZMS)
      CALL SETUP(8HELIN    ,8,ELIN,3,3)
      CALL SETUP(8HELAX    ,8,ELAX,3)
      CALL SETUP(8HELCG    ,8,ELCG,3)
      CALL SETUP(8HELMS    ,8,ELMS)
C
      CALL SETUP(8HAZIM0   ,8,AZIM0)
      CALL SETUP(8HROLL0   ,8,ROLL0)
      CALL SETUP(8HELEV0   ,8,ELEV0)
      CALL SETUP(8HAZIMI   ,8,AZIMI)
      CALL SETUP(8HAZIMID  ,8,AZIMID)
      CALL SETUP(8HELEVI   ,8,ELEVI)
      CALL SETUP(8HELEVID  ,8,ELEVID)
      CALL SETUP(8HGMUP    ,8,GMUP,2)
      CALL SETUP(8HGMDN    ,8,GMDN,2)
C
      CALL SETUP(8HGMK1    ,8,GMK1,2)
      CALL SETUP(8HGMK2    ,8,GMK2,2)
      CALL SETUP(8HGMDMP   ,8,GMDMP,2)
      CALL SETUP(8HGMSTP   ,8,GMSTP,2)
C
      CALL SETUP(8HGMDELA  ,8,DELA,3)
      CALL SETUP(8HGMTAUA  ,8,TAUA,4,3)
      CALL SETUP(8HGMAN20  ,8,ANG20,3)
      CALL SETUP(8HGMADD0  ,8,ADD0,3)
      CALL SETUP(8HGMTC    ,8,TC,3)
      CALL SETUP(8HGMTTAB  ,8,TTAB,4,3)
C
      CALL SETUP(8HIGMBL   ,4,IGMBL)
C
      CALL SETUP(8HIGMRST  ,4,IGMRST)
      CALL SETUP(8HIGARST  ,4,IARST,3)
      CALL SETUP(8HIGRSCY  ,4,IRSCY,3)
C
      CALL SETUP(8HIJTDMP  ,4,IJTDMP)
      CALL SETUP(8HZMS     ,8,ZMS0)
      CALL SETUP(8HTANKCG  ,8,TANKCG,3)
      CALL SETUP(8HFUELPP  ,8,FUELPP,2)
      CALL SETUP(8HFUELM   ,8,FUELM)
      CALL SETUP(8HRGYFL   ,8,RGYFL,3)
C
C
      CALL PLATCS
C
C
      RETURN
C
C    ***************************************************************
      ENTRY ECHOGM
C    ***************************************************************
C
      IF(IGMBL.EQ.0) GO TO 10
C
      CALL HVAL(HEDGM)
C
      CALL FVAL('AZIN    ',4,AZIN,3,3,2)
      CALL FVAL('AZAX    ',4,AZAX,3,0,1)
      CALL FVAL('AZCG    ',4,AZCG,3,0,1)
      CALL FVAL('AZMS    ',4,AZMS,0,0,0)
      CALL FVAL('ELIN    ',4,ELIN,3,3,2)
      CALL FVAL('ELAX    ',4,ELAX,3,0,1)
      CALL FVAL('ELCG    ',4,ELCG,3,0,1)
      CALL FVAL('ELMS    ',4,ELMS,0,0,0)
C
      CALL HVAL(HEDIC)
C
      CALL FVAL('AZIMI   ',5,AZIMI,0,0,0)
      CALL FVAL('AZIMID  ',6,AZIMID,0,0,0)
      CALL FVAL('ELEVI   ',5,ELEVI,0,0,0)
      CALL FVAL('ELEVID  ',6,ELEVID,0,0,0)
C
   10 CONTINUE
C
      IF(IJTDMP.EQ.0) GO TO 20
C
      CALL HVAL(HEDJD)
      CALL FVAL('FUELM   ',5,FUELM,0,0,0)
      CALL FVAL('TANKCG  ',6,TANKCG,3,0,1)
C
   20 CONTINUE
C
      IF(IGMRST.EQ.0) RETURN
C
      CALL HVAL(HEDR1)
      CALL IVAL('IGMRST  ',6,IGMRST,0,0,0)
      CALL IVAL('IGARST  ',6,IARST,3,0,1)
C
C
      RETURN
C
C    ***************************************************************
      ENTRY GMBPLT(BUFF,INDX)
C    ***************************************************************
C
      INDEX=INDX-1
      INDX=INDX+4
C
      IF(IGMBL.EQ.0) RETURN
C
      BUFF(INDEX+1)=GMBAZ
      BUFF(INDEX+2)=GMBAZD
      BUFF(INDEX+3)=GMBEL
      BUFF(INDEX+4)=GMBELD
      INDEX=INDEX+4
C
      RETURN
C
C    ***************************************************************
      ENTRY GMPRNT
C    ***************************************************************
C
      IF(IGMBL.EQ.0) RETURN
C
      CALL SET('GMBL AZ ',0,0,GMBAZ,I8)
      CALL SET('GMBL AZD',0,0,GMBAZD,I8)
      CALL SET('GMBL EL ',0,0,GMBEL,I8)
      CALL SET('GMBL ELD',0,0,GMBELD,I8)
C
C
      RETURN
C
C
C
      END
      SUBROUTINE GMDINF(ELIF)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/DMINTF/GMK1(2),GMK2(2),GMDMP(2),GMSTP(2)
C
      COMMON/GMBDUT/AZ,AZD,EL,ELD
C
C
      WSA=0.0D0
      DENA=DABS(AZ)
      IF(DENA.GT.GMSTP(1)) WSA=DENA-GMSTP(1)
      WSE=0.0D0
      DENE=DABS(EL)
      IF(DENE.GT.GMSTP(2)) WSE=DENE-GMSTP(2)
      IF(DENA.NE.0.0D0) WSA=WSA*AZ/DENA
      IF(DENE.NE.0.0D0) WSE=WSE*EL/DENE
      AZIF=GMK1(1)*AZ+GMK2(1)*WSA+GMDMP(1)*AZD
      ELIF=GMK1(2)*EL+GMK2(2)*WSE+GMDMP(2)*ELD
C
C
      RETURN
C
C
      END
      SUBROUTINE GMDINT
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ADDMOM/H1(3),H2(3),H3(3),HTIP(3)
C
      COMMON/ADSTAT/DER(150),DEP(150)
C
      COMMON/CGIMBD/ELIN(3,3),ELAX(3),ELCG(3),ELMS,ELYY(3,3)
C
      COMMON/CONSTS/PI,TWOPI,RADIAN
C
      COMMON/DMBICS/ELEVI,ELEVID,GMUP(2),GMDN(2)
C
      COMMON/GMBDUT/AZ,AZD,EL,ELD,B(3,3),B0(3,3),B0B(3,3)
C
      COMMON/IGIMBD/IGMBL,NELEV,NE1
C
      COMMON/XIN4  /UP(150),DN(150),BNDS(22)
C
C
      DIMENSION JJ(3),KK(3)
C
      DATA JJ/2,3,1/,KK/3,1,2/
      DO 2 I=1,3
      H1(I)=0.0D0
      H2(I)=0.0D0
      H3(I)=0.0D0
      HTIP(I)=0.0D0
    2 CONTINUE
C
C
      IF(IGMBL.EQ.0) RETURN
C
      DO 5 I=1,3
      J=JJ(I)
      K=KK(I)
      WSI=ELMS*ELCG(I)
      ELYY(I,I)=0.5D0*(ELIN(J,J)+ELIN(K,K)-ELIN(I,I))
      ELYY(I,J)=ELIN(I,J)
      ELYY(I,K)=ELIN(I,K)
    5 CONTINUE
C
      EL=ELEVI*RADIAN
      ELD=ELEVID*RADIAN
C
      NE1=NELEV+1
      DEP(NELEV)=EL
      DEP(NE1)=ELD
C
      UP(NELEV)=GMUP(1)
      DN(NELEV)=GMDN(1)
      UP(NE1)=GMUP(2)
      DN(NE1)=GMDN(2)
C
      RETURN
C
      END
      SUBROUTINE GMINIT
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ADSTAT/ DER(150),DEP(150)
C
      COMMON/CGIMBL/ AZIN(3,3),AZAX(3),AZCG(3),AZMS,AZYY(3,3),AZIAX(3,3)
     1              ,ELIN(3,3),ELAX(3),ELCG(3),ELMS,ELYY(3,3),ELIAX(3,3)
     2              ,ZZAZ(3,3)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CRSTGM/ DELA(3),TAUA(4,3),ANG20(3),ADD0(3),TC(3),TTAB(4,3)
C
      COMMON/GMBICS/ AZIM0,ROLL0,ELEV0,AZIMI,AZIMID,ELEVI,ELEVID
     1              ,GMUP(2),GMDN(2)
C
      COMMON/GMBOUT/ AZ,AZD,EL,ELD,B(3,3),B0(3,3),B0B(3,3),C(3,3)
     1              ,B0BC(3,3),ZEL(3),YEL(3),YAZ(3),ZAZM(3),ZELM(3)
C
      COMMON/IGIMBL/ IGMBL,NAZIM,NELEV,NA1,NE1
C
      COMMON/IRSTGM/ IRAST,IARST(3),IRSCY(3)
C
      COMMON/XIN4  / UP(150),DN(150),BNDS(22)
C
C
      DIMENSION JJ(3),KK(3)
C
      DATA JJ/2,3,1/,KK/3,1,2/
C
C
      IF(IGMBL.EQ.0) RETURN
C
      GAM=AZIM0*RADIAN
      ALP=ROLL0*RADIAN
      BET=ELEV0*RADIAN
C
      CALL DTR312(GAM,ALP,BET,B0)
C
      DO 5 I=1,3
      J=JJ(I)
      K=KK(I)
      AZYY(I,I)=0.5D0*(AZIN(J,J)+AZIN(K,K)-AZIN(I,I))
      ELYY(I,I)=0.5D0*(ELIN(J,J)+ELIN(K,K)-ELIN(I,I))
      AZYY(I,J)=AZIN(I,J)
      ELYY(I,J)=ELIN(I,J)
      AZYY(I,K)=AZIN(I,K)
      ELYY(I,K)=ELIN(I,K)
      AZIAX(I,I)=AZYY(I,I)+AZMS*AZCG(I)*AZCG(I)
      AZIAX(I,J)=AZIN(I,J)+AZMS*AZCG(I)*AZCG(J)
      AZIAX(I,K)=AZIN(I,K)+AZMS*AZCG(I)*AZCG(K)
      ELIAX(I,I)=ELYY(I,I)+ELMS*ELCG(I)*ELCG(I)
      ELIAX(I,J)=ELIN(I,J)+ELMS*ELCG(I)*ELCG(J)
      ELIAX(I,K)=ELIN(I,K)+ELMS*ELCG(I)*ELCG(K)
    5 CONTINUE
C
      AZ=AZIMI*RADIAN
      AZD=AZIMID*RADIAN
      EL=ELEVI*RADIAN
      ELD=ELEVID*RADIAN
C
      IF(IRAST.NE.0) GO TO 6
C
C
      NA1=NAZIM+1
      NE1=NELEV+1
      DEP(NAZIM)=AZ
      DEP(NA1)=AZD
      DEP(NELEV)=EL
      DEP(NE1)=ELD
C
      UP(NAZIM)=GMUP(1)
      DN(NAZIM)=GMDN(1)
      UP(NA1)=GMUP(2)
      DN(NA1)=GMDN(2)
      UP(NELEV)=GMUP(1)
      DN(NELEV)=GMDN(1)
      UP(NE1)=GMUP(2)
      DN(NE1)=GMDN(2)
C
    6 CONTINUE
C
      SAZ=DSIN(AZ)
      CAZ=DCOS(AZ)
      SEL=DSIN(EL)
      CEL=DCOS(EL)
C
      DO 10 I=1,3
      DO 9 J=1,3
      B(I,J)=0.0D0
      C(I,J)=0.0D0
    9 CONTINUE
      B(I,I)=CAZ
      C(I,I)=CEL
   10 CONTINUE
      B(3,3)=1.0D0
      B(1,2)=-SAZ
      B(2,1)=SAZ
      C(2,2)=1.0D0
      C(1,3)=SEL
      C(3,1)=-SEL
C
C
      IF(IRAST.EQ.0) GO TO 150
C
      DO 120 I=1,3
      ITEST=IARST(I)
      IF(ITEST.EQ.0) GO TO 120
      IF(ITEST.EQ.2) GO TO 110
C
C     TYPE 1 CYCLE
C
      TC(I)=2.0D0*(TAUA(2,I)+2.0D0*TAUA(3,I)+TAUA(4,I))
      TTAB(1,I)=TAUA(2,I)/2.0D0
      TTAB(2,I)=TTAB(1,I)+TAUA(3,I)
      TTAB(3,I)=TTAB(2,I)+TAUA(4,I)
      TTAB(4,I)=TTAB(3,I)+TAUA(3,I)
      ADD0(I)=DELA(I)*PI/(2.0D0*TAUA(3,I)*(TAUA(3,I)+TAUA(4,I)))
C
      GO TO 120
C
  110 CONTINUE
C
C     TYPE 2 CYCLE
C
      TC(I)=TAUA(2,I)+TAUA(3,I)
      TTAB(1,I)=TAUA(2,I)
      TTAB(2,I)=TTAB(1,I)+TAUA(3,I)
      ADD0(I)=DELA(I)*TWOPI/TAUA(2,I)**2
C
  120 CONTINUE
C
  150 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE GNDIPT(DEPEND)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      REAL*8 J2,J3,J4,J22
C
C
C     SUBROUTINE GNDIPT SETS UP THE DIRECTION COSINE MATRIX
C     BETWEEN THE BODY REFERENCE FRAME AND THE LOCAL GEOGRAPHICAL
C     INERTIAL FRAME. IT ALSO COMPUTES THE LOCAL VERTICAL ACCELERATION
C     VECTOR FROM THE INPUT ALTITUDE
C
C     IT IS WRITTEN BY K. YONG OF COMPUTER SCIENCES CORP. IN
C     MARCH 1976 TO HANDLE THE FSD GROUND TESTING SIMULATION
C     CAPABILITY
C
C
C     EXISTING FSD COMMON BLOCKS
C
      COMMON/CNBODY/J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/CONSTS/PI,TWOPI,RADIAN
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IPOOL1/IGRAV,IDAMP,IDUMY(37)
C
      COMMON/LIBDPR/ZK1D,ZK2D,PHIS,PHILD,DPHILD,BELTD,
     *        GAMLD,ZMDO,ZMBDO,CNV,DECAY
C
      COMMON/RPOOL1/RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),
     *      OMEG(3),ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),
     *      YBCM(3),ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL6/FM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
C     NEW COMMON BLOCKS
C
      COMMON/GRNTST/ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY(3),
     *              GACC(3),GLOCAT(3),IGRUND,IALTUD,IGASBR
C
      COMMON/GMATRX/GMAX(3,3),GMAXT(3,3)
C
      DIMENSION DEPEND(150),OMRB(3)
C
C
C     SET THE FLAGS TO ZERO FOR GROUND TESTING SIMULATION
C
      INOPT=0
      IGRAV=0
      DO 40 I=1,3
      DO 40 J=1,3
      GMAX(I,J)=0.0D0
 40   GMAXT(I,J)=0.0D0
C
C     COMPUTE THE ACCELERATION OF GRAVITY ALONG LOCAL VERTICAL
      IF(IALTUD.EQ.0) GO TO 5
      GACC(3)=(ZMU/(AEARTH+ALTUDE)**2)*3280.8D0
 5    CONTINUE
C
      DE=DELTAG*RADIAN
      AL=ALFAEG*RADIAN
C
      SDE=DSIN(DE)
      CDE=DCOS(DE)
      SAL=DSIN(AL)
      CAL=DCOS(AL)
C
C
C     CONSTRUCT THE DIRECTION COSINE MATRIX
C
      GMAX(1,1) =CAL
      GMAX(1,2) =SAL*CDE
      GMAX(1,3) =SAL*SDE
C
      GMAX(2,1) =-SAL
      GMAX(2,2) =CAL*CDE
      GMAX(2,3) =CAL*SDE
C
      GMAX(3,1) = 0.0D0
      GMAX(3,2) =-SDE
      GMAX(3,3) =CDE
C
C
      DO 10 I=1,3
      OMEG(I)=OMGY(I)*RADIAN
      OMRB(I)=OMEG(I)
      DO 10 J=1,3
      SA(I,J)= GMAX(I,J)
      GMAXT(I,J)=GMAX(J,I)
      SAT(I,J)= SA(J,I)
 10   CONTINUE
C
      L=0
      DO 20 I=1,2
      DO 20 J=1,3
      L=L+1
 20   DEPEND(L)=SA(I,J)
      DO 30 I=1,3
      L=I+6
 30   DEPEND(L)=OMRB(I)
C
      CALL ECHOGD
      IF(IDAMP.EQ.0) RETURN
      PHI=PHILD*RADIAN
      PHID=DPHILD*RADIAN
      DEPEND(10)=PHI
      DEPEND(11)=PHID
      RETURN
      END
      SUBROUTINE GOUT(SA,OMEG,TIME,IPLOT,IPLTPE,PHI,TESTY)
C
C
C     SUBROUTINE GOUT DETERMINES EULER ANGLES AND RATES WRT THE
C     LOCAL VERTICAL FRAME FOR GRAVITY GRADIENT SATELLITES.
C     IT CALLS ARANGE TO EXTRACT ELEMENT DATA ; DMOMNT TO CALCULATE
C     ELEMENT BENDING MOMENTS AND TENSIONS ; AND WRTPLT TO WRITE
C     TEMPORARY DATA SET FOR PLOTS .
C     MODIFICATION AS OF SEPT. 1977.
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/CANTNA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3)
C
C
      COMMON/COMBCR/ OMBC1(3)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSTAT /XDEB(20)
C
      COMMON/DMMNT1/ZKBM(6),EMAK(10),EMBK(10),DUMM1(6),
     *    ITORK,IBENDM,ITENSE,ITNS1
C
      COMMON/HAMOUT/HAMILT,IHAMLT
C
      COMMON/HOUTPT/IHCALC
C
      COMMON/HVCOUT/HBODY(3),HINERT(3),HMAG
C
      COMMON/ICNTRL/KNTRL(10)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/JBTEST/ IBTEST
C
      COMMON/KNERGY/ S,OMC,BT
C
      COMMON/NUTANG/ANUT
C
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON/SUNANG/ DSL2
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/XIN2  / ALFAE,BETAE,GAMAE,OMBC(3),ITEST2
C
C
      DIMENSION SA(3,3),OMEG(3),SAT(3,3),S(3,3),BS(3,3),BT(3,3),
     .          OMC(3),SXOMC(3)
C
C
      DATA IB /0/
C
      DATA ALPOLD,BETOLD,GAMOLD/ 3*0.D0/
C
C
      JTEST=1
      ITEST2=1
C
C
      RADIUS=0.D0
      DO 5 I=1,3
    5 RADIUS=RADIUS + XSAT(I)*XSAT(I)
      RADIUS=DSQRT(RADIUS)
C
      DO 10 I=1,3
   10 BS(3,I)=XSAT(I)/RADIUS
C
      YZ=XSAT(2)*XSATDT(3) - XSAT(3)*XSATDT(2)
      ZX=XSAT(3)*XSATDT(1) - XSAT(1)*XSATDT(3)
      XY=XSAT(1)*XSATDT(2) - XSAT(2)*XSATDT(1)
C
      RXVMAG=DSQRT(YZ*YZ + ZX*ZX + XY*XY)
C
      BS(2,1)=YZ/RXVMAG
      BS(2,2)=ZX/RXVMAG
      BS(2,3)=XY/RXVMAG
C
      BS(1,1)=BS(2,2)*BS(3,3)-BS(2,3)*BS(3,2)
      BS(1,2)=BS(2,3)*BS(3,1)-BS(2,1)*BS(3,3)
      BS(1,3)=BS(2,1)*BS(3,2)-BS(2,2)*BS(3,1)
C
      DO 20 I=1,3
      DO 20 L=1,3
   20 BT(I,L)=BS(L,I)
      SDLV2=BT(1,2)*SD(1)+BT(2,2)*SD(2)+BT(3,2)*SD(3)
      DELSLV=DARCOS(-1.0D0*SDLV2)
      DSL2=DELSLV/RADIAN
      DO 30 I=1,3
      DO 30 J=1,3
   30 SAT(I,J)=SA(J,I)
C
      DO 40 I=1,3
      DO 40 J=1,3
      S(I,J)=0.D0
      DO 40 K=1,3
   40 S(I,J)=S(I,J) + SAT(I,K)*BT(K,J)
C
C
      IF(S(3,1).EQ.0.D0.AND.S(3,3).EQ.0.D0) GO TO 50
      W=-S(3,2)
      ALFAE=DARSIN(W)
      IF(DABS(ALFAE/RADIAN).GT.89.D0.AND.DABS(ALFAE/RADIAN).LT.91.D0)
     .           GO TO 100
      SN=DCOS(ALFAE)
      TEST1=S(3,3)/SN
      W=S(3,1)/SN
      BETAE=DARSIN(W)
      IF(TEST1.LT.0.D0) BETAE=-DARSIN(W) + PI
      TEST2=S(2,2)/SN
      W=S(1,2)/SN
      GAMAE=DARSIN(W)
      IF(TEST2.LT.0.D0) GAMAE=-DARSIN(W) + PI
      ALFAE=ALFAE/RADIAN
      BETAE=BETAE/RADIAN
      GAMAE=GAMAE/RADIAN
      ALPOLD=ALFAE
      BETOLD=BETAE
      GAMOLD=GAMAE
      IF (IBTEST .EQ. 0)  GO TO 110
      IF (IB .EQ. 0)  BPAST=BETAE
      IB=1
      IF (BPAST*BETAE .GE. 0.D0)  GO TO 101
      IF (BETAE .LT. 0.D0)  GO TO 101
      TESTY=TIME
      IBTEST=0
      IB=0
      GO TO 110
  101 BPAST=BETAE
      GO TO 110
   50 IF(S(3,2)-1.D0) 60,80,60
   60 IF(S(3,2)+1.D0) 100,70,100
   70 ALFAE=90.D0
      ALPOLD=ALFAE
      GO TO 100
   80 ALFAE=-90.D0
      ALPOLD=ALFAE
  100 ITEST2=0
  110 OMC(1)=0.D0
      OMC(2)=RXVMAG/RADIUS**2
C
      DOTX=AD(1)*YZ
      DOTY=AD(2)*ZX
      DOTZ=AD(3)*XY
C
      OMC(3)=((DOTX + DOTY + DOTZ)*RADIUS)/RXVMAG**2
C
      DO 120 I=1,3
      SXOMC(I)=0.D0
      DO 120 J=1,3
  120 SXOMC(I)=SXOMC(I) + S(I,J)*OMC(J)
C
      DO 130 I=1,3
      OMBC(I)=(OMEG(I) - SXOMC(I))/RADIAN
      OMBC1(I)=OMC(I)
  130 OMC(I)=OMBC(I)*RADIAN
C
      ALFAE=ALPOLD
      BETAE=BETOLD
      GAMAE=GAMOLD
      PHILD=0.0D0
      IF(IDAMP.NE.0) PHILD=PHI/RADIAN
      AL=ALFAE*RADIAN
      BE=BETAE*RADIAN
      GA=GAMAE*RADIAN
      RRAT=OMBC(1)*DCOS(GA)-OMBC(2)*DSIN(GA)
      PRAT=(OMBC(1)*DSIN(GA)+OMBC(2)*DCOS(GA))/DCOS(AL)
      YRAT=OMBC(3)+DTAN(AL)*(OMBC(1)*DSIN(GA)+OMBC(2)*DCOS(GA))
C
      IF(KNTRL(1).EQ.0) GO TO 140
C
      IF(IHCALC.EQ.0) GO TO 140
C
      WS=HBODY(2)/HMAG
      IF(WS.GT.1.0D0) WS=1.0D0
      IF(WS.LT.-1.0D0) WS=-1.0D0
      ANUT=DARCOS(WS)/RADIAN
      XDEB(5)=ANUT
C
  140 CONTINUE
C
C     CALL ARANGE
C
      IF(ITENSE.NE.0.OR.IBENDM.NE.0) CALL DMOMNT
C
      IF(IHAMLT.NE.0) CALL ENERGY(2,JTEST)
C
      IF(IPLOT.NE.0) CALL WRTPLT(TIME,ALFAE,BETAE,GAMAE,OMBC,PHILD
     1                          ,RRAT,PRAT,YRAT,2)
C
      RETURN
      END
      SUBROUTINE GPINIT
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      RETURN
C
      END
      SUBROUTINE GPPLOT(BUFF,INDEX)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      REAL*4 BUFF(450)
C
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,
     1               NK(10),LK(10),LLK(10)
C
      COMMON/PLTCOM/ IPLMOD,IKMOD
C
      COMMON/RPOOL9/ DUM01(97),ALP(7,7),DUM02(1440)
C
      COMMON/SLANTN/ AP(10,3),APD(10,3),BP(10,3),BPD(10,3),
     1               SAP(10),SAPD(10),SBP(10),SBPD(10)
C
C     SYSTEM PRODUCTS OF INERTIA  INDEX = 248
C
      BUFF(INDEX)=-ALP(4,5)
      BUFF(INDEX+1)=-ALP(4,6)
      BUFF(INDEX+2)=-ALP(5,6)
      INDEX=INDEX+3
C
C     PLOTTED OUTPUT FOR TIP SLOPES
C
      IND=INDEX-1
      IND1=IND+20
C
      DO 20 I=1,IK
      M=NK(I)
      IF(I.GT.K1) GO TO 10
      IF(M.EQ.0) GO TO 8
      BUFF(IND+1)=SAP(I)
      BUFF(IND+2)=SBP(I)
    8 CONTINUE
      IND=IND+2
      GO TO 20
C
   10 CONTINUE
C
      IF(M.EQ.0) GO TO 18
      BUFF(IND1+1)=SAP(I)
      BUFF(IND1+2)=SBP(I)
   18 CONTINUE
      IND1=IND1+2
   20 CONTINUE
C
C
      INDEX=INDEX+40
C
      IND=INDEX-1
C
      IF(IPLMOD.EQ.0) GO TO 40
      DO 30 I=1,IK
      IF(IKMOD.NE.I) GO TO 30
      M=NK(I)
      IF(M.EQ.0) GO TO 40
      DO 25 J=1,M
      BUFF(IND+1)=AP(I,J)
      BUFF(IND+2)=BP(I,J)
      IND=IND+2
   25 CONTINUE
      GO TO 40
   30 CONTINUE
C
   40 CONTINUE
C
      INDEX=INDEX+6
C
      INDEX = 297
C
      CALL GMBPLT(BUFF,INDEX)
      INDEX = 301
      CALL PCSWRP(BUFF,INDEX)
      INDEX = 310
      CALL DMBPLT(BUFF,INDEX)
      INDEX = 314
      CALL DCSWRP(BUFF,INDEX)
      INDEX = 323
      CALL WHPLOT(BUFF,INDEX)
      INDEX = 329
      CALL AWPLOT(BUFF,INDEX)
      INDEX = 331
      CALL THPLOT(BUFF,INDEX)
      INDEX = 341
      CALL SAGPLT(BUFF,INDEX)
      INDEX = 343
      CALL SAPWRP(BUFF,INDEX)
      INDEX = 349
      CALL ADMWRP(BUFF,INDEX)
      INDEX = 358
      CALL TRQPLT(BUFF,INDEX)
      INDEX = 364
C
C     THE VALUE OF INDEX WAS ADJUSTED AS OF DEC 04  IE 364
C
      RETURN
C
      END
      SUBROUTINE GPRINT
C
C    *****************************************************************
C     SUBROUTINE GPRINT(WITH ENTRY POINT SPRINT) IS THE EXECUTIVE
C     ROUTINE TO CONTROL THE NORMAL PRINT OUTPUT, IT CALLS SUBROUTINE
C     SET TO PERFORM THE PRINTED FSD PROGRAM OUTPUT.
C    *****************************************************************
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      INTEGER*4 ACNTRL
      REAL*8 MSUBM
C
C
      COMMON/CANTNA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CWHEEL/ VWH(3),VDUMY(6)
C
      COMMON/DEBUG1/ IAFM(5)
C
      COMMON/DMMNT1/ ZKBM(6),FMAK(10),FMBK(10),ARTETA(3),CMTORK(3),
     .               ITORK,IBENDM,ITENSE,ITNS1
C
      COMMON/DRPROT/ STAGP
C
      COMMON/ECNSTS/ THETA1,THETGO(12)
C
      COMMON/ELMNTS/ NELMTS,NDAMPR
C
      COMMON/HAMOUT/ HAMILT,IHAMLT
C
      COMMON/ICNTRL/ KNTRL(10)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/ISHADE/ IPLANS,ISATSH,IWRTTF
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/NODER / NDER,NOPT
C
      COMMON/NUTANG/ ANGNUT
C
      COMMON/OUTONE/ OMEGL,VSUBL,MSUBM(3),CMX,SIMPX,SB(3)
C
      COMMON/OUTTWO/ SOLILL,EPSERR
C
      COMMON/OUTTHR/ SMAGB(3),XMB(3),RWHEEL(3)
C
      COMMON/OUTFOR/ OMEGDT(3)
C
      COMMON/PRCOM / STORE(10,30),ILINE,ICOL,ICNT,IHD
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
C
      COMMON/RMGNTC/ SMAGI(3),DPMAG(3),SFMAG,MAGFLD
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL3/ZMS,DUMMM(6)
C
      COMMON/RPOOL9/ RT1(7),RT2(10,9),ALP(7,7),GAM(10,9,7),DEL(10,9,9)
C
      COMMON/SOLOUT/ FTAKIN(10,3),FTAKOT(10,3),FTBKIN(10,3),FTBKOT(10,3)
C
      COMMON/SUBPOS/ ALAT,ALONG,HGT
C
      COMMON/SUNANG/ DSL2
C
      COMMON/SUNVTR/ SSSLLL(3)
C
      COMMON/TENSON/ TSSO(10)
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/XIN1  / PSI1,THET1,PHI1,ETTA,ZETTA,ITEST1
C
      COMMON/XIN2  / ALFAE,BETAE,GAMAE,OMBC(3),ITEST2
C
C     MODIFICATION FOR GPRINT
C     ADD NEW COMMONS
C
      COMMON/HOUTPT/ IHCALC,IHREF,IHFLAG
C
      COMMON/HVCOUT/ HBODY(3),HINERT(3),HMAG
C
C
C   MOD OF ACCELERATION COMPUTATION IN GPRINT
C
C   ADD COMMON FOR ACCELERATION COMPUTATION
C
      COMMON/IACC  / IACOMP,IHUBAC,ITIPAC
C
      COMMON/ACCHUB/ YHUB(3,6),HUBACC(3,6),ACCRED(6),ALFAEA(6),
     .               BETAEA(6),GAMAEA(6),DKAT(3,3,6)
C
      COMMON/ACCORB/ ACCOB(3),TRTACC(3)
C
      COMMON/SEPACC/ CENACC(3,10),CORACC(3,10),DLIACC(3,10),TIPACC(3,10)
C
      COMMON/NUMACC/ NUMHUB
C
      COMMON/GRNTST/ ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY(3),
     *               GACC(3),GLOCAT(3),IGRUND,IALTUD
C
      COMMON/GRNOUT/ ALFAG,DELTG,PHASG,OMGN(3)
C
      COMMON/ITW   / ITWIST,ITWST1
C
      COMMON/INEWR / NKT(10),IABCDE(2)
C
      COMMON/TWIOUT/ CW(10,3),CWD(10,3)
C
C
      DIMENSION SUMD(10),SUMDT(10),SUMDIN(10),SUMDNT(10),SUMA(10),
     .          SUMB(10),SUMAD(10),SUMBD(10)
C
      DIMENSION YCEMS(3)
      DIMENSION FMT(25)
      DIMENSION GAMES(4,2,2),INAM(4,2,2)
C
      DATA ISIZE /0/
      DATA FMD/'F12.0   '/,FMD1/'F12.3   '/
      DATA I2/',A2,'/
      DATA I3 /',A3,'/
      DATA I4 /',A4,'/
      DATA I5 /',A5,'/
      DATA I6 /',A6,'/
      DATA I8/',A8,'/
      DATA PAR1 /'(       '/, PAR2/')       '/
      DATA SKIP /' 1H0,   '/, CC /'1H ,    '/
      DATA FM3/'D12.5   '/,FM5/',1X,    '/,FM2/'2X,A8,2X'/
      DATA STARS /'********'/
      DATA GAMES /'DOUT    ','DOUTDT  ','DIN     ','DINDOT  ',
     .            'A       ','ADOT    ','B       ','BDOT    ',
     .            'UD3     ','UD3DT   ','UD2     ','UD2DT   ',
     .            'U3      ','U3DOT   ','U2      ','U2DOT   '/
      DATA INAM  /',A4,',',A6,',',A3,',',A6,',
     .            ',A1,',',A4,',',A1,',',A4,',
     .            ',A3,',',A5,',',A3,',',A5,',
     .            ',A2,',',A5,',',A2,',',A5,'/
C
      ISP=0
      GO TO 500
      ENTRY SPRINT
      ISP=1
  500 FMT(1)=PAR1
      BLANK=10D-38
      ILINE=1
      ICOL=0
C
C        TEST FOR HEADING,NO HEADING CONDITIONS
C
      IF(ICNT.GT.60) GO TO 650
      IF(ISIZE.GT.(60-ICNT)) GO TO 650
C
C        IHD = 1 MEANS HEADING
C        IHD = 0 MEANS NO HEADING
      IHD=0
      GO TO 690
  650 IHD=1
      ICNT=0
C
C        OUTPUT DATA VIA SUBROUTINE SET
  690 CALL TCNVRT (YMD,TEMP,SEC,TLAST,TIME,2)
      CALL SET ('DATE    ',0,0,YMD,I4)
      HMS=HMSOUT(DMOD(SEC,86400.D0))
      CALL SET ('TIME    ',0,0,HMS,I4)
      IF(IGRUND.EQ.1)  GO TO 400
      DO 720 I=1,3
  720 CALL SET ('XSAT    ',I,0,XSAT(I),I4)
      DO 750 I=1,3
  750 CALL SET ('XSATDT  ',I,0,XSATDT(I),I6)
      RMAG=DSQRT(XSAT(1)**2+XSAT(2)**2+XSAT(3)**2)
      CALL SET ('RMAG    ',0,0,RMAG,I4)
      CALL SET('STAG PR ',0,0,STAGP,I8)
C
      CALL XYZPLH(XSAT)
      ALAT=ALAT/RADIAN
      ALONG=ALONG/RADIAN
      CALL SET ('LAT     ',0,0,ALAT,I3)
      CALL SET ('LONG    ',0,0,ALONG,I4)
      CALL SET ('ALT     ',0,0,HGT,I4)
 400  CONTINUE
      CALL SET ('DELTAT  ',0,0,DELTAT,I6)
      IF(IGRUND.EQ.1.AND.IGASBR.EQ.0)  GO TO 798
      DO 823 I=1,3
      DO 823 J=1,3
  823 CALL SET('SA      ',I,J,SA(I,J),I2)
 798  CONTINUE
      IF(IGRUND.EQ.1)  GO TO 410
      IF(ISP.EQ.1) GO TO 920
      CALL SET ('ALFAE   ',0,0,ALFAE,I5)
      IF(ITEST2.EQ.0) GO TO 890
      CALL SET ('BETAE   ',0,0,BETAE,I5)
      CALL SET ('GAMAE   ',0,0,GAMAE,I5)
      GO TO 990
  890 CALL SET ('BETAE   ',0,0,BLANK,I5)
      CALL SET ('GAMAE   ',0,0,BLANK,I5)
      GO TO 990
  920 CALL SET ('THET1   ',0,0,THET1,I5)
      IF(ITEST1.EQ.0) GO TO 970
      CALL SET ('PSI1    ',0,0,PSI1,I4)
      CALL SET ('PHI1    ',0,0,PHI1,I4)
      GO TO 1020
  970 CALL SET ('PSI1    ',0,0,BLANK,I4)
      CALL SET ('PHI1    ',0,0,BLANK,I4)
      GO TO 1020
  990 CALL SET ('W1BC    ',0,0,OMBC(1),I4)
      CALL SET ('W2BC    ',0,0,OMBC(2),I4)
      CALL SET ('W3BC    ',0,0,OMBC(3),I4)
      AL=ALFAE*RADIAN
      BE=BETAE*RADIAN
      GA=GAMAE*RADIAN
      RRAT=OMBC(1)*DCOS(GA)-OMBC(2)*DSIN(GA)
      PRAT=(OMBC(1)*DSIN(GA)+OMBC(2)*DCOS(GA))/DCOS(AL)
      YRAT=OMBC(3)+DTAN(AL)*(OMBC(1)*DSIN(GA)+OMBC(2)*DCOS(GA))
      CALL SET('RRAT    ',0,0,RRAT,I4)
      CALL SET('PRAT    ',0,0,PRAT,I4)
      CALL SET('YRAT    ',0,0,YRAT,I4)
 1020 DEGREE=180/PI
      W1B=DEPEND(7)*DEGREE
      W2B=DEPEND(8)*DEGREE
      W3B=DEPEND(9)*DEGREE
      CALL SET ('W1B     ',0,0,W1B,I3)
      CALL SET ('W2B     ',0,0,W2B,I3)
      CALL SET ('W3B     ',0,0,W3B,I3)
      GO TO 430
 410  CONTINUE
      CALL SET('ALFAG   ',0,0,ALFAG,I5)
      CALL SET('DELTG   ',0,0,DELTG,I5)
      CALL SET('W1GY    ',0,0,OMGN(1),I4)
      CALL SET('W2GY    ',0,0,OMGN(2),I4)
      CALL SET('W3GY    ',0,0,OMGN(3),I4)
 430  CONTINUE
      DO 1085 I=1,3
 1085 CALL SET('MOMENT  ',I,0,OMEGDT(I),I6)
      JELMNT=0
      JDAMPR=0
C
      DO 4510 K=1,IK
      IY=K-K1
      JWZ=IY
      IF (IY.LE.0) JWZ=K
      IF (IBENDM.EQ.0) GO TO 700
      CALL SET('BNMTA   ',JWZ,0, FMAK(K), I5)
      CALL SET('BNMTB   ',JWZ,0, FMBK(K), I5)
  700 IF (ITENSE.EQ.0) GO TO 4510
      CALL SET('TENSN   ',JWZ,0, TSSO(K),I5)
 4510 CONTINUE
      DO 1170 K=1,IK
      M=NK(K)
      IF(M.EQ.0) GO TO 1170
      IF((K-K1).GT.0) GO TO 1140
      IF(JDAMPR.EQ.1) GO TO 1140
C
      DO 1130 I=1,NDAMPR
C
      SUMD(I)=0.D0
      SUMDT(I)=0.D0
      SUMDIN(I)=0.D0
      SUMDNT(I)=0.D0
      IF(NK(I).EQ.0) GO TO 1130
C
      DO 1120 J=1,M
C
      SUMD(I)=SUMD(I) + DOUT(I,J)
      SUMDT(I)=SUMDT(I) + DOUTDT(I,J)
      SUMDIN(I)=SUMDIN(I) + DIN(I,J)
      SUMDNT(I)=SUMDNT(I) + DINDOT(I,J)
C
      CALL SET(GAMES(1,1,1),I,J,DOUT(I,J),INAM(1,1,1))
      CALL SET(GAMES(2,1,1),I,J,DOUTDT(I,J),INAM(2,1,1))
      CALL SET(GAMES(3,1,1),I,J,DIN(I,J),INAM(3,1,1))
      CALL SET(GAMES(4,1,1),I,J,DINDOT(I,J),INAM(4,1,1))
C
      IF (IWRTTF.EQ.0) GO TO 1120
      CALL SET('FTAKIN  ',I,J,FTAKIN(I,J), I6)
      CALL SET('FTAKOT  ',I,J,FTAKOT(I,J), I6)
      CALL SET('FTBKIN  ',I,J,FTBKIN(I,J), I6)
      CALL SET('FTBKOT  ',I,J,FTBKOT(I,J), I6)
 1120 CONTINUE
C
 1130 CONTINUE
      JDAMPR=1
      GO TO 1170
 1140 IF(JELMNT.EQ.1) GO TO 1170
      DO 1160 I=1,NELMTS
      SUMA(I)=0.D0
      SUMB(I)=0.D0
      SUMAD(I)=0.D0
      SUMBD(I)=0.D0
      KK=I+K1
      IF(NK(KK).EQ.0) GO TO 1160
      M=NK(KK)
C
      DO 1150 J=1,M
C
      SUMA(I)=SUMA(I) + B(I,J)
      SUMB(I)=SUMB(I) + A(I,J)
      SUMAD(I)=SUMAD(I) + BDOT(I,J)
      SUMBD(I)=SUMBD(I) + ADOT(I,J)
C
      CALL SET(GAMES(1,2,1),I,J,A(I,J),INAM(1,2,1))
      CALL SET(GAMES(2,2,1),I,J,ADOT(I,J),INAM(2,2,1))
      CALL SET(GAMES(3,2,1),I,J,B(I,J),INAM(3,2,1))
      CALL SET(GAMES(4,2,1),I,J,BDOT(I,J),INAM(4,2,1))
C
      IF (IWRTTF.EQ.0) GO TO 1150
      CALL SET('FTAKIN  ',I,J,FTAKIN(I,J), I6)
      CALL SET('FTAKOT  ',I,J,FTAKOT(I,J), I6)
      CALL SET('FTBKIN  ',I,J,FTBKIN(I,J), I6)
      CALL SET('FTBKOT  ',I,J,FTBKOT(I,J), I6)
 1150 CONTINUE
 1160 CONTINUE
      JELMNT=1
 1170 CONTINUE
C
      DO 1210 K=1,IK
      IF(NK(K).EQ.0) GO TO 1210
      IF((K-K1).GT.0) GO TO 1190
      IF(JDAMPR.EQ.2) GO TO 1190
C
      DO 1180 I=1,NDAMPR
      IF(NK(I).EQ.0) GO TO 1180
      CALL SET(GAMES(1,1,2),I,0,SUMD(I),INAM(1,1,2))
      CALL SET(GAMES(2,1,2),I,0,SUMDT(I),INAM(2,1,2))
      CALL SET(GAMES(3,1,2),I,0,SUMDIN(I),INAM(3,1,2))
      CALL SET(GAMES(4,1,2),I,0,SUMDNT(I),INAM(4,1,2))
 1180 CONTINUE
      JDAMPR=2
C
      GO TO 1210
 1190 IF(JELMNT.EQ.2) GO TO 1210
      DO 1200 I=1,NELMTS
      II=I+K1
      IF(NK(II).EQ.0) GO TO 1200
      CALL SET(GAMES(1,2,2),I,0,SUMA(I),INAM(1,2,2))
      CALL SET(GAMES(2,2,2),I,0,SUMAD(I),INAM(2,2,2))
      CALL SET(GAMES(3,2,2),I,0,SUMB(I),INAM(3,2,2))
      CALL SET(GAMES(4,2,2),I,0,SUMBD(I),INAM(4,2,2))
 1200 CONTINUE
      JELMNT=2
 1210 CONTINUE
C
C
      IF(ITWIST.EQ.0) GO TO 1212
      DO 1211 I=1,IK
      NTW=NKT(I)
      IF(NTW.EQ.0) GO TO 1211
      DO 1213 J=1,NTW
      CALL SET('CW      ',I,J,CW(I,J),I2)
      CALL SET('CWD     ',I,J,CWD(I,J),I3)
 1213 CONTINUE
 1211 CONTINUE
 1212 CONTINUE
C
C
      DO 1580 I=1,IK
      IF(ZLK(I).EQ.0) GO TO 1580
      IF(I.GT.K1) GO TO 1570
      CALL SET ('ZLD     ',I,0,ZLK(I),I3)
      GO TO 1580
 1570 CALL SET ('ZLK     ',I-K1,0,ZLK(I),I3)
 1580 CONTINUE
C
      CALL GPSOUT
C
      CALL SECOUT
C
      IF(IDAMP.EQ.0) GO TO 1620
      PHILD=DEPEND(10)/RADIAN
      DPHILD=DEPEND(11)/RADIAN
      CALL SET ('PHILD   ',0,0,PHILD,I5)
      CALL SET ('DPHILD  ',0,0,DPHILD,I6)
 1620 IF(ISP.EQ.0) GO TO 1710
      IF(IVISCS.EQ.0) GO TO 1680
      CALL SET ('OMEGL   ',0,0,OMEGL,I5)
      CALL SET ('VSUBL   ',0,0,VSUBL,I5)
      DO 1670 I=1,3
 1670 CALL SET ('MSUBM   ',I,0,MSUBM(I),I5)
 1680 IF(IATTDE.EQ.0) GO TO 1710
      CALL SET ('CMX     ',0,0,CMX,I3)
      CALL SET ('SIMPX   ',0,0,SIMPX,I5)
 1710 IF(IMGMTS.EQ.0) GO TO 1780
      DO 1730 I=1,3
 1730 CALL SET ('XMB     ',I,0,XMB(I),I3)
      DO 1750 I=1,3
 1750 CALL SET ('SMAGI   ',I,0,SMAGI(I),I5)
      DO 1770 I=1,3
 1770 CALL SET ('SMAGB   ',I,0,SMAGB(I),I5)
 1780 CONTINUE
      IF(IGRUND.EQ.1)  GO TO 420
      CALL SET ('SOLILL  ',0,0,SOLILL,I6)
      CALL SET ('SUNANG  ',0,0,DSL2,I6)
      IF(IAFM(1).EQ.0) GO TO 420
      DO 3000 I=1,3
      CALL SET('SUNVEC  ',I,0,SSSLLL(I),I6)
 3000 CONTINUE
 420  CONTINUE
      IF(IWHEEL.EQ.0) GO TO 1815
      DO 1810 I=1,3
      CALL SET('WHL SPD ',I,0,VWH(I),I8)
 1810 CALL SET ('RWHEEL  ',I,0,RWHEEL(I),I6)
C
      IF(KNTRL(1).NE.0) CALL DEBOUT
C
 1815 IF(ISP.EQ.0.AND.IGRUND.EQ.0) GO TO 1820
      IF(IHREF.EQ.1) GO TO 1818
      CALL SET('EPSERR  ',0,0,EPSERR,I6)
      GO TO 1819
 1818 CONTINUE
      EPSERH=EPSERR
      CALL SET('EPSERH  ',0,0,EPSERH,I6)
 1819 CONTINUE
 1820 IF (NOPT.EQ.0) GO TO 1821
      ANDER=NDER
      CALL SET ('NO DEREQ',0,0,ANDER,I8)
      NDER=0
 1821 IF(IHAMLT.NE.0) CALL SET('HAMILTON',0,0,HAMILT,I8)
      IF(IACOMP.EQ.0) GO TO 2000
      DO 2100 I=1,3
      CALL SET('ACCOB   ',I,0,ACCOB(I),I5)
 2100 CONTINUE
      IF(IHUBAC.EQ.0) GO TO 2200
      DO 2300 I=1,NUMHUB
      CALL SET('ACCRED  ',I,0,ACCRED(I),I6)
      DO 2300 J=1,3
      CALL SET('HUBACC  ',J,I,HUBACC(J,I),I6)
 2300 CONTINUE
 2200 CONTINUE
      IF(ITIPAC.EQ.0) GO TO 2000
      DO 2400 I=1,NELMTS
      DO 2400 J=1,3
      CALL SET('TIPACC  ',J,I,TIPACC(J,I),I6)
 2400 CONTINUE
 2000 CONTINUE
      IF(IHCALC.EQ.0) GO TO 1685
      DO 1692 I=1,3
      CALL SET('HBODY   ',I,0,HBODY(I),I5)
 1692 CONTINUE
      CALL SET('NUT ANG ',0,0,ANGNUT,I8)
      DO 1693 I=1,3
      CALL SET('HVECTR  ',I,0,HINERT(I),I6)
 1693 CONTINUE
      CALL SET('HMAG    ',0,0,HMAG,I5)
 1685 CONTINUE
      CALL SET('ZMS     ',0,0,ZMS,I4)
      DO 1694 I=1,3
      YCEMS(I)=YBCM(I)/ZMS
      CALL SET('YCEMS   ',I,0,YCEMS(I),I5)
 1694 CONTINUE
      BIXX=ALP(4,4)
      BIYY=ALP(5,5)
      BIZZ=ALP(6,6)
      BIXY=-ALP(4,5)
      BIXZ=-ALP(4,6)
      BIYZ=-ALP(5,6)
      CALL SET('BIXX    ',0,0,BIXX,I4)
      CALL SET('BIYY    ',0,0,BIYY,I4)
      CALL SET('BIZZ    ',0,0,BIZZ,I4)
      CALL SET('BIXY    ',0,0,BIXY,I4)
      CALL SET('BIXZ    ',0,0,BIXZ,I4)
      CALL SET('BIYZ    ',0,0,BIYZ,I4)
 1686 IF((IHD.EQ.1).AND.(ICOL.LT.10)) CALL SETEND
C
      ISIZE=ILINE+1
      ICNT=ICNT+ISIZE
      DO 1910 J=1,ILINE
      FMT(2) = CC
      IF(J.EQ.1) FMT(2)=SKIP
      L=10
      IF(ILINE.EQ.J) L=ICOL
      DO 1900 I=1,L
      K=(I-1)*2+3
      IF(STORE(I,J).EQ.BLANK ) GO TO 1930
      FMT(K)=FM3
      IF(J.EQ.1.AND.I.EQ.1) FMT(K)=FMD
      IF (J.EQ.1.AND.I.EQ.2) FMT(K)=FMD1
      IF (J.EQ.ILINE.AND.I.EQ.L.AND.NOPT.NE.0) FMT(K)=FMD1
 1890 FMT(K+1)=FM5
      N=K
      GO TO 1900
 1930 STORE(I,J)=STARS
      FMT(K)=FM2
      GO TO 1890
 1900 CONTINUE
      FMT(N+1)=PAR2
      WRITE(6,FMT)(STORE(II,J),II=1,L)
 1910   CONTINUE
      RETURN
      END
      SUBROUTINE GPSOUT
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,
     1               NK(10),LK(10),LLK(10)
C
      COMMON/SLANTN/ AP(10,3),APD(10,3),BP(10,3),BPD(10,3),
     1               SAP(10),SAPD(10),SBP(10),SBPD(10)
C
      DATA U2P/'U2P     '/,UD2P/'UD2P    '/
      DATA U3P/'U3P     '/,UD3P/'UD3P    '/
      DATA I4/',A4,'/
C
C
C     OUTPUT FOR TIP SLOPES , GIMBLE , AND PLATFORM CONTROL SYSTEM
C
C
      DO 10 I=1,IK
      M=NK(I)
      IF(M.EQ.0) GO TO 10
      IF(I.GT.K1) GO TO 5
      CALL SET(UD2P,I,0,SAP(I),I4)
      CALL SET(UD3P,I,0,SBP(I),I4)
      GO TO 10
C
    5 CONTINUE
C
      I1=I-K1
      CALL SET(U2P,I1,0,SAP(I),I4)
      CALL SET(U3P,I1,0,SBP(I),I4)
   10 CONTINUE
C
      CALL GMPRNT
C
      CALL DMPRNT
C
      CALL PCSPRN
C
      CALL DCSPRN
C
      CALL WHPRNT
C
      CALL AWPRNT
C
      CALL THPRNT
C
      CALL SAPRNT
C
      CALL SAPPRN
C
      CALL VDPRNT
C
      CALL ADMPRN
C
      CALL TRQPRN
C
C
      RETURN
C
      END
      SUBROUTINE GRDFCE(ETA)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     SUBROUTINE  GRDFCE  IS THE SUBROUTINE WHICH COMPUTES THE
C     GRAVITATIONAL FORCES ADDED ALONG THE BODY FRAME AXES
C     FOR FSD GROUND TESTING SIMULATION OF THE FLEXIBLE APPENDAGES.
C     IT IS WRITTEN AND CODED BY K. YONG OF COMPUTER SCIENCES CORP.
C     IN MARCH 1976
C
C     EXISTING FSD COMMON BLOCKS
C
      COMMON/CSTVAL/TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10)
C
      COMMON/RPOOL1/RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),
     *              OMEG(3),ZLKP(10),ZLKDP(10),CMAT(3),GBAR(3,3),
     *              YBCM(3),ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL3/ZMS,YIZM(3,2)
C
C     NEW COMMON BLOCKS ADDED TO FSD
C
      COMMON/GRNTST/ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY(3),
     *              GACC(3),GLOCAT(3),IGRUND,IALTUD,IGASBR
C
      COMMON/GMATRX/GMAX(3,3),GMAXT(3,3)
C
      DIMENSION ETA(7),GFOC(3),GMOM(3),DUMY(3)
C
C     COMPUTE GRAVITATIONAL FORCES IN THE BODY FRAME
C
      IF(TIME.LT.TSTART) GO TO 20
      DO 57 I=1,3
      DO 57 J=1,3
 57   GMAXT(I,J)=SA(J,I)
      CALL DMATVC(GMAXT,GACC,DUMY)
      DO 10 I=1,3
      GFOC(I)= ZMS*DUMY(I)
 10   CONTINUE
C
C     COMPUTE THE MOMENT IF THE ACTING FORCE IS NOT AT THE BODY
C     FRAME ORIGIN
C
      GMOM(1)= GLOCAT(2)*GFOC(3) - GLOCAT(3)*GFOC(2)
      GMOM(2)= GLOCAT(3)*GFOC(1) - GLOCAT(1)*GFOC(3)
      GMOM(3)= GLOCAT(1)*GFOC(2) - GLOCAT(2)*GFOC(1)
C
C     ADD FORCE AND MOMENT DUE TO GROUND GRAVITATIONAL
C     INFLUENCE ON THE REDUCED SYSTEM FORCING FUNCTIONS
C
      DO 20 I=1,3
      I1=I+3
      ETA(I)= ETA(I)+ GFOC(I)
      ETA(I1)= ETA(I1) +GMOM(I)
 20   CONTINUE
      RETURN
      END
      SUBROUTINE H1 (IVISCS,IATTDE,IWHEEL,IMGMTS)
C
C        'H1' SETS UP OUTPUT HEADING DESCRIBING TYPE OF RUN
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C
      COMMON /HEAD22/ HEAD1(5),HEAD2(5),ILINE
C
      DIMENSION HED1(5),HED2(5),HED3(5),HED4(5)
C
      DATA HED1 /'RUN EXER','CISING N','UTATION ','VISCOUS ','DAMPING '/
      DATA HED2 /'RUN EXER','CISING A','TTITUDE ','CONTROL ','        '/
      DATA HED3 /'RUN EXER','CISING M','OMENTUM ','WHEELS  ','        '/
      DATA HED4 /'RUN EXER','CISING M','AGNETIC ','MOMENTS ','        '/
C
      JUMP=0
      IF(IVISCS.NE.0) JUMP=1
      IF(IATTDE.NE.0) JUMP=2
      IF(IWHEEL.NE.0) JUMP=3
      IF(IMGMTS.NE.0) JUMP=4
C
      IF(JUMP.EQ.0) RETURN
      GO TO (10,30,50,70),JUMP
C
   10 DO 20 I=1,5
   20 HEAD1(I)=HED1(I)
      RETURN
C
   30 DO 40 I=1,5
   40 HEAD1(I)=HED2(I)
      RETURN
C
   50 DO 60 I=1,5
   60 HEAD1(I)=HED3(I)
      RETURN
C
   70 DO 80 I=1,5
   80 HEAD1(I)=HED4(I)
      RETURN
      END
      SUBROUTINE HAG
C
C     HAG CALCULATES THE FLUX DENSITY OF THE EARTH'S MAGNETIC
C     FIELD IN LOCAL INERTIAL COORDINATES
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 J2,J3,J4,J22
C
      COMMON/CNBODY/ J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     *               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     *               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI1
C
      COMMON/RMGNTC/ SMAGI(3),DPMAG(3),SFMAG,MAGFLD
C
      COMMON/SUBPOS/ ALAT,ALONG,HGT
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C  COMMON IDATE1 IS USED TO COMPUTE TM FOR ALLMAG INPUT
      COMMON/IDATE1/IY,IM,IDAY
C
C                       CALCULATE  EARTH-FIXED X,Y,Z COORDINATES
C                       AND LATITUDE(GEODETIC),LONGITUDE AND HEIGHT
C
C
      CALL XYZPLH(XSAT)
C
C                        LONGITUDE WITH RESPECT TO THE VERNAL
C                        EQUINOX
C
      WT=DATAN2(XSAT(2),XSAT(1))
C   COMPUTE DAYS INTO DECIMAL YEARS AND CONVERT IT INTO THE
C   FLOATING VARIABLE
      DEN=365.0D0
      IF(MOD(IY,4).EQ.0) DEN=366.0D0
      DAY=TIME/86400.D0
      TM=1900.0D0+IY+DAY/DEN
C   AT THIS POINT, SET MODEL=5
      MODEL=MAGFLD
      GDLAT=ALAT/RADIAN
      GDLON=ALONG/RADIAN
      ALT=HGT
      IF(IOUT.NE.1) WRITE(6,1000) MODEL,TM,GDLAT,GDLON,ALT
 1000 FORMAT('0',5X,'IOUT FROM HAG',I3,1P4E14.6)
      CALL GDALMG(MODEL,TM,GDLAT,GDLON,ALT,X,Y,Z,F,H,DEC,AINC)
      IF(IOUT.NE.1) WRITE(6,1000) MODEL,WT,X,Y,Z
C   TRANGFORM INTO INERTIAL(EQUATORIAL) COORDINATE
      STH=DSIN(WT)
      CTH=DCOS(WT)
      SPH=DSIN(ALAT)
      CPH=DCOS(ALAT)
C
      A1=CPH*CTH
      A2=-STH
      A3=-SPH*CTH
C
      B1=CPH*STH
      B2=CTH
      B3=-SPH*STH
C
      C1=SPH
      C2=0.0D0
      C3=CPH
C   COMPUTE THE MAGNETIC FIELD VECTOR IN INERTIAL FRAME
      BN=X
      BE=Y
      BV=Z
      SMAGI(1)=A1*BV+A2*BE+A3*BN
      SMAGI(2)=B1*BV+B2*BE+B3*BN
      SMAGI(3)=C1*BV+C2*BE+C3*BN
C
C
      RETURN
      END
      SUBROUTINE HCOMPT
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ADDMOM/HAWH(3),HAXWH(3),HELGM(3),HTIP(3)
C
      COMMON/CONSTS/PI,TWOPI,RAD
C
      COMMON/CSTVAL/TST,DUM9(40)
C
      COMMON/EXPAND/THRMPR(100),ITHRM(20)
C
      COMMON/HGIMBL/HGMB(3)
C
      COMMON/HOUTPT/IHCALC,IHREF,IHFLAG
C
      COMMON/HVCOMP/YB(3),YBD(3),CIN(3,3),CID,CIND(3)
C
      COMMON/HVCOUT/HBODY(3),HINERT(3),HMAG
C
      COMMON/IPOOL1/IDUM5,IDAMP,IDUM6(37)
C
      COMMON/MOMENT/IDUM1,IV,IDUM2(2),IW,IDUM3
C
      COMMON/OUTONE/OML,DUM5(9)
C
      COMMON/HWHEEL/HWM(3)
C
      COMMON/ISECBD/I2BDY
C
      COMMON/RPOOL1/DUM1(10),T,A(3,3),F(3,3),DUM2(10),OM(3),DUM3(81),
     1              PHID,PHI
C
      COMMON/RPOOL3/ZMS,YIZM(3,2)
C
      COMMON/RPOOL6/FDUM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
      COMMON/RVISCS/VIV(3),DUM6(12),CIL
C
      COMMON/SBDOUT/B2DUM(34),H2B(3),Y2D(3)
C
      COMMON/XIN1/DUM7(3),ETTA,ZETTA,IDUM4
C
      DIMENSION HDUM(3),V1(3),V2(3),V3(3)
C
      OM1=OM(1)
      OM2=OM(2)
      OM3=OM(3)
      Y1=YB(1)
      Y2=YB(2)
      Y3=YB(3)
      HBODY(1)=(CIN(1,1)-(Y2*Y2+Y3*Y3)/ZMS)*OM1+(CIN(1,2)+Y1*Y2/ZMS)*OM2
     1        +(CIN(1,3)+Y1*Y3/ZMS)*OM3
      HBODY(2)=(CIN(2,1)+Y2*Y1/ZMS)*OM1+(CIN(2,2)-(Y3*Y3+Y1*Y1)/ZMS)*OM2
     1        +(CIN(2,3)+Y2*Y3/ZMS)*OM3
      HBODY(3)=(CIN(3,1)+Y3*Y1/ZMS)*OM1+(CIN(3,2)+Y3*Y2/ZMS)*OM2
     1        +(CIN(3,3)-(Y1*Y1+Y2*Y2)/ZMS)*OM3
C
      HBODY(1)=HBODY(1)+CIND(1)-(Y2*YBD(3)-Y3*YBD(2))/ZMS
      HBODY(2)=HBODY(2)+CIND(2)-(Y3*YBD(1)-Y1*YBD(3))/ZMS
      HBODY(3)=HBODY(3)+CIND(3)-(Y1*YBD(2)-Y2*YBD(1))/ZMS
C
      IF(IDAMP.EQ.0) GO TO 10
      CALL MATV(2,F,YB,V1)
      CALL MATV(2,F,YIZM(1,1),V2)
      HDUM(1)=PHID*(-CIZ(2,1)-(V2(2)-V1(2)/ZMS)*SZ1)
      HDUM(2)=PHID*(CIZ(3,3)+CIZ(1,1)+(V2(3)-V1(3)/ZMS)*SZ3+
     1(V2(1)-V1(1)/ZMS)*SZ1)
      HDUM(3)=PHID*(-CIZ(2,3)-(V2(2)-V1(2)/ZMS)*SZ3)
      CALL MATV(1,F,HDUM,V3)
      DO 5 I=1,3
      HBODY(I)=HBODY(I)+V3(I)
    5 CONTINUE
   10 CONTINUE
C
      IF(IV.EQ.0) GO TO 20
      WS1=OML*CIL
      DO 15 I=1,3
      HBODY(I)=HBODY(I)+VIV(I)*WS1
   15 CONTINUE
   20 CONTINUE
C
      IF(IW.EQ.0) GO TO 30
      DO 25 I=1,3
      HBODY(I)=HBODY(I)+HWM(I)
   25 CONTINUE
   30 CONTINUE
C
      IF(I2BDY.EQ.0) GO TO 32
C
      HBODY(1)=HBODY(1)+H2B(1)-(Y2*Y2D(3)-Y3*Y2D(2))/ZMS
      HBODY(2)=HBODY(2)+H2B(2)-(Y3*Y2D(1)-Y1*Y2D(3))/ZMS
      HBODY(3)=HBODY(3)+H2B(3)-(Y1*Y2D(2)-Y2*Y2D(1))/ZMS
C
   32 CONTINUE
C
      HBODY(1)=HBODY(1)+HGMB(1)+HAWH(1)+HAXWH(1)+HELGM(1)+HTIP(1)
      HBODY(2)=HBODY(2)+HGMB(2)+HAWH(2)+HAXWH(2)+HELGM(2)+HTIP(2)
      HBODY(3)=HBODY(3)+HGMB(3)+HAWH(3)+HAXWH(3)+HELGM(3)+HTIP(3)
C
      HMAG=0.0D0
      DO 35 I=1,3
      HINERT(I)=A(I,1)*HBODY(1)+A(I,2)*HBODY(2)+A(I,3)*HBODY(3)
      HMAG=HMAG+HINERT(I)*HINERT(I)
   35 CONTINUE
      HMAG=DSQRT(HMAG)
      IF(T.NE.TST) GO TO 50
      IF(IHREF.EQ.0) GO TO 50
      WS1=HINERT(1)/HMAG
      WS2=HINERT(2)/HMAG
      ZETTA=0.0D0
      IF(WS1.EQ.0.0D0.AND.WS2.EQ.0.0D0) GO TO 40
      ZETTA=DATAN2(WS2,WS1)/RAD
   40 CONTINUE
      WS1=HINERT(3)/HMAG
      ETTA=DARCOS(WS1)/RAD
   50 CONTINUE
      IF(IHCALC.EQ.0) IHFLAG=0
      IF(ITHRM(10).EQ.0) RETURN
      WRITE(9,9000) CIN
      WRITE(9,9000) CIND,YB,YBD
      WRITE(9,9000) OM,HBODY,HINERT
 9000 FORMAT(' HCOMPT',5X,1P9E13.5)
      RETURN
      END
      SUBROUTINE HIALT (DEL0  ,HGT   ,PHJ   ,TINF  ,TX    ,T0    ,
     *                  ZJ0   ,RHO   )
      IMPLICIT REAL*8  (A-H,O-Z)
      DIMENSION         CFL(5),DD(5,7)      ,GAMMA(6)     ,R(6)
C
C.......................................................................
C
C   VERSION OF APRIL 14, 1976
C
C   PURPOSE
C     HIALT IS CALLED BY JACROB TO FURNISH DENSITY VALUES ABOVE 125 KM.
C
C   INTERFACE
C
C     VARIABLE    COM/ARGLIST   I/O   DESCRIPTION
C     ........    ...........   ...   ..................................
C     ADT(6)      /ORDRAG/       I    THERMAL DIFFUSION COEFFICIENTS
C     CM(6)       /ORDRAG/       I    MASSES OF ATMOSPHERIC CONSTITUENTS
C     DEL0        ARG. LIST      I    LATITUDE OF SUN
C     GL0         /ORDRAG/       I    MEAN SURFACE GRAVITY (CM/SEC**2)
C     HGT         ARG. LIST      I    SPACECRAFT HEIGHT (KM)
C     PHJ         ARG. LIST      I    SPACECRAFT GEODETIC LATITUDE
C     RC          /ORDRAG/       I    UNIVERSAL GAS CONSTANT
C                                     (ERGS/ DEG K /MOLE)
C     RCM         /ORDRAG/       I    AVERAGE EARTH RADIUS (KM)
C     RHO         ARG. LIST      O    ATMOSPHERIC DENSITY
C     TINF        ARG. LIST      I    EXOSPHERIC TEMPERATURE
C     TX          ARG. LIST      I    INFLECTION POINT TEMPERATURE
C     T0          ARG. LIST      I    TEMPERATURE AT ZJ0
C     ZJ0         ARG. LIST      I    MINIMUM HEIGHT (KM)
C
C   SUBROUTINES AND FUNCTIONS REQUIRED
C     NONE
C
C   COMMON BLOCKS REQUIRED
C     ORDRAG
C
C   SUBROUTINE HIALT IS CALLED FROM SUBROUTINE JACROB
C
C.......................................................................
C
      COMMON/ORDRAG/ ADT(6),CM(6),GL0,RC,RCM,RL1,RL1MAG,
     *               RL2,RL2MAG,XLPS,YLPS,UC(2),WC(2)
C
C
C                    SET NECESSARY CONSTANTS
C
C                    AVOGADRO'S NUMBER IN NUMBER / MOLE
C
      DATA   AVG    / 6.02257D23/
C
C                    CORRECTION FACTOR IN KM
C
      DATA   CF     / 11825.D0 /
C
C                    COEFFICIENTS FOR COMPUTING CF
C
      DATA   CFL    /  .1031445D5,
     *                 .2341230D1,
     *                 .1579202D-2,
     *                -.1252487D-5,
     *                 .2462708D-9 /
C
C                    POWER SERIES COEFFICIENTS FOR COMPUTING RHOS AT
C                    INFLECTION POINT
C
      DATA  DD        /0.1093155D2        ,0.8049405D1        ,
     *                  .7646886D1        , .9924237D1        ,
     *                  .1097083D2        , .1186783D-2       ,
     *                  .2382822D-2       ,-.4383486D-3       ,
     *                  .1600311D-2       , .6118742D-4       ,
     *                 -.1677341D-5       ,-.3391366D-5       ,
     *                  .4694319D-6       ,-.2274761D-5       ,
     *                 -.1165003D-6       , .1420228D-8       ,
     *                  .2909714D-8       ,-.2894886D-9       ,
     *                  .1938454D-8       , .9239354D-10      ,
     *                 -.7139785D-12      ,-.1481702D-11      ,
     *                  .9451989D-13      ,-.9782183D-12      ,
     *                 -.3490739D-13      , .1969715D-15      ,
     *                  .4127600D-15      ,-.1270838D-16      ,
     *                  .2698450D-15      , .5116298D-17      ,
     *                 -.2296182D-19      ,-.4837461D-19      ,0.D0    ,
     *                 -.3131808D-19      ,0.D0               /
C
      DATA   TWOPI  /  6.283185307179586D0 /
C
C                      INFLECTION POINT HEIGHT IN KM
C
      DATA   ZJX    /  125.D0 /
C
C   PRECOMPUTATION
C
      T1 = TINF - TX
      T2 = (TX - T0)/(T1*(ZJX - ZJ0))
      T3 = (HGT - ZJX)/(RCM + HGT)
C
C   A POLYNOMIAL HAS BEEN FITTED TO THE BEST VALUES OF CF
C
      CF = CFL(5)
C
      DO 10 I=1,4
          CF = CF*TINF + CFL(5-I)
   10 CONTINUE
C
C   TEMPERATURE AT SPACECRAFT HEIGHT
C
      T4 = DEXP(-T2*T3*CF)
      T = TINF - T1*T4
C
C   COMPUTE LOG OF CONSTITUENT NUMBER DENSITY AT INFLECTION POINT HEIGHT
C
      DO  30  I=1,5
         R(I) = DD(I,7)
C
         DO 20 J=1,6
            R(I) = R(I) * TINF + DD(I,7-J)
   20    CONTINUE
C
   30 CONTINUE
C
C   THE EXPONENT GAMMA(I) IS ALSO A FUNCTION OF CONSTITUENTS
C
      T8 = GL0*RCM**2/(RC*CF*TINF*T2*6481.766D0)
C
      DO 40 I=1,6
         GAMMA(I) = T8*CM(I)
   40 CONTINUE
C
C   LOGS OF NUMBER DENSITIES OF CONSTITUENTS AT DESIRED HEIGHT ARE
C   COMPUTED AND CONVERTED TO ACTUAL NUMBER DENSITIES
C
      T8 =(TX/T)
      IF (T4 .GT. 0.D0)  GO TO 60
C
      DO 50 I=1,5
         R(I) = 0.D0
   50 CONTINUE
C
      GO TO 80
C
   60 T8 = DLOG10(T8)
      T9 = DLOG10(T4)
C
      DO  70 I=1,5
         E = 1.D0 + ADT(I) + GAMMA(I)
         R(I) = R    (I) + T8* E + T9* GAMMA(I)
         R(I) =           10.D0**R(I)
   70 CONTINUE
C
C   HYDROGEN DENSITY AT 500 KM:
C
   80 T9 = DLOG10(TINF)
      R(6) = 73.13D0 - (39.4D0 - 5.5D0*T9)*T9
      R(6) = CM(6) * 10.D0**R(6) / AVG
      IF (HGT.EQ. 500.D0) GO TO 90
C
C   TEMPERATURE AT 500KM.
C
      T5 = T4**(.5469D-1/T3)
      T500 = TINF - T1*T5
C
C   HYDROGEN DENSITY
C
      R(6) = R(6)*(T500/T)**(1.D0 + ADT(6) + GAMMA(6)) * (T4/T5
     *       )**GAMMA(6)
C   SEASONAL LATITUDE VARIATION OF HELIUM
C
   90 IF (DEL0 .NE. 0.D0)  GO TO 100
      B1 = PHJ/2.D0
      GO TO 110
C
  100 B1 = (PHJ * DEL0)/(2.0D0 * DABS(DEL0))
C
  110 B1 = TWOPI/8.D0 - B1
      B1 = .02773D0*DABS(DEL0)*(DSIN(B1)**3 - .3536D0)
      R(3) = R(3)  *  10.D0 ** B1
C
C   CONVERT THE NUMBER DENSITIES TO MASS DENSITIES AND SUM.
C
      RHO =0.D0
C
      DO 120 I=1,5
         R(I) = R(I)*CM(I)/AVG
         RHO = RHO + R(I)
  120 CONTINUE
C
      RHO = RHO + R(6)
C
      RETURN
      END
      FUNCTION HMSOUT(X)
      IMPLICIT REAL*8(A-H,O-Z)
C
C                       FUNCTION TO CHANGE CONTINUOUS SECONDS TO
C                       HOURS MINUTES AND SECONDS
C
      IHR=X/3.6D3 + 0.5D-4
      HR=IHR
      MIN=(X - HR*3.6D3)/6.D1 + 0.5D-4
      XMIN=MIN
      SEC=X - (HR*3.6D3 + XMIN*6.D1)
      HMSOUT=HR*10000 + XMIN*100 + SEC
      RETURN
      END
      SUBROUTINE IGCAL(INOPT,YYSO,XICO,ZMS,SA,S,IG)
C
C     'IGCAL' CALCULATES THE TOTAL MOMENT OF INERTIA OF THE SATELLITE
C     IN INERTIAL SPACE ABOUT THE CENTER OF MASS OF THE SATELLITE.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 IG(3,3)
C
      COMMON/DEBUG3/ ISWTCH
C
C
      DIMENSION YYSO(3,3),XICO(3),SUSE(3,3),SUSET(3,3),SA(3,3),S(3,3),
     .          DUM(3,3),D(3),XXSO(3,3)
C
C
      DO 10 I=1,3
      DO 10 J=1,3
   10 SUSE(I,J)=SA(I,J)
C
      CALL MATRAN(SUSE,SUSET,3,3)
      IF(ISWTCH.NE.0) GO TO 40
      WRITE(6,10000) INOPT
      WRITE(6,10002) ((SUSE(I,J),J=1,3),I=1,3)
      WRITE(6,10003)
      WRITE(6,10002) ((SUSET(I,J),J=1,3),I=1,3)
   40 CALL MULTM(SUSE,XICO,D,3,1,3)
      IF(ISWTCH.EQ.0) WRITE(6,10004) (D(I),I=1,3)
      CALL MULTM(SUSE,YYSO,DUM,3,3,3)
      IF(ISWTCH.EQ.0) WRITE(6,10005) ((DUM(I,J),J=1,3),I=1,3)
      CALL MULTM(DUM,SUSET,XXSO,3,3,3)
      IF(ISWTCH.EQ.0) WRITE(6,10006) ((XXSO(I,J),J=1,3),I=1,3)
C
      DO 50 I=1,3
      DO 50 J=1,3
   50 DUM(I,J)=D(I)*D(J)
      IF(ISWTCH.EQ.0) WRITE(6,10005) ((DUM(I,J),J=1,3),I=1,3)
      DO 60 I=1,3
      DO 60 J=1,3
   60 IG(I,J)=XXSO(I,J) - ZMS*DUM(I,J)
C
      RETURN
C
C
10000 FORMAT('0',2X,'INOPT ',I2)
C
10001 FORMAT('0',2X,'SUSE')
C
10002 FORMAT('0',2X,3(G20.13,2X)/3X,3(G20.13,2X)/3X,3(G20.13,2X))
C
10003 FORMAT('0',2X,'SUSE TRANSPOSE')
C
10004 FORMAT('0',2X,'D ',3(G20.13,2X))
C
10005 FORMAT('0',2X,'DUM ',3(G20.13,2X)/3X,3(G20.13,2X)/3X,3(G20.13,2X))
C
10006 FORMAT('0',2X,'XXSO',3(G20.13,2X)/3X,3(G20.13,2X)/3X,3(G20.13,2X))
C
      END
      SUBROUTINE INVERT (A, NZ, MAXZ, INDEX, ROW, KOL)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C     THIS SUBROUTINE WILL INVERT A MATRIX OF ANY ORDER (LIMITED BY
C       COMPUTER CAPACITY) BY A MODIFIED GAUSS-ELIMINATION METHOD.
C         A = THE INPUT MATRIX AS WELL AS THE OUTPUT MATRIX.
C        NZ = THE ORDER OF MATRIX A.
C      MAXZ = THE MAXIMUM ORDER DIMENSIONED IN THE CALLING PROGRAM.
C             THIS PERMITS THE USER TO INVERT ANY MATRIX FROM A 2 BY 2
C               UP TO A MAXZ BY MAXZ FROM CASE TO CASE.
C     INDEX = 1 IF THE INVERSE IS FOUND.
C           = 2 IF THE INPUT MATRIX IS SINGULAR.
C           = 3 IF MACHINE ERROR OCCURRED. IF PROGRAMMER WISHES TO LOOP
C               BACK FOR ANOTHER TRY, BE SURE TO RESET THE INPUT MATRIX.
C       ROW = TEMPORARY WORK STORAGE.
C       KOL = TEMPORARY WORK STORAGE.
C     MATRIX A IS DUMMY DIMENSIONED. THIS SUBROUTINE REFERS TO IT AS A
C       SINGLE DIMENSIONED VARIABLE BY FINDING THE PROPER SUBSCRIPT.
      DIMENSION  A(2), ROW(2), KOL(2)
      N=NZ
      MAX=MAXZ
      KOL(1)=1
      DO 10 I=2,N
      KOL(I)=KOL(I-1)+1
   10 CONTINUE
      DO 120 K=1,N
      L=N-K+1
      M=KOL(1)
      J=1
      IF(N-K) 190,60,20
   20 AMPY=DABS(A(1))
      DO 40 I=2,L
      IF(AMPY-DABS(A(I))) 30,40,40
   30 J=I
      AMPY=DABS(A(I))
      M=KOL(I)
   40 CONTINUE
      IF(KOL(1)-M) 50,60,50
   50 KOL(J)=KOL(1)
      KOL(1)=M
   60 IF(A(J)) 70,200,70
   70 AMPY=A(J)
      DO 80 I=2,N
      IS=(I-1)*MAX+J
      ROW(I-1)=A(IS)/AMPY
      IC=(I-2)*MAX
      IS=IC+J
      IT=IC+1
      A(IS)=A(IT)
   80 CONTINUE
      ROW(N)=1.0D0/AMPY
      IC=(N-1)*MAX
      IS=IC+J
      IT=IC+1
      A(IS)=A(IT)
      DO 100 I=2,N
      AMPY=A(I)
      DO 90 J=2,N
      IS=(J-2)*MAX+I-1
      IT=(J-1)*MAX+I
      A(IS)=A(IT)-AMPY*ROW(J-1)
   90 CONTINUE
      IS=(N-1)*MAX+I-1
      A(IS)= -AMPY*ROW(N)
  100 CONTINUE
      DO 110 J=1,N
      KOL(J)=KOL(J+1)
      IS=(J-1)*MAX+N
      A(IS)=ROW(J)
  110 CONTINUE
      KOL(N)=M
  120 CONTINUE
      DO 170 K=1,N
      IF(KOL(K)-K) 190,170,130
  130 DO 160 I=K,N
      IF(KOL(I)-K) 190,140,160
  140 DO 150 J=1,N
      IS=(I-1)*MAX+J
      IT=(K-1)*MAX+J
      ROW(1)=A(IS)
      A(IS)=A(IT)
      A(IT)=ROW(1)
  150 CONTINUE
      M=KOL(K)
      KOL(K)=KOL(I)
      KOL(I)=M
      GO TO 170
  160 CONTINUE
      INDEX=3
      GO TO 180
  170 CONTINUE
      INDEX=1
  180 RETURN
  190 INDEX=3
      GO TO 180
  200 INDEX=2
      GO TO 180
      END
      FUNCTION ISPIN(TIME,TZSPIN,TSTOP,DELTAT,JUMP)
C
C                  'ISPIN' IS A FUNCTION SUBROUTINE TO SET UP INDICES
C                  TO APPLY AND  REMOVE TORQUING TO SPIN AXIS
C
      REAL*8  TIME,TZSPIN,TSTOP,DELTAT,TOTAL
C
      TOTAL=TIME + DELTAT
      GO TO (10,30,30),JUMP
   10 IF(TOTAL.GE.TZSPIN) GO TO 20
      ISPIN=2
      RETURN
C
   20 ISPIN=1
      JUMP=2
      RETURN
C
   30 IF(TIME.GE.TSTOP) GO TO 40
      ISPIN=2
      RETURN
C
   40 JUMP=3
      ISPIN=1
      RETURN
      END
      SUBROUTINE J1CAL(J1,SUM,YYDB,BDYMI,ISO)
C
C     'J1CAL' CALCULATES THE TOTAL MOMENT OF INERTIA OF THE SATELLITE IN
C     THE BODY FRAME
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 ISO(3,3),J1(3,3)
C
      DIMENSION SUM(6),YYDB(3,3),BDYMI(3,3)
C
C
      ISO(1,1)=BDYMI(1,1) + SUM(1) + YYDB(2,2) + YYDB(3,3)
      ISO(2,2)=BDYMI(2,2) + SUM(2) + YYDB(1,1) + YYDB(3,3)
      ISO(3,3)=BDYMI(3,3) + SUM(3) + YYDB(1,1) + YYDB(2,2)
C
      ISO(1,2)=BDYMI(1,2) + SUM(4) + YYDB(1,2)
      ISO(1,3)=BDYMI(1,3) + SUM(5) + YYDB(1,3)
      ISO(2,3)=BDYMI(2,3) + SUM(6) + YYDB(2,3)
C
      ISO(2,1)=ISO(1,2)
      ISO(3,1)=ISO(1,3)
      ISO(3,2)=ISO(2,3)
C
      DO 10 I=1,3
      J1(I,I)=ISO(I,I)
      DO 10 J=1,3
   10 IF(I.NE.J) J1(I,J)=-ISO(I,J)
      RETURN
      END
      SUBROUTINE J2CAL(ZBZK,CKMAT,XX,ZF,ZZT)
C
C     'J2CAL' CALCULATES THE TOTAL MOMENT OF INERTIA OF THE LIBRATION
C     DAMPER IN THE DAMPER FRAME.
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C
      DIMENSION ZBZK(3),CKMAT(3,3),XX(3,3),ZZO(3,3),ZZOF(3,3),ZZFF(3,3),
     .          CT(3,3),ZZT(3,3),ZF(3),DUM(3,3)
C
C
      DO 10 I=1,3
      DO 10 J=1,3
      ZZO(I,J)=ZBZK(I)*ZBZK(J)
   10 ZZOF(I,J)=ZBZK(I)*ZF(J)
C
      CALL MULTM(CKMAT,XX,DUM,3,3,3)
      CALL MATRAN(CKMAT,CT,3,3)
      CALL MULTM(DUM,CT,ZZFF,3,3,3)
C
      DO 20 I=1,3
      DO 20 J=1,3
   20 ZZT(I,J)=ZZO(I,J) + ZZOF(I,J) + ZZOF(J,I) + ZZFF(I,J)
C
      RETURN
      END
      SUBROUTINE J3CAL(ZBZK,YT,YOZ,YF,YFYF,FM1,RHOKLK,IXDB)
C
C     'J3CAL' IS THE CROSS COUPLING INERTIA MATRIX BETWEEN THE
C     LIBRATION DAMPER ANGULAR VELOCITY AND THE SATELLITE ANGULAR
C     VELOCITY
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 IXDB(3,3)
C
      DIMENSION ZBZK(3),YT(3),YOZ(3),YF(3),YFYF(3,3),FM1(3,3),
     .          YR(3),YRYT(3,3),YFYO(3,3),YDB(3,3)
C
C
      CALL MULTM(FM1,ZBZK,YR,3,1,3)
C
      DO 10 I=1,3
      DO 10 J=1,3
      YRYT(I,J)=YR(I)*YT(J)
      YFYO(I,J)=YF(I)*YOZ(J)
   10 YDB(I,J)=YRYT(I,J) + YFYO(I,J) + YFYF(I,J)
C
      IXDB(1,1)=IXDB(1,1) + RHOKLK*(YDB(2,2) + YDB(3,3))
      IXDB(2,2)=IXDB(2,2) + RHOKLK*(YDB(3,3) + YDB(1,1))
      IXDB(3,3)=IXDB(3,3) + RHOKLK*(YDB(1,1) + YDB(2,2))
C
      IXDB(1,2)=IXDB(1,2) - RHOKLK*YDB(1,2)
      IXDB(1,3)=IXDB(1,3) - RHOKLK*YDB(1,3)
      IXDB(2,3)=IXDB(2,3) - RHOKLK*YDB(2,3)
C
      IXDB(2,1)=IXDB(2,1) - RHOKLK*YDB(2,1)
      IXDB(3,1)=IXDB(3,1) - RHOKLK*YDB(3,1)
      IXDB(3,2)=IXDB(3,2) - RHOKLK*YDB(3,2)
C
      RETURN
      END
      SUBROUTINE JACCWF (TIME  ,TEMP ,MAG)
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER*2        KP1
      DIMENSION        KP1(21,4)
      EQUIVALENCE     (KP1(1,1)   ,KP(1,1))
C
C.......................................................................
C
C     VERSION OF JUNE 16,1976
C
C     PURPOSE
C        SUBROUTINE JACCWF PROVIDES THE CALLING ROUTINE WITH MAGNETIC
C        ACTIVITY INDEX AND EXOSPHERIC TEMPERATURE AT TIME TMOD
C
C     INTERFACES
C
C        VARIABLE    COM/ARGLIST    I/O    DESCRIPTION
C        --------    -----------    ---    -----------------------------
C        IERR        ARG. LIST       O     ERROR FLAG
C                                          = 0, NO ERROR
C                                          =23, INPUT TIME OUT OF RANGE
C        IT          /ORJACC/       I/O    MODIFIED JULIAN DATE OF FIRST
C                                          TC CURRENTLY IN COMMON
C        KP(21,8)    /ORJACC/        O     MAGNETIC ACTIVITY 3-HOUR
C                                          INDICES
C        MAG         ARG. LIST       O     VALUE OF KP CORRESPONDING TO
C                                          TIME TMOD
C        TC(20)      /ORJACC/        O     EXOSPHERIC TEMPERATURES
C        TEMP        ARG. LIST       O     VALUE OF TC CORRESPONDING TO
C                                          TIME TMOD
C        TIME        ARG. LIST       I     FULL UTC JULIAN DATE OF
C                                          REQUESTED OUTPUT
C
C     COMMON BLOCKS NEEDED
C        ORJACC
C
C     SUBROUTINES AND FUNCTIONS REQUIRED
C        NONE
C
C     REQUIRED EXTERNAL DATA SETS
C        JACCHIA-ROBERTS DATA FILE
C
C      SUBROUTINE JACCWF IS CALLED FROM SUBROUTINE JACROB
C
C.......................................................................
C
      INTEGER*2 KP
      REAL*4 TC
C
      COMMON/ORJACC/ IT,KP(21,8),TC(20)
C
C
C
      TMOD = TIME - 2430000.5D0
C
      ITA  = TMOD
C
C
C              DETERMINE CURRENT VALUE OF TEMP AND MAG
C
      TEMP   = TC (ITA - IT + 1)
      DAY    = TMOD - .28D0
      IDAY   = DAY
      HOUR   = (DAY - IDAY) * 24.D0
      I3HOUR = 1.D0 + HOUR/3.D0
      MAG    = KP (IDAY-IT+2, I3HOUR)
C
      RETURN
      END
      SUBROUTINE  JACROB (ESQ   ,HGT   ,TIME  ,USAT  ,USUN  ,RHO)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION       USAT(3)      ,USUN(3)
C
C.......................................................................
C
C  VERSION OF 20 JULY 1976
C
C   PURPOSE
C      JACROB FURNISHES ATMOSPHERIC DENSITY USING JACCHIA'S
C      1971 ATMOSPHERIC MODEL AS MODIFIED BY ROBERTS IN 1971.
C      COMPUTATIONS PERFORMED ARE TIME DEFINITION, EXOSPHERIC
C      TEMPERATURE, CORRECTIONS TO THE ATMOSPHERIC DENSITY, AND
C      ASSESSMENT AS TO WHICH HEIGHT RANGE TO USE IN COMPUTING THE
C      ATMOSPHERIC DENSITY.
C
C   REFERENCES
C      JACCHIA, L. J., REVISED STATIC MODELS OF THE THERMOSPHERE AND
C        EXOSPHERE WITH EMPIRICAL TEMPERATURE PROFILES, S.A.O., SPECIAL
C        REPORT NO. 332, MAY 5,1971.
C      ROBERTS, C. E., JR., AN ANALYTICAL MODEL FOR UPPER ATMOSPHERE
C        DENSITIES BASED UPON JACCHIA'S 1970 MODELS, CELESTIAL MECHANICS
C        4,(1971).
C
C    COMMON BLOCKS NEEDED
C       NONE
C
C    CALLING SEQUENCE EXPLANATION
C
C       VARIABLE       I/O     DESCRIPTION
C       --------       ---     -----------------------------------------
C       ESQ             I      ECCENTRICITY OF THE CENTRAL BODY SQUARED
C       HGT             I      SPACECRAFT HEIGHT (KM)
C       IERR            I      ERROR RETURN CODE FROM JACCWF
C       TIME            I      CURRENT TIME (FULL A.1 JULIAN DATE)
C       USAT(3)         I      UNIT POSITION VECTOR OF THE SPACECRAFT
C       USUN(3)         I      UNIT POSITION VECTOR OF THE SUN
C       RHO             O      ATMOSPHERIC DENSITY
C
C   JACROB IS CALLED FROM SUBROUTINE DRAG
C
C   SUBROUTINES AND FUNCTIONS REQUIRED
C     HIALT  - COMPUTES RHO AT ALTITUDES ABOVE 125 KM.
C     JACCWF - RETURNS GEOMAGNETIC INDEX AND EXOSPHERIC TEMPERATURE
C     LOWALT - COMPUTES RHO AT ALTITUDES BETWEEN 90 KM AND 125 KM
C
C.......................................................................
C
C                   INITIALIZE NECESSARY PARAMETERS
C
      DATA   DTR   /1.745329251994330D-2/
      DATA   TWOPI /6.283185307179586D0/
      DATA   PI    /3.141592653589793D0/
C
C                   MINIMUM HEIGHT IN KILOMETERS
      DATA   ZJ0   /90.D0/
C                   DENSITY AT MINIMUM HEIGHT IN GM/CM**3
      DATA   RHOZ  /3.46D-9/
C                   TEMPERATURE AT MINIMUM HEIGHT IN DEGREES KELVIN
      DATA   T0    /183.D0/
C
      IF (HGT .GE. ZJ0)  GO TO 10
C
C                   SPACECRAFT IS AT OR BELOW MINIMUM HEIGHT
      RHO = RHOZ
      GO TO 90
C
   10 IF (HGT .LT. 3000.D0)  GO TO 20
C
C                   THERE IS NO ATMOSPHERE ABOVE 3000 KM
C
      RHO = 0.D0
      GO TO 999
C
C                   CALCULATE SATELLITE GEODETIC LATITUDE
C
   20 D1  = DSQRT (USAT(1)**2 + USAT(2)**2)
      PHJ = DATAN (USAT(3)/(D1*(1.D0 - ESQ)))
C
C                   CALCULATE SUN HOUR ANGLE
C
      D2  = DSQRT (USUN(1)**2  +  USUN(2)**2)
      CX  = USUN(1) * USAT(1)  +  USUN(2) * USAT(2)
      TH  = DARCOS (CX/(D1*D2))
      HC  = USUN(1)*USAT(2)  -  USUN(2)*USAT(1)
      HCJ = TH / DTR  *  HC / DABS(HC)
C
C                  OBTAIN TEMPERATURE AND MAGNETIC VALUE AT CURRENT TIME
C     ...........
      CALL JACCWF (TIME   ,TEMP  ,MAG)
C     ...........
C
C                  COMPUTE THE DIURNAL EXOSPHERIC TEMPERATURE -- DL
C
      DEL0   = DATAN2 (USUN(3),D2)
      Q      = (HCJ + 43.D0) * DTR
      TAU    = (HCJ - 37.D0 + 6.D0   *DSIN(Q)) * DTR
      IF (TAU .LT. -PI)  TAU = TAU  +  TWOPI
      IF (TAU .GT.  PI)  TAU = TAU  -  TWOPI
      TAU    = .5D0 * TAU
      TH22   = ( DSIN (.5D0 * DABS (PHJ+DEL0) ) ) ** 2.2
      UN22   = ( DCOS (.5D0 * DABS (PHJ-DEL0) ) ) ** 2.2
      CSTAU3 = DCOS(TAU)**3
      DL     = TEMP * (1.D0 + .3D0 * (TH22 + (UN22 - TH22) * CSTAU3))
C
C                  GEOMAGNETIC  ACTIVITY
C
C   GEOMAGNETIC DISTURBANCES INFLUENCE THE ATMOSPHERIC DENSITY WITH A
C   TIME LAG OF 6.7 HOURS.  THE STORED VALUES ARE 10 TIMES THE ACTUAL
C   VALUES.
C
      TP1 = (MAG * 3  + 5) / 10
      TP1 = TP1 / 3.D0
C
C   THE GEOMAGNETIC TEMPERATURE CONTRIBUTION (DTG)  AND
C   THE BASE 10 LOGARITHM OF THE CONTRIBUTION TO RHO FROM GEOMAGNETIC
C   INFLUENCES ARE HANDLED DIFFERENTLY ABOVE AND BELOW 200KM.
C
      IF (HGT .LT. 200.D0)  GO TO 30
C
      DTG    = 28.D0 * TP1  +  .03D0 * DEXP(TP1)
      DL10RG = 0.D0
      GO TO 40
C
   30 DTG    = 14.D0  * TP1  +  .02D0  * DEXP(TP1)
      DL10RG = .012D0 * TP1  +  1.2D-5 * DEXP(TP1)
C
C   EXOSPHERIC TEMPERATURE IS THE TOTAL TEMPERATURE DUE TO DIURNAL AND
C   GEOMAGNETIC EFFECTS
C
   40 TINF = DL + DTG
C
C   SEMI-ANNUAL DENSITY VARIATION IS ADDED ON TO THE GEOMAGNETIC -- BOTH
C   IN BASE 10 LOGARITHMS
C
      PHI    = (TIME - 2436204.5D0) / 365.2422D0
      TSA    = TWOPI * PHI  +  6.035D0
      TSA    = PHI + .09544D0*((.5D0 + .5D0*DSIN(TSA))**1.65D0 - .5D0)
      B1     = TWOPI * TSA  +  4.137D0
      B2     = TWOPI * TSA * 2.D0  +  4.259D0
      GT     = .02835D0 + (.3817D0 + .17829D0*DSIN(B1)) * DSIN(B2)
      FZ     = (.5876D-6*HGT**2.331D0+.06328D0)*DEXP(-.002868D0*HGT)
      DL10RG = DL10RG  +  FZ * GT
C
C   SEASONAL LATITUDE VARIATION OF THE LOWER THERMOSPHERE IS ALSO ADDED
C   IN TO THE LOGARITHM OF DENSITY
C
      ZM90 = HGT - ZJ0
C
C                    HGT .GT. 440 GIVES UNDERFLOWS.
C
      IF (HGT .LT. 440.D0)  GO TO 50
C
      DL10RL = 0.D0
      GO TO 60
C
   50 EXPR = .014D0 * DEXP (-1.3D-3*ZM90**2) * DSIN (TWOPI*PHI+1.72D0)
      DL10RL = DSIN(PHJ)
      DL10RL = DL10RL * DABS(DL10RL) * EXPR * ZM90
C
   60 DL10RG = 10.D0 ** (DL10RG + DL10RL)
C
C                     INFLECTION POINT TEMPERATURE
C
      TX =371.6673D0+.0518806D0*TINF-294.3505D0*DEXP(TINF*(-.0021622D0))
C
C   THE OTHER CONTRIBUTIONS ARE CALCULATED BY SUBROUTINES HIALT OR
C   LOWALT, AS APPROPRIATE, AND ADDED INTO THE LOGARITHM OF RHO.
C
      IF (HGT .GT. 125.D0) GO TO 70
C
C          ......
      CALL LOWALT (HGT   ,RHOZ  ,TINF  ,TX    ,T0    ,ZJ0   ,RHO   )
C          ......
C
      GO TO 80
C
C          .....
   70 CALL HIALT (DEL0  ,HGT   ,PHJ   ,TINF  ,TX    ,T0    ,ZJ0   ,RHO)
C          .....
C
   80 RHO = RHO * DL10RG
C
C                      CONVERT RHO FROM CGS TO MKS UNITS.
C
   90 RHO = RHO*1.D12
C
C
  999 RETURN
      END
      SUBROUTINE JETDM0(LDPLY)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
C
      COMMON/CSTVAL/ TSTART,DUM05(40)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/ITCNTL/ IPULSE,ISPLSE,KPULSE,ITSW,IOTSW,IPLPRP
C
      COMMON/JETDMP/ ZMS0,TANKCG(3),FUELPP(2),FUELM,DMDT(2)
     1              ,RGYFL(3),IJTDMP
C
      COMMON/RPOOL1/ DUM01(10),TIME,DUM02(28),OMEG(3),DUM03(38)
     1              ,YBCM(3),DUM04(42)
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/THRUST/ TV(3,2),TL(3,2),TT(4,2),TPAR(4,2),REF(2)
C
      COMMON/TIMPLS/ TMEAN(2),TPULSE(2),TOPLSE(2),TTSTOP(2),DELV(2)
C
C
      DIMENSION YYF(3,3),CIY(3,3),VECF(3),VECM(3),FD(3,2)
      DIMENSION V1(3),V2(3)
      DIMENSION DFINT(3,3)
C
      IF(LDPLY.NE.0) RETURN
C
      ZMS=ZMS0
C
      IF(IJTDMP.EQ.0) RETURN
      IF(KPULSE.EQ.IPULSE) RETURN
C
      TRACE=0.0D0
      DO 5 I=1,3
      DO 4 J=1,3
      YYF(I,J)=TANKCG(I)*TANKCG(J)
    4 CONTINUE
    5 CONTINUE
C
      YYF(1,1)=YYF(1,1)+(RGYFL(2)+RGYFL(3)-RGYFL(1))/2.0D0
      YYF(2,2)=YYF(2,2)+(RGYFL(3)+RGYFL(1)-RGYFL(2))/2.0D0
      YYF(3,3)=YYF(3,3)+(RGYFL(1)+RGYFL(2)-RGYFL(3))/2.0D0
      TRACE=YYF(1,1)+YYF(2,2)+YYF(3,3)
C
      DO 10 I=1,3
      DO 9 J=1,3
      DFINT(I,J)=-YYF(I,J)
    9 CONTINUE
      DFINT(I,I)=DFINT(I,I)+TRACE
   10 CONTINUE
C
      DO 15 I=1,IPLPRP
      DEN=TT(4,I)-TT(1,I)
      DMDT(I)=FUELPP(I)/DEN
   15 CONTINUE
      FUELEX=0.0D0
      FUELT=FUELM
      ZMS=ZMS0+FUELT
C
      RETURN
C
C   *************************************************************
      ENTRY JETDM1(SY1,SY2,SY3,CIY)
C   *************************************************************
C
C     CALLED FROM FNDALP TO UPDATE MASS PROPERTIES
C
      IF(IJTDMP.EQ.0) RETURN
      IF(TIME.EQ.TSTART) GO TO 40
      IF(KPULSE.EQ.IPULSE) GO TO 32
      IF(ISPLSE.EQ.0) GO TO 20
      IF(ITSW.NE.0) GO TO 32
C
   20 CONTINUE
C
      DFUEL=0.0D0
      DO 30 IT=1,IPLPRP
      IF(TIME.LT.TPULSE(IT)) GO TO 30
      IF(TIME.GT.TTSTOP(IT)) GO TO 30
      RATIO=TIME-TPULSE(IT)
      DEN=TT(4,IT)-TT(1,IT)
      RATIO=RATIO/DEN
      DFUEL=DFUEL+RATIO*FUELPP(IT)
   30 CONTINUE
C
   32 CONTINUE
C
      IW=KPULSE
      IW1=0
      IF(IPLPRP.EQ.1) GO TO 35
      IW=KPULSE/2
      IW1=IW
      IF(MOD(KPULSE,2).EQ.1) IW=IW+1
   35 CONTINUE
C
      FUELEX=IW*FUELPP(1)+IW1*FUELPP(2)+DFUEL
C
C
   40 CONTINUE
C
C
      FUELT=FUELM-FUELEX
      ZMS=ZMS0+FUELT
C
      SY1=SY1+FUELT*TANKCG(1)
      SY2=SY2+FUELT*TANKCG(2)
      SY3=SY3+FUELT*TANKCG(3)
C
      DO 45 I=1,3
      YBCM(I)=YBCM(I)+FUELT*TANKCG(I)
      DO 45 J=1,3
      CIY(I,J)=CIY(I,J)+FUELT*YYF(I,J)
   45 CONTINUE
C
C
      RETURN
C
C   *************************************************************
      ENTRY JETDM2(IPL,VECF,VECM)
C   *************************************************************
C
C     CALLED FROM PULSER TO INCLUDE DAMPING FORCES AND TORQUES
C
      CALL MATV(1,DFINT,OMEG,V1)
C
      FD(1,IPL)=-DMDT(IPL)*(TL(3,IPL)*OMEG(2)-TL(2,IPL)*OMEG(3))
      FD(2,IPL)=-DMDT(IPL)*(TL(1,IPL)*OMEG(3)-TL(3,IPL)*OMEG(1))
      FD(3,IPL)=-DMDT(IPL)*(TL(2,IPL)*OMEG(1)-TL(1,IPL)*OMEG(2))
C
      VECF(1)=VECF(1)+FD(1,IPL)
      VECF(2)=VECF(2)+FD(2,IPL)
      VECF(3)=VECF(3)+FD(3,IPL)
C
      VECM(1)=VECM(1)+DMDT(IPL)*V1(1)
     1               +FD(3,IPL)*TL(2,IPL)-FD(2,IPL)*TL(3,IPL)
      VECM(2)=VECM(2)+DMDT(IPL)*V1(2)
     1               +FD(1,IPL)*TL(3,IPL)-FD(3,IPL)*TL(1,IPL)
      VECM(3)=VECM(3)+DMDT(IPL)*V1(3)
     1               +FD(2,IPL)*TL(1,IPL)-FD(1,IPL)*TL(2,IPL)
C
C
      RETURN
C
      END
      SUBROUTINE JULDAY(IYEAR,MONTH,IDAY,XJD)
      IMPLICIT REAL*8 (A-H,O-Z)
C CONVERTS CALENDAR DATE INTO JULIAN DATE
      DIMENSION IMON(12)
C
C
      DATA IMON/0,31,28,31,30,31,30,31,31,30,31,30/
C
      NYEAR=IYEAR-1961
      NLEAP=NYEAR/4
      NYRDAY=NYEAR*365+NLEAP
C
C
      MODAY=0
      IF (MONTH.GT.2.AND.NYEAR-4*NLEAP.EQ.3) MODAY=1
      DO 10 I=1,MONTH
   10 MODAY=MODAY+IMON(I)
C
C JULIAN BASE DATE IS DEC 31,1960 = 2437299.5 (A.M. MIDNIGHT)
      XJD=NYRDAY+MODAY+IDAY+2437299.5D0
C
      RETURN
      ENTRY CALDAY(XJD,IYEAR,MONTH,IDAY,UT)
      XDAY=XJD-2437300.5D0
      IDAY=XDAY
      UT=(XDAY-IDAY)*86400.D0
      NYEAR=XDAY/365.25D0
      NLEAP=NYEAR/4
      ILEAP=NYEAR-4*NLEAP
      NYRDAY=IDAY+1-365*NYEAR-NLEAP
      IDAY=NYRDAY
      DO 20 I=2,12
      MONTH=I-1
      MODAY=IMON(I)
      IF (MONTH.EQ.2.AND.ILEAP.EQ.3) MODAY=MODAY+1
      IF (IDAY.LE.MODAY) GO TO 22
      IDAY=IDAY-MODAY
   20 CONTINUE
      MONTH=12
      IF (IDAY.LT.32) GO TO 22
      IDAY=1
      MONTH=1
      NYEAR=NYEAR+1
   22 IYEAR=NYEAR+1961
      RETURN
      END
      SUBROUTINE  LOWALT (HGT   ,RHOZ  ,TINF  ,TX    ,T0    ,ZJ0   ,RHO)
      IMPLICIT REAL*8    (A-H,O-Z)
      COMPLEX*16          R
      DIMENSION           C(5)  ,CC(5) ,R(5)
      EQUIVALENCE        (RL1   ,R(1)  )
C
C.......................................................................
C
C   VERSION OF APRIL 14, 1976
C
C   PURPOSE
C     LOWALT IS CALLED BY JACROB TO FURNISH ATMOSPHERIC DENSITY VALUES
C     AT AND BELOW 125 KM.
C
C   INTERFACES
C
C      VARIABLE   COM/ARGLIST    I/O    DESCRIPTION
C      --------   -----------    ---    --------------------------------
C      GL0        /ORDRAG/        I     MEAN SURFACE GRAVITY
C                                          (CM/SEC**2)
C      HGT        ARG. LIST       I     SPACECRAFT HEIGHT (KM)
C      RC         /ORDRAG/        I     UNIVERSAL GAS CONSTANT
C                                          (ERGS/DEGREES KELVIN/MOLE)
C      RCM        /ORDRAG/        I     AVERAGE EARTH RADIUS (KM)
C      RHO        ARG. LIST      I/O    ATMOSPHERIC DENSITY
C      RHOZ       ARG. LIST       I     DENSITY AT MINIMUM HEIGHT
C      RL1        /ORDRAG/       I/O    ROOT OF POLYNOMIAL IN INTEGRAND
C      RL1MAG     /ORDRAG/       I/O    IMAGINARY PART OF RL1
C      RL2        /ORDRAG/       I/O    ROOT OF POLYNOMIAL IN INTEGRAND
C      RL2MAG     /ORDRAG/       I/O    IMAGINARY PART OF RL2
C      TINF       ARG. LIST       I     TOTAL EXOSPHERIC TEMPERATURE
C      TX         ARG. LIST       I     INFLECTION POINT TEMPERATURE
C      T0         ARG. LIST       I     TEMPERATURE AT MINIMUM HEIGHT
C      UC(2)      /ORDRAG/        O     FUNCTIONAL VALUES AT RL1 AND RL2
C      WC(2)      /ORDRAG/        O     FUNCTIONAL VALUES AT RL1 AND RL2
C      XLPS       /ORDRAG/        I     ROOT OF POLYNOMIAL IN INTEGRAND
C      YLPS       /ORDRAG/        I     ROOT OF POLYNOMIAL IN INTEGRAND
C      ZJ0        ARG. LIST       I     MINIMUM HEIGHT (KM)
C
C      SUBROUTINES AND FUNCTIONS REQUIRED
C        BARODE   COMPUTE RHO BETWEEN 90 AND 100 KM
C        DIFFDE   COMPUTE RHO BETWEEN 100 AND 125 KM
C        ROOTS    COMPUTE COMPLEX ROOTS OF POLYNOMIAL
C
C     COMMON BLOCKS REQUIRED
C        /ORDRAG/
C
C     SUBROUTINE LOWALT IS CALLED FROM SUBROUTINE JACROB
C
C.......................................................................
C
      COMMON/ORDRAG/ ADT(6),CM(6),GL0,RC,RCM,RL1,RL1MAG,
     *               RL2,RL2MAG,XLPS,YLPS,UC(2),WC(2)
C
C
C   SET POWER SERIES COEFFICIENTS FOR TZ
C
      DATA   CC / -.8928437500D8,
     *             .35424D7,
     *            -.526875D5,
     *             .3405D3,
     *            -.8D0 /
C
C   PRELIMINARY COMPUTATIONS
C
      FLC4 = .1500625D7 * RCM**2 / CC(5)
      D1   = TX - T0
      FKL  = -GL0 / (RC*D1)
C
C   SET UP THE ARRAY C(I), WHOSE ROOTS ARE TO BE DETERMINED
C
      C(1) = (TX/D1*1500625.D0+CC(1))/CC(5)
      C(2) = CC(2) / CC(5)
      C(3) = CC(3) / CC(5)
      C(4) = CC(4) / CC(5)
      C(5) = 1.D0
C
C   SUBROUTINE ROOTS RETURNS THE COMPLEX ROOTS OF C(I) IN THE ARRAY
C   R(I), WHICH IS EQUIVALENCED TO RL1 ... YLPS.  THE IMAGINARY
C   PARTS OF RL1 AND RL2 ARE ZEROED, TO GIVE PERFECT STARTING VALUES.
C   WHATEVER IS CURRENTLY IN R(I) IS USED AS STARTING VALUES
C   OTHERWISE
C
      RL1MAG = 0.D0
      RL2MAG = 0.D0
C          .....
      CALL ROOTS (C,5,R,3)
C          .....
C
C   EVALUATE STUFF NEEDED BY SUBROUTINES BARODE AND DIFFDE
C
      D1 = TX - T0
      D2 = XLPS**2 + YLPS**2
      D3 = RCM**2 + 2.D0*XLPS*RCM + D2
      XCDI = -2.D0*RL1*RL2*RCM*D3
      VCDI = D3*(RCM + RL1)*(RCM + RL2)
      D3 = RL1 - RL2
      UC(1) = (RL1 + RCM)**2 * (RL1**2 -2.D0*XLPS*RL1 + D2) * D3
      UC(2) = (RL2 + RCM)**2 * (RL2**2 -2.D0*XLPS*RL2 + D2) * D3
      WC(1) = (RCM + RL1) * RL2 * RCM *  (RCM * RL1 + D2)
      WC(2) = (RCM + RL2) * RL1 * RCM *  (RCM * RL2 + D2)
C
C   COMPUTE TEMPERATURE AT CURRENT HEIGHT
C
      TZ = CC(5)
C
      DO 20 I=1,4
         TZ = TZ * HGT  +  CC(5-I)
   20 CONTINUE
C
      TZ = TX + TZ*D1/1500625.D0
C
      IF (HGT .GT. 100.D0)  GO TO 30
C
C          ......
      CALL BARODE (FKL ,FLC4 ,HGT ,RHOZ ,TX ,TZ ,T0,VCDI ,XCDI ,ZJ0,RHO)
C          ......
      GO TO 999
C
C   TEMPERATURE AT 100KM IS USED BY DIFFDE
C
   30 TCIL = CC(5)
C
      DO 40 I=1,4
         TCIL = TCIL*100.D0 + CC(5-I)
   40 CONTINUE
C
      TCIL = TX + TCIL*D1/1500625.D0
C          ......
      CALL DIFFDE (FKL ,FLC4 ,HGT ,TCIL ,TINF ,TZ ,VCDI ,XCDI ,RHO )
C          ......
C
  999 RETURN
      END
      SUBROUTINE MAGNTS(XMB,SA)
        IMPLICIT REAL*8 (A-H,O-Z)
C
C                       SUBROUTINE TO CALCULATE THE MAGNETIC
C                       MOMENTS ON THE SATELLITE IN THE BODY
C                       FRAME
C
      COMMON/MOMENT/IDUM(3),IMGMTS,JDUM(2)
C
      COMMON/OUTTHR/ SMAGB(3),XMB1(3),RWHEEL(3)
C
      COMMON/RMGNTC/ SMAGI(3),DPMAG(3),SFMAG,MAXGRV
C
      DIMENSION SA(3,3),XMB(3)
C
C
C
C
C
C
C
C                       ZERO MAGNETIC MOMENTS
C
C
      DO 20 I=1,3
   20 XMB(I)=0.D0
C
C
C                       HAG CALCULATES FLUX DENSITY IN
C                       ASCENDING NODE COORDINATES
C
   30 CALL HAG
C
C                       CALCULATE SMAGB
C
      DO 40 I=1,3
      SMAGB(I)=0.D0
      DO 40 J=1,3
   40 SMAGB(I)=SMAGB(I) + SA(J,I)*SMAGI(J)
C
C                       CALCULATE MOMENTS
      IF(IMGMTS.GT.1) CALL COILDP(XMB)
C
      XMB(1)=SFMAG*(SMAGB(3)*DPMAG(2) - SMAGB(2)*DPMAG(3)  + XMB(1))
      XMB(2)=SFMAG*(SMAGB(1)*DPMAG(3) - SMAGB(3)*DPMAG(1)  + XMB(2))
      XMB(3)=SFMAG*(SMAGB(2)*DPMAG(1) - SMAGB(1)*DPMAG(2)  + XMB(3))
C
      DO 50 I=1,3
   50 XMB1(I)=XMB(I)
      RETURN
C
C
      END
CCCCC     MAIN  OF  FLEXIBLE  SPACECRAFT  DYNAMICS  PROGRAM     CCCCCCCC
CCCCC MAIN
C     THIS IS THE 'MAIN' FOR THE FLEXIBLE BODY SPACECRAFT DYNAMICS
C     COMPUTER PROGRAM WRITTEN BY AVCO SYSTEMS DIV. WILMINGTON,MASS.
C     THE FSD PROGRAM HAS BEEN MODIFIED  AND MAINTAINED
C     BY K. YONG  OF COMPUTER SCIENCES CORPORATION, SYSTEM
C     SCIENCES DIVISION FOR ADDITIONAL CAPABILITIES FOR
C     FLEXIBLE SPACECRAFT DYNAMIC SIMULATIONS
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 ISUBD,JARRAY,NSUBX
      INTEGER*4 ACNTRL,DDPLY,SDPLY
C
      DEFINE FILE 15(250,63,U,IDUM)
C
      COMMON/ADSTAT/ DER(150),DEP(150)
C
      COMMON/ANTENA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3),ZBZ(3,10),
     .               NELMTS,NDAMPR,MODES(10)
C
      COMMON/CODPLY/ STANG,ANGTOL
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CRATIO/ RATIO
C
      COMMON/CSOLAR/ SAO(10),SKA(9),SKB(9),SKOA(10,3),SKOB(10,3),
     .               STMK(10),SKAA(10,9),SKBB(10,9)
C
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10)
C
      COMMON/DATOUT/ IDATA,MLAST
C
      COMMON/DEBUG1/ IAFM(5)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/DEBUG3/ ISWTCH
C
      COMMON/DEPLOY/ DDPLY,MDPLY
C
      COMMON/ECNSTS/ THETA1,THETGO(12)
C
      COMMON/EISUBK/ EI(10)
C
      COMMON/HAMOUT/ HAMILT,IHAMLT
C
      COMMON/ICNTRL/ KNTRL(10)
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IODPLY/ ISDPLY,IRAXIS,ISAXIS,NCROSS,NPRINT
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/JBTEST/ IBTEST
C
      COMMON/LIBDPR/ ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,ZMDO,
     *               ZMDBO,CNV,DECAY
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/NODER / NDER,NOPT
C
      COMMON/OUTONE/ HSSA(6),SIMPX,SB(3)
C
      COMMON/PLOTIT/ XMIN(11),XMAX(11),YMIN(11),YMAX(11),IFSCAL,
     .               KPLOTS(450)
C
      COMMON/PRCOM / STORE(10,30),ILINE,ICOL,ICNT,IHD
C
      COMMON/PRESUR/ DTOO,POO
C
      COMMON/PUNCH / IPUN,IPUNCH
C
      COMMON/PWHEEL/ XMOMIN(3),DVMOM(3),VMOM(3)
C
      COMMON/RATTDE/ DTMXA,PXI,PXO,EIT,REFTIM,TMX1,TMX2,CMX,ISW
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
C
      COMMON/RMGNTC/ SMAGI(3),DPMAG(3),SFMAG,MAGFLD
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/RPOOL5/ CKMAT(3,3,10),FM2(3,3)
C
      COMMON/RPOOL8/ SZ01(10),SZ11(3,10),SZ24(9,10)
C
      COMMON/RSUNCL/ WE,TVER,ECLPTC
C
      COMMON/RTDIST/ TDIS(10)
C
      COMMON/RUNOUT/ LCPU
C
      COMMON/RVISCS/ NSUBX(3),YARRAY(3),RADTBE,VISCTY,RADRNG,DENSTY,
     .               JARRAY(3),SSUBY,OMEGL,ISUBD
C
      COMMON/SATPOS/ TLAST,TFRST,XLAST(3),XFRST(3),XDLAST(3),XDFRST(3),
     .               SDLAST(3),SDFRST(3),ADLAST(3),ADFRST(3),XDT
C
      COMMON/SUNANG/ DSL2
C
      COMMON/TJAN1/ T
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
C
      COMMON/VERS  / VNO
C
      COMMON/XIN1  / PSI1,THET1,PHI1,ETTA,ZETTA,ITEST1
C
      COMMON/XIN2  / ALFAE,BETAE,GAMAE,OMBC(3),ITEST2
C
      COMMON/XIN3  / ALFAEK(10),BETAEK(10),GAMAEK(10),ETTAD,ZETTAD
C
      COMMON/XIN4  / UP(150),DN(150),CONSA,COMEG,AOOP,AOOPV,AOOP1,AOOPV1
     .              ,AIP,AIPV,AIP1,AIPV1,DOOP,DOOPV,DOOP1,DOOPV1,DIP
     .              ,DIPV,DIP1,DIPV1,DUC,DUC1,DUCD,DUCD1
C
      COMMON/ZSPINR/ DTZMA,PZDT,CMZO,ISPIN3,JSPIN
C
C            ADDITIONAL COMMON BLOCKS FOR MODIFICATION
C
      COMMON/ITCNTL/ IPULSE,ISPLSE,KPULSE,ITSW,IOTSW
C
      COMMON/HOUTPT/ IHCALC,IHREF,IHFLAG
C
      COMMON/IACC  / IACOMP,IHUBAC,ITIPAC,IAFLAG
C
      COMMON/GRNTST/ ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY(3),
     *               GACC(3),GLOCAT(3),IGRUND,IALTUD ,IGASBR
C
      COMMON/ITW   / ITWIST,ITWST1
C
      COMMON/INTTRP/ ITPROT,NUMTIP(10),IRDBUG
C
      DIMENSION RWH(3)
C
      DATA INCOL1,IPASS/8888,0/
      DATA LDPLY,SDPLY/0,0/
C
      CALL ERRSET(73,.TRUE.,.TRUE.,.FALSE.,.TRUE.,15)
      CALL ERRSET(70,.TRUE.,.FALSE.,.FALSE.,.TRUE.)
C
      IPUN=0
      LAST=0
      SIMPX=0.0D0
      TLAST=40000.D0
C
      DO 10 I=1,150
      DERIV(I)=0.D0
      DEPEND(I)=0.D0
      DER(I)=0.D0
   10 DEP(I)=0.D0
      TWOPI=2.D0*PI
      RADIAN=PI/180.D0
C
   20 NOLD=N
      CALL READTH
      CALL READER
      IAMT=1
      CALL READIN (INCOL1,&1000)
      WRITE(6,2002)VNO
      IF(LDPLY.NE.0) CALL DSAVE(ZL1,ZLA,NELMTS,NDAMPR)
      CALL JETDM0(LDPLY)
      JOUT=IOUT
      TZSPIN=0.0D0
      CALL NUM
      IF (IDATA.EQ.0) NOLD=NUMEQS
      IDGT=NUMEQS-NOLD
      IF (IDGT .EQ. 0)  GO TO 11
      CALL RELOC2(DEP)
   11 CONTINUE
      CALL PRECHO(DEP)
      IF(IDATA.EQ.0) CALL ECHO
      IHD=1
      ILINE=0
      ICNT=90
      IPASS=1
      CALL HEDING(6)
      IF(IORB .NE. 0) CALL PDTAPR
      IF(IPLOT.GE.1) REWIND IPLTPE
      ICNT=60
      TSAVE=T
      CALL ACNVRT(IDATE,T)
      N=NUMEQS
C     CALL ADCAL(T,TVER,1)
      DSAVET=DELTAT
      FSAVE=FREQ
      IF(SDPLY.EQ.0) GO TO 25
      IF(MDPLY.NE.0) GO TO 30
      IF (LDPLY .EQ. 0)  GO TO 25
      GO TO 30
 25   CALL ADCAL(T,TVER,1)
C  25 CALL STVRBL(1,DEP,NSUBX,TSAVE)
      CALL STVRBL(1,DEP,NSUBX,TSAVE)
C                       TEST FOR CONTROL SYSTEMS
      IF(KNTRL(1).NE.0) CALL CSIC(1,T)
C
      CALL SBINIT
C
      CALL GPINIT
C
      CALL GMINIT
C
      CALL SAINIT
C
      CALL GMDINT
C
      CALL WHINIT
C
      CALL AWINIT
C
      CALL THINIT
C
      CALL VDINIT
C
      IF(MDPLY.NE.0) SDPLY=1
   30 IF(IDATA.NE.0) CALL ECHO
      IHD=1
      ILINE=0
      ICNT=90
      CALL SETVAL(1)
      CALL PCINIT(FRQ)
      CALL DCINIT(FRQ)
      CALL SACINT(FRQ)
      CALL BOUNDS
      IAFLAG=0
      IHFLAG=0
      IF(IACOMP.NE.0) IAFLAG=1
      IF(IHCALC.NE.0) IHFLAG=1
C
      CALL PRJACC(T,LDPLY)
C                       TEST FOR VISCOUS DAMPING
      IF(IVISCS .NE. 0) CALL VDIC
      TSTART=T
      TIME=T
      TTSTP=TSTOP+T
      TESTY=TTSTP-FRQ/100
      TZSPIN=TSTART + DTZMA
C
C
C
      TMX1=0.D0
      TMX2=0.D0
      LSAVE=1
      JUMP=1
      JSPN=1
      JSPN1=1
C
      IF(ISPIN3.EQ.0) GO TO 70
      CALL ZSPIN(TTSTP,FRQ,DELTAT,LSAVE,TSTART,JSPN)
C
   70 CALL ADMDUM(N,DELTAT,DEP,DER,UPBND,DNBND,FACTOR,FRQ,TTSTP,LSAVE,
     .            T,DELMIT)
C
      IAMT=2
      IF(LSAVE.EQ.6) GO TO 90
      IF(ISDPLY.EQ.1) CALL SUNDEP(2,SD)
      CALL BRANGE
      CALL PIDCNT(IPFLG)
      CALL DIDCNT(IPFLG)
      CALL SAPIDC(IPFLG)
      IF(IPFLG.EQ.0) GO TO 70
      IF(ITWIST.NE.0) CALL TWSTOT(DEP)
      IF(IHFLAG.NE.0) CALL HCOMPT
      IF(IAFLAG.NE.0) CALL ACCOMP
C
      IF(IGRUND.EQ.1) GO TO 73
      IF(INOPT.EQ.2) GO TO 71
      CALL SOUT(SA,OMEG,T,IPLOT,IPLTPE,PHI)
      IF(IAFM(3) .EQ. 0)  CALL SPRINT
      GO TO 72
   71 IF(IORB.EQ.0) CALL ADCAL(T,TVER,2)
      CALL GOUT(SA,OMEG,T,IPLOT,IPLTPE,PHI,TESTY)
      IF(IAFM(3) .EQ. 0)  CALL GPRINT
      GO TO 72
 73   CONTINUE
                       CALL TOUT(SA,OMEG,T,IPLOT,IPLTPE)
      IF(IAFM(3).EQ.0) CALL GPRINT
C
   72 IF(KLUGE.NE.0) GO TO 120
      IF(NPULSE.EQ.0) GO TO 80
      IF(IATTDE.NE.1.OR.(TMX1.EQ.0.D0.AND.TMX2.EQ.0.D0)) GO TO 80
      IF(ACNTRL.EQ.1)
     .  CALL ATTUDE(TTSTP,T,FRQ,DELTAT,NPULSE,LSAVE,JUMP)
C
   80 IF(ISPIN3.EQ.0) GO TO 85
      LSPIN=ISPIN(T,TZSPIN,TTSTP,DELTAT,JSPN1)
      IF(LSPIN.EQ.1) CALL ZSPIN(TTSTP,FRQ,DELTAT,LSAVE,TSTART,JSPN)
   85 IF(T.GE.TESTY) GO TO 110
      CALL REMTIM (LTIM,IJUNK)
      IF (LTIM.GT.LCPU) GO TO 70
      LAST=1
      WRITE (6,10002)
      IF(IAFM(2).EQ.1) IPUN=1
      GO TO 110
C
   90 IF(ACNTRL.EQ.0) GO TO 100
      WRITE(6,10003) TIME
      GO TO 110
  100 WRITE(6,10004) TIME
 110  CONTINUE
      IF(IAFM(5).EQ.1) CALL OUTFSD
      IF (IPLOT.EQ.0) GO TO 120
      END FILE IPLTPE
      REWIND IPLTPE
      CALL PLOTF
 120  CONTINUE
      IF((MLAST.EQ.0).AND.(MDPLY.EQ.0).AND.(DDPLY.EQ.0)) GO TO 138
      IF((MLAST.EQ.0).AND.(MDPLY.EQ.1).OR.(DDPLY.EQ.1)) GO TO 130
      IF(LAST.EQ.1) GO TO 140
      IF(IPUNCH.NE.0) CALL ECHO1
      CALL STVRBL(2,DEP,NSUBX,TSAVE)
      IF(KNTRL(1).NE.0) CALL CSIC(2,T)
      T=TSAVE
      DELTAT=DSAVET
      LDPLY=0
      MLAST=0
      MDPLY=0
      SDPLY=0
      KPULSE =0
      ITIM=1
      ISW=0
      DO 150 I=1,150
      DERIV(I)=0.0D0
      DEPEND(I)=0.0D0
      DER(I)=0.0D0
  150 DEP(I)=0.0D0
      GO TO 20
  130 DO 135 I=1,IK
      ZLA(I)=0.0D0
  135 ZL0(I)=ZLK(I)
  138 TIME=DMOD(TIME,8.64D4)
      T=TIME
      DELTAT=DSAVET
      FREQ=FSAVE
      LDPLY=LDPLY + 1
      SDPLY=1
      IF(IWHEEL.EQ.1) CALL WHEELS(2,RWH)
  140 IF(IPUN.EQ.1) CALL ECHO1
      IF(LAST.EQ.1) RETURN
      GO TO 20
1000  STOP
C
2002  FORMAT('0VERSION ',A8)
C
10002 FORMAT('1      ',//,' RUN BEING TERMINATED AS ALLOTED CPU TIME HAS
     1 BEEN USED UP ')
C
10003 FORMAT('0',10X,'DELAT-TIME TOO SMALL DURING VISCOUS DAMPING'/10X,
     .               'AT ',1PE15.8,' SECONDS')
C
10004 FORMAT('0',10X,'DELTA-TIME TOO SMALL'/10X,
     .               'AT ',1PE15.8,' SECONDS')
C
      END
      SUBROUTINE MATMPY(A,B,C,N,M)
C
C                  'MATMPY' MULTIPLIES TWO SQUARE MATRICES; A*B = C
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      DIMENSION A(N,N),B(N,N),C(N,N)
C
      DO 10 I=1,N
      DO 10 J=1,N
      C(I,J)=0.D0
      DO 10 K=1,N
   10 C(I,J)=C(I,J) + A(I,K)*B(K,J)
      RETURN
      END
      SUBROUTINE MATV(ITEST,CM,VI,VO)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      DIMENSION CM(3,3),VI(3),VO(3)
C
      IF(ITEST.NE.1) GO TO 10
C
      DO 5 I=1,3
      VO(I)=0.0D0
      DO 5 J=1,3
      VO(I)=VO(I)+CM(I,J)*VI(J)
    5 CONTINUE
C
      RETURN
C
   10 CONTINUE
C
      DO 15 I=1,3
      VO(I)=0.0D0
      DO 15 J=1,3
      VO(I)=VO(I)+CM(J,I)*VI(J)
   15 CONTINUE
C
      RETURN
C
      END
      SUBROUTINE MPYMAT(A1,A2,A3,NMAT,ITP,ANS1,ANS2)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
C***  SUBROUTINE TO DO MATRIX MULTIPLICATIONS
C***  NMAT=1  ONLY 2 MATRICES INVOLVED (A1 AND A2)
C***          ANSWER IS PUT IN ANS1
C          ***ITP=1  A1*A2
C          ***ITP=2  A1 * A2(TRANSPOSE)
C          ***ITP=3  A1(TRANSPOSE) * A2(TRANSPOSE)
C***  NMAT=2  MULTIPLICATION OF 3 MATRICES (A1,A2,A3)
C***          ANSWER IS PUT IN ANS2
C          ***ITP=1  A1 * A2 * A3
C          ***ITP=2  A1 * A2 * A3(TRANSPOSE)
      DIMENSION A1(3,3),A2(3,3),A3(3,3),ANS1(3,3),ANS2(3,3)
       GO TO (50,51),NMAT
   50 GO TO (51,10,13),ITP
   51  DO 1 I=1,3
       DO 1 J=1,3
        SUM = 0.0D0
       DO 2 L=1,3
    2  SUM = SUM + A1(I,L) * A2(L,J)
    1   ANS1(I,J) = SUM
  300  GO TO (100,200),NMAT
  200  GO TO (3,4),ITP
    3   DO 5 I=1,3
        DO 5 J=1,3
        SUM = 0.0D0
        DO 6 L=1,3
    6   SUM = SUM + ANS1(I,L) * A3(L,J)
    5   ANS2(I,J) = SUM
  100 RETURN
    4  DO 7 I=1,3
       DO 7 J=1,3
        SUM = 0.0D0
       DO 8 L=1,3
    8   SUM = SUM + ANS1(I,L) * A3(J,L)
    7  ANS2(I,J) = SUM
        GO TO 100
   10  DO 11 I=1,3
       DO 11 J=1,3
        SUM = 0.0D0
       DO 12 L=1,3
   12  SUM = SUM + A1(I,L) * A2(J,L)
   11  ANS1(I,J) = SUM
       GO TO 100
   13  DO 14 I=1,3
       DO 14 J=1,3
         SUM = 0.0D0
       DO 15 L=1,3
   15  SUM = SUM + A1(L,I) * A2(J,L)
   14  ANS1(I,J) = SUM
       GO TO 100
      END
      SUBROUTINE MULTM(A,B,C,N,M,L)
      IMPLICIT REAL * 8 (A-H,O-Z)
C
C
      DIMENSION A(N,L),B(L,M),C(N,M),D(M,N),E(N,M),F(N),G(N),H(N)
C
C
      DO 10 I=1,N
      DO 10 J=1,M
      C(I,J)=0
      DO 10 K=1,L
   10 C(I,J)=C(I,J) + A(I,K)*B(K,J)
C
      RETURN
C
      ENTRY MATRAN(D,E,M,N)
C
      DO 20 I=1,N
      DO 20 J=1,M
   20 E(I,J)=D(J,I)
C
      RETURN
C
      ENTRY MSUM(F,G,H,N)
C
      DO 30 I=1,N
   30 H(I)=F(I) + G(I)
C
      RETURN
      END
      SUBROUTINE NERGY(K,ITIME,ZBZ)
C
C     'NERGY' TRANSFORMS THE INERTIA OF AN ANTENNA ELEMENT FROM THE
C     ELEMENT FRAME TO THE BODY FRAME.
C
      IMPLICIT REAL * 8 (A-H,O-Z)
C
      COMMON/CCNVRT/ BDYMI(3,3),DPRMI(3,3),EMODLS(10),RTUBE(10),
     .               HTUBE(10),THERMC(10),TIPMS(10),C(10)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/KNERGY/ S(3,3),OMBC(3),BT(3,3)
C
      COMMON/LIBDPR/ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,
     .              ZMDO,ZMDBO,CNV,DECAY
C
      COMMON/RNRGY1/ ZF(3),ZT(3),YOZ(3),YT(3),FC(3,3),YF(3),YFYF(3,3),
     .               YY(3,3)
C
      COMMON/RNRGY2/ ZZDB(3,3),YYDB(3,3)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/RPOOL5/ CKMAT(3,3,10),FM2(3,3)
C
      COMMON/RXCAL / XI(3),XID(3),XX(3,3),XXD(3,3),XDXD(3,3)
C
C
C
C
      DIMENSION FMT(3,3),DUM(3,3),FCT(3,3),YTYO(3,3),YOYF(3,3),YM(3),
     .          FM(3,3),ZBZ(3)
C
C
      IF(ITIME.EQ.1) GO TO 10
C
      ZZDB(1,1)=(DPRMI(2,2) + DPRMI(3,3) - DPRMI(1,1))/2
      ZZDB(2,2)=(DPRMI(3,3) + DPRMI(1,1) - DPRMI(2,2))/2
      ZZDB(3,3)=(DPRMI(1,1) + DPRMI(2,2) - DPRMI(3,3))/2
C
      ZZDB(1,2)=DPRMI(1,2)
      ZZDB(1,3)=DPRMI(1,3)
      ZZDB(2,3)=DPRMI(2,3)
C
      ZZDB(2,1)=ZZDB(1,2)
      ZZDB(3,1)=ZZDB(1,3)
      ZZDB(3,2)=ZZDB(2,3)
C
   10 CONTINUE
      IF(ITIME.EQ.1.AND.IDAMP.EQ.0) GO TO 15
C
      CALL MATRAN(FM1,FMT,3,3)
C
C                       COMPUTE YYDB = FM1 * ZZDB * FMT
C
      CALL MULTM(FM1,ZZDB,DUM,3,3,3)
      CALL MULTM(DUM,FMT,YYDB,3,3,3)
C
C                       ZF = CKMAT * XI
   15 CALL MULTM(CMAT,XI,ZF,3,1,3)
C
C                       ZT = ZBZK + ZF
C
      CALL MSUM(ZBZ,ZF,ZT,3)
C
C                  CHECK FOR DAMPER OR ANTENNA CALCULATION
C
      IF((K-K1).GT.0) GO TO 30
C                                 DAMPER
      DO 20 I=1,3
      YM(I)=YIZM(I,1)
      DO 20 J=1,3
   20 FM(I,J)=FM1(I,J)
C
      GO TO 50
C                                 ANTENNA
   30 DO 40 I=1,3
      YM(I)=YIZM(I,2)
      DO 40 J=1,3
   40 FM(I,J)=FM2(I,J)
C
C                       CALCULATE YT= FM * ZT
C                                 YOZ = FM * ZBZK
C
   50 CALL MULTM(FM,ZT,YT,3,1,3)
      CALL MULTM(FM,ZBZ,YOZ,3,1,3)
C
      CALL MSUM(YT,YM,YT,3)
      CALL MSUM(YOZ,YM,YOZ,3)
C
C                       FC = FM * CKMAT
C
      CALL MULTM(FM,CMAT,FC,3,3,3)
C
C                       YF = FC * XI
C
      CALL MULTM(FC,XI,YF,3,1,3)
C
C                       TRANSPOSE FC
C
      CALL MATRAN(FC,FCT,3,3)
C
C                      YOYF = YOZ * YF
C                      YYTYO = YT * YOZ
C
      CALL MULTM(YOZ,YF,YOYF,3,3,1)
      CALL MULTM(YT,YOZ,YTYO,3,3,1)
C
C                       YFYF = FC * XX *FCT
C
      CALL MULTM(FC,XX,DUM,3,3,3)
      CALL MULTM(DUM,FCT,YFYF,3,3,3)
C
C                       YYK
C
      DO 60 I=1,3
      DO 60 J=1,3
   60 YY(I,J)=YTYO(I,J) + YOYF(I,J) + YFYF(I,J)
C
C
      RETURN
      END
      SUBROUTINE NUM
C      COMPUTES TOTAL NUMBER OF DIFFERENTIAL EQUATIONS
C
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*4 ACNTRL
C
C
      COMMON/ACFILT/ACPARM(20),IACFLT(20)
C
      COMMON/ANTENA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3),ZBZ(3,10),
     .               NELMTS,NDAMPR,MODES(10)
C
      COMMON /ICNTRL/KNTRL(10)
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IPOOL1/IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10)
     1             ,LK(10),LLK(10)
C
      COMMON/INEWR /NKT(10),ICP,ICPS
C
      COMMON/ISECBD/I2BDY,NDOF2,IRAST,NDEP2,IARST(3),IRSCY(3)
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
C      COMPUTE POINTERS USED TO DECODE THE STATE VECTOR
      K1=NDAMPR
      IK=NELMTS+NDAMPR
C
      DO 10 K=1,IK
      N=K-K1
      L=NELMTS+K
      IF(N.GT.0) L=N
10    NK(K)=MODES(L)
C
      ISB=0
      IST=0
C
      DO 20 K=1,IK
      ISB=ISB+NK(K)
20    IST=IST+NKT(K)
C
C     COMPUTE NUMBER OF STATE VARIABLES
      NUMEQS=9
      IF(IDAMP.NE.0) NUMEQS=11
      NUMEQS=NUMEQS+4*ISB
      ICP=NUMEQS+1
      NUMEQS=NUMEQS+2*IST
C     ADD CONTROL EQUATIONS
      IF(KNTRL(1) .NE. 0) CALL NUMCSE
C
      IF(I2BDY.EQ.0) GO TO 25
      IF(NDOF2.EQ.0) GO TO 25
      NDEP2=NUMEQS+1
      NUMEQS=NUMEQS+2*NDOF2
   25 CONTINUE
C
      IF(IACFLT(1).EQ.0) GO TO 30
      IACFLT(6)=NUMEQS+1
      NUMEQS=NUMEQS+2
   30 CONTINUE
C
      CALL NUMGPE(NUMEQS)
      CALL NUMPCS(NUMEQS)
C
C     VISCOUS DAMPER MUST BE LAST
      IF(IVISCS .NE. 0) NUMEQS=NUMEQS+4
      RETURN
      END
      SUBROUTINE NUMCSE
C     COMPUTES NUMBER OF CONTROL SYSTEM EQUATIONS & MAP OF CONTROL VARIA
C
      COMMON /ICNTRL/KNTRL(10)
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON /JCNTRL/NCNTRL,MCNTRL,MAPCNT(20)
C     MARK START OF CONTROL EQUATIONS
C
      MCNTRL=NUMEQS
C     START WITH
C     2ND ORDER SENSOR SENSOR MODEL
      MAPCNT(1)=1
      MAPCNT(2)=2
      NCNTRL=2
      IF(KNTRL(1) .LT. 2) GO TO  200
C      UPGRADE TO 4TH ORDER MODEL
      MAPCNT(3)=3
      MAPCNT(4)=4
      NCNTRL=4
C
C      ADD EQUATIONS FOR WHEEL SPEED, PITCH COMPENSATION AMPLIFIER
200   NCNTRL=NCNTRL+1
      MAPCNT(NCNTRL)=15
      NCNTRL=NCNTRL+1
      MAPCNT(NCNTRL)=11
C
C     CHECK FOR NUTATION DAMPER
      IF(KNTRL(2) .EQ. 0) GO TO 300
C     NUTATION DAMPER PHASE SHIFT CIRCUIT
      NCNTRL=NCNTRL+1
      MAPCNT(NCNTRL)=19
      NCNTRL=NCNTRL+1
      MAPCNT(NCNTRL)=20
C
C     NOW FOR THE ROLL SENSOR
      NCNTRL=NCNTRL+1
      MAPCNT(NCNTRL)=6
      NCNTRL=NCNTRL+1
      MAPCNT(NCNTRL)=7
C      USE SAME ORDER AS IN PITCH
      IF(KNTRL(1) .LT. 2) GO TO 300
      NCNTRL=NCNTRL+1
      MAPCNT(NCNTRL)=8
      NCNTRL=NCNTRL+1
      MAPCNT(NCNTRL)=9
C
C     CHECK FOR TACHOMETER DYNAMICS
300   IF(KNTRL(3) .EQ. 0) GO TO 400
      NCNTRL=NCNTRL+1
      MAPCNT(NCNTRL)=13
400   NUMEQS=NUMEQS+NCNTRL
      RETURN
      END
      SUBROUTINE NUMGPE(NUMEQS)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/IGIMBL/ IGMBL,NAZIM,NELEV,NA1,NE1
C
      COMMON/IGIMBD/ IGMBLD,NDLEV,ND1
C
      COMMON/IRSTGM/ IGMRST,IARST(3),IRSCY(3)
C
      COMMON/ISAGIM/ ISAGM,NSAGM,NSA1
C
      IF(IGMBL.EQ.0) GO TO 10
C
      IF(IGMRST.NE.0) GO TO 10
C
      NAZIM=NUMEQS+1
      NELEV=NAZIM+2
      NUMEQS=NUMEQS+4
C
   10 CONTINUE
C
      IF(IGMBLD.EQ.0) GO TO 20
C
      NDLEV=NUMEQS+1
      NUMEQS=NUMEQS+2
C
   20 CONTINUE
C
      IF(ISAGM.EQ.0) GO TO 30
C
      NSAGM=NUMEQS+1
      NUMEQS=NUMEQS+2
C
   30 CONTINUE
C
      CALL NUMDCS(NUMEQS)
C
      CALL NUMSAP(NUMEQS)
C
      CALL NUMTHR(NUMEQS)
C
      CALL NUMVDE(NUMEQS)
C
      CALL NUMWHS(NUMEQS)
C
      CALL NUMAMW(NUMEQS)
C
      RETURN
C
      END
      FUNCTION OFFSTA(K,K1,I)
C
C     'OFFSTA' IS A FUNCTION WHICH DEFINES THE ZERO STRAIN CONDITION
C     IN THE 'A' DIRECTION FOR AN ANTENNA DISPLACEMENT.
C     'OFFSTB' IS A FUNCTION WHICH DEFINES THE ZERO STRAIN CONDITION IN
C     THE 'B' DIRECTION FOR AN ANTENNA DISPLACEMENT.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      OFFSTA=0.0D0
      RETURN
C
      ENTRY OFFSTB(K,K1,J)
      OFFSTB=0.0D0
      RETURN
      END
      SUBROUTINE ORBUPD(TOP,DELV,TV)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CNBODY/DUM4(5),ZMU,DUM5(3)
C
      COMMON/INUMP/ ISPNP
      COMMON/ITCNTL/IPULSE,ISPLSE,KPULSE,ITSW,IOTSW
C
      COMMON/ORBNEW/ROD(3),VOD(3),TST
C
      COMMON/RPOOL1/DUM1(11),SA(3,3),DUM2(105)
C
C
      DIMENSION TV(3)
C
      DIMENSION VB(3),X(3),XD(3)
C
      DATA NUM/1/
      DATA RD2DG/57.295779513D0/
C
      DO 1 I=1,3
      VB(I)=DELV*TV(I)
    1 CONTINUE
      CALL XFIND(ROD,VOD,ZMU,TST,TOP,X,XD)
      DO 2 I=1,3
      ROD(I)=X(I)
      VOD(I)=XD(I)+SA(I,1)*VB(1)+SA(I,2)*VB(2)+SA(I,3)*VB(3)
    2 CONTINUE
      TST=TOP
C   RECONSTRUCT CLASSICAL ORBITAL ELEMENTS AFTER THRUSTING
C
C   MAGNITUDE OF R VECTOR
      R1=ROD(1)
      R2=ROD(2)
      R3=ROD(3)
      R=DSQRT(R1*R1+R2*R2+R3*R3)
C
C   MAGNITUDE OF V VECTOR
      V1=VOD(1)
      V2=VOD(2)
      V3=VOD(3)
      V=DSQRT(V1*V1+V2*V2+V3*V3)
C
C   NEW ANGULAR MOMENTUN VECTOR OF THE ORBIT
      H1=R2*V3-V2*R3
      H2=R3*V1-V3*R1
      H3=R1*V2-V1*R2
      H=DSQRT(H1*H1+H2*H2+H3*H3)
C
C   COMPUTE THE SEMI-MAJOR AXIS
      AS=ZMU*R/(2.0D0*ZMU-R*V**2)
C
C    COMPUTE THE ECCENTICITY
      E=1.0D0-H*H/(ZMU*AS)
      IF(E.LT.0.0D0) E=0.0D0
      E=DSQRT(E)
C
C   COMPUTE THE INCLINATION ANGLE
      IF(H3.EQ.0.0) EI=1.5707963267949D0
      H12=DSQRT(H1*H1+H2*H2)
      EI=DATAN2(H12,H3)
C
C   COMPUTE THE LONGITUDE OF ASCENDING NODE
      DEI=DABS(EI)
      BW=DATAN2(H1,-H2)
      IF(DEI.LT.1.0D-9) BW=0.0D0
C
C   COMPUTE THE TRUE ANOMALY
      FNUM=H*(R1*V1+R2*V2+R3*V3)
      FDNUM=H*H-ZMU*R
      F=DATAN2(FNUM,FDNUM)
C
C   COMPUTE THE ARGUMENT OF LATITUDE
      IF(DEI.LT.1.0D-9) GO TO 3
      DTHE=DSIN(EI)*(R1*DCOS(BW)+R2*DSIN(BW))
      THE=DATAN2(R3,DTHE)
      GO TO 4
 3    CONTINUE
      THE=DATAN2(R2,R1)
 4    CONTINUE
C
C   COMPUTE THE ARGUMENT OF PERIGEE
      W=THE-F
C
C    COMPUTE THE ECCENTRIC ANOMALY
      ENUM=DSQRT(1.0D0-E*E)*DSIN(F)
      EDNUM=E+DCOS(F)
      ECC=DATAN2(ENUM,EDNUM)
C
C   COMPUTE THE MEAN ANOMALY
      EM=ECC-E*DSIN(ECC)
C
C   CONVERT THE ANGULAR VALUES FROM RADIUS TO DEGREES BEFORE PRINT
      EI=EI*RD2DG
      BW=BW*RD2DG
      F=F*RD2DG
      W=W*RD2DG
      ECC=ECC*RD2DG
      EM=EM*RD2DG
C
C   CONVERT THE TIME IN SECONDS INTO HHMMSS
      CALL TCNVRT(YMD,TEMP,SEC,TLAST,TOP,2)
      HMS=HMSOUT(DMOD(SEC,86400.0D0))
      NPULSE=KPULSE+1
      WRITE(6,15) NPULSE
 15   FORMAT('    NO. OF PULSE =',I3)
      WRITE(6,20) HMS
 20   FORMAT('    TIME OF IMPULSIVE THRUSTING(HHMMSS)=',F20.6)
C    PRINT ONLY EVERY 10 PULSES FOR ORBIT INFORMATION
      NPS=NPULSE/ISPNP
      IF(NPULSE.EQ.IPULSE) GO TO 350
      IF(NPS.NE.NUM) GO TO 400
      NUM=NUM+1
 350  CONTINUE
C   PRINT MESSAGE FOR INTERRUPTION DUE TO THRUSTING
C
      WRITE(6,10)
 10   FORMAT('**** KEPLERIAN PARAMETERS AFTER THRUSTING')
      WRITE(6,25) DELV
 25   FORMAT('    CHANGE IN MAG. OF VELOCITY(KM/SEC)=',F20.10)
      WRITE(6,30) AS
 30   FORMAT('    SEMI-MAJOR AXIS(KM)=',F20.8)
      WRITE(6,40) E
 40   FORMAT('    ECCENTRICITY=',F20.10)
      WRITE(6,50) EI
 50   FORMAT('    INCLINATION ANGLE(DEG)=',F20.10)
      WRITE(6,60) BW
 60   FORMAT('    LONGITUDE OF ASCENDING NODE(DEG)=',F20.10)
      WRITE(6,70) W
 70   FORMAT('    ARGUMENT OF PERIGEE(DEG)=',F20.10)
      WRITE(6,80) F,ECC,EM
 80   FORMAT('    TRUE,ECCENTRIC,MEAN ANOMALIES(DEG)=',3(F20.10,2X))
      WRITE(6,100) R1,R2,R3
 100  FORMAT('    POSITION VECTOR=',3(F20.10,2X))
      WRITE(6,200) V1,V2,V3
 200  FORMAT('    VELOCITY VECTOR=',3(F20.10,2X))
      WRITE(6,300) H1,H2,H3,H
 300  FORMAT('    ANGULAR MOMENTUM VECTORS=',3F20.10,'MAG=',F20.10)
 400  CONTINUE
      TST=TOP
      RETURN
      END
      SUBROUTINE OUT1(WORD,IN1,IN2,ARRAY)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION ARRAY(1)
      IW=6
      WRITE(IW,10)WORD,IN1,(ARRAY(L),L=IN1,IN2)
   10 FORMAT(1X,A8,I3,')',3D16.8,19X/(4D16.8))
      RETURN
      END
      SUBROUTINE OUT2(WORD,IN1,IN2,JN1,JN2,RATRIX)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION RATRIX(3,3)
      IW=6
      WRITE(IW,10)WORD,IN1,JN1,((RATRIX(L,LL),L=IN1,IN2),LL=JN1,JN2)
   10 FORMAT(1X,A8,I3,',',I3,')',3D16.8,19X/(17X,3D16.8,16X))
      RETURN
      END
      SUBROUTINE OUTFSD
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 NAME
      COMMON/ANTENA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3),ZBZ(3,10),
     .               NELMTS,NDAMPR,MODES(10)
      COMMON/IAFSD/DELMAX,DELMIN,KCUT(150),NCUT,NUP
      COMMON/IBFSD/HEAD(150,4),NAME(150)
      COMMON /ICNTRL/KNTRL(10)
      COMMON /JCNTRL/NCNTRL,MCNTRL,MAPCNT(20)
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
      COMMON /RMAIN1/DUMMY(5),UPS(150),DNS(150)
      COMMON /VARBLS/DEPNDS(150),DERIVS(150)
      NEQ=NUMEQS
      NELE=NELMTS
      NDMPER=NDAMPR
      DO 150 I=1,NEQ
 150  NCUT=NCUT+KCUT(I)
      IF(DELMIN.GT.1.0D7) DELMIN=0.0D0
      IF(DELMAX.EQ.0.0) DELMAX=1.0D9
      WRITE(6,9998)
 9998 FORMAT(1H1,' *******************************          FSD  ADAMS-M
     *OULTIN  INTEGRATOR  MESSAGE  TABLE            ********************
     1******')
      WRITE(6,10000)NEQ,NELE,NDMPER
      WRITE(6,10004) NCUT,NUP,DELMAX,DELMIN
      WRITE(6,10001)
      LINES=8
      WRITE(6,10003)
C
      DO 170 I=1,NEQ
      WRITE(6,10002) (HEAD(I,N),N=1,4),NAME(I),KCUT(I)
     &               ,UPS(I),DNS(I),DEPNDS(I),DERIVS(I)
      LINES=LINES + 1
      IF(LINES.LT.40) GO TO 160
      LINES=2
  160 IF(MOD(LINES,5).EQ.0) WRITE(6,10003)
  170 CONTINUE
C
10000 FORMAT('1',46X,'NUMBER OF EQUATIONS FOR THIS CASE IS ',I3/'0',46X,
     .               'NUMBER OF ANTENNA ELEMENTS',I3/'0',46X,
     .               'NUMBER OF DAMPER ELEMENTS',I3)
C
10001 FORMAT('0',57X,'INTEGRATION BOUNDS'/' ',53X,'KCUT',6X,
     &              'UPPER',12X,'LOWER',8X,'DEPEND',8X,'DERIVE',/)
C
10002 FORMAT(' ',2X,4A8,2X,A8,5X,I5,4(1PE16.6)          )
C
10003 FORMAT(1H0)
C
10004 FORMAT('0',46X,'NUMBER OF DELTA T  CUT   WITHIN THE PHASE',I3,/,
     &       ' ',46X,'NUMBER OF DELTA T RAISED WITHIN THE PHASE',I3,/,
     &       ' ',46X,'MAXIMUM   DELTA T VALUE  WITHIN THE PHASE',1PE13.6
     &,/,
     &       ' ',46X,'MINIMUM   DELTA T VALUE  WITHIN THE PHASE',1PE13.6
     &,/)
C
C
      RETURN
      END
      SUBROUTINE PDTAPR
C      PRELIMINARY CALL TO DTAPRE FROM MAIN
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8 J2,J3,J4,J22
C
      COMMON/CNBODY/ J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/TJAN1/ T
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
      DATA CONV/7.905355D0/
      DDATE=IDATE
      SEC=T
      CALL DTAPRE(ITAPE,IERR,DDATE,SEC,RX,RY,RZ,VX,VY,VZ)
      IF(IERR.LT.3)  GO TO 2000
      IF(IERR.LT.6)  GO TO 3000
      XSAT(1)=RX*AEARTH
      XSAT(2)=RY*AEARTH
      XSAT(3)=RZ*AEARTH
      XSATDT(1)=VX*CONV
      XSATDT(2)=VY*CONV
      XSATDT(3)=VZ*CONV
      RETURN
 2000 WRITE(6,2001)
 2001 FORMAT(' I/O ERROR ON EPHERMIS FILE IN MAIN')
      GO TO 2002
 3000 WRITE(6,3001)
 3001 FORMAT(' INFORMATION NOT AVAILABLE FOR REQUESTED TIME IN FINDGB')
C
2002  STOP
      END
      SUBROUTINE PINTRP(XNOW,XDNOW,T)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C                  'PINTRP' INTERPOLATES ORBITAL DATA FROM THE
C                  EPHEMERIS TAPE WHICH IS AT MINUTE INTERVALS
C
      COMMON/SATPOS/ TLAST,TFRST,XLAST(3),XFRST(3),XDLAST(3),XDFRST(3),
     .               SDLAST(3),SDFRST(3),ADLAST(3),ADFRST(3),XDT
C
      DIMENSION XNOW(3),XDNOW(3)
C
      DT = TLAST-TFRST
      DTC = T-TFRST
      DO 7 I = 1,3
      IF( DABS     (XFRST(I) - XLAST(I)) -1.0E-10) 5,5,6
    5 XNOW(I) = XFRST(I)
      GO TO 7
    6 SLOPE = (XLAST(I) - XFRST(I))/DT
      XNOW(I) = SLOPE*DTC+XFRST(I)
    7 CONTINUE
      DO 8 I = 1,3
      IF( DABS     (XDFRST(I) - XDLAST(I))-1.0E-10) 9,9,10
    9 XDNOW(I) = XDFRST(I)
      GO TO 8
   10 SLOPE = (XDLAST(I) - XDFRST(I))/DT
      XDNOW(I) = SLOPE*DTC + XDFRST(I)
    8 CONTINUE
      RETURN
      END
      SUBROUTINE PLATCS
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ADSTAT/ DER(150),DEP(150)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSTVAL/ TSTART
C
      COMMON/CPLTCS/ PCSPRM(100),IPLTCS(20)
C
      COMMON/DATOUT/ IDATA,MLAST
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/GMBOUT/ AZ,AZD,EL,ELD,B(3,3),B0(3,3),B0B(3,3),C(3,3)
     1              ,B0BC(3,3),ZEL(3),YEL(3),YAZ(3),ZAZM(3),ZELM(3)
C
      COMMON/HGIMBL/ HGMB(3)
C
      COMMON/IGIMBL/ IGMBL,NAZIM,NELEV,NA1,NE1
C
      COMMON/IMAIN1/ IDATE,LSAVE,IDUM1(6)
C
      COMMON/INEWR / NKT(10),ICP,ICPS
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS
     1              ,NK(10),LK(10),LLK(10)
C
      COMMON/MOMENT/ IDUM01(3),IMGNTS,IDUM02(2)
C
      COMMON/OUTTHR/ SMAGB(3),XMB(3),RWHEEL(3)
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,UPB(150),DNB(150)
C
      COMMON/RMGNTC/ SMAGI(3),DPMAG(3),SFMAG,MAGFLD
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),DUM01(96)
C
      COMMON/RPOOL5/ CKMAT(3,3,10),FM2(3,3)
C
      COMMON/SNSWRK/ NSELB,NSELT,IASEL,IBSEL,ICSEL,LOC
C
      COMMON/TMSINR/ TIPTNR(3,10),RSQ(3,10),XIPL(6),BETL(3)
C
      COMMON/TWIOUT/ CWO(10,3),CWOD(10,3)
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
      COMMON/XIN4  / UP(150),DN(150),BNDS(22)
C
C
      DIMENSION HEDPC(5)
      DIMENSION HDPID(5),HDMOT(5)
      DIMENSION SMAGM(3),SNSWM(3)
      DIMENSION FILMAG(3),REFV(3)
      DIMENSION ANOISE(3),PNOISE(3),FNOISE(3)
      DIMENSION FREQNS(3),PHASNS(3)
      DIMENSION SNSV(3),SNSVM1(3)
      REAL*4 BUFF(450)
C
      DATA I8/',A8,'/
      DATA HEDPC/'TWO AXIS',' DESPIN ','PLATFORM',' CONTROL',' SYSTEM '/
      DATA HDPID/'P I D CO','NTROLLER',' PARAMET','ERS     ','        '/
      DATA HDMOT/'GIMBLE D','RIVE MOT','OR PARAM','ETERS   ','        '/
C
      EQUIVALENCE (IPLTCS(1),IPCONT),(IPLTCS(2),ISKEL)
      EQUIVALENCE (IPLTCS(3),IGSNSE),(IPLTCS(4),NMAGAV)
      EQUIVALENCE (UPMSN,PCSPRM(30)),(DNMSN,PCSPRM(31))
      EQUIVALENCE (SNSWM(1),PCSPRM(32))
      EQUIVALENCE (PCSPRM(35),TMAGSR),(PCSPRM(36),TCOMPD)
C
      EQUIVALENCE (PCSPRM(10),TSAMP)
      EQUIVALENCE (PCSPRM(11),AZQNT),(PCSPRM(21),ELQNT)
      EQUIVALENCE (PCSPRM(12),AZXIUP),(PCSPRM(22),ELXIUP)
      EQUIVALENCE (PCSPRM(13),AZXIDN),(PCSPRM(23),ELXIDN)
      EQUIVALENCE (PCSPRM(14),AZKP),(PCSPRM(24),ELKP)
      EQUIVALENCE (PCSPRM(15),AZKI),(PCSPRM(25),ELKI)
      EQUIVALENCE (PCSPRM(16),AZKD),(PCSPRM(26),ELKD)
      EQUIVALENCE (PCSPRM(41),AZKA),(PCSPRM(51),ELKA)
      EQUIVALENCE (PCSPRM(42),AZKT),(PCSPRM(52),ELKT)
      EQUIVALENCE (PCSPRM(43),AZKB),(PCSPRM(53),ELKB)
      EQUIVALENCE (PCSPRM(44),AZMTUP),(PCSPRM(54),ELMTUP)
      EQUIVALENCE (PCSPRM(45),AZMTDN),(PCSPRM(55),ELMTDN)
      EQUIVALENCE (PCSPRM(46),AZTCUL),(PCSPRM(56),ELTCUL)
      EQUIVALENCE (PCSPRM(47),AZDMIN),(PCSPRM(57),ELDMIN)
      EQUIVALENCE (PCSPRM(48),AZVBAS),(PCSPRM(58),ELVBAS)
      EQUIVALENCE (PCSPRM(80),ANOISE(1)),(PCSPRM(83),PNOISE(1))
      EQUIVALENCE (PCSPRM(86),FNOISE(1))
      EQUIVALENCE (PCSPRM(90),FREQNS(1)),(PCSPRM(93),PHASNS(1))
C
C     CALLED FROM GMBLRD
C
      CALL SETUP(8HPCSPRM  ,8,PCSPRM,100)
      CALL SETUP(8HIPLTCS  ,4,IPLTCS,20)
C
      RETURN
C
C   ****************************************************************
      ENTRY NUMPCS(NUMEQS)
C   ****************************************************************
C
C     CALLED FROM NUM
C
      IF(IPCONT.EQ.0) RETURN
      IF(IGSNSE.EQ.0) RETURN
      NPLCS=NUMEQS+1
      NUMEQS=NUMEQS+3
C
      RETURN
C
C   ****************************************************************
      ENTRY ECHOPC
C   ****************************************************************
C
C     CALLED FROM ECHOA
C
      IF(IPCONT.EQ.0) RETURN
C
      CALL HVAL(HEDPC)
C
      CALL FVAL('TSAMP   ',5,TSAMP,0,0,0)
C
      CALL HVAL(HDPID)
C
      CALL FVAL('AZIM    ',4,PCSPRM(11),6,0,1)
      CALL FVAL('ELEV    ',4,PCSPRM(21),6,0,1)
C
      CALL HVAL(HDMOT)
C
      CALL FVAL('AZIM    ',4,PCSPRM(41),8,0,1)
      CALL FVAL('ELEV    ',4,PCSPRM(51),8,0,1)
C
      RETURN
C
C   ****************************************************************
      ENTRY PCINIT(FRQ)
C   ****************************************************************
C
C     CALLED FROM MAIN FOR INITIAL CONDITIONS AND INTEGRATION BOUNDS
C     CALLED AFTER CALL TO SETVAL(1)
C
      NPRFRQ=1
      ICNFRQ=0
      FRQ=FREQ
      DO 1 I=1,3
      HGMB(I)=0.0D0
      FREQNS(I)=FNOISE(I)*TWOPI
      PHASNS(I)=PNOISE(I)*RADIAN
    1 CONTINUE
C
      IF(IPCONT.EQ.0) RETURN
C
      IF(NMAGAV.EQ.0) NMAGAV=1
      TSNDLY=TCOMPD+(NMAGAV-1)*TMAGSR/2.0D0
      RATIOM=TSNDLY/TSAMP
C
      NSELB=0
      NSELT=0
      IF(ISKEL.EQ.0) GO TO 22
      IASEL=IAB
      IBSEL=IBB
      ICSEL=ICP
      NSELB=NK(ISKEL)
      IF(NSELB.EQ.0) GO TO 10
      IF(ISKEL.EQ.1) GO TO 10
      IBK=ISKEL-1
      DO 5 I=1,IBK
      NK2=2*NK(I)
      IASEL=IASEL+NK2
      IBSEL=IBSEL+NK2
    5 CONTINUE
   10 CONTINUE
      NSELT=NKT(I)
      IF(ISKEL.EQ.1) GO TO 20
      DO 15 I=1,IBK
      ICSEL=ICSEL+2*NKT(I)
   15 CONTINUE
   20 CONTINUE
      ILK=LK(ISKEL)
      LOC=3*(ILK-1)
   22 CONTINUE
C
      IF(IGSNSE.EQ.0) GO TO 25
C
      IDEP=NPLCS-1
      DO 23 I=1,3
      I1=IDEP+I
      UP(I1)=UPMSN
      DN(I1)=DNMSN
   23 CONTINUE
C
   25 CONTINUE
C
      NPRFRQ=FREQ/TSAMP
      IF(NPRFRQ.LT.1) NPRFRQ=1
      FRQ=TSAMP
C
      RETURN
C
C   ****************************************************************
      ENTRY PCSNSR
C   ****************************************************************
C
C     CALLED FROM DEREQ TO LOAD DERIVATIVES FOR SENSOR
C
      IF(IPCONT.EQ.0) RETURN
      IF(IMGNTS.EQ.0) CALL HAG
      CALL MATV(2,SA,SMAGI,SMAGB)
      CALL SNSMAG(ISKEL,DEPEND,SMAGB,SMAGM)
C
      DT=TIME-TSTART
      DO 27 I=1,3
      ARG=FREQNS(I)*DT+PHASNS(I)
      DIRT=ANOISE(I)*DSIN(ARG)
      SMAGM(I)=SMAGM(I)+DIRT
   27 CONTINUE
C
      IF(LSAVE.NE.1) GO TO 29
      IF(IDATA.NE.0) GO TO 29
C
C     CALCULATIONS DONE ONLY AT THE START OF A SIMULATION
C
      CALL MATV(2,B0,SMAGM,REFV)
      DEN=REFV(1)*REFV(1)+REFV(2)*REFV(2)
      VMMAG=DEN+REFV(3)*REFV(3)
      DEN=DSQRT(DEN)
      VMMAG=DSQRT(VMMAG)
      SNSAZ=DATAN2(REFV(2),REFV(1))
      SNSEL=DATAN2(REFV(3),DEN)
C
      DO 26 I=1,3
      SNSVM1(I)=SMAGM(I)
   26 CONTINUE
C
      AZM=DMOD(AZ,TWOPI)
      IF(AZM.GT.PI) AZM=AZM-TWOPI
      ELM=EL
      AZMQ=AZM-DMOD(AZM,AZQNT)
      ELMQ=ELM-DMOD(ELM,ELQNT)
      SSAZ=DSIN(SNSAZ)
      CSAZ=DCOS(SNSAZ)
      SQAZ=DSIN(AZMQ)
      CQAZ=DCOS(AZMQ)
      DOTP=SSAZ*SQAZ+CSAZ*CQAZ
      CRSP=CSAZ*SQAZ-SSAZ*CQAZ
      CRSP=-CRSP
      ERRAZ=DATAN2(CRSP,DOTP)
      ERREL=SNSEL-ELMQ
      AZOUT=AZKP*ERRAZ
      ELOUT=ELKP*ERREL
      AZXIM1=0.0D0
      ELXIM1=0.0D0
      EAZM1=ERRAZ
      EELM1=ERREL
C
C
      IF(IGSNSE.EQ.0) GO TO 31
C
      DO 28 I=1,3
      I1=IDEP+I
      DEPEND(I1)=SMAGM(I)
   28 CONTINUE
C
   29 CONTINUE
C
      IF(IGSNSE.EQ.0) GO TO 31
C
      DO 30 I=1,3
      I1=IDEP+I
      DERIV(I1)=SNSWM(I)*(SMAGM(I)-DEPEND(I1))
      SNSV(I)=DEPEND(I1)
   30 CONTINUE
C
      RETURN
C
   31 CONTINUE
C
      DO 32 I=1,3
      SNSV(I)=SMAGM(I)
   32 CONTINUE
C
      RETURN
C
C
C   ****************************************************************
      ENTRY GMBCNT(AZCNT,ELCNT)
C   ****************************************************************
C
C     CALLED FROM GIMBL2
C
C     ZERO OUT CONTROL TORQUES FOR NO CONTROL CASE
C
      AZCNT=0.0D0
      ELCNT=0.0D0
C
      IF(IPCONT.EQ.0) RETURN
C
C     CALCULATE MOTOR TORQUES
C
      VOPAZ=AZKA*AZOUT
      VOPEL=ELKA*ELOUT
C     MOTOR TORQUES
      AZMOTT=AZKT*(VOPAZ-AZKB*AZD+AZVBAS)
      ELMOTT=ELKT*(VOPEL-ELKB*ELD+ELVBAS)
C     TORQUE LIMITING
      IF(AZMOTT.GT.AZMTUP) AZMOTT=AZMTUP
      IF(AZMOTT.LT.AZMTDN) AZMOTT=AZMTDN
      IF(ELMOTT.GT.ELMTUP) ELMOTT=ELMTUP
      IF(ELMOTT.LT.ELMTDN) ELMOTT=ELMTDN
C     COULOMB FRICTION TORQUE
      AZMOTT=AZMOTT-AZD*AZTCUL/(AZDMIN+DABS(AZD))
      ELMOTT=ELMOTT-ELD*ELTCUL/(ELDMIN+DABS(ELD))
C     OUTPUT
      AZCNT=AZMOTT
      ELCNT=ELMOTT
C
C
      RETURN
C
C   ****************************************************************
      ENTRY PIDCNT(IPRFLG)
C   ****************************************************************
C
C     SIMULATION OF P I D CONTROLLER
C     CALLED FROM MAIN AFTER ADAMS RETURN
C
      IPRFLG=1
      IF(IPCONT.EQ.0) RETURN
      IPRFLG=0
      IF(MOD(ICNFRQ,NPRFRQ).EQ.0) IPRFLG=1
      ICNFRQ=ICNFRQ+1
C
      DO 35 I=1,3
      FILMAG(I)=SNSV(I)-RATIOM*(SNSV(I)-SNSVM1(I))
      SNSVM1(I)=SNSV(I)
   35 CONTINUE
C
C     PLATFORM COMMAND COMPUTATION
C
      CALL MATV(2,B0,FILMAG,REFV)
      DEN=REFV(1)*REFV(1)+REFV(2)*REFV(2)
      VMMAG=DEN+REFV(3)*REFV(3)
      DEN=DSQRT(DEN)
      VMMAG=DSQRT(VMMAG)
C
      SNSAZ=DATAN2(REFV(2),REFV(1))
      SNSEL=DATAN2(REFV(3),DEN)
   36 CONTINUE
C
C     MEASURED PLATFORM POSITION
C
      AZM=DMOD(AZ,TWOPI)
      IF(AZM.GT.PI) AZM=AZM-TWOPI
      ELM=EL
      AZMQ=AZM-DMOD(AZM,AZQNT)
      ELMQ=ELM-DMOD(ELM,ELQNT)
C
C     CALCULATE AZIMUTH AND ELEVATION ERRORS
C
      SSAZ=DSIN(SNSAZ)
      CSAZ=DCOS(SNSAZ)
      SQAZ=DSIN(AZMQ)
      CQAZ=DCOS(AZMQ)
      DOTP=SSAZ*SQAZ+CSAZ*CQAZ
      CRSP=CSAZ*SQAZ-SSAZ*CQAZ
      CRSP=-CRSP
      ERRAZ=DATAN2(CRSP,DOTP)
      ERREL=SNSEL-ELMQ
      ERAZIM=ERRAZ/RADIAN
      ERELEV=ERREL/RADIAN
      AZXI=AZXIM1+TSAMP*ERRAZ
      AZXD=(ERRAZ-EAZM1)/TSAMP
      AZOUT=AZKP*ERRAZ+AZKI*AZXI+AZKD*AZXD
      IF(AZXI.GT.AZXIUP) AZXI=AZXIUP
      IF(AZXI.LT.AZXIDN) AZXI=AZXIDN
C
      ELXI=ELXIM1+TSAMP*ERREL
      IF(ELXI.GT.ELXIUP) ELXI=ELXIUP
      IF(ELXI.LT.ELXIDN) ELXI=ELXIDN
      ELXD=(ERREL-EELM1)/TSAMP
      ELOUT=ELKP*ERREL+ELKI*ELXI+ELKD*ELXD
C
      IF(IOUT.EQ.1) GO TO 40
      WRITE(6,1000)
 1000 FORMAT('0',10X,'DEBUG OUTPUT FROM PIDCNT')
 1001 FORMAT('0',1P10E13.5)
      WRITE(6,1001) SNSAZ,AZM,AZMQ,ERRAZ,ERAZIM,AZXI,AZXD,AZOUT,AZXIM1
      WRITE(6,1001) SNSEL,ELM,ELMQ,ERREL,ERELEV,ELXI,ELXD,ELOUT,ELXIM1
   40 CONTINUE
C
      AZXIM1=AZXI
      EAZM1=ERRAZ
      ELXIM1=ELXI
      EELM1=ERREL
C
      RETURN
C
C   ****************************************************************
      ENTRY PCSWRP(BUFF,INDEX)
C   ****************************************************************
C
C     CALLED FROM WRTPLT TO LOAD PLOT RECORD
C
      IF(IPCONT.EQ.0) RETURN
      IF(IMGNTS.NE.0) GO TO 62
      I1=192
      DO 60 I=1,3
      BUFF(I1+I)=SMAGB(I)
   60 CONTINUE
   62 CONTINUE
      I1=INDEX-1
      DO 64 I=1,3
      BUFF(I1+I)=FILMAG(I)
   64 CONTINUE
      I1=INDEX+2
      BUFF(I1+1)=ERAZIM
      BUFF(I1+2)=ERELEV
      BUFF(I1+3)=AZOUT
      BUFF(I1+4)=ELOUT
      BUFF(I1+5)=AZMOTT
      BUFF(I1+6)=ELMOTT
      INDEX=INDEX+9
C
C
      RETURN
C
C   ****************************************************************
      ENTRY PCSPRN
C   ****************************************************************
C
C     CALLED FROM GPRINT FOR PRINTED OUTPUT
C
      IF(IPCONT.EQ.0) RETURN
      IF(IMGNTS.NE.0) GO TO 72
      DO 66 I=1,3
   66 CALL SET('SMAGI   ',I,0,SMAGI(I),I8)
      DO 68 I=1,3
   68 CALL SET('SMAGB   ',I,0,SMAGB(I),I8)
   72 CONTINUE
      DO 74 I=1,3
   74 CALL SET('SMAGF   ',I,0,FILMAG(I),I8)
C
C
      CALL SET('AZIM ERR',0,0,ERAZIM,I8)
      CALL SET('ELEV ERR',0,0,ERELEV,I8)
      CALL SET('AZIM PID',0,0,AZOUT,I8)
      CALL SET('ELEV PID',0,0,ELOUT,I8)
      CALL SET('AZIM MOT',0,0,AZMOTT,I8)
      CALL SET('ELEV MOT',0,0,ELMOTT,I8)
C
C
      RETURN
C
C
      END
      SUBROUTINE PLOT(X,Y,BIGY,SMLY,NTIME,BX,SX,NOPT,IN,HEXTTL,AOPT,KTT)
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                     C
C     SUBROUTINE 'PLOT' DOES THE PRINTER PLOTS                        C
C     LATEST MODIFICATIONS AS OF SEPT. 1977.                          C
C     THE ARRAY TITLE IS IN ONE TO ONE CORRESPONDENCE WITH            C
C     LOCATION IN THE PLOT BUFFER AND THE INPUT CONTROL KPLOTS.       C
C                                                                     C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/RMAIN1/ HUMPTY(2),FREQ,DUMPTY(302)
C
      REAL*4 Y,BIGY,SMLY
C
      COMPLEX*16 AOPT
C
      COMPLEX*16 HEXTTL
C
      COMPLEX*16 OPT2,TITLE
C
      COMMON/PLTHED/OPT2(10),TITLE(450)
C
      INTEGER PERIOD,DASH,BLANK,STAR
C
C
      DIMENSION X(NTIME),Y(NTIME),JPRINT(101),LINES(101),T(12)
      DIMENSION PRIOD(12),T2(12)
C
C
      DATA PERIOD/'*'/
      DATA DASH  /'-'/
      DATA BLANK /' '/
C
      DATA PRIOD /'.','.','.','.','.','.','.','.','.','.','.','.'/
C
      LOGICAL SWITCH
C
C                       PRESET VALUES
C
      KOUNT=0
      ID=0
      SWITCH=.TRUE.
C
C***********************************************************************
C
C      *** INPUT ---
C                   X INDEPENDENT VARIABLE(TIME-ABSCISSA)
C                   Y DEPENDENT VARIABLE(ORDINATE)
C                   BIGY LARGEST DEPENDENT VARIABLE
C                   SMLY SMALLEST DEPENDENT VARIABLE
C                   NO INDEX FOR WRITING HEADING
C
C                   NTIME NUMBER OF VALUES TO BE PLOTTED
C
C
C***********************************************************************
C
C                       CHECK FOR ORDINATE SCALE
C  *** VALUES ALL NEGATIVE
C
      IF(BIGY.LE.0..AND.SMLY.LT.0.) ID=1
C
C   *** VALUES ALL POSITIVE
C
      IF(BIGY.GE.0..AND.SMLY.GE.0.) ID=51
C
C   *** VALUES RANGE FROM POSITIVE TO NEGATIVE
C
      IF(BIGY.GT.0..AND.SMLY.LT.0.) ID=26
C    CHECK FOR CONSTANT FUNCTION
      IF (BIGY.EQ.SMLY) ID=-1
C
      AOPT=TITLE(IN)
      IF(IN.LT.11.AND.NOPT.EQ.2) AOPT=OPT2(IN)
C
      IF(KTT.GT.2) RETURN
C
      IF (ID.GT.0) GO TO 10
      IF (ID.EQ.0) WRITE (6,10000) AOPT
      IF (ID.LT.0) WRITE (6,4445) AOPT    ,BIGY
      RETURN
C
C                       CALCULATE ABSCISSA SCALE
C
   10 N=NTIME
C
C
   15 CONTINUE
C
C                       CHECK ON NUMBER OF VALUES TO PLOT
C                             GREATER THAN 111 PLOT FIRST 111
C                             THEN PLOT NEXT GROUP ETC.
C
      IF(NTIME.LE.101) GO TO 20
      SWITCH=.FALSE.
      NT=NTIME-101
      N=101
   20 K11=11
      N1=0
      T2(1)=X(1)
      XSCALE=FREQ
C
C
   30 CALL YRMODA(T2(1),IMNTH,IDAY,IHR,IMIN,ISEC)
      CALL YRMODA(X(N+N1),IMO,ID,IH,IM,IS)
C
      DO 40 I=1,10
   40 T2(I+1)=T2(I) + 10.D0*XSCALE
C
      DO 45 I=1,11
      T22=T2(I)
   45 T(I)=HMSOUT(DMOD(T22  ,86400.D0))
C
C                       SETUP FOR PRINTING VARIABLES
C
      YMAX=BIGY-SMLY
C
C                       SETUP LINES FOR PRINTING
C
      DO 50 I=1,N
      K=I+N1
      XLINE=50.0*(BIGY-Y(K))/YMAX+1.0
   50 LINES(I)=XLINE
C
C                       WRITE HEADING
C
      WRITE (6,10001) HEXTTL,AOPT
      WRITE(6,10004) (PRIOD(I),I=1,11)
C
C                       FILL JPRINT TABLE WITH CHARATERS TO PRINT
C
      DO 90 I=1,51
C
      DO 55 J=1,101
   55 JPRINT(J)=BLANK
C
      DO 60 J=1,N
       IF(LINES(J).EQ.I) JPRINT(J)=PERIOD
   60 CONTINUE
C
      A=BIGY-DFLOAT   (I-1)*YMAX/50
      WRITE(6,10002) A,DASH,(JPRINT(K),K=1,101)
   90 CONTINUE
C
      WRITE(6,10004) (PRIOD(I),I=1,11)
      WRITE (6,10005)(T(I),I=1,11)
      WRITE (6,10008) IMNTH,IDAY,IHR,IMIN,ISEC,IMO,ID,IH,IM,IS
      IF(SWITCH) RETURN
      SWITCH=.FALSE.
      IF(NT.LT.101) SWITCH=.TRUE.
      N=NT+1
      N1=N1+100
      IF (SWITCH)  GO TO 100
      N=101
      NT=NT-100
  100 T2(1)=T2(K11)
      GO TO 30
C
 4445 FORMAT('1',10X,'NO PLOTS FOR ',2A8/' FUNCTION HAS CONSTANT VALUE O
     1F ',G10.4)
10000 FORMAT('1',10X,'NO PLOTS FOR ',2A8)
C
10001 FORMAT('1',61X,2A8/62X,2A8)
C
10002 FORMAT(' ',5X,G13.6,2X,A1,111A1)
C
10003 FORMAT(' ',20X,112A1)
C
10004 FORMAT(' ',21X,A1,10(9X,A1))
C
10005 FORMAT('0',5X,'TIME',6X,F9.2,10(1X,F9.2))
C
10008 FORMAT('0',40X,'FROM',I6,'/',I2,4X,I2,'.',I2,'.',I2,4X,'TO',I6,
     * '/',I2,4X,I2,'.',I2,'.',I2)
C
C
      END
      SUBROUTINE PLOTF
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                     C
C     PLOTF IS THE EXECUTIVE SUBROUTINE FOR PRINTER PLOTS.            C
C     IT ALSO CALLS EXCSD FOR FFT ANALYSIS.                           C
C     LATEST MODIFICATIONS AS OF SEPT. 1977.                          C
C                                                                     C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMPLEX*16 BLANK/'                '/
C
      COMPLEX*16 HEXTTL
C
      COMPLEX*16 AOPT
C
      COMPLEX*16 TITLE1(10)
     * /'DAMPER ELEM. 1  ','DAMPER ELEM. 2  ','DAMPER ELEM. 3  ',
     *  'DAMPER ELEM. 4  ','DAMPER ELEM. 5  ','DAMPER ELEM. 6  ',
     *  'DAMPER ELEM. 7  ','DAMPER ELEM. 8  ','DAMPER ELEM. 9  ',
     *  'DAMPER ELEM. 10 '/
C
      COMPLEX*16 TITLE2(10)
     * /'FLEX. ELEM.  1  ','FLEX. ELEM.  2  ','FLEX. ELEM.  3  ',
     *  'FLEX. ELEM.  4  ','FLEX. ELEM.  5  ','FLEX. ELEM.  6  ',
     *  'FLEX. ELEM.  7  ','FLEX. ELEM.  8  ','FLEX. ELEM.  9  ',
     *  'FLEX. ELEM.  10 '/
C
      COMMON /IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/INPFFT/ICSD
C
      COMMON /IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .                LK(10),LLK(10)
C
      COMMON /PLOTIT/ XMIN(11),XMAX(11),YMIN(11),YMAX(11),IFSCAL,
     1               KPLOTS(450)
C
      COMMON/PLTCOM/IPLMOD,IKMOD
C
C
      REAL*4 Q(2050)
      COMPLEX*8 Z(1025)
      EQUIVALENCE (Q(1),Z(1))
C
      REAL*4 T(450),BIGY(450),SMLY(450),Y(201),SY,BY
      DIMENSION X(201)
C
      DATA NPOINT /200/
C
C
C
      MDISK=IPLTPE
      REWIND MDISK
      BIGX=-1.0D25
      SMLX=1.0D25
      DO 1 I=1,450
      BIGY(I)=-1.0E25
      SMLY(I)=1.0E25
    1 CONTINUE
   29 READ(MDISK,END=30) ITAR,TTT,T
      BIGX=DMAX1(BIGX,TTT)
      SMLX=DMIN1(SMLX,TTT)
      DO 2 I=1,450
      BIGY(I)=AMAX1(BIGY(I),T(I))
      SMLY(I)=AMIN1(SMLY(I),T(I))
    2 CONTINUE
      GO TO 29
   30 CONTINUE
      DO 400 I=1,450
      IF(KPLOTS(I).EQ.0) GO TO 400
      LL=I
  403 REWIND MDISK
      ISW=0
      L3=0
      LFFT=0
  401 READ(MDISK,END=409) ITAR,TTT,T
      LFFT=LFFT+1
  414 L3=L3+1
      X(L3)=TTT
      Y(L3)=T(LL)
      Q(LFFT)=T(LL)
      IF (L3 .LE. NPOINT)  GO TO 401
  416 HEXTTL=BLANK
      IF(I.LT.11) GO TO 440
      IF(I.GT.148) GO TO 413
      ITEST=I-11
      IF(ITEST.GT.59) GO TO 420
      I1=ITEST/6+1
      HEXTTL=TITLE2(I1)
      GO TO 440
  420 CONTINUE
      ITEST=I-71
      IF(ITEST.GT.59) GO TO 422
      I1=ITEST/6+1
      HEXTTL=TITLE1(I1)
      GO TO 440
  422 CONTINUE
      I1=IKMOD
      IF(I1.GT.K1) I1=I1-K1
      HEXTTL=TITLE2(I1)
      IF(IKMOD.LE.K1) HEXTTL=TITLE1(I1)
      GO TO 440
C
 413  CONTINUE
C
      IF(I.LT.251) GO TO 440
      IF(I.GT.296) GO TO 440
      ITEST=I-251
      IF(ITEST.GT.19) GO TO 430
      I1=ITEST/2+1
      HEXTTL=TITLE1(I1)
      GO TO 440
  430 CONTINUE
      ITEST=ITEST-20
      IF(ITEST.GT.19) GO TO 435
      I1=ITEST/2+1
      HEXTTL=TITLE2(I1)
      GO TO 440
  435 CONTINUE
      I1=IKMOD
      IF(I1.GT.K1) I1=I1-K1
      HEXTTL=TITLE1(I1)
      IF(IKMOD.GT.K1) HEXTTL=TITLE2(I1)
C
  440 CONTINUE
C
      SX=SMLX
      BX=BIGX
      SY=SMLY(I)
      BY=BIGY(I)
      IF (IFSCAL .EQ. 0)  GO TO 750
      SX=XMIN(I)
      BX=XMAX(I)
      SY=YMIN(I)
      BY=YMAX(I)
  750 CONTINUE
      CALL PLOT(X,Y,BY,SY,L3,BX,SX,INOPT,I,HEXTTL,AOPT,KPLOTS(I))
  101 L3=0
      IF(ISW.EQ.1) GO TO 410
      GO TO 414
  409 ISW=1
      GO TO 416
C
  410 CONTINUE
      IF(ICSD.NE.0.AND.KPLOTS(I).GT.1)
     1       CALL EXCSD(Q,Z,I,LFFT,HEXTTL,AOPT)
C
  400 CONTINUE
      WRITE (6,531)
  531 FORMAT(' ALL PLOTS COMPLETE')
      RETURN
      END
      SUBROUTINE PLTC(P,JXL,JXH,JXD,I,J1,IS)
C     FILL PLTX ARRAY FROM COMPLEX 1-D ARRAY
      DIMENSION PLTX(8196),P(1),G(101)
      DATA B,BLK,GRD/'*',' ','I'/
      PMAX=-1.E+38
      PMIN=1.E+38
      SCLM=100.
      JP=0
      DO 8 J=1,101
    8 G(J)=BLK
      IF(IS-1) 21,22,23
   21 DO 10 JX=JXL,JXH,JXD
      JP=JP+1
      J=(2*JX)-I
      PJ=P(J)
      PLTX(JP)=PJ
      IF(PJ-PMIN)2,3,3
    2 PMIN=PJ
    3 IF(PJ-PMAX) 12,12,13
   13 PMAX=PJ
   12 JMAX=JP
   10 CONTINUE
      WRITE(6,109)(JXL,JXH,JXD,I,J1,JP)
      IF(PMIN) 101,101,102
  102 PMIN=0.
      GO TO 101
   22 PMAX=180.
      PMIN=-180.
      GO TO 26
   23 IF(IS-2) 24,24,25
   24 PMAX=1.
      PMIN=-1.
      GO TO 26
   25 PMAX=1.
      PMIN=0.
   26 DO 30 JX=JXL,JXH,JXD
      JP=JP+1
      J=(2*JX)-I
      PJ=P(J)
      PLTX(JP)=PJ
      JMAX=JP
   30 CONTINUE
      WRITE(6,109)(JXL,JXH,JXD,I,J1,JP)
  101 SCL=SCLM/(PMAX-PMIN)
C
      WRITE(6,1)
    1 FORMAT(4H PLT)
      DO 20 J=1,JMAX
      DO 9 K=1,101,10
    9 G(K)=GRD
      L=(PLTX(J)-PMIN)*SCL+1.50001
      IF(L.LT.1)GO TO 20
      IF(L.GT.101) GO TO 20
      X=PLTX(J)
      G(L)=B
      JJ=J1+J-1
      WRITE(6,7) JJ,X,G
    7 FORMAT(1H ,I4,1PE12.3,4X,101A1)
      G(L)=BLK
   20 CONTINUE
 109  FORMAT(6I6)
      RETURN
      END
      SUBROUTINE POWERS(Q,M,NSPEC,IWIN)
C     M+1=NUMBER OF DESIRED LAG VALUES
C     NSPEC=2*NS, NUMBER OF DATA POINTS AFTER WINDOWING.
      COMPLEX Q(1)
C     WINDOW AUTOCORRELATION FUNCTION
C     IWIN=1,  HANN
C     IWIN=2,  HAMMING
C     IWIN=3,  TRIANGULAR
      IWIN=1
      FM=FLOAT(M)
      PI=3.1416
      IF(IWIN-2) 1,2,3
    1 IF(IWIN-1)10,11,11
   11 DO 910 J=2,M
      R=FLOAT(J-1)
      WT=0.5*(1.+COS(PI*R/FM))
      Q(J)=Q(J)*WT
      Q(NSPEC+2-J)=Q(J)
  910 CONTINUE
      GO TO 4
    2 DO 920 J=2,M
      R=FLOAT(J-1)
      WT=0.54+0.46*COS(PI*R/FM)
      Q(J)=Q(J)*WT
      Q(NSPEC+2-J)=Q(J)
  920 CONTINUE
      GO TO 4
    3 DO 930 J=2,M
      WT=FLOAT(M+1-J)/FM
      Q(J)=Q(J)*WT
      Q(NSPEC+2-J)=Q(J)
  930 CONTINUE
    4 JL=M+1
      JH=NSPEC+2-JL
      DO 911 J=JL,JH
      Q(J)=(0.,0.)
  911 CONTINUE
C
C     TAKE DIRECT FFT TO OBTAIN SPECTRUM.
      NN=NSPEC
      CALL FOUR(Q,NN,-1)
   10 RETURN
      END
      SUBROUTINE PRECHO(DEP)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      REAL*8 I3,I2OVI3
C
      COMMON/CCNVRT/BDYMI(3,3),DPRMI(3,3),EMODLS(10),RTUBE(10),
C
     *              HTUBE(10),THERMC(10),TIPMS(10),C(10)
C
      COMMON/CECHON/CEI20(10),CEI21(10),CEI30(10),CEI31(10)
C
     1             ,CGJ0(10),CGJ1(10),TWI0(3,10),TWI1(3,10)
C
     2             ,TWID0(3,10),TWID1(3,10),MODEST(10)
C
      COMMON/CONSTS/PI,TWOPI,RADIAN
C
C
      COMMON/DATOUT/IDATA,MLAST
C
      COMMON/INEWR/NKT(10),ICP,ICPS
C
      COMMON/IPOOL1/IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
C
     *              LK(10),LLK(10)
C
      COMMON/ITW/ITWIST,ITWST1
C
      COMMON/RMAIN1/DUMM1(5),UPBND(150),DNBND(150)
C
      COMMON/RNEWC/ZGJ(10),ZEDQ(10),ZO(10),ZED2(10),ZED3(10)
C
      COMMON/RNEWR / ZA(10),I3(10),I2OVI3(10),
C
     *             ZDQ(10),ZJ(10),D2(10),D3(10)
C
      COMMON/RNEWV/CW(10,3),CDW(10,3)
C
      COMMON/RPOOL1/RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     *              ZLKP(10),ZLKDP(10),CMATO(3,3),GBAR(3,3),YBCM(3),
     *              ZBZK(3,10),FCMO(3,3),DTO,PHID,PHI
C
      COMMON/TMSINR/TIPINR(3,10),RTSQ(3,10),XIPL(6),BETL(6)
C
      COMMON/TWIBND/TWIUP,TWIDN,TWDUP,TWDDN
C
      COMMON/TWIOUT/CWO(10,3),CWDO(10,3)
C
C
      DIMENSION DEP(150)
C
C
C
      IF(IDATA.NE.0) GO TO 20
C
      NEL=IK-K1
C
      DO 10 I=1,IK
      CI3=PI*RTUBE(I)**3*HTUBE(I)
      I1=I+K1
      IF(I1.GT.IK) I1=I-NEL
      CI2=CI3*I2OVI3(I1)
      CEI20(I)=CI2*EMODLS(I)
      CEI21(I1)=CEI20(I)
      CEI30(I)=CI3*EMODLS(I)
      CEI31(I1)=CEI30(I)
      I3(I1)=CI3
      IF(ITWIST.EQ.0) GO TO 10
      CGJ0(I)=0.4D0*EMODLS(I)*ZJ(I1)
      CGJ1(I1)=CGJ0(I)
      ZO(I1)=EMODLS(I)*(CI2-CI3)/144.0D0
      ZGJ(I1)=0.4D0*EMODLS(I)*ZJ(I1)/144.0D0
      ZED2(I1)=EMODLS(I)*D2(I1)/1728.0D0
      ZED3(I1)=EMODLS(I)*D3(I1)/1728.0D0
      ZEDQ(I1)=EMODLS(I)*ZDQ(I1)/(144.0D0*144.0D0)
      DO 8 J=1,3
      TWI0(J,I)=CW(I1,J)
      TWID0(J,I)=CDW(I1,J)
    8 CONTINUE
      MODEST(I)=NKT(I1)
   10 CONTINUE
C
      GO TO 30
C
   20 CONTINUE
C
      DO 25  I=1,IK
      DO 24 J=1,3
      TWI1(J,I)=CWO(I,J)
      TWID1(J,I)=CWDO(I,J)
   24 CONTINUE
   25 CONTINUE
C
   30 CONTINUE
C
      L=1
C
      DO 101 K=1,IK
      IF(NKT(K).EQ.0) GO TO 108
      IF(L.NE.1) GO TO 201
      ICPS=ICP+NKT(K)
      IKOUT=ICP
      IKOUTD=ICPS
      L=2
  201 CONTINUE
      NKNT=NKT(K)
      DO 102 IP=1,NKNT
      IP1=IP-1
         DEP(IKOUT+IP1)=CW(K,IP)*RADIAN
         DEP(IKOUTD+IP1)=CDW(K,IP)*RADIAN
      IF(IDATA.EQ.0) GO TO 104
      DEP(IKOUT+IP1)=CWO(K,IP)*RADIAN
      DEP(IKOUTD+IP1)=CWDO(K,IP)*RADIAN
  104 CONTINUE
      UPBND(IKOUT+IP1)=TWIUP
      DNBND(IKOUT+IP1)=TWIDN
      UPBND(IKOUTD+IP1)=TWDUP
      DNBND(IKOUTD+IP1)=TWDDN
  102 CONTINUE
      IKOUT=IKOUT+NKNT*2
      IKOUTD=IKOUTD+NKNT*2
  108 CONTINUE
      DO 109 I=1,3
      CWO(K,I)=0.0D0
      CWDO(K,I)=0.0D0
  109 CONTINUE
C
      RTSQ(1,K)=0.5D0*(TIPINR(2,K)+TIPINR(3,K)-TIPINR(1,K))
      RTSQ(2,K)=0.5D0*(TIPINR(3,K)+TIPINR(1,K)-TIPINR(2,K))
      RTSQ(3,K)=0.5D0*(TIPINR(1,K)+TIPINR(2,K)-TIPINR(3,K))
C
  101 CONTINUE
C
      RETURN
C
      END
      SUBROUTINE PRJACC(TIME,LDPLY)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      INTEGER*2 KP1(21,4),KP2(21,4),KP
C
      REAL*4 TC1(20),TC2(20),TC
C
      COMMON/DRGCOM/ ER(3),HUBCDA(3),HUBCP(3),UJD0,HUBF(3),HUBM(3),IDRAG
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/ORJACC/ ITJ,KP(21,8),TC(20)
C
C     TIME IS UT TIME IN SECONDS FROM THE START OF THE YEAR
C
      IF(LDPLY.NE.0) GO TO 999
C
C
C     DETERMINE JULIAN DATE AT TIME 0.0 OF THE CURRENT YEAR
C
      IYEAR=1900+IDATE/10000
      IMO=1
      IDAY=1
      CALL JULDAY(IYEAR,IMO,IDAY,UJD0)
C
C     IF IDRAG = 1 USE STANDARD 1962 ATMOSPHERE
C
      IF(IDRAG.LT.2) GO TO 999
C
C     COMPUTE JULIAN DATE
C
      XJD=UJD0+TIME/86400.0D0
      TMOD=XJD-2430000.5D0
      ITA=TMOD
C
C     IDRAG = 2 SET ITJ = ITA AND USE PRESET DATA
C     IDRAG = 3 APPROPRIATE DATA SHOULD HAVE BEEN INPUT
C     IDRAG > 3 READ GSFC JACCHIA - ROBERTS DATA FILE
C
      IF(IDRAG.GT.3) GO TO 5
      IF(IDRAG.EQ.2) ITJ=ITA
      IF(ITA.GE.ITJ.AND.ITA.LE.ITJ+19) GO TO 999
      WRITE(6,600) ITA,ITJ,IDRAG
  600 FORMAT('0',5X,'THE PROBLEM MODIFIED JULIAN DATE',I8,' DOES NOT FIT
     1 THE JACCHIA - ROBERTS DATA SPAN IN COMMON STARTING AT ITJ =',I8,
     2 '.'/5X,'FOR IDRAG =',I2,' INPUT APPROPRIATE TIME SPAN OFJACCHIA -
     3 ROBERTS ATMOSPHERIC MODEL DATA.')
C
      CALL EXIT
C
    5 CONTINUE
C
C
C     READ DATA FROM GSFC DATA FILE ON UNIT 15
C
      READ(15'1) IDREC1,IDRECE,NREC,LGD
      IDREC1=IDREC1/20
      IDREC1=IDREC1*20
C
C              WHERE IDREC1 = FIRST TIME POINT, IDRECE = LAST TIME POINT
C              NREC = NO. OF RECORDS AND LGD = LAST
C              GOOD DATA POINT.
C
C     COMPUTE RECORD NUMBER IN WHICH ITA OCCURS
C
      N=(ITA-IDREC1)/20+2
      N1=N+1
C
C     CHECK TO SEE IF RECORD IS IN DATA FILE
C
      IF(N.LT.2) GO TO 900
      IF(N1.GT.NREC) GO TO 900
C
C     READ TWO RECORDS
C
      READ(15'N) IT1,KP1,TC1
      READ(15'N1) IT2,KP2,TC2
C
C     LOAD COMMON/ORJACC WITH DATA STARTING FROM ITA
C
      ITJ=ITA
C
      I1=ITA-IT1+1
      DO 10 I=I1,20
      I2=I1-I+1
      TC(I2)=TC1(I)
      KP(I2,7)=KP1(I,4)/100
      KP(I2,8)=KP1(I,4)-KP(I2,7)*100
      KP(I2,5)=KP1(I,3)/100
      KP(I2,6)=KP1(I,3)-KP(I2,5)*100
      KP(I2,3)=KP1(I,2)/100
      KP(I2,4)=KP1(I,2)-KP(I2,3)*100
      KP(I2,1)=KP1(I,1)/100
      KP(I2,2)=KP1(I,1)-KP(I2,1)*100
   10 CONTINUE
C
C
      I1=I1-1
C
      IF(I1.EQ.0) GO TO 25
C
      DO 20 I=1,I1
      I2=20-I1+I
      TC(I2)=TC2(I)
      KP(I2,7)=KP2(I,4)/100
      KP(I2,8)=KP2(I,4)-KP(I2,7)*100
      KP(I2,5)=KP2(I,3)/100
      KP(I2,6)=KP2(I,3)-KP(I2,5)*100
      KP(I2,3)=KP2(I,2)/100
      KP(I2,4)=KP2(I,2)-KP(I2,3)*100
      KP(I2,1)=KP2(I,1)/100
      KP(I2,2)=KP2(I,1)-KP(I2,1)*100
   20 CONTINUE
C
   25 CONTINUE
C
      I=I1+1
      I2=21
C
C
      KP(I2,7)=KP2(I,4)/100
      KP(I2,8)=KP2(I,4)-KP(I2,7)*100
      KP(I2,5)=KP2(I,3)/100
      KP(I2,6)=KP2(I,3)-KP(I2,5)*100
      KP(I2,3)=KP2(I,2)/100
      KP(I2,4)=KP2(I,2)-KP(I2,3)*100
      KP(I2,1)=KP2(I,1)/100
      KP(I2,2)=KP2(I,1)-KP(I2,1)*100
C
      GO TO 999
C
  900 CONTINUE
C
      WRITE(6,601) N,N1,ITA
  601 FORMAT('0',5X,'THE REQUESTED DATA RECORDS',2I4,' FOR ITA =',I8,
     1 ' ARE NOT IN THE FILE.')
C
      CALL EXIT
C
  999 CONTINUE
C
      RETURN
C
      END
      SUBROUTINE PULSER(ETA)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
C    CONTROL SUBROUTINE FOR THRUSTING.
C
C     CALLED FROM DEREQ1 WHEN KPULSE.NE.IPULSE
C
      COMMON/CSTVAL/TSTART,DUM1(40)
C
      COMMON/ITCNTL/IPULSE,ISPLSE,KPULSE,ITSW,IOTSW,IPLPRP
C
      COMMON/OUTFOR/SUMM(3)
C
      COMMON/RPOOL1/RHOK(10),TIME,DUM2(114)
C
      COMMON/THRUST/TV(3,2),TL(3,2),TT(4,2),TPAR(4,2),REF(2)
C
      COMMON/ACCORB/ ACCOB(3),TRTACC(3),VCF(3)
C
      COMMON/TIMPLS/TMEAN(2),TPULSE(2),TOPLSE(2),TTSTOP(2),DELV(2)
C
C
C
      DIMENSION ETA(7),VCM(3)
C
      IF(TIME.NE.TSTART) GO TO 10
      ITSW=1
      IOTSW=0
      IPCNT =0
C
      DO 1 I=1,IPLPRP
      CALL TOTIMP(TT(1,I),TPAR(1,I),TMEAN(I),DELV(I))
      TPULSE(I)=TIME+TT(1,I)
      TOPLSE(I)=TIME+TMEAN(I)
      TTSTOP(I)=TIME+TT(4,I)
    1 CONTINUE
C
   10 CONTINUE
C
      DO 15 I=1,3
      VCF(I)=0.0D0
      VCM(I)=0.0D0
   15 CONTINUE
C
C     IS A SUN CROSSING THE PULSE REFERENCE
C
      IF(ISPLSE.EQ.0) GO TO 20
C     IT IS A SUN CROSSING REFERENCE CASE
      CALL PULSUN
C
      IF(ITSW.EQ.0) GO TO 20
      IPCNT=0
      GO TO 100
   20 CONTINUE
C
      DO 50 I=1,IPLPRP
      IF(TIME.LT.TPULSE(I)) GO TO 50
      IF(TIME.GT.TTSTOP(I)) GO TO 45
      TMAG=TTRUST(TPULSE(I),TIME,TT(1,I),TPAR(1,I))
C
      DO 30 J=1,3
      VCF(J)=VCF(J)+TMAG*TV(J,I)
   30 CONTINUE
C
      VCM(1)=VCM(1)+TMAG*(TV(3,I)*TL(2,I)-TV(2,I)*TL(3,I))
      VCM(2)=VCM(2)+TMAG*(TV(1,I)*TL(3,I)-TV(3,I)*TL(1,I))
      VCM(3)=VCM(3)+TMAG*(TV(2,I)*TL(1,I)-TV(1,I)*TL(2,I))
      CALL JETDM2(I,VCF,VCM)
C
      IF(TIME.LT.TOPLSE(I)) GO TO 50
      IF(IOTSW.EQ.I) GO TO 50
      IOTSW=IOTSW+1
      CALL ORBUPD(TOPLSE(I),DELV(I),TV(1,I))
      GO TO 50
C
   45 CONTINUE
C
      IF(IPCNT.NE.I) KPULSE=KPULSE+1
      IPCNT=I
C
      IF(I.NE.IPLPRP) GO TO 50
C
      ITSW=1
      IOTSW=0
C
   50 CONTINUE
C
      DO 60 I=1,3
      I1=I+3
      ETA(I)=ETA(I)+VCF(I)
      ETA(I1)=ETA(I1)+VCM(I)
      SUMM(I)=SUMM(I)+VCM(I)
   60 CONTINUE
C
  100 CONTINUE
C
      RETURN
C
      END
      SUBROUTINE PULSUN
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CONSTS/PI,TWOPI,RAD
C
      COMMON/CSTVAL/TSTART,DUM5(40)
C
      COMMON/ITCNTL/IPULSE,ISPLSE,KPULSE,ITSW,IOTSW,IPLPRP
C
      COMMON/OUTTHR/SMAGB(3)
C
      COMMON/RPOOL1/DUM2(10),TIME,SA(3,3),DUM3(19),OMEG(3),DUM4(83)
C
      COMMON/RMGNTC/SMAGI(3)
C
      COMMON/SENVTR/DIY(3),DL2
C
      COMMON/THRUST/TV(3,2),TLOC(3,2),TTIM(4,2),TPAR(4,2),REF(2)
C
      COMMON/TIMPLS/TMEAN(2),TPULSE(2),TOPLSE(2),TTSTOP(2),DELV(2)
C
C
C
      WS2=DIY(2)
      WS1=DIY(1)
      IF(TIME.GT.TSTART) GO TO 10
      TLAST=TIME
      DL2=WS2
   10 CONTINUE
C
      WS3=WS1*WS1+WS2*WS2
      WS3=DSQRT(WS3)
      IF(WS3.GT.0.01745D0) GO TO 20
      WS3=WS3/RAD
      WRITE(6,1000) WS3
 1000 FORMAT('0',5X,'THE ANGLE BETWEEN THE SUN VECTOR AND THE SPIN
     1      AXIS IS',1PE15.5,'DEG.')
      CALL EXIT
C
   20 CONTINUE
      IF(TIME.LE.TLAST) GO TO 100
      IF(ITSW.EQ.0) GO TO 90
      IF(WS2.LE.0.0D0) GO TO 90
      IF(DL2.GT.0.0D0) GO TO 90
      TDIF=TIME-TLAST
      CDEN=WS2-DL2
      TCROSS=TIME-TDIF*WS2/CDEN
C
      DO 30 I=1,IPLPRP
      TDIF=REF(I)*RAD/OMEG(3)
      TDIF=DABS(TDIF)
      TPULSE(I)=TCROSS+TDIF
      TOPLSE(I)=TPULSE(I)+TMEAN(I)
      TTSTOP(I)=TPULSE(I)+TTIM(4,I)-TTIM(1,I)
   30 CONTINUE
C
      ITSW=0
C
   90 CONTINUE
C
      TLAST=TIME
      DL2=WS2
C
  100 CONTINUE
C
      RETURN
C
      END
      FUNCTION QTIME(DECDAY)
      IMPLICIT REAL*8(A-H,O-Z)
C     CALCULATES SECOND OF THE CURRENT DAY FROM DECIMAL PART OF
C     SIMULATOR TIME
C
      IDAY=DECDAY
      DAY=IDAY
      QTIME=(DECDAY-DAY)*8.64D4
      RETURN
      END
C      RANDU
C
C     ..................................................................
C
C        SUBROUTINE RANDU
C
C        PURPOSE
C           COMPUTES UNIFORMLY DISTRIBUTED RANDOM REAL NUMBERS BETWEEN
C           0 AND 1.0 AND RANDOM INTEGERS BETWEEN ZERO AND
C           2**31. EACH ENTRY USES AS INPUT AN INTEGER RANDOM NUMBER
C           AND PRODUCES A NEW INTEGER AND REAL RANDOM NUMBER.
C
C        USAGE
C           CALL RANDU(IX,IY,YFL)
C
C        DESCRIPTION OF PARAMETERS
C           IX - FOR THE FIRST ENTRY THIS MUST CONTAIN ANY ODD INTEGER
C                NUMBER WITH NINE OR LESS DIGITS. AFTER THE FIRST ENTRY,
C                IX SHOULD BE THE PREVIOUS VALUE OF IY COMPUTED BY THIS
C                SUBROUTINE.
C           IY - A RESULTANT INTEGER RANDOM NUMBER REQUIRED FOR THE NEXT
C                ENTRY TO THIS SUBROUTINE. THE RANGE OF THIS NUMBER IS
C                BETWEEN ZERO AND 2**31
C           YFL- THE RESULTANT UNIFORMLY DISTRIBUTED, FLOATING POINT,
C                RANDOM NUMBER IN THE RANGE 0 TO 1.0
C
C        REMARKS
C           THIS SUBROUTINE IS SPECIFIC TO SYSTEM/360
C           THIS SUBROUTINE WILL PRODUCE 2**29 TERMS
C           BEFORE REPEATING
C
C        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
C           NONE
C
C        METHOD
C           POWER RESIDUE METHOD DISCUSSED IN IBM MANUAL C20-8011,
C           RANDOM NUMBER GENERATION AND TESTING
C
C     ..................................................................
C
      SUBROUTINE RANDO(IX,IY,YFL)
      IY=IX*65539
      IF(IY) 5,6,6
    5 IY=IY+2147483647+1
    6 YFL=IY
      YFL=YFL*.4656613E-9
      RETURN
      END
      SUBROUTINE RAST2(ANG2,ANG2D,ANG2DD)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CONSTS/PI,TWOPI,RADIAN
C
      COMMON/CRASTR/DELA(3),TAUA(4,3),ANG20(3),ADD0(3),TC(3),TTAB(4,3)
C
      COMMON/CSTVAL/TSTART,DUMM3(40)
C
      COMMON/ISECBD/I2BDY,NDOF2,IRAST,NDEP2,IARST(3),IRSCY(3)
C
      COMMON/RPOOL1/DUMM1(10),TIME,DUMM2(114)
C
C
      DIMENSION ANG2(3),ANG2D(3),ANG2DD(3)
C
C
      DT=TIME-TSTART
C
C     LOOP TO CALCULATE PRESCRIBED MOTION FOR EACH AXIS
C
      DO 100 I=1,3
      ANG2(I)=ANG20(I)
      ITEST=IARST(I)
      DA=0.0D0
      D1A=0.0D0
      D2A=0.0D0
C
      IF(ITEST.EQ.0) GO TO 90
C
      DT1=DT-TAUA(1,I)
      IF(DT1.LT.0.0D0) GO TO 90
C
      TCYC=TC(I)
      N=DT1/TCYC
C
      IF(N.LT.IRSCY(I)) GO TO 10
      IF(ITEST.EQ.1) GO TO 90
      DA=DELA(I)*IRSCY(I)
      GO TO 90
C
   10 CONTINUE
C
      T2=TAUA(2,I)
      T3=TAUA(3,I)
      T4=TAUA(4,I)
C
C     CALCULATE TIME RELATIVE TO START OF THIS CYCLE
C
      DTC=DT1-N*TCYC
C
C     SELECT TYPE OF CYCLE
C
      IF(ITEST.EQ.2) GO TO 50
C
C     TYPE 1 CYCLE
C
      TCL=TCYC/2.0D0
C
      DEL=DELA(I)
      ADD=ADD0(I)
      IF(DTC.LE.TCL) GO TO 20
C
C     IN SECOND HALF CYCLE
C
      DTC=DTC-TCL
      DA=DEL
      DEL=-DEL
      ADD=-ADD
C
   20 CONTINUE
C
      IF(DTC.LE.TTAB(1,I)) GO TO 90
      COEF=T3*ADD/PI
      IF(DTC.GT.TTAB(2,I)) GO TO 25
      T=DTC-TTAB(1,I)
      ARG=PI*T/T3
      SARG=DSIN(ARG)
      CARG=DCOS(ARG)
      D2A=ADD*SARG
      D1A=COEF*(1.0D0-CARG)
      DA=DA+COEF*(T-T3*SARG/PI)
      GO TO 90
C
   25 CONTINUE
C
      IF(DTC.GT.TTAB(3,I)) GO TO 30
      T=DTC-TTAB(2,I)
      D1A=2.0D0*COEF
      DA=DA+COEF*(T3+2.0D0*T)
      GO TO 90
C
   30 CONTINUE
C
      IF(DTC.GT.TTAB(4,I)) GO TO 40
      T=DTC-TTAB(3,I)
      ARG=PI*T/T3
      SARG=DSIN(ARG)
      CARG=DCOS(ARG)
      D2A=-ADD*SARG
      D1A=COEF*(1.0D0+CARG)
      DA=DA+COEF*(T3+2.0D0*T4+T+T3*SARG/PI)
      GO TO 90
C
   40 CONTINUE
C
      DA=DA+DEL
      GO TO 90
C
   50 CONTINUE
C
C     TYPE 2 CYCLE
C
      DEL=DELA(I)
      DA=N*DEL
      D1A=0.0D0
      D2A=0.0D0
      IF(DTC.LE.TTAB(1,I)) GO TO 60
      DA=DA+DEL
      GO TO 90
C
   60 CONTINUE
C
      T=DTC
      ARG=TWOPI*T/T2
      SARG=DSIN(ARG)
      CARG=DCOS(ARG)
      COEF=ADD0(I)*T2/TWOPI
C
      D2A=ADD0(I)*SARG
      D1A=COEF*(1.0D0-CARG)
      DA=DA+COEF*(T-T2*SARG/TWOPI)
C
   90 CONTINUE
C
      ANG2(I)=ANG2(I)+DA
      ANG2D(I)=D1A
      ANG2DD(I)=D2A
C
      ANG2(I)=ANG2(I)*RADIAN
      ANG2D(I)=ANG2D(I)*RADIAN
      ANG2DD(I)=ANG2DD(I)*RADIAN
C
  100 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE RASTGM(ANG2,ANG2D,ANG2DD)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CRSTGM/ DELA(3),TAUA(4,3),ANG20(3),ADD0(3),TC(3),TTAB(4,3)
C
      COMMON/CSTVAL/ TSTART,DUMM3(40)
C
      COMMON/IRSTGM/ IGMRST,IARST(3),IRSCY(3)
C
      COMMON/RPOOL1/ DUMM1(10),TIME,DUMM2(114)
C
C
      DIMENSION ANG2(3),ANG2D(3),ANG2DD(3)
C
C
      DT=TIME-TSTART
C
C     LOOP TO CALCULATE PRESCRIBED MOTION FOR EACH AXIS
C
      DO 100 I=1,3
      ANG2(I)=ANG20(I)
      ITEST=IARST(I)
      DA=0.0D0
      D1A=0.0D0
      D2A=0.0D0
C
      IF(ITEST.EQ.0) GO TO 90
C
      DT1=DT-TAUA(1,I)
      IF(DT1.LT.0.0D0) GO TO 90
C
      TCYC=TC(I)
      N=DT1/TCYC
C
      IF(N.LT.IRSCY(I)) GO TO 10
      IF(ITEST.EQ.1) GO TO 90
      DA=DELA(I)*IRSCY(I)
      GO TO 90
C
   10 CONTINUE
C
      T2=TAUA(2,I)
      T3=TAUA(3,I)
      T4=TAUA(4,I)
C
C     CALCULATE TIME RELATIVE TO START OF THIS CYCLE
C
      DTC=DT1-N*TCYC
C
C     SELECT TYPE OF CYCLE
C
      IF(ITEST.EQ.2) GO TO 50
C
C     TYPE 1 CYCLE
C
      TCL=TCYC/2.0D0
C
      DEL=DELA(I)
      ADD=ADD0(I)
      IF(DTC.LE.TCL) GO TO 20
C
C     IN SECOND HALF CYCLE
C
      DTC=DTC-TCL
      DA=DEL
      DEL=-DEL
      ADD=-ADD
C
   20 CONTINUE
C
      IF(DTC.LE.TTAB(1,I)) GO TO 90
      COEF=T3*ADD/PI
      IF(DTC.GT.TTAB(2,I)) GO TO 25
      T=DTC-TTAB(1,I)
      ARG=PI*T/T3
      SARG=DSIN(ARG)
      CARG=DCOS(ARG)
      D2A=ADD*SARG
      D1A=COEF*(1.0D0-CARG)
      DA=DA+COEF*(T-T3*SARG/PI)
      GO TO 90
C
   25 CONTINUE
C
      IF(DTC.GT.TTAB(3,I)) GO TO 30
      T=DTC-TTAB(2,I)
      D1A=2.0D0*COEF
      DA=DA+COEF*(T3+2.0D0*T)
      GO TO 90
C
   30 CONTINUE
C
      IF(DTC.GT.TTAB(4,I)) GO TO 40
      T=DTC-TTAB(3,I)
      ARG=PI*T/T3
      SARG=DSIN(ARG)
      CARG=DCOS(ARG)
      D2A=-ADD*SARG
      D1A=COEF*(1.0D0+CARG)
      DA=DA+COEF*(T3+2.0D0*T4+T+T3*SARG/PI)
      GO TO 90
C
   40 CONTINUE
C
      DA=DA+DEL
      GO TO 90
C
   50 CONTINUE
C
C     TYPE 2 CYCLE
C
      DEL=DELA(I)
      DA=N*DEL
      D1A=0.0D0
      D2A=0.0D0
      IF(DTC.LE.TTAB(1,I)) GO TO 60
      DA=DA+DEL
      GO TO 90
C
   60 CONTINUE
C
      T=DTC
      ARG=TWOPI*T/T2
      SARG=DSIN(ARG)
      CARG=DCOS(ARG)
      COEF=ADD0(I)*T2/TWOPI
C
      D2A=ADD0(I)*SARG
      D1A=COEF*(1.0D0-CARG)
      DA=DA+COEF*(T-T2*SARG/TWOPI)
C
   90 CONTINUE
C
      ANG2(I)=ANG2(I)+DA
      ANG2D(I)=D1A
      ANG2DD(I)=D2A
C
      ANG2(I)=ANG2(I)*RADIAN
      ANG2D(I)=ANG2D(I)*RADIAN
      ANG2DD(I)=ANG2DD(I)*RADIAN
C
  100 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE RASTSA(ANG2,ANG2D,ANG2DD)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSAGRS/ DELA(3),TAUA(4,3),ANG20(3),ADD0(3),TC(3),TTAB(4,3)
C
      COMMON/CSTVAL/ TSTART,DUMM3(40)
C
      COMMON/ISAGRS/ IGMRST,IARST(3),IRSCY(3)
C
      COMMON/RPOOL1/ DUMM1(10),TIME,DUMM2(114)
C
C
      DIMENSION ANG2(3),ANG2D(3),ANG2DD(3)
C
C
      DT=TIME-TSTART
C
C     LOOP TO CALCULATE PRESCRIBED MOTION FOR EACH AXIS
C
      DO 100 I=1,3
      ANG2(I)=ANG20(I)
      ITEST=IARST(I)
      DA=0.0D0
      D1A=0.0D0
      D2A=0.0D0
C
      IF(ITEST.EQ.0) GO TO 90
C
      DT1=DT-TAUA(1,I)
      IF(DT1.LT.0.0D0) GO TO 90
C
      TCYC=TC(I)
      N=DT1/TCYC
C
      IF(N.LT.IRSCY(I)) GO TO 10
      IF(ITEST.EQ.1) GO TO 90
      DA=DELA(I)*IRSCY(I)
      GO TO 90
C
   10 CONTINUE
C
      T2=TAUA(2,I)
      T3=TAUA(3,I)
      T4=TAUA(4,I)
C
C     CALCULATE TIME RELATIVE TO START OF THIS CYCLE
C
      DTC=DT1-N*TCYC
C
C     SELECT TYPE OF CYCLE
C
      IF(ITEST.EQ.2) GO TO 50
C
C     TYPE 1 CYCLE
C
      TCL=TCYC/2.0D0
C
      DEL=DELA(I)
      ADD=ADD0(I)
      IF(DTC.LE.TCL) GO TO 20
C
C     IN SECOND HALF CYCLE
C
      DTC=DTC-TCL
      DA=DEL
      DEL=-DEL
      ADD=-ADD
C
   20 CONTINUE
C
      IF(DTC.LE.TTAB(1,I)) GO TO 90
      COEF=T3*ADD/PI
      IF(DTC.GT.TTAB(2,I)) GO TO 25
      T=DTC-TTAB(1,I)
      ARG=PI*T/T3
      SARG=DSIN(ARG)
      CARG=DCOS(ARG)
      D2A=ADD*SARG
      D1A=COEF*(1.0D0-CARG)
      DA=DA+COEF*(T-T3*SARG/PI)
      GO TO 90
C
   25 CONTINUE
C
      IF(DTC.GT.TTAB(3,I)) GO TO 30
      T=DTC-TTAB(2,I)
      D1A=2.0D0*COEF
      DA=DA+COEF*(T3+2.0D0*T)
      GO TO 90
C
   30 CONTINUE
C
      IF(DTC.GT.TTAB(4,I)) GO TO 40
      T=DTC-TTAB(3,I)
      ARG=PI*T/T3
      SARG=DSIN(ARG)
      CARG=DCOS(ARG)
      D2A=-ADD*SARG
      D1A=COEF*(1.0D0+CARG)
      DA=DA+COEF*(T3+2.0D0*T4+T+T3*SARG/PI)
      GO TO 90
C
   40 CONTINUE
C
      DA=DA+DEL
      GO TO 90
C
   50 CONTINUE
C
C     TYPE 2 CYCLE
C
      DEL=DELA(I)
      DA=N*DEL
      D1A=0.0D0
      D2A=0.0D0
      IF(DTC.LE.TTAB(1,I)) GO TO 60
      DA=DA+DEL
      GO TO 90
C
   60 CONTINUE
C
      T=DTC
      ARG=TWOPI*T/T2
      SARG=DSIN(ARG)
      CARG=DCOS(ARG)
      COEF=ADD0(I)*T2/TWOPI
C
      D2A=ADD0(I)*SARG
      D1A=COEF*(1.0D0-CARG)
      DA=DA+COEF*(T-T2*SARG/TWOPI)
C
   90 CONTINUE
C
      ANG2(I)=ANG2(I)+DA
      ANG2D(I)=D1A
      ANG2DD(I)=D2A
C
      ANG2(I)=ANG2(I)*RADIAN
      ANG2D(I)=ANG2D(I)*RADIAN
      ANG2DD(I)=ANG2DD(I)*RADIAN
C
  100 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE RD478
C      FOR REASONS KNOWN ONLY TO GOD, THIS PROGRAM DID NOT COMPILE WHEN
C     UNDER FORTRANH OPT=0 OR 1, USING THE XREF OPTION
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      INTEGER*2 KP
      REAL*4 TC
C
      REAL*4 D21,D22,D31,DI01,DI11,DI12,DI21,DI22,DI31,DA
C
      REAL*4 DK23,DK24,DK33,DK34,DK21,DK22,DK31,DK32
C
      COMMON/CSBNDS/CSUP(20),CSDN(20),GNIC(10)
C
      COMMON/CSTAT /SVCS(20),SVCDOT(20),CPARM(43)
C
      COMMON/DITCOM/D21(3,3,2),D22(3,3,2),D31(3,3,3,2),DI01(40)
     1             ,DI11(40,3),DI12(40,3),DI21(40,3,3),DI22(40,3,3)
     2             ,DI31(40,3,3,3),DA(40,3)
C
      COMMON/DRGCOM/ ER(3),HUBCDA(3),HUBCP(3),UJD0,HUBF(3),HUBM(3),IDRAG
C
      COMMON /ICNTRL/KNTRL(10)
C
      COMMON/MAGCOM/ COILS(3)
C
      COMMON/ORDRAG/ ADT(6),CM(6),GL0,RC,RCM,RL1,RL1MAG,
     *               RL2,RL2MAG,XLPS,YLPS,UC(2),WC(2)
C
      COMMON/ORJACC/ IT,KP(21,8),TC(20)
C
      COMMON/TWIFCM/DK23(3,3,2),DK24(3,3,2),DK33(3,3,3,2)
     1             ,DK34(3,3,3,2),DK21(40,3,3),DK22(40,3,3)
     2             ,DK31(40,3,3,3),DK32(40,3,3,3)
C
C     SETUP CALLS FOR COMMON/CSBNDS/
C
      CALL SETUP(8HCSUP    ,8,CSUP,20)
      CALL SETUP(8HCSDN    ,8,CSDN,20)
      CALL SETUP(8HGNIC    ,8,GNIC,10)
C
C     SETUP CALLS FOR COMMON /CSTAT/
C
      CALL SETUP(8HCPARM   ,8,CPARM,43)
      CALL SETUP(8HSVCS    ,8,SVCS    ,20)
C
C     SETUP CALLS FOR COMMON/DRGCOM/
C
      CALL SETUP(8HER      ,8,ER,3)
      CALL SETUP(8HHUBCDA  ,8,HUBCDA,3)
      CALL SETUP(8HHUBCP   ,8,HUBCP,3)
      CALL SETUP(8HUJD0    ,8,UJD0)
      CALL SETUP(8HIDRAG   ,4,IDRAG)
C
C
C     SETUP CALLS FOR COMMON /ICNTRL/
      CALL SETUP(8HKNTRL   ,4,KNTRL   ,10)
C     SETUP CALLS FOR COMMON/MAGCOM/
C
      CALL SETUP(8HCOILS   ,8,COILS,3)
C
C     SETUP CALLS FOR COMMON/ORDRAG/
C
      CALL SETUP(8HADT     ,8,ADT,6)
      CALL SETUP(8HCM      ,8,CM,6)
      CALL SETUP(8HGL0     ,8,GL0)
      CALL SETUP(8HRC      ,8,RC)
      CALL SETUP(8HRCM     ,8,RCM)
      CALL SETUP(8HRL1     ,8,RL1)
      CALL SETUP(8HRL2     ,8,RL2)
      CALL SETUP(8HXLPS    ,8,XLPS)
      CALL SETUP(8HYLPS    ,8,YLPS)
C
C     SETUP CALLS FOR COMMON/ORJACC/
C
      CALL SETUP(8HIJACCT  ,4,IT)
      CALL SETUP(8HKP      ,2,KP,21,8)
      CALL SETUP(8HTC      ,4,TC,20)
C
C     SETUP CALLS FOR DITCOM
C
      CALL SETUP(8HD21     ,4,D21,3,3,2)
      CALL SETUP(8HD22     ,4,D22,3,3,2)
      CALL SETUP(8HD31     ,4,D31,3,3,3,2)
      CALL SETUP(8HDI01    ,4,DI01,40)
      CALL SETUP(8HDI11    ,4,DI11,40,3)
      CALL SETUP(8HDI12    ,4,DI12,40,3)
      CALL SETUP(8HDI21    ,4,DI21,40,3,3)
      CALL SETUP(8HDI22    ,4,DI22,40,3,3)
      CALL SETUP(8HDI31    ,4,DI31,40,3,3,3)
      CALL SETUP(8HDA      ,4,DA,40,3)
C
C     SETUP CALLS FOR TWIFCM
C
      CALL SETUP(8HDK23    ,4,DK23,3,3,2)
      CALL SETUP(8HDK24    ,4,DK24,3,3,2)
      CALL SETUP(8HDK33    ,4,DK33,3,3,3,2)
      CALL SETUP(8HDK34    ,4,DK34,3,3,3,2)
      CALL SETUP(8HDK21    ,4,DK21,40,3,3)
      CALL SETUP(8HDK22    ,4,DK22,40,3,3)
      CALL SETUP(8HDK31    ,4,DK31,40,3,3,3)
      CALL SETUP(8HDK32    ,4,DK32,40,3,3,3)
C
C
      RETURN
C
      END
      SUBROUTINE RD481
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CONDMP/IDPHLD
C
      COMMON/CRASTR/DELA(3),TAUA(4,3),ANG20(3),ADD0(3),TC(3),TTAB(4,3)
C
      COMMON/CSECBD/SECM,SECI(3,3),ZBAR2(3),YI02(3),ZZ2(3,3),ZZ2Y(3,3)
     1             ,YZ2(3),YZT(3),ZB(3),YIZ02(3)
C
      COMMON/DPCONS/DPPARM(200),IDPCS(50)
C
      COMMON/DPCSIC/DPIC(50),DPUP(50),DPDN(50)
C
      COMMON/GPCONS/GPPARM(200),IGPCS(50)
C
      COMMON/GPINCS/GPICS(50),GPUP(50),GPDN(50)
C
      COMMON/ISECBD/I2BDY,NDOF2,IRAST,NDEP2,IARST(3),IRSCY(3)
C
C
      COMMON/SECICS/GAM20,ALP20,BET20,B0(3,3),GAM2I,ALP2I,BET2I
     1             ,OM2I(3),SBUP(2),SBDN(2)
C
      COMMON/SBINTF/SBK1(3),SBK2(3),SBSTA(3),SBDM(3)
C
      COMMON/ACFILT/ACPARM(20),IACFLT(20)
C
C
      CALL SETUP(8HIDPHLD  ,4,IDPHLD)
C
      CALL SETUP(8HDELA    ,8,DELA,3)
      CALL SETUP(8HTAUA    ,8,TAUA,4,3)
      CALL SETUP(8HANG20   ,8,ANG20,3)
      CALL SETUP(8HADD0    ,8,ADD0,3)
      CALL SETUP(8HRSTCYC  ,8,TC,3)
      CALL SETUP(8HTTAB    ,8,TTAB,4,3)
C
      CALL SETUP(8HSECM    ,8,SECM)
      CALL SETUP(8HSECI    ,8,SECI,3,3)
      CALL SETUP(8HZBAR2   ,8,ZBAR2,3)
      CALL SETUP(8HYI02    ,8,YI02,3)
C
      CALL SETUP(8HDPPARM  ,8,DPPARM,200)
      CALL SETUP(8HIDPCS   ,4,IDPCS,50)
C
      CALL SETUP(8HDPIC    ,8,DPIC,50)
      CALL SETUP(8HDPUP    ,8,DPUP,50)
      CALL SETUP(8HDPDN    ,8,DPDN,50)
C
      CALL SETUP(8HGPPARM  ,8,GPPARM,200)
      CALL SETUP(8HIGPCS   ,4,IGPCS,50)
C
      CALL SETUP(8HGPICS   ,8,GPICS,50)
      CALL SETUP(8HGPUP    ,8,GPUP,50)
      CALL SETUP(8HGPDN    ,8,GPDN,50)
C
C
      CALL SETUP(8HI2BDY   ,4,I2BDY)
      CALL SETUP(8HNDOF2   ,4,NDOF2)
      CALL SETUP(8HIRAST   ,4,IRAST)
      CALL SETUP(8HIARST   ,4,IARST,3)
      CALL SETUP(8HIRSCY   ,4,IRSCY,3)
C
C
      CALL SETUP(8HGAM20   ,8,GAM20)
      CALL SETUP(8HALP20   ,8,ALP20)
      CALL SETUP(8HBET20   ,8,BET20)
      CALL SETUP(8HGAM2I   ,8,GAM2I)
      CALL SETUP(8HALP2I   ,8,ALP2I)
      CALL SETUP(8HBET2I   ,8,BET2I)
      CALL SETUP(8HOM2I    ,8,OM2I,3)
      CALL SETUP(8HSBUP    ,8,SBUP,2)
      CALL SETUP(8HSBDN    ,8,SBDN,2)
C
      CALL SETUP(8HSBK1    ,8,SBK1,3)
      CALL SETUP(8HSBK2    ,8,SBK2,3)
      CALL SETUP(8HSBSTA   ,8,SBSTA,3)
      CALL SETUP(8HSBDM    ,8,SBDM,3)
C
      CALL SETUP(8HACPARM  ,8,ACPARM,20)
      CALL SETUP(8HIACFLT  ,4,IACFLT,20)
C
C
C
      RETURN
C
      END
      SUBROUTINE READER
C
        IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 NSUBX,JARRAY,ISUBD
      INTEGER*4 ACNTRL
C
C                       CALLS SETUP FOR ALL VARIABLES TO BE READ IN
C
      COMMON/ANTENA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3),ZBZ(3,10),
     .               NELMTS,NDAMPR,MODES(10)
C
      COMMON/CCNVRT/ BDYMI(3,3),DPRMI(3,3),EMODLS(10),RTUBE(10),
     .               HTUBE(10),THERMC(10),TIPMS(10),C(10)
C
      COMMON/CFNALP/ SCO,CIZO(3,3),CIYO(3,3),DONA(3,10),DONB(3,10)
     .              ,CDAMP(3,10)
C
      COMMON/CRATIO/ RATIO
C
      COMMON/CSOLAR/ SAO(10),SKA(9),SKB(9),SKOA(10,3),SKOB(10,3),
     .               STMK(10),SKAA(10,9),SKBB(10,9)
C
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10)
C
      COMMON/DMMNT1/ ZKBM(6),FMAK(10),FMBK(10),ARTETA(3),CMTORK(3),
     .               ITORK,IBENDM,ITENSE,ITNS1
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/ISHADE/ IPLANS,ISATSH,IWRTTF
C
C
      COMMON/IKPLR/IKPLER
      COMMON/IPRYRT/IPRY
      COMMON/JBTEST/ IBTEST
C
      COMMON/LIBDPR/ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,ZMDO,
     *              ZMDBO,CNV,DECAY
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/NODER / NDER,NOPT
C
      COMMON/PLANSH/ OCCRIT,TAUPL
C
      COMMON/PLOTIT/ XMIN(11),XMAX(11),YMIN(11),YMAX(11),IFSCAL,
     .               KPLOTS(253)
C
      COMMON/PLTCOM/IPLMOD,IKMOD
C
      COMMON/PRESUR/ DTOO,POO
      COMMON/PRYRAT/PRAT,RRAT,YRAT
C
C
      COMMON/PWHEEL/ XMOMIN(3),DVMOM(3),VMOM(3)
C
      COMMON/RATTDE/ DTMXA,PXI,PXO,EIT,REFTIM,TMX1,TMX2,CMX,ISW
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
C
      COMMON/RMGNTC/ SMAGI(3),DPMAG(3),SFMAG,MAGFLD
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/RTDIST/ TDIS(10)
C
      COMMON/RUNOUT/ LCPU
C
      COMMON/RVISCS/ NSUBX(3),YARRAY(3),RADTBE,VISCTY,RADRNG,DENSTY,
     .               JARRAY(3),SSUBY,OMEGL,ISUBD
C
      COMMON/SATLSH/ TAUK(10),OCULTK(10),RADSH
C
      COMMON/TJAN1/ T
C
      COMMON/XIN1  / PSI1,THET1,PHI1,ETTA,ZETTA,ITEST1
C
      COMMON/XIN2  / ALFAE,BETAE,GAMAE,OMBC(3),ITEST2
C
      COMMON/XIN3  / ALFAEK(10),BETAEK(10),GAMAEK(10),ETTAD,ZETTAD
C
C
C
C
C                       CALL SETUP FOR LABELED COMMON ANTENA
C
      CALL SETUP(8HA       ,8,A,10,3)
      CALL SETUP(8HADOT    ,8,ADOT,10,3)
      CALL SETUP(8HB       ,8,B,10,3)
      CALL SETUP(8HBDOT    ,8,BDOT,10,3)
      CALL SETUP(8HDIN     ,8,DIN,10,3)
      CALL SETUP(8HDINDOT  ,8,DINDOT,10,3)
      CALL SETUP(8HDOUT    ,8,DOUT,10,3)
      CALL SETUP(8HDOUTDT  ,8,DOUTDT,10,3)
      CALL SETUP(8HZBZ     ,8,ZBZ,3,10)
      CALL SETUP(8HNELMTS  ,4,NELMTS)
      CALL SETUP(8HNDAMPR  ,4,NDAMPR)
      CALL SETUP(8HMODES   ,4,MODES,10)
C
C                       CALL SETUP FOR LABELED COMMON CCNVRT
C
      CALL SETUP(8HBDYMI   ,8,BDYMI,3,3)
      CALL SETUP(8HDPRMI   ,8,DPRMI,3,3)
      CALL SETUP(8HEMODLS  ,8,EMODLS,10)
      CALL SETUP(8HRTUBE   ,8,RTUBE,10)
      CALL SETUP(8HHTUBE   ,8,HTUBE,10)
      CALL SETUP(8HTHERMC  ,8,THERMC,10)
      CALL SETUP(8HTIPMS   ,8,TIPMS,10)
      CALL SETUP(8HC       ,8,C,10)
C
C                       CALL SETUP FOR LABELED COMMON CFNALP
C
       CALL SETUP(8HSCO     ,8,SCO)
      CALL SETUP(8HCDAMP   ,8,CDAMP,3,10)
C
C                       CALL SETUP FOR LABELED COMMON CRATIO
C
      CALL SETUP(8HRATIO   ,8,RATIO)
C
C                       CALL SETUP FOR LABELED COMMON CSOLAR
C
       CALL SETUP(8HSAO     ,8,SAO,10)
       CALL SETUP(8HSKOA    ,8,SKOA,10,3)
       CALL SETUP(8HSKOB    ,8,SKOB,10,3)
       CALL SETUP(8HSTMK    ,8,STMK,10)
C
C                       CALL SETUP FOR LABELED COMMON CSTVAL
C
       CALL SETUP(8HZL0     ,8,ZL0,10)
       CALL SETUP(8HZL1     ,8,ZL1,10)
      CALL SETUP(8HZLA     ,8,ZLA,10)
C
C                       CALL SETUP FOR LABELED COMMON DMMNT1
C
      CALL SETUP('IBENDM  ',4,IBENDM)
      CALL SETUP('ITENSE  ',4,ITENSE)
      CALL SETUP('ITORK   ',4,ITORK)
      CALL SETUP('CMTORK  ',8,CMTORK,3)
      CALL SETUP('ZKBM    ',8,ZKBM,6)
C
C                       CALL SETUP FOR LABELED COMMON IMAIN1
C
      CALL SETUP(8HIDATE   ,4,IDATE)
      CALL SETUP(8HINOPT   ,4,INOPT)
      CALL SETUP(8HIPLOT   ,4,IPLOT)
      CALL SETUP(8HIPLTPE  ,4,IPLTPE)
      CALL SETUP(8HIIORB   ,4,IORB)
      CALL SETUP(8HITAPE   ,4,ITAPE)
C
C                       CALL SETUP FOR LABELED COMMON IPOOL1
C
      CALL SETUP('IGRAV   ',4,IGRAV)
      CALL SETUP('IDAMP   ',4,IDAMP)
      CALL SETUP('LK      ',4,LK,10)
      CALL SETUP('LLK     ',4,LLK,10)
C
C                       CALL SETUP FOR LABELED COMMON ISHADE
C
      CALL SETUP('IPLANS  ',4,IPLANS)
      CALL SETUP('ISATSH  ',4,ISATSH)
      CALL SETUP('IWRTTF  ',4,IWRTTF)
C
C                       CALL SETUP FOR LABELED COMMON JBTEST
C
      CALL SETUP(8HIBTEST  ,4,IBTEST)
C
C                       CALL SETUP FOR LABELED COMMON LIBDPR
C
      CALL SETUP(8HPHILD   ,8,PHILD)
      CALL SETUP(8HDPHILD  ,8,DPHILD)
      CALL SETUP(8HGAMLD   ,8,GAMLD)
      CALL SETUP(8HZMDO    ,8,ZMDO)
       CALL SETUP(8HZMDBO   ,8,ZMDBO)
      CALL SETUP(8HDECAY   ,8,DECAY)
      CALL SETUP(8HCNV     ,8,CNV)
       CALL SETUP(8HZK1D    ,8,ZK1D)
       CALL SETUP(8HZK2D    ,8,ZK2D)
       CALL SETUP(8HPHIS    ,8,PHIS)
      CALL SETUP(8HBETLD   ,8,BETLD)
C
C                       CALL SETUP FOR LABELED COMMON MOMENT
      CALL SETUP(8HIVISCS  ,4,IVISCS)
      CALL SETUP(8HIATTDE  ,4,IATTDE)
      CALL SETUP(8HIMGMTS  ,4,IMGMTS)
      CALL SETUP(8HIWHEEL  ,4,IWHEEL)
      CALL SETUP(8HNPULSE  ,4,NPULSE)
C
C                       CALL SETUP FOR LABELED COMMON NODER
C
      CALL SETUP ('NOPT    ',4,NOPT)
C
C                       CALL SETUP FOR LABELED COMMON PLANSH
C
      CALL SETUP('OCCRIT  ',8,OCCRIT)
      CALL SETUP('TAUPL   ',8,TAUPL)
C
C                       CALL SETUP FOR LABELED COMMON PLOTIT
C
      CALL SETUP ('XMIN    ',8,XMIN,11)
      CALL SETUP ('XMAX    ',8,XMAX,11)
      CALL SETUP ('YMIN    ',8,YMIN,11)
      CALL SETUP ('YMAX    ',8,YMAX,11)
      CALL SETUP ('IFSCAL  ',4,IFSCAL)
      CALL SETUP(8HKPLOTS  ,4,KPLOTS,253)
      CALL SETUP ('IPLMOD  ',4,IPLMOD)
      CALL SETUP ('IKMOD   ',4,IKMOD)
C
C                       CALL SETUP FOR LABELED COMMON PRESUR
C
       CALL SETUP(8HDTOO    ,8,DTOO)
       CALL SETUP(8HPOO     ,8,POO)
C
C                       CALL SETUP FOR LABELED COMMON PWHEEL
C
      CALL SETUP(8HXMOMIN  ,8,XMOMIN,3)
      CALL SETUP(8HVMOM    ,8,VMOM,3)
      CALL SETUP(8HDVMOM   ,8,DVMOM,3)
C
C                       CALL SETUP FOR LABELED COMMON RATTDE
C
      CALL SETUP(8HDTMXA   ,8,DTMXA)
      CALL SETUP(8HPXI     ,8,PXI)
      CALL SETUP(8HPXO     ,8,PXO)
      CALL SETUP(8HCMX     ,8,CMX)
C
C
C                       CALL SETUP FOR LABELED COMMON RMAIN1
C
       CALL SETUP(8HDELTAT  ,8,DELTAT)
       CALL SETUP(8HFACTOR  ,8,FACTOR)
       CALL SETUP(8HFREQ    ,8,FREQ)
       CALL SETUP(8HTSTOP   ,8,TSTOP)
       CALL SETUP(8HDELMIT  ,8,DELMIT)
       CALL SETUP(8HUPBND   ,8,UPBND,150)
       CALL SETUP(8HDNBND   ,8,DNBND,150)
C
C                       CALL SETUP FOR LABELED COMMON RMGNTC
C
      CALL SETUP(8HSMAGI   ,8,SMAGI,3)
      CALL SETUP(8HDPMAG   ,8,DPMAG,3)
      CALL SETUP(8HSFMAG   ,8,SFMAG)
      CALL SETUP(8HMAGFLD  ,4,MAGFLD)
C
C                       CALL SETUP FOR LABELED COMMON RPOOL1
C
       CALL SETUP(8HRHOK    ,8,RHOK,10)
      CALL SETUP(8HTIME    ,8,T)
      CALL SETUP(8HOMEG    ,8,OMEG,3)
C
C                       CALL SETUP FOR LABELED COMMON RPOOL2
C
      CALL SETUP(8HAERO    ,8,AERO)
      CALL SETUP(8HDTO1    ,8,DTO1)
      CALL SETUP(8HPO1     ,8,PO1)
C
C                       CALL SETUP FOR LABELED COMMON RPOOL3
C
       CALL SETUP(8HYIZM    ,8,YIZM,3,2)
C
C                       CALL SETUP FOR LABELED COMMON RTDIST
C
      CALL SETUP(8HTDIS    ,8,TDIS,10)
C
C                       CALL SETUP FOR LABELED COMMON RUNOUT
C
      CALL SETUP(8HLCPU    ,4,LCPU)
C
C                       CALL SETUP FOR LABELED COMMON RVISCS
C
      CALL SETUP(8HNSUBX   ,8,NSUBX,3)
      CALL SETUP(8HYARRAY  ,8,YARRAY,3)
      CALL SETUP(8HRADTBE  ,8,RADTBE)
      CALL SETUP(8HVISCTY  ,8,VISCTY)
      CALL SETUP(8HRADRNG  ,8,RADRNG)
      CALL SETUP(8HDENSTY  ,8,DENSTY)
      CALL SETUP(8HJARRAY  ,8,JARRAY,3)
      CALL SETUP(8HOMEGL   ,8,OMEGL)
C
C                       CALL SETUP FOR LABELED COMMON SATLSH
C
      CALL SETUP('TAUK    ',8,TAUK,10)
      CALL SETUP('OCULTK  ',8,OCULTK,10)
      CALL SETUP('RADSH   ',8,RADSH)
C
C                       CALL SETUP FOR LABELED COMMON TJAN1
C
      CALL SETUP('TIME    ',8,T)
C
C                       CALL SETUP FOR LABELED COMMON XIN1
C
      CALL SETUP(8HPSI1    ,8,PSI1)
      CALL SETUP(8HTHET1   ,8,THET1)
      CALL SETUP(8HPHI1    ,8,PHI1)
      CALL SETUP(8HETTA    ,8,ETTA)
      CALL SETUP(8HZETTA   ,8,ZETTA)
C
C                       CALL SETUP FOR LABELED COMMON XIN2
C
      CALL SETUP(8HALFAE   ,8,ALFAE)
      CALL SETUP(8HBETAE   ,8,BETAE)
      CALL SETUP(8HGAMAE   ,8,GAMAE)
C
      CALL SETUP('IPRY    ',4,IPRY)
      CALL SETUP(8HPRAT    ,8,PRAT)
      CALL SETUP(8HRRAT    ,8,RRAT)
      CALL SETUP(8HYRAT    ,8,YRAT)
C   END OF COMMON BLOCK PRYRAT
      CALL SETUP(8HOMBC    ,8,OMBC,3)
C                       CALL SETUP FOR LABELED COMMON XIN3
C
      CALL SETUP(8HALFAEK  ,8,ALFAEK,10)
      CALL SETUP(8HBETAEK  ,8,BETAEK,10)
      CALL SETUP(8HGAMAEK  ,8,GAMAEK,10)
      CALL SETUP(8HZETTAD  ,8,ZETTAD)
      CALL SETUP(8HETTAD   ,8,ETTAD)
C
C
      CALL READZ
      RETURN
      END
      SUBROUTINE READGP
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/INOMOT/ NOINTG,NOIOUT(20)
C
      CALL GMBLRD
C
      CALL GMBDRD
C
      CALL SAGMRD
C
      CALL THRMRD
C
      CALL WHREAD
C
      CALL VDMPRD
C
      CALL AWREAD
C
      CALL TRQORD
C
      CALL SETUP(8HNOINTG  ,4,NOINTG)
      CALL SETUP(8HNOIOUT  ,4,NOIOUT,20)
C
      RETURN
C
      END
      SUBROUTINE READTH
C
      IMPLICIT REAL*8(A-H,O-Z)
C
C    *****************************************************************
C    *                                                               *
C    *   READTH HAS BEEN MODIFIED TO CONTAIN THE ARRAY TABLE FOR     *
C    *   OVERLAYING PURPOSES. THE DIMENSION OF TABLE MUST BE AT      *
C    *   LEAST SEVEN TIMES THE NUMBER OF INPUT SYMBOLS DEFINED       *
C    *   BY SETUP CALLS.                                             *
C    *   THE PRESENT NUMBERS ARE; RD478  -  42, RD481  -  45         *
C    *                            READER - 136, READTH -  88         *
C    *                            READZ  - 129, READGP -   0         *
C    *                            TOTAL  - 440                       *
C    *                                                               *
C    *   MODIFICATION AS OF APRIL, 1981.                             *
C    *                                                               *
C    *****************************************************************
C
      REAL*8 I3,I2OVI3
      REAL*4 TABLE(4200)
C
      COMMON/THRUST/TV(3,2),TLOC(3,2),TTIM(4,2),TPAR(4,2),REF(2)
C
      COMMON/ITCNTL/IPULSE,ISPLSE,KPULSE,ITSW,IOTSW,IPLPRP
C
C   INSERT KEPLER ORBITAL PARAMETER INPUT OPTION
      COMMON/IKPLER/IKPLR
C
      COMMON/XKPLER/AS,E,F,EI,BW,W,BWDOT,WDOT
C
      COMMON/INUMP/ ISPNP
C
      COMMON/HOUTPT/ IHCALC,IHREF,IHFLAG
C
C   MOD. OF NEW WHEELS IN READTH
C
      COMMON/CWHEEL/VW(3),VSUR(3),VSDR(3)
C
C   MOD IN READTH
C
      COMMON/DEBUG1/ IAFM(5)
C
      COMMON/IACC/ IACOMP,IHUBAC,ITIPAC,IAFLAG
C
      COMMON/NUMACC/NUMHUB
C
      COMMON/ACCHUB/ YHUB(3,6),HUBACC(3,6),ACCRED(6),ALFAEA(6),
     *BETAEA(6),GAMAEA(6),DKAT(3,3,6)
C
      COMMON/SHAPES/ZXI(10,3),ZXIP(10,3),ZXIPP(10,3),ZZNP(10,3,3)
C
      COMMON/INPFFT/ICSD
C
      COMMON/GRNTST/ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY(3),
     *              GACC(3),GLOCAT(3),IGRUND,IALTUD,IGASBR
C
      COMMON/IPRYRT/IPRY,IGGANG
C
      COMMON/PRYRAT/PRAT,RRAT,YRAT
C
      COMMON/PUNCH / IPUN,IPUNCH
C
      COMMON/TMSINR/ TIPINR(3,10),RTSQ(3,10),XIPL(6),BETL(6)
C
      COMMON/INTTRP/ITPROT,NUMTIP(10),IRDBUG
C
      COMMON/ITW/ITWIST,ITWST1
C
      COMMON/RNEWR / ZA(10),I3(10),I2OVI3(10),
     *             ZDQ(10),ZJ(10),D2(10),D3(10)
C
      COMMON/INEWR/NKT(10),ICP,ICPS
C
      COMMON/RNEWV/CW(10,3),CDW(10,3)
C
      COMMON/TWIBND/TWIUP,TWIDN,TWDUP,TWDDN
C
C
      COMMON/COMSL1/ ZS101(2),ZS102(2),ZS111(6),ZS112(6),ZS113(6)
     *              ,ZS121(18),ZS122(18),ZS123(18),ZS124(18),ZS131(54)
     *              ,ZS132(54),ZS141(162),Z2S101(2),Z2S112(6)
     *              ,Z2S123(18),XLTEST
C
      COMMON/TWIDMP/ CDTW(3,10)
C   CALL SETUP FOR LABELLED COMMON XKPLER
      CALL WHERE(TABLE)
C
      CALL SETUP(8HIKPLR   ,4,IKPLR)
      CALL SETUP(8HAS      ,8,AS)
      CALL SETUP(8HE       ,8,E)
      CALL SETUP(8HF       ,8,F)
      CALL SETUP(8HEI      ,8,EI)
      CALL SETUP(8HBW      ,8,BW)
      CALL SETUP(8HW       ,8,W)
      CALL SETUP(8HBWDOT   ,8,BWDOT)
      CALL SETUP(8HWDOT    ,8,WDOT)
C    SETUP CALLS FOR LABELED COMMON/THRUST
C
      CALL SETUP(8HTVECTR  ,8,TV,3,2)
      CALL SETUP(8HTLOCAT  ,8,TLOC,3,2)
      CALL SETUP(8HTTIMES  ,8,TTIM,4,2)
      CALL SETUP(8HTPARAM  ,8,TPAR,4,2)
      CALL SETUP(8HREFANG  ,8,REF,2)
C
C     SETUP CALLS FOR LABELED COMMON/ITCNTL
C
      CALL SETUP(8HIPULSE  ,4,IPULSE)
      CALL SETUP(8HISPLSE  ,4,ISPLSE)
      CALL SETUP(8HIPLPRP  ,4,IPLPRP)
C
      CALL SETUP(8HISPNP   ,4,ISPNP)
      CALL SETUP(8HIHCALC  ,4,IHCALC)
      CALL SETUP(8HIHREF   ,4,IHREF)
C   ADD FOR ACCELERATION COMPUTATION
C
      CALL SETUP(8HIACOMP  ,4,IACOMP)
      CALL SETUP(8HIHUBAC  ,4,IHUBAC)
      CALL SETUP(8HITIPAC  ,4,ITIPAC)
      CALL SETUP(8HNUMHUB  ,4,NUMHUB)
      CALL SETUP(8HALFAEA  ,8,ALFAEA,6)
      CALL SETUP(8HBETAEA  ,8,BETAEA,6)
      CALL SETUP(8HGAMAEA  ,8,GAMAEA,6)
C
      CALL SETUP(8HYHUB    ,8,YHUB,3,6)
C
      CALL SETUP(8HZXI     ,8,ZXI,10,3)
      CALL SETUP(8HZXIP    ,8,ZXIP,10,3)
      CALL SETUP(8HZXIPP   ,8,ZXIPP,10,3)
      CALL SETUP(8HZZNP    ,8,ZZNP,10,3,3)
C
      CALL SETUP(8HVSUR    ,8,VSUR,3)
      CALL SETUP(8HVSDR    ,8,VSDR,3)
C
      CALL SETUP(8HICSD    ,4,ICSD)
C
C
C     INPUT FOR PITCH ROLL YAW RATE FOR G.G. OPTION
C
      CALL SETUP('IPRY    ',4,IPRY)
      CALL SETUP(8HPRAT    ,8,PRAT)
      CALL SETUP(8HRRAT    ,8,RRAT)
      CALL SETUP(8HYRAT    ,8,YRAT)
C
C     INPUT FOR TIP MASS INFORMATIONS
C
      CALL SETUP(8HITPROT  ,4,ITPROT)
      CALL SETUP(8HNUMTIP  ,4,NUMTIP,10)
      CALL SETUP(8HIRDBUG  ,4,IRDBUG)
      CALL SETUP(8HTIPINR  ,8,TIPINR,3,10)
      CALL SETUP(8HXIPL    ,8,XIPL,6)
      CALL SETUP(8HBETL    ,8,BETL,6)
C
C     CALL SETUP FOR LABELLED COMMON  GRNTST
C
      CALL SETUP(8HIGRUND  ,4,IGRUND)
      CALL SETUP(8HIALTUD  ,4,IALTUD)
      CALL SETUP(8HIGASBR  ,4,IGASBR)
      CALL SETUP(8HALFAEG  ,8,ALFAEG)
      CALL SETUP(8HDELTAG  ,8,DELTAG)
      CALL SETUP(8HPHASEG  ,8,PHASEG)
      CALL SETUP(8HALTUDE  ,8,ALTUDE)
      CALL SETUP(8HOMGY    ,8,OMGY,3)
      CALL SETUP(8HGACC    ,8,GACC,3)
      CALL SETUP(8HGLOCAT  ,8,GLOCAT,3)
C
C     CALL SETUP FOR COUPLED TWISTING AND BENDING COMPUTATION
C
      CALL SETUP(8HI2OVI3  ,8,I2OVI3,10)
      CALL SETUP(8HZA      ,8,ZA,10)
      CALL SETUP(8HZDQ     ,8,ZDQ,10)
      CALL SETUP(8HZJ      ,8,ZJ,10)
      CALL SETUP(8HNKT     ,4,NKT,10)
      CALL SETUP(8HITWIST  ,4,ITWIST)
      CALL SETUP(8HITWST1  ,4,ITWST1)
      CALL SETUP(8HCW      ,8,CW,10,3)
      CALL SETUP(8HCDW     ,8,CDW,10,3)
      CALL SETUP(8HD2      ,8,D2,10)
      CALL SETUP(8HD3      ,8,D3,10)
C
C     CALL SETUP FOR COMMON BLOCK CDATA
C
      CALL SETUP(8HTWIUP   ,8,TWIUP)
      CALL SETUP(8HTWIDN   ,8,TWIDN)
      CALL SETUP(8HTWDUP   ,8,TWDUP)
      CALL SETUP(8HTWDDN   ,8,TWDDN)
C
C
C
      CALL SETUP(8HZS101   ,8,ZS101,2)
      CALL SETUP(8HZS102   ,8,ZS102,2)
      CALL SETUP(8HZS111   ,8,ZS111,6)
      CALL SETUP(8HZS112   ,8,ZS112,6)
      CALL SETUP(8HZS113   ,8,ZS113,6)
      CALL SETUP(8HZS121   ,8,ZS121,18)
      CALL SETUP(8HZS122   ,8,ZS122,18)
      CALL SETUP(8HZS123   ,8,ZS123,18)
      CALL SETUP(8HZS124   ,8,ZS124,18)
      CALL SETUP(8HZS131   ,8,ZS131,54)
      CALL SETUP(8HZS132   ,8,ZS132,54)
      CALL SETUP(8HZS141   ,8,ZS141,162)
      CALL SETUP(8HZ2S101  ,8,Z2S101,2)
      CALL SETUP(8HZ2S112  ,8,Z2S112,6)
      CALL SETUP(8HZ2S123  ,8,Z2S123,18)
      CALL SETUP(8HXLTEST  ,8,XLTEST)
C
      CALL SETUP(8HIPUNCH  ,4,IPUNCH)
C
      CALL SETUP(8HCDTW    ,8,CDTW,3,10)
C
      CALL RD478
C
      CALL RD481
C
      CALL READGP
C
      RETURN
      END
      SUBROUTINE READZ
C
        IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 J2,J3,J4,J22
      INTEGER*4 DDPLY
C
      COMMON/CCMBNZ/ CMRK(10),Z01(4),Z02(4),Z03(4),Z04(4),Z11(12),
     .               Z12(12),Z13(12),Z14(12),Z15(12),Z16(12),Z21(36),
     .               Z22(36),Z23(36),Z24(36),Z25(36),Z26(36),Z27(36),
     .               Z28(36),Z31(108),Z32(108),Z33(108),Z34(108),
     .               Z35(108),Z41(324),Z42(324),Z43(324),ZK21(18),
     .               ZK22(18),ZK23(18),ZK31(54),ZK32(54),ZK33(54),
     .               ZK34(54),ZK35(54),ZK36(54),ZK41(162),ZK42(162),
     .               ZK43(162),ZK44(162),ZK45(162),ZK46(162),ZK47(162),
     .               ZK48(162),ZS01(2),ZS02(2),ZS11(6),ZS12(6),ZS13(6),
     .               ZS21(18),ZS22(18),ZS23(18),ZS24(18),ZS31(54),
     .               ZS32(54),ZS41(162),ZT21(108),ZT22(108),STAO(18),
     .               STA1(18),STA2(18),STBO(18),STB1(18),STB2(18),
     .               Z2S01(2),Z2S12(6),Z2S23(18)
C
      COMMON/CNBODY/ J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/CFINDX/ AX2CHK,TCHECK,LCHECK
C
      COMMON/CODPLY/ STANG,ANGTOL
C
      COMMON/DATOUT/ IDATA,MLAST
C
      COMMON/DEBUG1/ IAFM(5)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/DEBUG3/ ISWTCH
C
      COMMON/DEPLOY/ DDPLY,MDPLY
C
      COMMON/HAMOUT/ HAMILT,IHAMLT
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IODPLY/ ISDPLY,IRAXIS,ISAXIS,NCROSS,NPRINT
C
      COMMON/RSUNCL/ WE,TVER,ECLPTC
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/ XIN4 / UP(150),DN(150),CONSA,COMEG,AOOP,AOOPV,AOOP1,AOOPV1
     .              ,AIP,AIPV,AIP1,AIPV1,DOOP,DOOPV,DOOP1,DOOPV1,DIP,
     .               DIPV,DIP1,DIPV1,DUC,DUC1,DUCD,DUCD1
C
      COMMON/ZSPINR/ DTZMA,PZDT,CMZO,ISPIN3,JSPIN
C
C
C                       CALL SETUP FOR LABELED COMMON CCMBNZ
C
       CALL SETUP(8HZ01     ,8,Z01,4)
       CALL SETUP(8HZ02     ,8,Z02,4)
       CALL SETUP(8HZ03     ,8,Z03,4)
       CALL SETUP(8HZ04     ,8,Z04,4)
       CALL SETUP(8HZ11     ,8,Z11,12)
       CALL SETUP(8HZ12     ,8,Z12,12)
       CALL SETUP(8HZ13     ,8,Z13,12)
       CALL SETUP(8HZ14     ,8,Z14,12)
       CALL SETUP(8HZ15     ,8,Z15,12)
       CALL SETUP(8HZ16     ,8,Z16,12)
       CALL SETUP(8HZ21     ,8,Z21,36)
       CALL SETUP(8HZ22     ,8,Z22,36)
       CALL SETUP(8HZ23     ,8,Z23,36)
       CALL SETUP(8HZ24     ,8,Z24,36)
       CALL SETUP(8HZ25     ,8,Z25,36)
       CALL SETUP(8HZ26     ,8,Z26,36)
       CALL SETUP(8HZ27     ,8,Z27,36)
       CALL SETUP(8HZ28     ,8,Z28,36)
       CALL SETUP(8HZ31     ,8,Z31,108)
       CALL SETUP(8HZ32     ,8,Z32,108)
       CALL SETUP(8HZ33     ,8,Z33,108)
       CALL SETUP(8HZ34     ,8,Z34,108)
       CALL SETUP(8HZ35     ,8,Z35,108)
       CALL SETUP(8HZ41     ,8,Z41,324)
       CALL SETUP(8HZ42     ,8,Z42,324)
       CALL SETUP(8HZ43     ,8,Z43,324)
       CALL SETUP(8HZK21    ,8,ZK21,18)
       CALL SETUP(8HZK22    ,8,ZK22,18)
       CALL SETUP(8HZK23    ,8,ZK23,18)
       CALL SETUP(8HZK31    ,8,ZK31,54)
       CALL SETUP(8HZK32    ,8,ZK32,54)
       CALL SETUP(8HZK33    ,8,ZK33,54)
       CALL SETUP(8HZK34    ,8,ZK34,54)
       CALL SETUP(8HZK35    ,8,ZK35,54)
       CALL SETUP(8HZK36    ,8,ZK36,54)
       CALL SETUP(8HZK41    ,8,ZK41,162)
       CALL SETUP(8HZK42    ,8,ZK42,162)
       CALL SETUP(8HZK43    ,8,ZK43,162)
       CALL SETUP(8HZK44    ,8,ZK44,162)
       CALL SETUP(8HZK45    ,8,ZK45,162)
       CALL SETUP(8HZK46    ,8,ZK46,162)
       CALL SETUP(8HZK47    ,8,ZK47,162)
       CALL SETUP(8HZK48    ,8,ZK48,162)
       CALL SETUP(8HZS01    ,8,ZS01,2)
       CALL SETUP(8HZS02    ,8,ZS02,2)
       CALL SETUP(8HZS11    ,8,ZS11,6)
       CALL SETUP(8HZS12    ,8,ZS12,6)
       CALL SETUP(8HZS13    ,8,ZS13,6)
       CALL SETUP(8HZS21    ,8,ZS21,18)
       CALL SETUP(8HZS22    ,8,ZS22,18)
       CALL SETUP(8HZS23    ,8,ZS23,18)
       CALL SETUP(8HZS24    ,8,ZS24,18)
       CALL SETUP(8HZS31    ,8,ZS31,54)
       CALL SETUP(8HZS32    ,8,ZS32,54)
       CALL SETUP(8HZS41    ,8,ZS41,162)
       CALL SETUP(8HZT21    ,8,ZT21,108)
       CALL SETUP(8HZT22    ,8,ZT22,108)
       CALL SETUP(8HSTAO    ,8,STAO,18)
       CALL SETUP(8HSTA1    ,8,STA1,18)
       CALL SETUP(8HSTA2    ,8,STA2,18)
       CALL SETUP(8HSTBO    ,8,STBO,18)
       CALL SETUP(8HSTB1    ,8,STB1,18)
       CALL SETUP(8HSTB2    ,8,STB2,18)
       CALL SETUP(8HZ2S01   ,8,Z2S01,2)
       CALL SETUP(8HZ2S12   ,8,Z2S12,6)
       CALL SETUP(8HZ2S23   ,8,Z2S23,18)
C
C                       CALL SETUP FOR LABELED COMMON CNBODY
      CALL SETUP('J2      ',8,J2)
      CALL SETUP('J3      ',8,J3)
      CALL SETUP('J4      ',8,J4)
      CALL SETUP('J22     ',8,J22)
      CALL SETUP('ZJ20    ',8,ZJ20)
      CALL SETUP('ZMU     ',8,ZMU)
      CALL SETUP('WWO     ',8,WWO)
      CALL SETUP('FLAT    ',8,FLAT)
      CALL SETUP('AEARTH  ',8,AEARTH)
C
C                       CALL SETUP FOR LABELED COMMON CFINDX
C
      CALL SETUP('AX2CHK  ',8,AX2CHK)
      CALL SETUP('TCHECK  ',8,TCHECK)
      CALL SETUP('LCHECK  ',4,LCHECK)
C
C                       CALL SETUP FOR LABELED COMMON CODPLY
C
      CALL SETUP(8HSTANG   ,8,STANG)
      CALL SETUP(8HANGTOL  ,8,ANGTOL)
C
C                       CALL SETUP FOR LABELED COMMON DATOUT
C
      CALL SETUP ('IDATA   ',4,IDATA)
      CALL SETUP ('MLAST   ',4,MLAST)
C
C                       CALL SETUP FOR LABELED COMMON DEBUG1
C
      CALL SETUP(8HIAFM    ,4,IAFM,5)
C
C
C                       CALL SETUP FOR LABELED COMMON DEBUG2
C
      CALL SETUP('IOUT    ',4,IOUT)
      CALL SETUP('KLUGE   ',4,KLUGE)
C
C                       CALL SETUP FOR LABELED COMMON DEBUG3
C
      CALL SETUP(8HISWTCH  ,4,ISWTCH)
C
C                       CALL SETUP FOR LABELED COMMON DEPLOY
C
      CALL SETUP(8HDDPLY   ,4,DDPLY)
      CALL SETUP(8HMDPLY   ,4,MDPLY)
C
C                       CALL SETUP FOR LABELED COMMON HAMOUT
C
      CALL SETUP(8HIHAMLT  ,4,IHAMLT)
C
C                       CALL SETUP FOR LABELED COMMON IMAIN1
C
      CALL SETUP('IORB    ',4,IORB)
      CALL SETUP('ITAPE    ',4,ITAPE)
C
C                       CALL SETUP FOR LABELED COMMON IODPLY
C
      CALL SETUP(8HISDPLY  ,4,ISDPLY)
      CALL SETUP(8HIRAXIS  ,4,IRAXIS)
      CALL SETUP(8HISAXIS  ,4,ISAXIS)
      CALL SETUP(8HNCROSS  ,4,NCROSS)
      CALL SETUP(8HNPRINT  ,4,NPRINT)
C
C                       CALL SETUP FOR LABELED COMMON RSUNCL
C
      CALL SETUP('WE      ',8,WE)
      CALL SETUP('TVER    ',8,TVER)
      CALL SETUP('ECLPTC  ',8,ECLPTC)
C
C                       CALL SETUP FOR LABELED COMMON VECTRS
C
      CALL SETUP('XSAT    ',8,XSAT,3)
      CALL SETUP('XSATDT  ',8,XSATDT,3)
C
C                       CALL SETUP FOR LABELED COMMON XIN4
      CALL SETUP(8HUP      ,8,UP,150)
      CALL SETUP(8HDN      ,8,DN,150)
      CALL SETUP(8HCONSA   ,8,CONSA)
      CALL SETUP(8HCOMEG   ,8,COMEG)
      CALL SETUP(8HAOOP    ,8,AOOP)
      CALL SETUP(8HAOOPV   ,8,AOOPV)
      CALL SETUP(8HAOOP1   ,8,AOOP1)
      CALL SETUP(8HAOOPV1  ,8,AOOPV1)
      CALL SETUP(8HAIP     ,8,AIP)
      CALL SETUP(8HAIPV    ,8,AIPV)
      CALL SETUP(8HAIP1    ,8,AIP1)
      CALL SETUP(8HAIPV1   ,8,AIPV1)
      CALL SETUP(8HDOOP    ,8,DOOP)
      CALL SETUP(8HDOOPV   ,8,DOOPV)
      CALL SETUP(8HDOOP1   ,8,DOOP1)
      CALL SETUP(8HDOOPV1  ,8,DOOPV1)
      CALL SETUP(8HDIP     ,8,DIP)
      CALL SETUP(8HDIPV    ,8,DIPV)
      CALL SETUP(8HDIP1    ,8,DIP1)
      CALL SETUP(8HDIPV1   ,8,DIPV1)
      CALL SETUP(8HDUC     ,8,DUC)
      CALL SETUP(8HDUC1    ,8,DUC1)
      CALL SETUP(8HDUCD    ,8,DUCD)
      CALL SETUP(8HDUCD1   ,8,DUCD1)
C
C                       CALL SETUP FOR LABELED COMMON ZSPINR
C
      CALL SETUP(8HDTZMA   ,8,DTZMA)
      CALL SETUP(8HPZDT    ,8,PZDT)
      CALL SETUP(8HCMZO    ,8,CMZO)
      CALL SETUP(8HISPIN3  ,4,ISPIN3)
C
      RETURN
      END
      SUBROUTINE RELOC(DEPEND)
C
C        'RELOC' STORES THE INPUT ELEMENT DEFLECTIONS AND VELOCITIES
C        INTO THE DEPEND ARRAY FOR THE INITIAL CASE.
C
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON /ANTENA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .                DINDOT(10,3),DOUT(10,3),DOUTDT(10,3),ZBZ(3,10),
     .                NELMTS,NDAMPR,MODES(10)
C
      COMMON /IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .                LK(10),LLK(10)
C
      COMMON /RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .                ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .                ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      DIMENSION DEPEND(150)
      ISUM=0
      DO 30 K=1,IK
      IF (NK(K) .EQ. 0)  GO TO 30
      ISUM=ISUM+NK(K)
   30 CONTINUE
      IF (ISUM .EQ. 0)  GO TO 110
   40 IKOUNT=9
      IF (IDAMP .EQ. 1)  IKOUNT=11
      IA=2*ISUM
      DO 70 K=1,IK
      M=NK(K)
      IF (M .EQ. 0)  GO TO 70
      L=K-K1
      DO 60 I=1,M
      IC1=IKOUNT+I
      IC2=IC1+M
      IC3=IC1+IA
      IC4=IC3+M
      IF (K .GT. K1)  GO TO 50
      IF(DABS(DIN(K,I)).LE.10.0D-30) DIN(K,I)=0.0D0
      IF(DABS(DINDOT(K,I)).LE.10.0D-30) DINDOT(K,I)=0.0D0
      IF(DABS(DOUT(K,I)).LE.10.0D-30) DOUT(K,I)=0.0D0
      IF(DABS(DOUTDT(K,I)).LE.10.0D-30) DOUTDT(K,I)=0.0D0
      DEPEND(IC1)=DOUT(K,I)
      DEPEND(IC2)=DOUTDT(K,I)
      DEPEND(IC3)=DIN(K,I)
      DEPEND(IC4)=DINDOT(K,I)
      GO TO 60
   50 IF(DABS(A(L,I)).LE.10.0D-30) A(L,I)=0.0D0
      IF(DABS(ADOT(L,I)).LE.10.0D-30) ADOT(L,I)=0.0D0
   80 IF(DABS(B(L,I)).LE.10.0D-30) B(L,I)=0.0D0
      IF(DABS(BDOT(L,I)).LE.10.0D-30) BDOT(L,I)=0.0D0
      DEPEND(IC1)=A(L,I)
      DEPEND(IC2)=ADOT(L,I)
      DEPEND(IC3)=B(L,I)
      DEPEND(IC4)=BDOT(L,I)
   60 CONTINUE
      IKOUNT=IKOUNT+2*M
   70 CONTINUE
  110 N=1
      K2=IK-K1
      DO 130 K=1,IK
      L=K2+N
      IF ((K-K1) .GT. 0)  L=K-K1
      DO 120 I=1,3
  120 ZBZK(I,K)=ZBZ(I,L)
      N=N+1
  130 CONTINUE
      RETURN
      END
      SUBROUTINE RELOC2(DEPEND)
C
C        'RELOC2' STORES THE END CONDITIONS OF ELEMENT DEFLECTIONS AND
C        VELOCITIES INTO THE DEPEND ARRAY FOR STACKED CASES WHERE A CASE
C        CONTINUES FROM END CONDITIONS OF THE PREVIOUS ONE.
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON /CANTNA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .                DINDOT(10,3),DOUT(10,3),DOUTDT(10,3)
C
      COMMON /CONSTS/ PI,TWOPI,RADIAN
C
      COMMON /IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .                LK(10),LLK(10)
C
      COMMON/LIBDPR/ ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,
     .               ZMDO,ZMDBO,CNV,DECAY
C
      COMMON /RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .                ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .                ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      DIMENSION DEPEND(150)
C
      ISUM=0
      DO 30 K=1,IK
      IF (NK(K) .EQ. 0)  GO TO 30
      ISUM=ISUM+NK(K)
   30 CONTINUE
      IF (ISUM .EQ. 0)  GO TO 110
      IKOUNT=9
      IF (IDAMP .EQ. 1)  IKOUNT=11
      IA=2*ISUM
      DO 70 K=1,IK
      M=NK(K)
      IF (M .EQ. 0)  GO TO 70
      L=K-K1
      DO 60 I=1,M
      IC1=IKOUNT+I
      IC2=IC1+M
      IC3=IC1+IA
      IC4=IC3+M
      IF (K .GT. K1)  GO TO 50
      IF(DABS(DIN(K,I)).LE.10.0D-30) DIN(K,I)=0.0D0
      IF(DABS(DINDOT(K,I)).LE.10.0D-30) DINDOT(K,I)=0.0D0
      IF(DABS(DOUT(K,I)).LE.10.0D-30) DOUT(K,I)=0.0D0
      IF(DABS(DOUTDT(K,I)).LE.10.0D-30) DOUTDT(K,I)=0.0D0
      DEPEND(IC1)=DOUT(K,I)
      DEPEND(IC2)=DOUTDT(K,I)
      DEPEND(IC3)=DIN(K,I)
      DEPEND(IC4)=DINDOT(K,I)
      GO TO 60
   50 IF(DABS(A(L,I)).LE.10.0D-30) A(L,I)=0.0D0
      IF(DABS(ADOT(L,I)).LE.10.0D-30) ADOT(L,I)=0.0D0
      IF(DABS(B(L,I)).LE.10.0D-30) B(L,I)=0.0D0
      IF(DABS(BDOT(L,I)).LE.10.0D-30) BDOT(L,I)=0.0D0
      DEPEND(IC1)=A(L,I)
      DEPEND(IC2)=ADOT(L,I)
      DEPEND(IC3)=B(L,I)
      DEPEND(IC4)=BDOT(L,I)
   60 CONTINUE
      IKOUNT=IKOUNT+2*M
   70 CONTINUE
      IF (IDAMP .EQ. 0)  GO TO 110
      DEPEND(10)=PHILD*RADIAN
      DEPEND(11)=DPHILD*RADIAN
  110 RETURN
      END
       subroutine remtim(timelft,junk)
       timelft =100     
       return
       end
      SUBROUTINE RO1TAP(IER,IDREF,TMIN,X1,Y1,Z1,X2,Y2,Z2,IN)
C
C    THIS SUBROUTINE WAS MODIFIED ON JAN 12, 1970. THE FOLLOWING CHANGES
C    WERE MADE:
C      *ADAPTED TO ACCEPT EPHEM INPUT
C      *CONSTANTS HAVE BEEN CHANGED TO DODS COMPATIBLE
C      *COMPUTATION IS IN DOUBLE PRECISION
C      *DOUBLE PRECISION ENTRY POINTS HAVE BEEN ADDED
C      *DATA POINTS ARE ROUNDED TO WHOLE MINUTES
C
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*4 TMIN,X1,Y1,Z1,X2,Y2,Z2,DATLAM,ALAMB,AXIS,E,AINC,AM0,WZERO,
     2  OMEGA0,DATEWD,SECS,AINBUF,SSIN
      REAL*4 SX,SY,SZ,SVVX,SVVY,SVVZ,SD,STD,STS,SECHK,SELTAT,STD2,STS2
      DIMENSION SX(200,1),SZ(200,1),SY(200,1),SVVX(200,1),SVVY(200,1),SV
     1VZ(200,1)
      EQUIVALENCE(X(1,1),SX(1,1)),(Y(1,1),SY(1,1)),(Z(1,1),SZ(1,1)),
     1(SVVX(1,1),VVX(1,1)),(SVVY(1,1),VVY(1,1)),(SVVZ(1,1),VVZ(1,1)),
     2(SD,D),(STD,TD),(STS,TS),(SECHK,ECHK),(SELTAT,DELTAT),(STD2,TD2),
     3(STS2,TS2),(AINBUF(1),EINBUF(1))
         DIMENSION  GAR(2,1)
      DIMENSION X(100,1),TDS(1),TSS(1),TDE(1)
      DIMENSION Y(100,1),TSE(1)
      DIMENSION Z(100,1),NBRDY(12),IUNTS(1),ALCO2(6)
      DIMENSION VVX(100,1),ISKIP(1),TDSAV(1),IEND(1)
      DIMENSION VVY(100,1),TSSAV(1),TDSAV2(1)
      DIMENSION VVZ(100,1),TSSAV2(1),AINBUF(200),DATIN(1),EINBUF(350)
      DATA ALCO2(1)/-120.0/,ALCO2(2)/24.0/,ALCO2(3)/-12.0/
      DATA ALCO2(4)/12.0/,ALCO2(5)/-24.0/,ALCO2(6)/120.0/
      DATA NBRDY(1)/0/,NBRDY(2)/31/,NBRDY(3)/59/,NBRDY(4)/90/
      DATA NBRDY(5)/120/,NBRDY(6)/151/,NBRDY(7)/181/,NBRDY(8)/212/
      DATA NBRDY(9)/243/,NBRDY(10)/273/,NBRDY(11)/304/,NBRDY(12)/334/
      DATA IEPHEM,EPHEM/0,'EPHEM'/
      DATA IUNTS(1)/65535/,ISUB/0/,ISKIP(1)/0/,TDS/0.0D0/
      DATA IEND/0/,INIT/1/,ITYR/-99/
C
C           CONSTANTS ARE COMPATIBLE WITH DODS
C
         DATA   ERAD,TCAN/6378.166D0,806.81242D0/
      DATA DULKM,SECDUT / 1.0E-4,864.0/
         NAMELIST /IR/ TDAY,ZSIN,TS,TS2,TD,TD2,T2,T3,IROCK
      GOTO 30
      ENTRY DRO1TA(IER,IDREF,TMIN1,XR,YR,ZR,XV,YV,ZV,IN)
      ENTRY ORB1TA(IER,IDREF,TMIN1,X1,Y1,Z1,X2,Y2,Z2,IN)
      GOTO 31
      ENTRY DTAPRE(IN,IER,DBTEWD,TSIN,XR,YR,ZR,XV,YV,ZV)
      GOTO 32
   30 CONTINUE
C CONVERT INPUT TIME TO DAY COUNT AND SECONDS
4     TMIN1=TMIN
  31  CONTINUE
      
      ADAY=0.D0
      IDAY = TMIN1/1440.D0
      DCONST=IDAY*1440.0D00
      TSIN=(TMIN1-DCONST)*60.D00
    1 IDAY=IDREF+IDAY-121
      J=2
      DO 5 I=1,42
      ISUB=0
      IDAY=IDAY-365
      IF (MOD(J,4)) 2,2,3
    2 IDAY=IDAY-1
      ISUB=1
    3 IF (IDAY.LE.0) GO TO 10
    5 J=J+1
   10 IYR=56+J
      J=1
      TDAY=IDAY+365+ISUB
      GO TO 100
C DAY COUNT OF YEAR
      ENTRY TAPRE (IN,IER,DATEWD,SSIN,X1,Y1,Z1,X2,Y2,Z2)
      TSIN=SSIN
      DBTEWD=DATEWD
C    DOUBLE PRECISION ENTRY FOR TAPRE -DTAPRE-
   32 CONTINUE    
      J=1
C CONVERT DATE WORD TO DAYS OF YEAR
      ADAY=0.0D0
      IYR=DBTEWD/10000.0D0
      IMON=DBTEWD/100.0D0-DFLOAT(IYR)*100.0D0
      IF (MOD(IYR,4).EQ.0) ISUB=1
      IF (IMON.LE.2) ISUB=0
      TDAY=NBRDY(IMON)+DBTEWD-DFLOAT(IYR*100+IMON)*100.0D0+ISUB
C CHECK TO SEE IF TITLE RECORD HAS BEEN READ - IF NOT SKIP
100   IF(IUNTS(1).EQ.65535.OR.IUNTS(1).EQ.IN)GO TO 101
      ISKIP(1)=0
      IUNTS(1)=IN
      ITYR=-99
      TDS(1)=0.
      REWIND IN
      GO TO 4
101   IF(ISKIP(J).NE.0)GO TO 150
      REWIND IN
      GAR(1,J)=0.D0
      GAR(2,J)=0.D0
      READ(IN,END=715,ERR=720)(SX(I,1),I=1,20)
      IF(X(1,1).EQ.EPHEM) IEPHEM=1
      IF(IEPHEM.EQ.1) READ(IN,ERR=720) EINBUF
      ISKIP(J)=1
      IF(IEPHEM .EQ. 0) GO TO 147
      GAR(1,J)=X(2,1)
      GAR(2,J)=X(3,1)
      DATIN(J)=X(4,1)
      TDE(J)=X(8,1)
      TSE(J)=X(9,1)
      GO TO 150
  147 GAR(1,J)=SX(2,1)
      GAR(2,J)=SX(3,1)
      DATIN(J)=SX(4,1)
      TDE(J)=SX(8,1)
      TSE(J)=SX(9,1)
      DO 148 I=1,100
      X(I,1)=0.0D0
      Y(I,1)=0.0D0
      Z(I,1)=0.0D0
      VVX(I,1)=0.0D0
      VVY(I,1)=0.0D0
      VVZ(I,1)=0.0D0
  148 CONTINUE
      ECHK=0
      D=0
      TD=0
      TS=0
      DELTAT=0
      TD2=0
      TS2=0
  150 IF(INIT.EQ.0)GO TO 151
      INIT=0
      TCER=TCAN/ERAD
      DUER=DULKM*ERAD
      DEST=DULKM*ERAD*SECDUT/TCAN
  151 XR=0.0D0
      YR=0.0D0
      ZR=0.0D0
      XV=0.0D0
      YV=0.0D0
      ZV=0.0D0
      X1=0.0D0
      Y1=0.0D0
      Z1=0.0D0
      X2=0.0D0
      Y2=0.0D0
      Z2=0.0D0
C     IROCK - CHECKS FOR READ-BACKSPACE LOOP DURING VECTOR SEARCH
         IROCK = 0
         IEND(J) = 0
      TD=TDSAV(J)
      TS=TSSAV(J)
      TD2=TDSAV2(J)
      TS2=TSSAV2(J)
      IF (TDS(J).NE.0) GO TO 155
      IF(IEPHEM.EQ.1) GO TO 802
      READ(IN,END=715,ERR=720)SD,STD,STS,SELTAT,SD,(SX(I,J),SY(I,J),SZ(I
     1,J),SVVX(I,J),SVVY(I,J),SVVZ(I,J),I=1,100,2)
      READ(IN,END=715,ERR=720)SD,STD2,STS2,SD,SD,(SX(I,J),SY(I,J),SZ(I,J
     1),SVVX(I,J),SVVY(I,J),SVVZ(I,J),I=101,200,2)
      GO TO 803
  802 CONTINUE
      READ(IN,END=715,ERR=720)D,TD,TS,DELTAT,(X(I,J),Y(I,J),Z(I,J),VVX(I
     1,J),VVY(I,J),VVZ(I,J),I=1,50)
      READ(IN,END=715,ERR=720)D,TD2,TS2,D,(X(I,J),Y(I,J),Z(I,J),VVX(I,J)
     1,VVY(I,J),VVZ(I,J),I=51,100)
  803 CONTINUE
      CALL ROUND(D,TD,TS,DELTAT)
      CALL ROUND(D,TD2,TS2,D)
      TDS(J)=TD
      TSS(J)=TS
      TINC=TS2-TS
      IF (TD.LT.TD2) TINC=TINC+86400.0D0
C CHECK TO SEE THAT REQUESTED TIME IS NOT BEFORE START OF TAPE
  155 IF (TDAY.GT.TDS(J)) GO TO 160
      IF (TDAY.LT.TDS(J))  GO TO 700
      IF(TSIN.LT.TSS(J)+2.0D0*DELTAT.AND.TSIN.NE.TSS(J).AND.TSIN.NE.TSS(
     1J)+DELTAT) GO TO 700
C TIME IS NOT BEFORE TAPE START TIME
  160 TS2S=TS2
      IF ( (TD .EQ. TD2 - 1.0D0) .OR. (TD .EQ. TD2 + 364.0D0) .OR. (TD .
     1EQ.  TD2 + 365.0D0)) TS2S = TS2 + 86400.0D0
      IF(TDAY.EQ.TD.AND.TSIN.GE.TS+3.0D0*DELTAT.AND.TSIN.LE.TS2S+3.0D0*
     1    DELTAT.OR.TDAY.EQ.TD+1.AND.TSIN+86400.0D0.LE.TS2S+3.0D0*DELTAT
     2)       GO TO 50
      IF(TD.EQ.365.+TDAY.OR.TD.EQ.364.+TDAY.AND.TSIN+86400.D0.LE.TS2S+
     $3.0D0*DELTAT)GO TO 163
      GO TO 162
163   ISKIP(J)=0
      ITYR=-99
      TDS(J)=0.
      REWIND IN
      GO TO 4
162   CONTINUE
      DO 99 I=1,3
      IF(TDAY.EQ.TD.AND.TSIN.EQ.(TS+(I-1)*DELTAT)) GO TO 50
  99  CONTINUE
C READ ANOTHER RECORD
      IF (TDAY.GT.TD)  GO TO 40
      IF(TDAY.EQ.TD.AND.TSIN.GE.TS2S+3.0D0*DELTAT) GO TO 40
         IDUM1 = ((TD-TDAY)*86400.0D0+TS-TSIN)/TINC
         IRCNBR = IDUM1+3
      IF((TD.EQ.GAR(1,J)).AND.(TS.EQ.GAR(2,J))) GO TO 730
      DO 161 I=1,IRCNBR
  161 BACKSPACE IN
         IROCK = IROCK+1
      IF(IEPHEM.EQ.1) GO TO 804
      READ(IN,END=715,ERR=720)SD,STD,STS,SD,SD,(SX(I,J),SY(I,J),SZ(I,J),
     1SVVX(I,J),SVVY(I,J),SVVZ(I,J),I=1,100,2)
      GO TO 805
  804 CONTINUE
      READ(IN,END=715,ERR=720)D,TD,TS,D,(X(I,J),Y(I,J),Z(I,J),VVX(I,J),V
     1VY(I,J),VVZ(I,J),I=1,50)
  805 CONTINUE
         GO TO 43
C SAVE LAST INPUT ARRAY
   40 IF (IEND(J).EQ.255)  GO TO 710
      IF(IYR.GE.ITYR)GO TO 41
      ITYR=IYR
      ISKIP(J)=0
      TDS(J)=0.
      REWIND IN
      GO TO 4
41    DO 42 I=1,50
      II=I+50
      X(I,J)=X(II,J)
      Y(I,J)=Y(II,J)
      Z(I,J)=Z(II,J)
      VVX(I,J)=VVX(II,J)
      VVY(I,J)=VVY(II,J)
   42 VVZ(I,J)=VVZ(II,J)
      TD=TD2
      TS=TS2
   43    CONTINUE
      IF(IEPHEM.EQ.1) GO TO 806
      READ(IN,ERR=720,END=715)SECHK,STD2,STS2,SD,SD,(SX(I,J),SY(I,J),
     1SZ(I,J),SVVX(I,J),SVVY(I,J),SVVZ(I,J),I=101,200,2)
      GO TO 807
  806 CONTINUE
      READ(IN,ERR=720,END=715)ECHK,TD2,TS2,D,(X(I,J),Y(I,J),Z(I,J),
     1VVX(I,J),VVY(I,J),VVZ(I,J),I=51,100)
  807 CONTINUE
      IF(ECHK.GT.9999998.D0) GO TO 45
      CALL ROUND(ECHK,TD2,TS2,D)
      CALL ROUND(D,TD,TS,D)
      IF (TDAY-TD.GE.ADAY) TDAY=TDAY-ADAY
         IF(IROCK.GT. 2)   GO TO 730
      GO TO 160
   45 DO 46 I=1,50
      IF(X(I,J).GT.9999998.D0)GO TO 47
   46 CONTINUE
   47 TS2=TS+DELTAT*DFLOAT(I-3)
      IEND(J)=255
      GO TO 160
C VECTOR IS IN THIS RECORD
   50 TS12=TS
      ITYR=IYR
      IF (TSIN.LT.TS) TS12=TS-86400.0D0
      N=(TSIN-TS12)/DELTAT
      AN=TS12+DFLOAT(N)*DELTAT
      IF (TSIN-AN.NE.0.0D0) GO TO 60
      N=N+1
   51 CONTINUE
      XR=X(N,J)
      YR=Y(N,J)
      ZR=Z(N,J)
      XV=VVX(N,J)
      YV=VVY(N,J)
      ZV=VVZ(N,J)
      IER=6
 1000 CONTINUE
      IF(IEPHEM.EQ.1) GO TO 810
      XR=XR/ERAD
      YR=YR/ERAD
      ZR=ZR/ERAD
      XV=XV*TCER
      YV=YV*TCER
      ZV=ZV*TCER
      GO TO 811
  810 CONTINUE
      XR=XR/DUER
      YR=YR/DUER
      ZR=ZR/DUER
      XV=XV/DEST
      YV=YV/DEST
      ZV=ZV/DEST
  811 CONTINUE
      TSSAV2(J)=TS2
      TDSAV2(J)=TD2
      TSSAV(J)=TS
      TDSAV(J)=TD
      X1=XR
      Y1=YR
      Z1=ZR
      X2=XV
      Y2=YV
      Z2=ZV
      RETURN
C NORMAL  RETURN
C INTERPOLATE FOR VECTORS
   60 CAPT=(TSIN-AN)/DELTAT
      N=N+1
      DO 65 I=1,6
      AL=1.0D0
      IF (I.NE.1) AL=AL*(CAPT+2.0D0)
      IF (I.NE.2) AL=AL*(CAPT+1.0D0)
      IF (I.NE.3) AL=AL*CAPT
      IF (I.NE.4) AL=AL*(CAPT-1.0D0)
      IF (I.NE.5) AL=AL*(CAPT-2.0D0)
      IF (I.NE.6) AL=AL*(CAPT-3.0D0)
      AL=AL/ALCO2(I)
      IAL=N-3+I
      IF(X(IAL,J).EQ.0.D0) GO TO 61
      XR=XR+AL*X(IAL,J)
   61 IF(Y(IAL,J).EQ.0.D0) GO TO 62
      YR=YR+AL*Y(IAL,J)
   62 IF(Z(IAL,J).EQ.0.D0) GO TO 63
      ZR=ZR+AL*Z(IAL,J)
   63 IF(VVX(IAL,J).EQ.0.D0) GO TO 64
      XV=XV+AL*VVX(IAL,J)
   64 IF(VVY(IAL,J).EQ.0.D0) GO TO 66
      YV=YV+AL*VVY(IAL,J)
   66 IF(VVZ(IAL,J).EQ.0.D0) GO TO 65
      ZV=ZV+AL*VVZ(IAL,J)
   65 CONTINUE
      IER=6
      GO TO 1000
 700  IYR2=DATIN(J)/10000.D0
      IF (IYR2.LT.IYR)  GO TO 701
      IER=1
      X1=0.0D0
      Y1=0.0D0
      Z1=0.0D0
      X2=0.0D0
      Y2=0.0D0
      Z2=0.0D0
      TSSAV2(J)=TS2
      TDSAV2(J)=TD2
      TSSAV(J)=TS
      TDSAV(J)=TD
      RETURN
701   IF(TDAY-TD.GE.0.0D0.OR.TD.LT.TDS(J)) GO TO 160
      I1=0
      IF (MOD(IYR2,4).EQ.0) I1=1
      ADAY=365+I1
      TDAY=TDAY+ADAY
      GO TO 160
  710 IF (TDAY.EQ.TD.AND.(TSIN.EQ.TS2+DELTAT
     1.OR.TSIN.EQ.TS2+2.0D0*DELTAT.OR.TSIN.EQ.TS2+3.0D0*DELTAT)) GO TO 5
     *0
      ZSIN = TSIN
         WRITE(6,711)
         WRITE(6,IR)
  711    FORMAT(1H0,' **** PROGRAM HAS READ PAST END OF TAPE',/'  CHECK
     1VALIDITY OF TIME AND IDREF **** ')
  715    DO 716  KK=1,3
         BACKSPACE IN
  716    CONTINUE
      IF(IEPHEM.EQ.1) GO TO 808
      READ(IN,END=715,ERR=720)SD,STD,STS,SD,SD,(SX(I,J),SY(I,J),SZ(I,J),
     1SVVX(I,J),SVVY(I,J),SVVZ(I,J),I=1,100,2)
      READ(IN,END=715,ERR=720)SD,STD2,STS2,SD,SD,(SX(I,J),SY(I,J),SZ(I,J
     1),SVVX(I,J),SVVY(I,J),SVVZ(I,J),I=101,200,2)
      GO TO 809
  808 CONTINUE
      READ(IN,END=715,ERR=720)D,TD,TS,D,(X(I,J),Y(I,J),Z(I,J),VVX(I,J),
     1VVY(I,J),VVZ(I,J),I=1,50)
      READ(IN,END=715,ERR=720)D,TD2,TS2,D,(X(I,J),Y(I,J),Z(I,J),VVX(I,J)
     1,VVY(I,J),VVZ(I,J),I=51,100)
  809 CONTINUE
      CALL ROUND(D,TD2,TS2,D)
      CALL ROUND (D,TD,TS,D)
         IEND(J) = 0
      TSSAV2(J)=TS2
      TDSAV2(J)=TD2
      TSSAV(J)=TS
      TDSAV(J)=TD
      IER=2
      RETURN
720   IER = 3
      TSSAV2(J)=TS2
      TDSAV2(J)=TD2
      TSSAV(J)=TS
      TDSAV(J)=TD
      RETURN
  730 CONTINUE
         TDS(J) = 0.D0
         REWIND  IN
         ISKIP(J) = 0
      N=0
      T2=TS2+DELTAT
      T3=TS2+DELTAT*2.0D0
      IF(TSIN.EQ.TS2) N=51
      IF(TSIN.EQ.T2) N=52
      IF(TSIN.EQ.T3) N=53
      IF(N.GT.0) GO TO 51
         WRITE(6,731)
  731    FORMAT(1H0,' **** TAPE IS IN LOOP SEARCHING FOR VECTOR',/' CHEC
     KK TIME INPUTS TO INSURE THAT YOU ARE NOT TRYING TO READ BETWEEN TH
     LE 1ST 3 VECTORS OF RECORD 1')
      ZSIN = TSIN
         WRITE(6,IR)
         IER = 4
         RETURN
C TAPRE1 ENTRY - READ HEADER RECORD AND OBTAIN ORBITAL ELEMENTS
      ENTRY TAPRE1 (IN,DATLAM,ALAMB,AXIS,E,AINC,AM0,WZERO,OMEGA0,DATEWD,
     1SECS)
C ENTRY TAPRE2  ENTRY FOR DOUBLE PRECISION HEADER
      ENTRY TAPRE2(IN,DBTLAM,DLAMB,DAXIS,DE,DINC,DM0,DZERO,DMEGA0,DBTEWD
     1,DSEC)
      IF(IUNTS(1).EQ.65535.OR.IUNTS(1).EQ.IN)GO TO 515
      ISKIP(1)=0
      IUNTS(1)=IN
      ITYR=-99
      TDS(1)=0.0
      REWIND IN
      GO TO 4
515   J=1
      REWIND IN
      READ(IN,ERR=720)  AINBUF
      IF(EINBUF(1).NE.EPHEM)GO TO 516
      REWIND IN
      READ(IN,ERR=720)EINBUF
      IEPHEM=1
  516 TDS(J)=0.0D0
         IRCNBR = 0
      GAR(1,J)=0.D0
      GAR(2,J)=0.D0
      IF(IEPHEM.EQ.1) GO TO 812
      GAR(1,J)  = AINBUF(2)
      GAR(2,J)  = AINBUF(3)
      DATIN(J)=AINBUF(4)
      DLAMB=AINBUF(29)
      DAXIS=AINBUF(102)
      DE=AINBUF(103)
      DINC=AINBUF(117)
      DM0=AINBUF(114)
      DZERO=AINBUF(116)
      DMEGA0=AINBUF(118)
      DBTLAM=AINBUF(27)
      DBTEWD=AINBUF(191)*10000.0+AINBUF(192)*100.0+AINBUF(193)
      DSEC=AINBUF(194)*3600.0+AINBUF(195)*60.0+AINBUF(196)/1000.0
      TDE(J)=AINBUF(8)
      TSE(J)=AINBUF(9)
      GO TO 813
  812 CONTINUE
      GAR(1,J)=EINBUF(2)
      GAR(2,J)=EINBUF(3)
      DATIN(J)=EINBUF(4)
      DAXIS=EINBUF(50)/ERAD
      DE=EINBUF(51)
      DINC=EINBUF(52)
      DM0=EINBUF(55)
      DZERO=EINBUF(53)
      DMEGA0=EINBUF(54)
      DBTEWD=EINBUF(44)*10000.0D0+EINBUF(45)*100.0D0+EINBUF(46)
      DBTLAM=DBTEWD
      IF(DBTEWD.GT.EINBUF(4))DBTLAM=EINBUF(4)
      DSEC=EINBUF(47)*3600.0D0+EINBUF(48)*60.0D0+EINBUF(49)/1000.0D0
      TDE(J)=EINBUF(8)
      TSE(J)=EINBUF(9)
      DLAMB=EINBUF(197)
      READ(IN) EINBUF
  813 CONTINUE
      ALAMB=DLAMB
      AXIS=DAXIS
      E=DE
      AINC=DINC
      AM0=DM0
      WZERO=DZERO
      OMEGA0=DMEGA0
      DATEWD=DBTEWD
      DATLAM=DBTLAM
      SECS=DSEC
      ISKIP(J)=1
      RETURN
      END
      FUNCTION ROFUN(RO,OM,YT)
C
C     'ROFUN' IS A FUNCTION TO EVALUATE A TERM IN THE CALCULATION
C     OF THE INERTIAL VELOCITY OF THE CENTER OF MASS.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION RO(3),OM(3),YT(3)
      RO(1)=OM(2)*YT(3)-OM(3)*YT(2)
      RO(2)=OM(3)*YT(1)-OM(1)*YT(3)
      RO(3)=OM(1)*YT(2)-OM(2)*YT(1)
      ROFUN=1.0D0
      RETURN
      END
      SUBROUTINE ROOTS (A     ,NA    ,CROOTS,IRL   )
      IMPLICIT COMPLEX*16 (C),  REAL*8 (A-B,D-H,O-Z)
      DIMENSION         A(NA) ,CROOTS(NA)   ,Z(2)  ,ZS(2)
      EQUIVALENCE      (Z(1),CZ)     ,(ZS(1),CZS)
C
C.......................................................................
C
C   VERSION OF APRIL 5, 1976
C
C   PURPOSE:
C    THIS SUBROUTINE COMPUTES ANY DESIRED COMPLEX ROOTS (ZEROES) OF A
C    GIVEN POLYNOMIAL, IF APPROXIMATIONS TO THE DESIRED ROOTS ARE KNOWN.
C
C   METHOD:
C    NEWTON'S METHOD, AS DESCRIBED IN THE REFERENCE.
C
C   REFERENCE:
C    HENRICI, P., 'ELEMENTS OF NUMERICAL ANALYSIS', NEW YORK, WILEY,
C    1965, PAGE 84.
C
C   CALLING SEQUENCE EXPLANATION :
C
C     VARIABLE  I/O   DESCRIPTION
C     --------  ---   --------------------------------------------------
C     A          I    IS AN INPUT DIMENSION NA ARRAY OF REAL
C                     (NON-IMAGINARY) POLYNOMIAL COEFFICIENTS, STARTING
C                     WITH THE LOWEST POWER.
C     NA         I    IS THE NUMBER OF IMPUT COEFFICIENTS (ONE MORE
C                     THAN THE DEGREE OF THE POLYNOMIAL).
C     CROOTS    I/O   IS A COMPLEX*16 ARRAY OF DIMENSION NA
C                     CONTAINING THE STARTING APPROXIMATIONS TO THE
C                     DESIRED ROOTS ON INPUT AND THE SOLUTIONS ON
C                     OUTPUT.
C     IRL        I    IS THE NUMBER OF ROOTS (ZEROES) DESIRED TO BE
C                     SOLVED FOR
C
C   COMMON BLOCK PARAMETERS;
C    NONE
C
C   SUBROUTINES AND FUNCTIONS REQUIRED:
C    NONE
C
C   CALLED BY:
C    LOWALT
C
C.......................................................................
C
C
C   IR COUNTS ROOTS SOLVED SO FAR
C
      IR = 0
      N1 = NA - 1
C
  100 IR = IR + 1
      IF (IR .GT. IRL)  RETURN
C
C   IT COUNTS ITERATIONS ON THIS ROOT SO FAR
C
      IT = 0
C
C   CZ IS THE CURRENTLY ITERATED VALUE OF THE ROOT.
C
      CZ = CROOTS(IR)
C
  150 CB = A(NA)
      CC = A(NA)
C
      DO 200 I=1,N1
         J = NA - I
C
C   CB & CC ARE THE VALUES OF THE POLYNOMIAL(P(Z)) AND ITS DERIVATIVE
C                                                            (P'(Z)).
C
         CB = CZ*CB + A(J)
         IF (J .EQ. 1)  GO TO 200
C
         CC = CZ*CC + CB
  200 CONTINUE
C
      IT = IT + 1
C
C   THE RESULT OF THE LAST ITERATION IS SAVED IN CZS.
C
      CZS = CZ
C
C   NEWTONS METHOD SAYS THAT
C                  Z(I)  =  Z(I-1) - P(Z(I-1))/P'(Z(I-1))
C    TENDS TOWARD A ROOT OF THE POLYNOMIAL P(Z).
C
      CZ = CZ - CB/CC
C
C   THE CONVERGENCE CRITERION (DIF) IS THE SUM OF THE RELATIVE CHANGES
C   IN THE REAL AND IMMAGINARY PARTS OF THE ROOT (CZ).
C
      DIF =DABS((ZS(1) - Z(1))/ZS(1))
      IF (ZS(2) .NE. 0.D0)  DIF = DIF + DABS((ZS(2) - Z(2))/ZS(2))
C
C   IF THE CONVERGENCE CRITERION IS TOO LARGE, ITERATE AGAIN.
C
      IF (DIF .GT.1.D-14)  GO TO 150
C
C   OTHERWISE, THE CONVERGENCE IS COMPLETE.  STORE THE ANSWER FOR OUTPUT
C   AND START ON THE NEXT ROOT.
C
      CROOTS(IR) = CZ
      GO TO 100
C
      END
      SUBROUTINE ROUND(A,B,C,D)
C
C    THIS SUBROUTINE ACCEPTS CALENDAR TIME, JULIAN TIME, SECONDS OF DAY
C    AND TIME INCREMENT.  EACH OF THESE QUANTITIES IS ROUNDED AND THE
C    APPROPRIATE ADJUSTMENTS ARE MADE TO CALENDAR TIME IN THE EVENT OF A
C    DAY CHANGE.
C
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION AMON(12)
      DATA AMON/31.,0.,31.,30.,31.,30.,31.,31.,30.,31.,30.,31./
      AMON(2)=28
C
C    ROUND YR MO DAY, SECS OF DAY, AND DELTA TIME
C
      A=IDINT(A+0.5)
      B=IDINT(B+0.5)
      C=IDINT(C+0.5)
      D=IDINT(D+0.5)
C
C    TEST FOR SECONDS=86400
C
      IF(C .NE. 86400.) GO TO 95
      B=B+1.0
C
C                      CALENDAR ROUTINE
C    EXTRACT YEAR
C
      YR=A/10000.
C
C    TEST FOR LEAP YEAR
C
      AYR=0.
      IF(DMOD(YR,4.0D0) .EQ. 0.0) AYR=1.0
C
C    TEST FOR YEAR JUMP
C
      IF(B .LE. 365.0+AYR) GO TO 5
      B=B-365.0-AYR
      YR=YR+1
C
C     RETEST FOR LEAP YEAR
C
      AYR=0
      IF(DMOD(YR,4.0D0) .EQ. 0.0) AYR=1.0
    5 IF(AYR.NE.0.0)AMON(2)=29
      DAY=B
      AMN=0.0
C
C    COMPUTE NEW MONTH AND DAY
C
      DO 10 J=1,12
      AMN=AMN+AMON(J)
      IF(B .LE. AMN) GO TO 15
   10 DAY=B-AMON(J)
   15 AMN=J
      C=0.0
      A=DAY+100.*AMN+10000.*YR
   95 RETURN
      END
      SUBROUTINE RTSIDE(ZMG,FGA,FGB,IJK,K)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/RPOOL6/ FM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
      COMMON/RPOOL7/ X1A(3),X1B(3),X2A(3),X3B(3),X1AX(3,3),X1BX(3,3),
     .               X2AX(3,3),X3BX(3,3)
C
      DIMENSION GA(3,3),ZICM(3),SGAF(3,3),ZMG(7),FGA(3,10),FGB(3,10),
     .          CTM(3,3),FMT(3,3),DUM1(3,3),CFT(3,3),ZICMZ(3),DUM2(3,3)
C
        LTAP5 = 6
      CALL MPYMAT(GBAR,SA,DUM1,1,1,GA,DUM1)
       GO TO (100,200),IJK
  200   ZMG(1) = 0.0D0
       ZMG(2) =0.0D0
       ZMG(3) =0.0D0
C  GRAV. GRAD. FORCES FOR EQ.4,5,AND 6  (GG1)
        SY1 = 0.0D0
        SY2 = 0.0D0
        SY3 = 0.0D0
       DO 1 I=1,3
         S1  = 0.0D0
         S2  = 0.0D0
         S3  = 0.0D0
       DO 2 J=1,3
         SGA = GA(J,I)
        S1 = S1 + SA(J,1) * SGA
       S2 = S2 + SA(J,2) * SGA
    2   S3 = S3 + SA(J,3) * SGA
        WS = YBCM(I)/ZMS
       FC1 = CIY(1,I) - YBCM(1) * WS
       FC2 = CIY(2,I) - YBCM(2) * WS
       FC3 = CIY(3,I) - YBCM(3) * WS
       SY1 = SY1 -S2 *FC3 + S3 * FC2
       SY2 = SY2 +S1 *FC3 - S3 * FC1
    1  SY3 = SY3 - S1 * FC2 + S2 * FC1
       ZMG(4) = SY1
       ZMG(5) = SY2
       ZMG(6) = SY3
C  GRAV. GRAD. MOMENT FOR DAMPER BOOM (GG2)
      IF(IDAMP.EQ.0) GO TO 50
      DO 3 I=1,3
        S1 = 0.0D0
       DO 4 J=1,3
        WS = FM1(J,I)
    4   S1 = S1 +  WS * YBCM(J)/ZMS - WS * YIZM(J,1)
    3  ZICM(I) = S1
      CALL MPYMAT(SAT,GA,FM1,2,1,DUM1,SGAF)
        SY1 = 0.0D0
       DO 5 I=1,3
        S1 = 0.0D0
        S2 = 0.0D0
       DO 6 J=1,3
        WS = SGAF(J,I)
        S1 = S1 + FM1(J,1) *WS
    6   S2 = S2 + FM1(J,3) *WS
    5  SY1 = SY1+ S1*(CIZ(3,I)- SZ3*ZICM(I))- S2*(CIZ(1,I)-SZ1*ZICM(I))
       ZMG(7) = SY1
   50 RETURN
C    GRAV. GRAD. FORCES FOR A AND B EQUATIONS (GG4-GG5)
  100    NKN = NK(K)
       DO 11 I=1,3
       DO 11 J=1,3
   11    CTM(J,I) =  CMAT(I,J)
        IF(K-K1)300,300,301
  300   M = 1
       GO TO 13
  301   M = 2
   13   DO 15 I=1,3
        DO 15 J=1,3
   15   FMT(J,I) =  FM(I,J)
   16 CALL MPYMAT(CTM,FMT,DUM1,1,1,CFT,DUM1)
       DO 17 I=1,3
        S1 = 0.0D0
       DO 18 J=1,3
   18   S1 = S1+ CFT(I,J)* YBCM(J)/ZMS - CFT(I,J)* YIZM(J,M)-CTM(I,J)*
     1         ZBZK(J,K)
   17   ZICMZ(I) = S1
       CALL MPYMAT(GA,FM,CMAT,2,1,DUM2,DUM1)
       CALL MPYMAT(FMT,SAT,DUM1,2,1,DUM2,SGAF)
       DO 19 II =1,NKN
        SY1 = 0.0D0
        SY2 = 0.0D0
        XX1A= X1A(II)
        XX2A= X2A(II)
        XX1B = X1B(II)
        XX3B = X3B(II)
       DO 20 I=1,3
        S1  = 0.0D0
        S2  = 0.0D0
        S3  = 0.0D0
       DO 21 J=1,3
       DWS = SGAF(J,I)
        S1  = S1 + CMAT(J,1)*DWS
        S2  = S2 + CMAT(J,2)*DWS
        S3  = S3 + CMAT(J,3)*DWS
   21  CONTINUE
        WS  = ZICMZ(I)
       SY1  = SY1+ S1 * (X1AX(II,I)   - XX1A * WS) + S2*(X2AX(II,I)  -
     1        XX2A * WS)
       SY2  = SY2+ S1 * (X1BX(II,I)   - XX1B * WS)+S3*(X3BX(II,I)  -XX3B
     1        * WS)
   20 CONTINUE
       FGA(II,K) = SY1
   19  FGB(II,K) = SY2
   10 CONTINUE
      RETURN
      END
      SUBROUTINE RWHOUT
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10),TTST
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
      WRITE(50)TTST,(DEPEND(I),I=1,15),(DERIV(I),I=1,15)
      RETURN
      END
      SUBROUTINE SAGIM1(SY1,SY2,SY3,CIY)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CSAGIM/ AZIN(3,3),AZAX(3),AZCG(3),AZMS,AZYY(3,3),AZIAX(3,3)
     2              ,ZZAZ(3,3)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/SAGMWK/ DELT,GAMGM(6),GMRHS,DI,DIGAM(6)
     1              ,DZML(6,6),YAZB(3)
C
      COMMON/SAGOUT/ AZ,AZD,B(3,3),B0(3,3),B0B(3,3),C(3,3),B0BC(3,3)
     1              ,YAZ(3),ZAZM(3)
C
      COMMON/SAPRPL/ GMBAZ,GMBAZD
C
      COMMON/SARSOT/ AZDD,SARHST(3),SARHSR(3)
C
      COMMON/ISAGIM/ IGMBL,NAZIM,NA1
C
      COMMON/ISAGRS/ IRAST,IARST(3),IRSCY(3)
C
      COMMON/RPOOL1/ DUMV1(80),YBCM(3),DUMV2(42)
C
      COMMON/VARBLS/ DEP(150),DER(150)
C
C
C
      DIMENSION CIY(3,3),DM1(3,3),DM2(3,3),DM3(3,3),DM4(3,3),DM5(3,3)
      DIMENSION V1(3),V2(3),V3(3),V4(3),V5(3),V6(3),V7(3),V8(3),V9(3)
      DIMENSION ANGM(3), ANGMD(3),ANGMDD(3)
C
      IF(IGMBL.EQ.0) RETURN
C
C     SAGIM1 IS CALLED FROM FNDALP TO INCLUDE SINGLE AXIS GIMBLE MASS
C     PROPERTIES IN SYSTEM INERTIA PROPERTIES
C
      IF(IRAST.EQ.0) GO TO 110
C
      DO 103 I=1,3
      ANGM(I)  = 0.0D0
      ANGMD(I) = 0.0D0
      ANGMDD(I)= 0.0D0
  103 CONTINUE
C
      CALL RASTSA(ANGM,ANGMD,ANGMDD)
C
      AZ  = ANGM(1)
      AZD = ANGMD(1)
      AZDD= ANGMDD(1)
C
      GO TO 120
C
  110 CONTINUE
C
      AZ=DEP(NAZIM)
      AZD=DEP(NA1)
C
  120 CONTINUE
C
      GMBAZ=AZ/RADIAN
      GMBAZD=AZD/RADIAN
C
      SAZ=DSIN(AZ)
      CAZ=DCOS(AZ)
C
      B(1,1)=CAZ
      B(2,2)=CAZ
      B(1,2)=-SAZ
      B(2,1)=SAZ
C
      CALL MPYMAT(B0,B,DM1,1,1,B0B,DM1)
      CALL MPYMAT(B0B,C,DM1,1,1,B0BC,DM1)
C
      CALL MATV(1,B0B,AZCG,V1)
      CALL MATV(2,B0B,AZAX,V7)
      CALL ADDV(AZAX,V1,YAZ)
C
      CALL MPYMAT(B0B,AZYY,B0B,2,2,DM4,DM3)
C
      DO 5 I=1,3
      DO 4 J=1,3
      ZZAZ(I,J)=AZIAX(I,J)
       DM5(I,J)= AZYY(I,J) + AZMS*AZCG(I)*V7(J)
      CIY(I,J)=CIY(I,J)         +DM3(I,J)
     1         +AZMS*YAZ(I)*YAZ(J)
    4 CONTINUE
      V3(I)=            AZMS*YAZ(I)
      YBCM(I)=YBCM(I)+V3(I)
      ZAZM(I)=            AZMS*AZCG(I)
    5 CONTINUE
C
      SY1=SY1+V3(1)
      SY2=SY2+V3(2)
      SY3=SY3+V3(3)
C
      DELT     =ZZAZ(1,1)+ZZAZ(2,2)
C
      CALL MATV(2,B0B,AZAX,YAZB)
      V4(1)=-(ZZAZ(1,3)+ZAZM(1)*YAZB(3))
      V4(2)=-(ZZAZ(2,3)+ZAZM(2)*YAZB(3))
      V4(3)=ZZAZ(1,1)+ZAZM(1)*YAZB(1)+ZZAZ(2,2)+ZAZM(2)*YAZB(2)
      CALL MATV(1,B0B,V4,V1)
C
      DO 10 I=1,3
      GAMGM(  I)=B0B(I,2)*ZAZM(1)-B0B(I,1)*ZAZM(2)
      I3=I+3
      GAMGM(  I3)=V1(I)
   10 CONTINUE
C
C
      DI=1.0D0/DELT
C
      DO 15 J=1,6
      DIGAM(  J)=DI     *GAMGM(  J)
   15 CONTINUE
C
      DO 20 I=1,6
      DO 20 J=1,6
      DZML(I,J)=GAMGM(  I)*DIGAM(  J)
   20 CONTINUE
C
C
      IF(IRAST.EQ.0)  RETURN
C
      V8(1)=-DM5(1,3)*AZDD
      V8(2)=-DM5(2,3)*AZDD
      V8(3)=(DM5(1,1)+DM5(2,2))*AZDD
C
      CALL MATV(1,B0B,V8,V1)
C
      V8(1)=-ZAZM(2)*AZDD
      V8(2)= ZAZM(1)*AZDD
      V8(3)=0.0D0
C
      CALL MATV(1,B0B,V8,V3)
C
      DO 140 I=1,3
      SARHST(I)=-V3(I)
      SARHSR(I)=-V1(I)
  140 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE SAGIM2(ITEST,ZML,ETA,NALP)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CSAGIM/ AZIN(3,3),AZAX(3),AZCG(3),AZMS,AZYY(3,3),AZIAX(3,3)
     2              ,ZZAZ(3,3)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/SAGMWK/ DELT,GAMGM(6),GMRHS,DI,DIGAM(6)
     1              ,DZML(6,6),YAZB(3)
C
      COMMON/SAGOUT/ AZ,AZD,B(3,3),B0(3,3),B0B(3,3),C(3,3),B0BC(3,3)
     1              ,YAZ(3),ZAZM(3)
C
      COMMON/HSAGIM/ HGMB(3)
C
      COMMON/ISAGIM/ IGMBL,NAZIM,NA1
C
      COMMON/ISAGRS/ ISRAST,IRSDUM(6)
C
      COMMON/RPOOL1/ DUMV1(39),OMEG(3),DUMV2(38),YBCM(3),DUMV3(42)
C
      COMMON/RPOOL3/ ZMS,YIZM(3,2)
C
      COMMON/SARSOT/ AZDD,SARHST(3),SARHSR(3)
C
      COMMON/TRQOUT/ OUTTRQ(150)
C
      COMMON/VARBLS/ DEP(150),DER(150)
C
C
      DIMENSION ZML(7,7),ETA(7),OMB(3),OMC(3)
      DIMENSION DM1(3,3),DM2(3,3),DM3(3,3),DM4(3,3)
      DIMENSION V1(3),V2(3),V3(3),V4(3),V5(3),V6(3)
      DIMENSION RHST(3),RHSR(3)
      DIMENSION DRHST(3),DRHSR(3)
      DIMENSION ZELBM(3)
      DIMENSION OMCPG(3)
      DIMENSION ZELC(3)
C
C
      IF(IGMBL.EQ.0) RETURN
C
      IF(ITEST.EQ.2) GO TO 100
C
C     SYSTEM TRANSLATION EQUATION
C
      AZD2=AZD*AZD
      V1(1)=-AZD2*ZAZM(1)
      V1(2)=-AZD2*ZAZM(2)
      V1(3)=0.0D0
      CALL MATV(1,B0B,V1,RHST)
C
C
      V1(1)=-AZD*ZAZM(2)
      V1(2)=AZD*ZAZM(1)
      V1(3)=0.0D0
      CALL MATV(1,B0B,V1,V2)
      RHST(1)=RHST(1)+2.0D0*(OMEG(2)*V2(3)-OMEG(3)*V2(2))
      RHST(2)=RHST(2)+2.0D0*(OMEG(3)*V2(1)-OMEG(1)*V2(3))
      RHST(3)=RHST(3)+2.0D0*(OMEG(1)*V2(2)-OMEG(2)*V2(1))
C
C     SYSTEM ROTATION EQUATION
C
      V1(1)=ZZAZ(2,3)+ZAZM(2)*YAZB(3)
      V1(2)=-ZZAZ(1,3)-ZAZM(1)*YAZB(3)
      V1(3)=ZAZM(1)*YAZB(2)-ZAZM(2)*YAZB(1)
      CALL MATV(1,B0B,V1,V2)
      TWOAZD=2.0D0*AZD
      RHSR(1)=AZD2*V2(1)
      RHSR(2)=AZD2*V2(2)
      RHSR(3)=AZD2*V2(3)
C
C
      CALL MATV(2,B0B,OMEG,OMB)
C
C
      V1(1)=OMB(1)*(ZZAZ(1,2)+ZAZM(1)*YAZB(2))
     1     +OMB(2)*(ZZAZ(2,2)+ZAZM(2)*YAZB(2))
     2     +OMB(3)*(ZZAZ(2,3)+ZAZM(2)*YAZB(3))
C
      V1(2)=-OMB(1)*(ZZAZ(1,1)+ZAZM(1)*YAZB(1))
     1      -OMB(2)*(ZZAZ(2,1)+ZAZM(2)*YAZB(1))
     2      -OMB(3)*(ZZAZ(1,3)+ZAZM(1)*YAZB(3))
C
      V1(3)=OMB(3)*(ZAZM(1)*YAZB(2)-ZAZM(2)*YAZB(1))
C
      CALL MATV(1,B0B,V1,V2)
C
      RHSR(1)=RHSR(1)+TWOAZD*V2(1)
      RHSR(2)=RHSR(2)+TWOAZD*V2(2)
      RHSR(3)=RHSR(3)+TWOAZD*V2(3)
C
      IF(ISRAST.EQ.0) GO TO 2
C
      DO 1 I=1,3
      RHST(I)=RHST(I) - SARHST(I)
      RHSR(I)=RHSR(I) - SARHSR(I)
      DRHSR(I)=0.0D0
      I3=I+3
      ETA(I)=ETA(I) - RHST(I)
      ETA(I3)=ETA(I3)-RHSR(I)
    1 CONTINUE
C
      GO TO 35
C
    2 CONTINUE
C
C     RELATIVE ROTATION EQUATION - AZIMUTH -
C
      RHAZ=-OMB(1)*OMB(1)*(ZZAZ(1,2)+ZAZM(1)*YAZB(2))
     1     +OMB(1)*OMB(2)*(ZZAZ(1,1)+ZAZM(1)*YAZB(1)
     2                    -ZZAZ(2,2)-ZAZM(2)*YAZB(2))
     3     -OMB(1)*OMB(3)*(ZZAZ(2,3)+ZAZM(2)*YAZB(3))
     4     +OMB(2)*OMB(2)*(ZZAZ(2,1)+ZAZM(2)*YAZB(1))
     5     +OMB(2)*OMB(3)*(ZZAZ(1,3)+ZAZM(1)*YAZB(3))
     6     +OMB(3)*OMB(3)*(ZAZM(2)*YAZB(1)-ZAZM(1)*YAZB(2))
C
C
C
      CALL SAGINF(AZIF)
C
      CALL SAGCNT(AZCNT)
C
      OUTTRQ(34)=AZCNT
C
      GMRHS   =-RHAZ-AZIF+AZCNT
C
      DIR   =DI     *GMRHS
C
      DO 10 I=1,3
      I3=I+3
      DRHST(I)=GAMGM(  I)*DIR
      DRHSR(I)=GAMGM(  I3)*DIR
      ETA(I)=ETA(I)-RHST(I)-DRHST(I)
      ETA(I3)=ETA(I3)-RHSR(I)-DRHSR(I)
   10 CONTINUE
C
      DO 20 I=1,6
      DO 20 J=1,6
      ZML(I,J)=ZML(I,J)-DZML(I,J)
   20 CONTINUE
C
      IF(IOUT.EQ.1) GO TO 30
      WRITE(6,1000)
 1000 FORMAT('0',10X,'DEBUG OUTPUT FROM GIMBL2')
      WRITE(6,1001) DELT,DI
 1001 FORMAT('0',1P12E11.4)
      WRITE(6,1001) GAMGM
      WRITE(6,1001) DIGAM
      WRITE(6,1001) RHAZ,AZIF,AZCNT,RHST,RHSR
      WRITE(6,1001) DRHST,DRHSR
      WRITE(6,1002) ZML
      WRITE(6,1003) ETA
 1002 FORMAT('0',2X,'ZML',6X,1P7E13.5)
 1003 FORMAT('0',2X,'ETA',6X,1P7E13.5)
   30 CONTINUE
C
   35 CONTINUE
C
      DO 40 I=1,3
      I1=23+I
      OUTTRQ(I1)=RHSR(I)+DRHSR(I)
   40 CONTINUE
C
C
      RETURN
C
C
  100 CONTINUE
C
C
      IF(ISRAST.NE.0) GO TO 112
C
C     CONSTRUCT DERIVATIVES FOR AZIMUTH AND ELEVATION
C
      DAZD=0.0D0
      DO 110 I=1,6
      DAZD=DAZD-DIGAM(  I)*ETA(I)
  110 CONTINUE
C
C
      DER(NAZIM)=DEP(NA1)
      DER(NA1)=DIR   +DAZD
C
  112 CONTINUE
C
C     CALCULATE MOMENTUM FOR OUTPUT
C
      DO 115 I=1,3
      V1(I)=YBCM(I)/ZMS
  115 CONTINUE
      CALL MATV(2,B0B,V1,V2)
C
      V4(1)=AZD*(-ZZAZ(3,1)-(YAZB(3)-V2(3))*ZAZM(1))
      V4(2)=AZD*(-ZZAZ(3,2)-(YAZB(3)-V2(3))*ZAZM(2))
      V4(3)=AZD*(ZZAZ(1,1)+ZZAZ(2,2)+(YAZB(1)-V2(1))*ZAZM(1)
     1                              +(YAZB(2)-V2(2))*ZAZM(2))
C
      CALL MATV(1,B0B,V4,V1)
C
      DO 120 I=1,3
      HGMB(I)=V1(I)
  120 CONTINUE
C
C
C
      RETURN
C
      END
      SUBROUTINE SAGINF(AZIF)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/SAINTF/ GMK1,GMK2,GMDMP,GMSTP
C
      COMMON/SAGOUT/ AZ,AZD
C
C
      WSA=0.0D0
      DENA=DABS(AZ)
      IF(DENA.GT.GMSTP) WSA=DENA-GMSTP
      IF(DENA.NE.0.0D0) WSA=WSA*AZ/DENA
      AZIF=GMK1*AZ+GMK2*WSA+GMDMP*AZD
C
C
      RETURN
C
C
      END
      SUBROUTINE SAGMRD
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CSAGIM/ AZIN(3,3),AZAX(3),AZCG(3),AZMS,AZYY(3,3),AZIAX(3,3)
     2              ,ZZAZ(3,3)
C
      COMMON/CSAGRS/ DELA(3),TAUA(4,3),ANG20(3),ADD0(3),TC(3),TTAB(4,3)
C
      COMMON/SAGICS/ AZIM0,ROLL0,ELEV0,AZIMI,AZIMID,GMUP(2),GMDN(2)
C
      COMMON/SAINTF/ GMK1,GMK2,GMDMP,GMSTP
C
      COMMON/SAPRPL/ GMBAZ,GMBAZD
C
      COMMON/ISAGIM/ IGMBL,NAZIM,NA1
C
      COMMON/ISAGRS/ IRAST,IARST(3),IRSCY(3)
C
C
      DIMENSION HEDGM(5),HEDRS(5)
      DIMENSION HEDIC(5)
      REAL*4 BUFF(450)
C
      DATA I8/',A8,'/
      DATA HEDGM/'SINGLE A','XIS GIMB','LE PHYSI','CAL PROP','ERTIES  '/
      DATA HEDRS/'SINGLE A','XIS GIMB','LE RASTE','RING OPT','ION     '/
      DATA HEDIC/'GIMBLE I','NITIAL C','ONDITION','S       ','        '/
C
      CALL SETUP(8HSAIN    ,8,AZIN,3,3)
      CALL SETUP(8HSAAX    ,8,AZAX,3)
      CALL SETUP(8HSACG    ,8,AZCG,3)
      CALL SETUP(8HSAMS    ,8,AZMS)
C
      CALL SETUP(8HSAAZ0   ,8,AZIM0)
      CALL SETUP(8HSARL0   ,8,ROLL0)
      CALL SETUP(8HSAEL0   ,8,ELEV0)
      CALL SETUP(8HSAAZI   ,8,AZIMI)
      CALL SETUP(8HSAAZID  ,8,AZIMID)
      CALL SETUP(8HSAUP    ,8,GMUP,2)
      CALL SETUP(8HSADN    ,8,GMDN,2)
C
      CALL SETUP(8HSAGK1   ,8,GMK1)
      CALL SETUP(8HSAGK2   ,8,GMK2)
      CALL SETUP(8HSAGDM   ,8,GMDMP)
      CALL SETUP(8HSASTP   ,8,GMSTP)
C
      CALL SETUP(8HSADELA  ,8,DELA,3)
      CALL SETUP(8HSATAUA  ,8,TAUA,4,3)
      CALL SETUP(8HSAAN20  ,8,ANG20,3)
      CALL SETUP(8HSAADD0  ,8,ADD0,3)
      CALL SETUP(8HSATC    ,8,TC,3)
      CALL SETUP(8HSATTAB  ,8,TTAB,4,3)
C
      CALL SETUP(8HISAGM   ,4,IGMBL)
C
      CALL SETUP(8HISAGRS  ,4,IRAST)
      CALL SETUP(8HISARST  ,4,IARST,3)
      CALL SETUP(8HISASCY  ,4,IRSCY,3)
C
C
      CALL SAPLCS
C
C
      RETURN
C
C    ***************************************************************
      ENTRY ECHOSA
C    ***************************************************************
C
      IF(IGMBL.EQ.0) GO TO 10
C
      CALL HVAL(HEDGM)
C
      CALL FVAL('SAIN    ',4,AZIN,3,3,2)
      CALL FVAL('SAAX    ',4,AZAX,3,0,1)
      CALL FVAL('SACG    ',4,AZCG,3,0,1)
      CALL FVAL('SAMS    ',4,AZMS,0,0,0)
C
      CALL HVAL(HEDIC)
C
      CALL FVAL('AZIMI   ',5,AZIMI,0,0,0)
      CALL FVAL('AZIMID  ',6,AZIMID,0,0,0)
C
      IF(IRAST.EQ.0) GO TO 10
C
      CALL HVAL(HEDRS)
C
      CALL IVAL('ISAGRS  ',6,IRAST,0,0,0)
      CALL IVAL('ISARST  ',6,IARST,3,0,1)
C
   10 CONTINUE
C
      RETURN
C
C    ***************************************************************
      ENTRY SAGPLT(BUFF,INDX)
C    ***************************************************************
C
      INDEX=INDX-1
      INDX=INDX+2
C
      IF(IGMBL.EQ.0) RETURN
C
      BUFF(INDEX+1)=GMBAZ
      BUFF(INDEX+2)=GMBAZD
C
      RETURN
C
C    ***************************************************************
      ENTRY SAPRNT
C    ***************************************************************
C
      IF(IGMBL.EQ.0) RETURN
C
      CALL SET('GMBL AZ ',0,0,GMBAZ,I8)
      CALL SET('GMBL AZD',0,0,GMBAZD,I8)
C
C
      RETURN
C
C
C
      END
      SUBROUTINE SAINIT
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ADSTAT/ DER(150),DEP(150)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSAGIM/ AZIN(3,3),AZAX(3),AZCG(3),AZMS,AZYY(3,3),AZIAX(3,3)
     2              ,ZZAZ(3,3)
C
      COMMON/CSAGRS/ DELA(3),TAUA(4,3),ANG20(3),ADD0(3),TC(3),TTAB(4,3)
C
      COMMON/ISAGIM/ IGMBL,NAZIM,NA1
C
      COMMON/ISAGRS/ IRAST,IARST(3),IRSCY(3)
C
      COMMON/SAGICS/ AZIM0,ROLL0,ELEV0,AZIMI,AZIMID,GMUP(2),GMDN(2)
C
      COMMON/SAGOUT/ AZ,AZD,B(3,3),B0(3,3),B0B(3,3),C(3,3),B0BC(3,3)
     1                                     ,YAZ(3),ZAZM(3),ZELM(3)
C
      COMMON/XIN4  / UP(150),DN(150),BNDS(22)
C
      DIMENSION JJ(3),KK(3)
C
      DATA JJ/2,3,1/,KK/3,1,2/
C
C
      IF(IGMBL.EQ.0) RETURN
C
      GAM=AZIM0*RADIAN
      ALP=ROLL0*RADIAN
      BET=ELEV0*RADIAN
C
      CALL DTR312(GAM,ALP,BET,B0)
C
      DO 5 I=1,3
      J=JJ(I)
      K=KK(I)
      AZYY(I,I)=0.5D0*(AZIN(J,J)+AZIN(K,K)-AZIN(I,I))
      AZYY(I,J)=AZIN(I,J)
      AZYY(I,K)=AZIN(I,K)
      AZIAX(I,I)=AZYY(I,I)+AZMS*AZCG(I)*AZCG(I)
      AZIAX(I,J)=AZIN(I,J)+AZMS*AZCG(I)*AZCG(J)
      AZIAX(I,K)=AZIN(I,K)+AZMS*AZCG(I)*AZCG(K)
    5 CONTINUE
C
      AZ=AZIMI*RADIAN
      AZD=AZIMID*RADIAN
C
C
      IF(IRAST.NE.0) GO TO 6
C
C
      NA1=NAZIM+1
      DEP(NAZIM)=AZ
      DEP(NA1)=AZD
C
      UP(NAZIM)=GMUP(1)
      DN(NAZIM)=GMDN(1)
      UP(NA1)=GMUP(2)
      DN(NA1)=GMDN(2)
C
    6 CONTINUE
C
      SAZ=DSIN(AZ)
      CAZ=DCOS(AZ)
C
      DO 10 I=1,3
      DO 9 J=1,3
      B(I,J)=0.0D0
      C(I,J)=0.0D0
    9 CONTINUE
      B(I,I)=CAZ
      C(I,I)=1.0D0
   10 CONTINUE
      B(3,3)=1.0D0
      B(1,2)=-SAZ
      B(2,1)=SAZ
C
C
      IF(IRAST.EQ.0) GO TO 150
C
      DO 120 I=1,3
      ITEST=IARST(I)
      IF(ITEST.EQ.0) GO TO 120
      IF(ITEST.EQ.2) GO TO 110
C
C     TYPE 1 CYCLE
C
      TC(I)=2.0D0*(TAUA(2,I)+2.0D0*TAUA(3,I)+TAUA(4,I))
      TTAB(1,I)=TAUA(2,I)/2.0D0
      TTAB(2,I)=TTAB(1,I)+TAUA(3,I)
      TTAB(3,I)=TTAB(2,I)+TAUA(4,I)
      TTAB(4,I)=TTAB(3,I)+TAUA(3,I)
      ADD0(I)=DELA(I)*PI/(2.0D0*TAUA(3,I)*(TAUA(3,I)+TAUA(4,I)))
C
      GO TO 120
C
  110 CONTINUE
C
C     TYPE 2 CYCLE
C
      TC(I)=TAUA(2,I)+TAUA(3,I)
      TTAB(1,I)=TAUA(2,I)
      TTAB(2,I)=TTAB(1,I)+TAUA(3,I)
      ADD0(I)=DELA(I)*TWOPI/TAUA(2,I)**2
C
  120 CONTINUE
C
  150 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE SAPLCS
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ADSTAT/ DER(150),DEP(150)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSTVAL/ TSTART
C
      COMMON/CSAPCS/ PCSPRM(100),IPLTCS(20)
C
      COMMON/DATOUT/ IDATA,MLAST
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/DRPROT/ PSTAG,RMAG,UNADR(3)
C
      COMMON/SAGOUT/ AZ,AZD,B(3,3),B0(3,3),B0B(3,3),C(3,3),B0BC(3,3)
     1                                      ,YAZ(3),ZAZM(3)
C
      COMMON/HSAGIM/ HGMB(3)
C
      COMMON/ISAGIM/ IGMBL,NAZIM,NA1
C
      COMMON/IMAIN1/ IDATE,LSAVE,IDUM1(6)
C
      COMMON/INEWR / NKT(10),ICP,ICPS
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS
     1              ,NK(10),LK(10),LLK(10)
C
      COMMON/MOMENT/ IDUM01(3),IMGNTS,IDUM02(2)
C
      COMMON/OUTTHR/ SMAGB(3),XMB(3),RWHEEL(3)
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,UPB(150),DNB(150)
C
      COMMON/RMGNTC/ SMAGI(3),DPMAG(3),SFMAG,MAGFLD
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),DUM01(96)
C
      COMMON/RPOOL5/ CKMAT(3,3,10),FM2(3,3)
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
      COMMON/XIN4  / UP(150),DN(150),BNDS(22)
C
C
      DIMENSION HEDPC(5)
      DIMENSION HDPID(5),HDMOT(5)
      DIMENSION SMAGM(3),SNSWM(3)
      DIMENSION FILMAG(3),REFV(3)
      DIMENSION ANOISE(3),PNOISE(3),FNOISE(3)
      DIMENSION FREQNS(3),PHASNS(3)
      DIMENSION SNSV(3),SNSVM1(3)
      REAL*4 BUFF(450)
C
      DATA I8/',A8,'/
      DATA HEDPC/'SNGL AXI','S DESPIN',' PLATFOR','M CONTRO','L SYSTEM'/
      DATA HDPID/'SNGL AXI','S P I D ','CONTROLL','ER PARAM','ETERS   '/
      DATA HDMOT/'SNGL AXI','S GIMBLE',' DRIVE M','OTOR PAR','AMETERS '/
C
      EQUIVALENCE (IPLTCS(1),IPCONT)
      EQUIVALENCE (IPLTCS(3),IGSNSE),(IPLTCS(4),NMAGAV)
      EQUIVALENCE (UPMSN,PCSPRM(30)),(DNMSN,PCSPRM(31))
      EQUIVALENCE (SNSWM(1),PCSPRM(32))
      EQUIVALENCE (PCSPRM(35),TMAGSR),(PCSPRM(36),TCOMPD)
C
      EQUIVALENCE (PCSPRM(10),TSAMP)
      EQUIVALENCE (PCSPRM(11),AZQNT)
      EQUIVALENCE (PCSPRM(12),AZXIUP)
      EQUIVALENCE (PCSPRM(13),AZXIDN)
      EQUIVALENCE (PCSPRM(14),AZKP)
      EQUIVALENCE (PCSPRM(15),AZKI)
      EQUIVALENCE (PCSPRM(16),AZKD)
      EQUIVALENCE (PCSPRM(41),AZKA)
      EQUIVALENCE (PCSPRM(42),AZKT)
      EQUIVALENCE (PCSPRM(43),AZKB)
      EQUIVALENCE (PCSPRM(44),AZMTUP)
      EQUIVALENCE (PCSPRM(45),AZMTDN)
      EQUIVALENCE (PCSPRM(46),AZTCUL)
      EQUIVALENCE (PCSPRM(47),AZDMIN)
      EQUIVALENCE (PCSPRM(48),AZVBAS)
      EQUIVALENCE (PCSPRM(80),ANOISE(1)),(PCSPRM(83),PNOISE(1))
      EQUIVALENCE (PCSPRM(86),FNOISE(1))
      EQUIVALENCE (PCSPRM(90),FREQNS(1)),(PCSPRM(93),PHASNS(1))
C
C     CALLED FROM SAGMRD
C
      CALL SETUP(8HSACSPM  ,8,PCSPRM,100)
      CALL SETUP(8HISAPCS  ,4,IPLTCS,20)
C
      RETURN
C
C   ****************************************************************
      ENTRY NUMSAP(NUMEQS)
C   ****************************************************************
C
C     CALLED FROM NUM
C
      IF(IPCONT.EQ.0) RETURN
      IF(IGSNSE.EQ.0) RETURN
      NPLCS=NUMEQS+1
      NUMEQS=NUMEQS+3
C
      RETURN
C
C   ****************************************************************
      ENTRY ECHSAC
C   ****************************************************************
C
C     CALLED FROM ECHOGP
C
      IF(IPCONT.EQ.0) RETURN
C
      CALL HVAL(HEDPC)
C
      CALL FVAL('TSAMP   ',5,TSAMP,0,0,0)
C
      CALL HVAL(HDPID)
C
      CALL FVAL('AZIM    ',4,PCSPRM(11),6,0,1)
C
      CALL HVAL(HDMOT)
C
      CALL FVAL('AZIM    ',4,PCSPRM(41),8,0,1)
C
      RETURN
C
C   ****************************************************************
      ENTRY SACINT(FRQ)
C   ****************************************************************
C
C     CALLED FROM MAIN FOR INITIAL CONDITIONS AND INTEGRATION BOUNDS
C     CALLED AFTER CALL TO SETVAL(1)
C
      NPRFRQ=1
      ICNFRQ=0
      FRQ=FREQ
      DO 1 I=1,3
      HGMB(I)=0.0D0
      FREQNS(I)=FNOISE(I)*TWOPI
      PHASNS(I)=PNOISE(I)*RADIAN
    1 CONTINUE
C
      IF(IPCONT.EQ.0) RETURN
C
      IF(NMAGAV.EQ.0) NMAGAV=1
      TSNDLY=TCOMPD+(NMAGAV-1)*TMAGSR/2.0D0
      RATIOM=TSNDLY/TSAMP
C
      IF(IGSNSE.EQ.0) GO TO 25
C
      IDEP=NPLCS-1
      DO 23 I=1,3
      I1=IDEP+I
      UP(I1)=UPMSN
      DN(I1)=DNMSN
   23 CONTINUE
C
   25 CONTINUE
C
      NPRFRQ=FREQ/TSAMP
      IF(NPRFRQ.LT.1) NPRFRQ=1
      FRQ=TSAMP
C
      RETURN
C
C   ****************************************************************
      ENTRY SACSNR
C   ****************************************************************
C
C     CALLED FROM DEREQ TO LOAD DERIVATIVES FOR SENSOR
C
      IF(IPCONT.EQ.0) RETURN
C
      CALL MATV(2,SA,UNADR,SMAGB)
C
      DT=TIME-TSTART
      DO 27 I=1,3
      ARG=FREQNS(I)*DT+PHASNS(I)
      DIRT=ANOISE(I)*DSIN(ARG)
      SMAGM(I)=SMAGB(I)+DIRT
   27 CONTINUE
C
      IF(LSAVE.NE.1) GO TO 29
      IF(IDATA.NE.0) GO TO 29
C
C     CALCULATIONS DONE ONLY AT THE START OF A SIMULATION
C
      CALL MATV(2,B0,SMAGM,REFV)
      DEN=REFV(1)*REFV(1)+REFV(2)*REFV(2)
      VMMAG=DEN+REFV(3)*REFV(3)
      DEN=DSQRT(DEN)
      VMMAG=DSQRT(VMMAG)
      SNSAZ=DATAN2(REFV(2),REFV(1))
C
      DO 26 I=1,3
      SNSVM1(I)=SMAGM(I)
   26 CONTINUE
C
      AZM=DMOD(AZ,TWOPI)
      IF(AZM.GT.PI) AZM=AZM-TWOPI
      AZMQ=AZM-DMOD(AZM,AZQNT)
      SSAZ=DSIN(SNSAZ)
      CSAZ=DCOS(SNSAZ)
      SQAZ=DSIN(AZMQ)
      CQAZ=DCOS(AZMQ)
      DOTP=SSAZ*SQAZ+CSAZ*CQAZ
      CRSP=CSAZ*SQAZ-SSAZ*CQAZ
      CRSP=-CRSP
      ERRAZ=DATAN2(CRSP,DOTP)
      AZOUT=AZKP*ERRAZ
      AZXIM1=0.0D0
      EAZM1=ERRAZ
C
C
      IF(IGSNSE.EQ.0) GO TO 31
C
      DO 28 I=1,3
      I1=IDEP+I
      DEPEND(I1)=SMAGM(I)
   28 CONTINUE
C
   29 CONTINUE
C
      IF(IGSNSE.EQ.0) GO TO 31
C
      DO 30 I=1,3
      I1=IDEP+I
      DERIV(I1)=SNSWM(I)*(SMAGM(I)-DEPEND(I1))
      SNSV(I)=DEPEND(I1)
   30 CONTINUE
C
      RETURN
C
   31 CONTINUE
C
      DO 32 I=1,3
      SNSV(I)=SMAGM(I)
   32 CONTINUE
C
      RETURN
C
C
C   ****************************************************************
      ENTRY SAGCNT(AZCNT)
C   ****************************************************************
C
C     CALLED FROM SAGIM2
C
C     ZERO OUT CONTROL TORQUE FOR NO CONTROL CASE
C
      AZCNT=0.0D0
C
      IF(IPCONT.EQ.0) RETURN
C
C     CALCULATE MOTOR TORQUES
C
      VOPAZ=AZKA*AZOUT
C     MOTOR TORQUES
      AZMOTT=AZKT*(VOPAZ-AZKB*AZD+AZVBAS)
C     TORQUE LIMITING
      IF(AZMOTT.GT.AZMTUP) AZMOTT=AZMTUP
      IF(AZMOTT.LT.AZMTDN) AZMOTT=AZMTDN
C     COULOMB FRICTION TORQUE
      AZMOTT=AZMOTT-AZD*AZTCUL/(AZDMIN+DABS(AZD))
C     OUTPUT
      AZCNT=AZMOTT
C
C
      RETURN
C
C   ****************************************************************
      ENTRY SAPIDC(IPRFLG)
C   ****************************************************************
C
C     SIMULATION OF P I D CONTROLLER
C     CALLED FROM MAIN AFTER ADAMS RETURN
C
      IPRFLG=1
      IF(IPCONT.EQ.0) RETURN
      IPRFLG=0
      IF(MOD(ICNFRQ,NPRFRQ).EQ.0) IPRFLG=1
      ICNFRQ=ICNFRQ+1
C
      DO 35 I=1,3
      FILMAG(I)=SNSV(I)-RATIOM*(SNSV(I)-SNSVM1(I))
      SNSVM1(I)=SNSV(I)
   35 CONTINUE
C
C     PLATFORM COMMAND COMPUTATION
C
      CALL MATV(2,B0,FILMAG,REFV)
      DEN=REFV(1)*REFV(1)+REFV(2)*REFV(2)
      VMMAG=DEN+REFV(3)*REFV(3)
      DEN=DSQRT(DEN)
      VMMAG=DSQRT(VMMAG)
C
      SNSAZ=DATAN2(REFV(2),REFV(1))
   36 CONTINUE
C
C     MEASURED PLATFORM POSITION
C
      AZM=DMOD(AZ,TWOPI)
      IF(AZM.GT.PI) AZM=AZM-TWOPI
      AZMQ=AZM-DMOD(AZM,AZQNT)
C
C     CALCULATE AZIMUTH AND ELEVATION ERRORS
C
      SSAZ=DSIN(SNSAZ)
      CSAZ=DCOS(SNSAZ)
      SQAZ=DSIN(AZMQ)
      CQAZ=DCOS(AZMQ)
      DOTP=SSAZ*SQAZ+CSAZ*CQAZ
      CRSP=CSAZ*SQAZ-SSAZ*CQAZ
      CRSP=-CRSP
      ERRAZ=DATAN2(CRSP,DOTP)
      ERAZIM=ERRAZ/RADIAN
      AZXI=AZXIM1+TSAMP*ERRAZ
      AZXD=(ERRAZ-EAZM1)/TSAMP
      AZOUT=AZKP*ERRAZ+AZKI*AZXI+AZKD*AZXD
      IF(AZXI.GT.AZXIUP) AZXI=AZXIUP
      IF(AZXI.LT.AZXIDN) AZXI=AZXIDN
C
      IF(IOUT.EQ.1) GO TO 40
      WRITE(6,1000)
 1000 FORMAT('0',10X,'DEBUG OUTPUT FROM PIDCNT')
 1001 FORMAT('0',1P10E13.5)
      WRITE(6,1001) SNSAZ,AZM,AZMQ,ERRAZ,ERAZIM,AZXI,AZXD,AZOUT,AZXIM1
   40 CONTINUE
C
      AZXIM1=AZXI
      EAZM1=ERRAZ
C
      RETURN
C
C   ****************************************************************
      ENTRY SAPWRP(BUFF,INDX)
C   ****************************************************************
C
C     CALLED FROM GPPLOT TO LOAD PLOT RECORD
C
      INDEX=INDX
C
      INDX=INDX+6
C
      IF(IPCONT.EQ.0) RETURN
C
      I1=INDEX-1
C
      DO 64 I=1,3
      BUFF(I1+I)=FILMAG(I)
   64 CONTINUE
      I1=INDEX+2
      BUFF(I1+1)=ERAZIM
      BUFF(I1+2)=AZOUT
      BUFF(I1+3)=AZMOTT
C
C
      RETURN
C
C   ****************************************************************
      ENTRY SAPPRN
C   ****************************************************************
C
C     CALLED FROM GPSOUT FOR PRINTED OUTPUT
C
      IF(IPCONT.EQ.0) RETURN
      DO 74 I=1,3
   74 CALL SET('VNADIR  ',I,0,FILMAG(I),I8)
C
C
      CALL SET('AZIM ERR',0,0,ERAZIM,I8)
      CALL SET('AZIM PID',0,0,AZOUT,I8)
      CALL SET('AZIM MOT',0,0,AZMOTT,I8)
C
C
      RETURN
C
C
      END
      SUBROUTINE SBDINF(ANG2,ANG2D,TRKS,TRKD)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/SBINTF/SBK1(3),SBK2(3),SBSTA(3),SBDM(3)
C
C
      DIMENSION ANG2(3),ANG2D(3),TRKS(3),TRKD(3)
C
C
      DO 10 I=1,3
      TRKD(I)=SBDM(I)*ANG2D(I)
C
      ARG=ANG2(I)
      AMAG=DABS(ARG)
      ALIM=SBSTA(I)
      IF(AMAG.GT.ALIM) GO TO 5
      TRKS(I)=SBK1(I)*ARG
      GO TO 10
C
    5 CONTINUE
C
      IF(ARG.LT.0.0D0) ALIM=-ALIM
      TRKS(I)=SBK1(I)*ALIM+SBK2(I)*(ARG-ALIM)
C
   10 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE SBINIT
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ACFILT/ACPARM(20),IACFLT(20)
C
      COMMON/ADSTAT/DER(150),DEP(150)
C
      COMMON/CONSTS/PI,TWOPI,RADIAN
C
      COMMON/CRASTR/DELA(3),TAUA(4,3),ANG20(3),ADD0(3),TC(3),TTAB(4,3)
C
      COMMON/CSECBD/SECM,SECI(3,3),ZBAR2(3),YI02(3),ZZ2(3,3),ZZ2Y(3,3)
     1             ,YZ2(3),YZT(3),ZB(3),YIZ02(3)
C
      COMMON/ISECBD/I2BDY,NDOF2,IRAST,NDEP2,IARST(3),IRSCY(3)
C
      COMMON/PWHEEL/XMOMIN(3),DVMOM(3),VMOM(3),VW(3)
C
      COMMON/SECBDW/GAMMA2(3,6),DELTA2(3,3),DELT2(3,3),DELT2I(3,3)
C
      COMMON/SECICS/GAM20,ALP20,BET20,B0(3,3),GAM2I,ALP2I,BET2I
     1             ,OM2I(3),SBUP(2),SBDN(2)
C
      COMMON/XIN4  /UP(150),DN(150),BNDS(22)
C
C
      IF(I2BDY.EQ.0) GO TO 100
C
      GAM=GAM20*RADIAN
      ALP=ALP20*RADIAN
      BET=BET20*RADIAN
C
      CALL DTR312(GAM,ALP,BET,B0)
C
      ZZ2(1,1)=0.5D0*(SECI(2,2)+SECI(3,3)-SECI(1,1))
     1         +SECM*ZBAR2(1)*ZBAR2(1)
      ZZ2(2,2)=0.5D0*(SECI(3,3)+SECI(1,1)-SECI(2,2))
     1         +SECM*ZBAR2(2)*ZBAR2(2)
      ZZ2(3,3)=0.5D0*(SECI(1,1)+SECI(2,2)-SECI(3,3))
     1         +SECM*ZBAR2(3)*ZBAR2(3)
      ZZ2(1,2)=SECI(1,2)+SECM*ZBAR2(1)*ZBAR2(2)
      ZZ2(1,3)=SECI(1,3)+SECM*ZBAR2(1)*ZBAR2(3)
      ZZ2(2,3)=SECI(2,3)+SECM*ZBAR2(2)*ZBAR2(3)
      ZZ2(2,1)=ZZ2(1,2)
      ZZ2(3,1)=ZZ2(1,3)
      ZZ2(3,2)=ZZ2(2,3)
C
      IF(NDOF2.EQ.0) GO TO 100
C
      GAM2=GAM2I*RADIAN
      ALP2=ALP2I*RADIAN
      BET2=BET2I*RADIAN
C
      SALP=DSIN(ALP2)
      CALP=DCOS(ALP2)
      SBET=DSIN(BET2)
      CBET=DCOS(BET2)
      GAM2D=0.0D0
C
      IF(NDOF2.EQ.1) GO TO 20
      GAM2D=(OM2I(3)*CBET-OM2I(1)*SBET)*RADIAN/CALP
C
   20 CONTINUE
C
      BET2D=OM2I(2)*RADIAN-GAM2D*SALP
      I0=NDEP2
      I1=I0+NDOF2
      DEP(I0)=BET2
      DEP(I1)=BET2D
      UP(I0)=SBUP(1)
      DN(I0)=SBDN(1)
      UP(I1)=SBUP(2)
      DN(I1)=SBDN(2)
C
      IF(NDOF2.EQ.1) GO TO 80
C
      I0=I0+1
      I1=I1+1
      DEP(I0)=GAM2
      DEP(I1)=GAM2D
      UP(I0)=SBUP(1)
      DN(I0)=SBDN(1)
      UP(I1)=SBUP(2)
      DN(I1)=SBDN(2)
C
      IF(NDOF2.EQ.2) GO TO 80
C
      ALP2D=(OM2I(1)*CBET+OM2I(3)*SBET)*RADIAN
      I0=I0+1
      I1=I1+1
      DEP(I0)=ALP2
      DEP(I1)=ALP2D
      UP(I0)=SBUP(1)
      DN(I0)=SBDN(1)
      UP(I1)=SBUP(2)
      DN(I1)=SBDN(2)
C
   80 CONTINUE
C
      DELTA2(1,1)=ZZ2(2,2)+ZZ2(3,3)
      DELTA2(2,2)=ZZ2(3,3)+ZZ2(1,1)
      DELTA2(3,3)=ZZ2(1,1)+ZZ2(2,2)
      DELTA2(1,2)=-ZZ2(1,2)
      DELTA2(1,3)=-ZZ2(1,3)
      DELTA2(2,3)=-ZZ2(2,3)
      DELTA2(2,1)=DELTA2(1,2)
      DELTA2(3,1)=DELTA2(1,3)
      DELTA2(3,2)=DELTA2(2,3)
C
C
  100 CONTINUE
C
      DO 105 I=1,3
      VW(I)=VMOM(I)
  105 CONTINUE
C
      IF(IRAST.EQ.0) GO TO 150
C
      DO 120 I=1,3
      ITEST=IARST(I)
      IF(ITEST.EQ.0) GO TO 120
      IF(ITEST.EQ.2) GO TO 110
C
C     TYPE 1 CYCLE
C
      TC(I)=2.0D0*(TAUA(2,I)+2.0D0*TAUA(3,I)+TAUA(4,I))
      TTAB(1,I)=TAUA(2,I)/2.0D0
      TTAB(2,I)=TTAB(1,I)+TAUA(3,I)
      TTAB(3,I)=TTAB(2,I)+TAUA(4,I)
      TTAB(4,I)=TTAB(3,I)+TAUA(3,I)
      ADD0(I)=DELA(I)*PI/(2.0D0*TAUA(3,I)*(TAUA(3,I)+TAUA(4,I)))
C
      GO TO 120
C
  110 CONTINUE
C
C     TYPE 2 CYCLE
C
      TC(I)=TAUA(2,I)+TAUA(3,I)
      TTAB(1,I)=TAUA(2,I)
      TTAB(2,I)=TTAB(1,I)+TAUA(3,I)
      ADD0(I)=DELA(I)*TWOPI/TAUA(2,I)**2
C
  120 CONTINUE
C
  150 CONTINUE
C
      IF(IACFLT(1).EQ.0) RETURN
C
      I0=IACFLT(6)
      I1=I0+1
      UP(I0)=ACPARM(19)
      DN(I0)=ACPARM(20)
      UP(I1)=ACPARM(19)
      DN(I1)=ACPARM(20)
      IF(IACFLT(4).EQ.0) GO TO 155
      DEP(I0)=ACPARM(17)
      DEP(I1)=ACPARM(18)
  155 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE SECBD1(SY1,SY2,SY3,CIY)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CSECBD/SECM,SECI(3,3),ZBAR2(3),YI02(3),ZZ2(3,3),ZZ2Y(3,3)
     1             ,YZ2(3),YZT(3),ZB(3),YIZ02(3)
C
      COMMON/DEBUG2/IOUT,JOUT,KLUGE
C
      COMMON/ISECBD/I2BDY,NDOF2,IRAST,NDEP2,IARST(3),IRSCY(3)
C
      COMMON/RPOOL1/DUMV1(80),YBCM(3),DUMV2(42)
C
      COMMON/SBDOUT/ANG2(3),ANG2D(3),ANG2DD(3),B(3,3),B0B(3,3)
     1             ,OM2(3),SALP,CALP,SBET,CBET,H2B(3),Y2D(3)
C
      COMMON/SECBDW/GAMMA2(3,6),DELTA2(3,3),DELT2(3,3),DELT2I(3,3)
     1             ,COMQ(3,3),QGAM(3,6),DIQGM(3,6),DALP(6,6)
     2             ,VP(3),VPS(6)
C
      COMMON/SECICS/GAM20,ALP20,BET20,B0(3,3)
C
      COMMON/VARBLS/DEP(150),DER(150)
C
C
      EQUIVALENCE (ANG2(1),GAM2),(ANG2(2),ALP2),(ANG2(3),BET2)
      EQUIVALENCE (ANG2D(1),GAM2D),(ANG2D(2),ALP2D),(ANG2D(3),BET2D)
C
C
      DIMENSION CIY(3,3)
      DIMENSION  DUM1(3,3),YYZ2(3,3)
      DIMENSION DUM2(3,3),DUM3(3,3),II(3),JJ(3)
      DIMENSION C(6),MT(6)
      DIMENSION PV(3)
      DIMENSION V1(3),V2(3)
C
      DATA II/2,3,1/,JJ/3,1,2/
      DATA MAXD/3/
C
C
C     SECBD1 IS CALLED FROM FNDALP TO INCLUDE SECONDARY BODY
C     C-G OFFSET AND INERTIA PROPERTIES IN SYSTEM PROPERTIES
C
      IF(I2BDY.EQ.0) RETURN
C
      DO 5 I=1,3
      ANG2(I)=0.0D0
      ANG2D(I)=0.0D0
      ANG2DD(I)=0.0D0
      ZB(I)=SECM*ZBAR2(I)
    5 CONTINUE
C
      IF(IRAST.EQ.0) GO TO 10
C
      CALL RAST2(ANG2,ANG2D,ANG2DD)
C
      GO TO 15
C
   10 CONTINUE
C
C     EXTRACT SECONDARY STATE VARIABLES FROM DEP
C
      IF(NDOF2.EQ.0) GO TO 15
C
      I1=NDEP2
      I2=I1+NDOF2
      BET2=DEP(I1)
      BET2D=DEP(I2)
C
      IF(NDOF2.EQ.1) GO TO 15
C
      I1=I1+1
      I2=I2+1
      GAM2=DEP(I1)
      GAM2D=DEP(I2)
C
      IF(NDOF2.EQ.2) GO TO 15
C
      I1=I1+1
      I2=I2+1
      ALP2=DEP(I1)
      ALP2D=DEP(I2)
C
   15 CONTINUE
C
      CALL DTR312(GAM2,ALP2,BET2,B)
C
      CALL MPYMAT(B0,B,DUM1,1,1,B0B,DUM1)
C
C     CONSTRUCT ANGULAR RATES
C
      SBET=DSIN(BET2)
      CBET=DCOS(BET2)
      SALP=DSIN(ALP2)
      CALP=DCOS(ALP2)
      WS=GAM2D*CALP
      OM2(1)=-WS*SBET+ALP2D*CBET
      OM2(2)=BET2D+GAM2D*SALP
      OM2(3)=WS*CBET+ALP2D*SBET
C
      V1(1)=OM2(2)*ZBAR2(3)-OM2(3)*ZBAR2(2)
      V1(2)=OM2(3)*ZBAR2(1)-OM2(1)*ZBAR2(3)
      V1(3)=OM2(1)*ZBAR2(2)-OM2(2)*ZBAR2(1)
C
      CALL MATV(1,B0B,V1,V2)
C
      IF(IOUT.EQ.1) GO TO 16
      WRITE(6,5999)
 5999 FORMAT('0',10X,'DEBUGGING OUTPUT FROM SECBD1'/)
      WRITE(6,6000) GAM2,ALP2,BET2,GAM2D,ALP2D,BET2D,OM2
 6000 FORMAT(' ',1P10E13.5)
   16 CONTINUE
C
C     TRANSFORM INERTIA PROPERTIES TO BODY FRAME
C
      CALL MPYMAT(B0B,ZZ2,B0B,2,2,DUM1,ZZ2Y)
C
C     CALCULATE C-G OFFSET OF SECONDARY BODY
C
      CALL MATV(1,B0B,ZBAR2,YZ2)
C
      CALL ADDV(YI02,YZ2,YZT)
C
      SY1=SECM*YZT(1)
      SY2=SECM*YZT(2)
      SY3=SECM*YZT(3)
C
      DO 20 I=1,3
      YBCM(I)=YBCM(I)+SECM*YZT(I)
      Y2D(I)=SECM*V2(I)
      DO 20 J=1,3
      YYZ2(I,J)=SECM*(YI02(I)*YI02(J)+YI02(I)*YZ2(J)+YI02(J)*YZ2(I))
     1          +ZZ2Y(I,J)
      CIY(I,J)=CIY(I,J)+YYZ2(I,J)
   20 CONTINUE
C
      IF(IOUT.EQ.1) GO TO 21
      WRITE(6,6000) SY1,SY2,SY3,YBCM
      WRITE(6,6000) CIY
   21 CONTINUE
C
C
C     COUPLING WITH SYSTEM TRANSLATION EQUATIONS
C
      DO 25 I=1,3
      I1=II(I)
      J1=JJ(I)
      DO 25 J=1,3
      GAMMA2(I,J)=ZB(I1)*B0B(J,J1)-ZB(J1)*B0B(J,I1)
   25 CONTINUE
C
C     COUPLING WITH SYSTEM ROTATION EQUATION
C
      CALL MATV(2,B0B,YI02,YIZ02)
C
      TRAO2=0.0D0
C
      DO 30 I=1,3
      TRAO2=TRAO2+YIZ02(I)*ZB(I)+ZZ2(I,I)
      DO 30 J=1,3
      DUM2(I,J)=-YIZ02(I)*ZB(J)-ZZ2(I,J)
   30 CONTINUE
C
      DO 35 I=1,3
      DUM2(I,I)=DUM2(I,I)+TRAO2
   35 CONTINUE
C
      DO 37 I=1,3
      DO 37 J=1,3
      WS=0.0D0
      DO 36 K=1,3
      WS=WS+DUM2(I,K)*B0B(J,K)
   36 CONTINUE
      DUM3(I,J)=WS
   37 CONTINUE
C
C     LOAD INTO GAMMA2
C
      DO 40 I=1,3
      H2B(I)=0.0D0
      DO 40 J=1,3
      J1=J+3
      GAMMA2(I,J1)=DUM3(I,J)
      H2B(I)=H2B(I)+DUM3(J,I)*OM2(J)
   40 CONTINUE
C
      IF(NDOF2.EQ.0) GO TO 100
C
C
      DO 42 I=1,3
      DO 42 J=1,3
      COMQ(I,J)=0.0D0
   42 CONTINUE
C
      COMQ(1,2)=1.0D0
      COMQ(2,1)=-CALP*SBET
      COMQ(2,2)=SALP
      COMQ(2,3)=CALP*CBET
      COMQ(3,1)=CBET
      COMQ(3,3)=SBET
C
      DO 45 I=1,3
      DO 45 J=1,6
      WS=0.0D0
      DO 44 K=1,3
      WS=WS+COMQ(I,K)*GAMMA2(K,J)
   44 CONTINUE
      QGAM(I,J)=WS
      DIQGM(I,J)=0.0D0
   45 CONTINUE
C
      DO 47 I=1,3
      DO 47 J=1,3
      WS=0.0D0
      DO 46 K=1,3
      WS=WS+COMQ(I,K)*DELTA2(K,J)
   46 CONTINUE
      DUM1(I,J)=WS
   47 CONTINUE
C
      DO 50 I=1,3
      DO 50 J=1,3
      WS=0.0D0
      DO 49 K=1,3
      WS=WS+DUM1(I,K)*COMQ(J,K)
   49 CONTINUE
      DELT2(I,J)=WS
      DELT2I(I,J)=WS
   50 CONTINUE
C
      CALL INVERT(DELT2I,NDOF2,MAXD,ID,C,MT)
C
      DO 55 I=1,NDOF2
      DO 55 J=1,6
      WS=0.0D0
      DO 54 K=1,NDOF2
      WS=WS+DELT2I(I,K)*QGAM(K,J)
   54 CONTINUE
      DIQGM(I,J)=WS
   55 CONTINUE
C
      WS1=GAM2D*ALP2D
      WS2=GAM2D*BET2D*CALP
      WS3=ALP2D*BET2D
C
      PV(2)=WS1*CALP
      WS1=WS1*SALP
      PV(1)=WS1*SBET-WS2*CBET-WS3*SBET
      PV(3)=-WS1*CBET-WS2*SBET+WS3*CBET
C
      DO 60 I=1,3
      I3=I+3
      WS1=0.0D0
      WS2=0.0D0
      WS3=0.0D0
      DO 59 J=1,3
      WS1=WS1+DUM1(I,J)*PV(J)
      WS2=WS2+GAMMA2(J,I)*PV(J)
      WS3=WS3+GAMMA2(J,I3)*PV(J)
   59 CONTINUE
      VP(I)=WS1
      VPS(I)=WS2
      VPS(I3)=WS3
   60 CONTINUE
C
      DO 65 I=1,6
      DO 65 J=1,6
      WS=0.0D0
      DO 64 K=1,NDOF2
      WS=WS+QGAM(K,I)*DIQGM(K,J)
   64 CONTINUE
      DALP(I,J)=WS
   65 CONTINUE
C
      IF(IOUT.EQ.1) GO TO 70
      WRITE(6,6001) ((GAMMA2(I,J),J=1,6),I=1,3)
 6001 FORMAT(' ',1P6E14.6)
      WRITE(6,6000) DELTA2
      WRITE(6,6000) DELT2
      WRITE(6,6000) DELT2I
      WRITE(6,6000) COMQ
      WRITE(6,6001) (( QGAM(I,J),J=1,6),I=1,3)
      WRITE(6,6001) ((DIQGM(I,J),J=1,6),I=1,3)
      WRITE(6,6001) (( DALP(I,J),J=1,6),I=1,6)
   70 CONTINUE
C
C
  100 CONTINUE
C
C
      RETURN
C
      END
      SUBROUTINE SECBD2(ITEST,ZML,ETA,NALP)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CSECBD/SECM,SECI(3,3),ZBAR2(3),YI02(3),ZZ2(3,3),ZZ2Y(3,3)
     1             ,YZ2(3),YZT(3),ZB(3),YIZ02(3)
C
      COMMON/DEBUG2/IOUT,JOUT,KLUGE
C
      COMMON/ISECBD/I2BDY,NDOF2,IRAST,NDEP2,IARST(3),IRSCY(3)
C
      COMMON/RPOOL1/DUM1(39),OMEG(3)
C
      COMMON/SBDOUT/ANG2(3),ANG2D(3),ANG2DD(3),B(3,3),B0B(3,3)
     1             ,OM2(3),SALP,CALP,SBET,CBET,H2B(3)
C
      COMMON/SECBDW/GAMMA2(3,6),DELTA2(3,3),DELT2(3,3),DELT2I(3,3)
     1             ,COMQ(3,3),QGAM(3,6),DIQGM(3,6),DALP(6,6)
     2             ,VP(3),VPS(6)
C
      COMMON/VARBLS/DEP(150),DER(150)
C
C
      DIMENSION ZML(7,7),ETA(7)
      DIMENSION OMY2(3),BD2F(3),BD2M(3)
      DIMENSION V1(3),V2(3),V3(3),V4(3)
      DIMENSION OM2D(3)
      DIMENSION TRKS(3),TRKD(3)
      DIMENSION RT2(3),DIR2(3)
      DIMENSION ADER(3)
C
      DIMENSION U1(3),U2(3),U3(3),U4(3)
      DIMENSION OO(3,3),O2O(3,3),ZY(3,3),SBDM(3)
C
      EQUIVALENCE (ANG2DD(1),GAM2DD),(ANG2DD(2),ALP2DD)
      EQUIVALENCE (ANG2DD(3),BET2DD)
      EQUIVALENCE (ANG2D(1),GAM2D),(ANG2D(2),ALP2D),(ANG2D(3),BET2D)
C
      IF(I2BDY.EQ.0) RETURN
C
      IF(ITEST.EQ.2) GO TO 120
C
C
C     CALCULATE INERTIA TERMS DUE TO SECONDARY BODY MOTION
C
C     SYSTEM TRANSLATION
C
C     TRANSFORM SECONDARY BODY RATES INTO MAIN BODY FRAME
C
      CALL MATV(1,B0B,OM2,OMY2)
C
      DO 5 I=1,3
      V1(I)=SECM*YZ2(I)
    5 CONTINUE
C
      CALL CROSSV(OMY2,V1,V4)
      CALL ADDV(OMEG,OMY2,V2)
      CALL ADDV(OMEG,V2,V3)
      CALL CROSSV(V3,V4,BD2F)
C
C     SYSTEM ROTATION
C
      O11=V3(1)*OMY2(1)
      O12=V3(1)*OMY2(2)
      O13=V3(1)*OMY2(3)
      O21=V3(2)*OMY2(1)
      O22=V3(2)*OMY2(2)
      O23=V3(2)*OMY2(3)
      O31=V3(3)*OMY2(1)
      O32=V3(3)*OMY2(2)
      O33=V3(3)*OMY2(3)
C
      BD2M(1)= O13*(YI02(2)*V1(1)+ZZ2Y(2,1))
     1        +O23*(YI02(2)*V1(2)+ZZ2Y(2,2))
     2        -(O11+O22)*(YI02(2)*V1(3)+ZZ2Y(2,3))
C
     3        -O12*(YI02(3)*V1(1)+ZZ2Y(3,1))
     4        +(O33+O11)*(YI02(3)*V1(2)+ZZ2Y(3,2))
     5        -O32*(YI02(3)*V1(3)+ZZ2Y(3,3))
C
      BD2M(2)=-(O22+O33)*(YI02(3)*V1(1)+ZZ2Y(3,1))
     1        +O21*(YI02(3)*V1(2)+ZZ2Y(3,2))
     2        +O31*(YI02(3)*V1(3)+ZZ2Y(3,3))
C
     3        -O13*(YI02(1)*V1(1)+ZZ2Y(1,1))
     4        -O23*(YI02(1)*V1(2)+ZZ2Y(1,2))
     5        +(O11+O22)*(YI02(1)*V1(3)+ZZ2Y(1,3))
C
      BD2M(3)= O12*(YI02(1)*V1(1)+ZZ2Y(1,1))
     1        -(O33+O11)*(YI02(1)*V1(2)+ZZ2Y(1,2))
     2        +O32*(YI02(1)*V1(3)+ZZ2Y(1,3))
C
     3        +(O22+O33)*(YI02(2)*V1(1)+ZZ2Y(2,1))
     4        -O21*(YI02(2)*V1(2)+ZZ2Y(2,2))
     5        -O31*(YI02(2)*V1(3)+ZZ2Y(2,3))
C
      IF(IRAST.EQ.0) GO TO 50
C
C     CALCULATE FORCES AND MOMENTS DUE TO PRESCRIBED ACCELERATION
C     OF SECONDARY BODY
C
      OM2D(1)=-GAM2DD*CALP*SBET+ALP2DD*CBET-ALP2D*BET2D*SBET
     1        +GAM2D*(ALP2D*SALP*SBET-BET2D*CALP*CBET)
      OM2D(2)=BET2DD+GAM2DD*SALP+GAM2D*ALP2D*CALP
      OM2D(3)=GAM2DD*CALP*CBET+ALP2DD*SBET+ALP2D*BET2D*CBET
     1        -GAM2D*(ALP2D*SALP*CBET+BET2D*CALP*SBET)
C
C     ANGULAR ACCELERATION TERM FOR SYSTEM TRANSLATION
C
      CALL MATV(1,B0B,OM2D,V2)
      CALL CROSSV(V2,V1,V4)
C
      DO 20 I=1,3
      BD2F(I)=BD2F(I)+V4(I)
   20 CONTINUE
C
C     ANGULAR ACCELERATION TERMS FOR SYSTEM ROTATION
C
      BD2M(1)=BD2M(1)+V2(1)*(YI02(2)*V1(2)+YI02(3)*V1(3)
     1                     +ZZ2Y(2,2)+ZZ2Y(3,3))
     2                -V2(2)*(YI02(2)*V1(1)+ZZ2Y(2,1))
     3                -V2(3)*(YI02(3)*V1(1)+ZZ2Y(3,1))
C
      BD2M(2)=BD2M(2)-V2(1)*(YI02(1)*V1(2)+ZZ2Y(1,2))
     1                +V2(2)*(YI02(3)*V1(3)+YI02(1)*V1(1)
     2                     +ZZ2Y(3,3)+ZZ2Y(1,1))
     3                -V2(3)*(YI02(3)*V1(2)+ZZ2Y(3,2))
C
      BD2M(3)=BD2M(3)-V2(1)*(YI02(1)*V1(3)+ZZ2Y(1,3))
     1               -V2(2)*(YI02(2)*V1(3)+ZZ2Y(2,3))
     2               +V2(3)*(YI02(1)*V1(1)+YI02(2)*V1(2)
     3                      +ZZ2Y(1,1)+ZZ2Y(2,2))
C
C
   50 CONTINUE
C
      IF(IOUT.EQ.1) GO TO 52
      WRITE(6,5999) ITEST
 5999 FORMAT('0',10X,'DEBUGGING OUTPUT FROM SECBD2 ITEST =',I2,/)
      WRITE(6,6000) BD2F,BD2M,OM2
 6000 FORMAT(' ',1P10E13.5)
   52 CONTINUE
C
      IF(NDOF2.EQ.0) GO TO 100
C
C     CALCULATE SECONDARY BODY INERTIAL TERMS
C
      CALL MATV(2,B0B,OMEG,U1)
C
      DO 25 I=1,3
      U3(I)=2.0D0*U1(I)+OM2(I)
      DO 25 J=1,3
      OO(I,J)=U1(I)*U1(J)
      O2O(I,J)=U3(I)*OM2(J)+OO(I,J)
      ZY(I,J)=ZB(I)*YIZ02(J)
   25 CONTINUE
C
      OTR=OO(1,1)+OO(2,2)+OO(3,3)
C
      SBDM(1)= OO(1,3)*ZY(2,1)+O2O(1,3)*ZZ2(2,1)
     1        +OO(2,3)*ZY(2,2)+O2O(2,3)*ZZ2(2,2)
     2        +OO(3,3)*ZY(2,3)+O2O(3,3)*ZZ2(2,3)
C
     3        -OO(1,2)*ZY(3,1)-O2O(1,2)*ZZ2(3,1)
     4        -OO(2,2)*ZY(3,2)-O2O(2,2)*ZZ2(3,2)
     5        -OO(3,2)*ZY(3,3)-O2O(3,2)*ZZ2(3,3)
C
     6        -OTR*(ZY(2,3)-ZY(3,2))
C
      SBDM(2)= OO(1,1)*ZY(3,1)+O2O(1,1)*ZZ2(3,1)
     1        +OO(2,1)*ZY(3,2)+O2O(2,1)*ZZ2(3,2)
     2        +OO(3,1)*ZY(3,3)+O2O(3,1)*ZZ2(3,3)
C
     3        -OO(1,3)*ZY(1,1)-O2O(1,3)*ZZ2(1,1)
     4        -OO(2,3)*ZY(1,2)-O2O(2,3)*ZZ2(1,2)
     5        -OO(3,3)*ZY(1,3)-O2O(3,3)*ZZ2(1,3)
C
     6        -OTR*(ZY(3,1)-ZY(1,3))
C
      SBDM(3)= OO(1,2)*ZY(1,1)+O2O(1,2)*ZZ2(1,1)
     1        +OO(2,2)*ZY(1,2)+O2O(2,2)*ZZ2(1,2)
     2        +OO(3,2)*ZY(1,3)+O2O(3,2)*ZZ2(1,3)
C
     3        -OO(1,1)*ZY(2,1)-O2O(1,1)*ZZ2(2,1)
     4        -OO(2,1)*ZY(2,2)-O2O(2,1)*ZZ2(2,2)
     5        -OO(3,1)*ZY(2,3)-O2O(3,1)*ZZ2(2,3)
C
     6        -OTR*(ZY(1,2)-ZY(2,1))
C
      CALL SBDINF(ANG2,ANG2D,TRKS,TRKD)
C
      TGAM=TRKS(1)+TRKD(1)
      TALP=TRKS(2)+TRKD(2)
      TBET=TRKS(3)+TRKD(3)
C
      TGC=TGAM*CALP
      SBDM(1)=SBDM(1)+TALP*CBET-TGC*SBET
      SBDM(2)=SBDM(2)+TBET+TGAM*SALP
      SBDM(3)=SBDM(3)+TALP*SBET+TGC*CBET
C
      DO 30 I=1,3
      WS=0.0D0
      DO 29 J=1,3
      WS=WS+COMQ(I,J)*SBDM(J)
   29 CONTINUE
      RT2(I)=-WS-VP(I)
   30 CONTINUE
C
      DO 35 I=1,NDOF2
      WS=0.0D0
      DO 34 J=1,NDOF2
      WS=WS+DELT2I(I,J)*RT2(J)
   34 CONTINUE
      DIR2(I)=WS
   35 CONTINUE
C
      DO 40 I=1,6
      WS=0.0D0
      DO 38 J=1,NDOF2
      WS=WS+QGAM(J,I)*DIR2(J)
   38 CONTINUE
      ETA(I)=ETA(I)-VPS(I)-WS
      DO 39 K=1,6
      ZML(I,K)=ZML(I,K)-DALP(I,K)
   39 CONTINUE
   40 CONTINUE
C
C
      IF(IOUT.EQ.1) GO TO 26
      WRITE(6,6000) TRKS,TRKD,TGAM,TALP,TBET
      WRITE(6,6000) SBDM
      WRITE(6,6000) RT2,ETA
   26 CONTINUE
C
C
C
  100 CONTINUE
C
C
      DO 105 I=1,3
      I3=I+3
      ETA(I)=ETA(I)-BD2F(I)
      ETA(I3)=ETA(I3)-BD2M(I)
  105 CONTINUE
C
C
  110 CONTINUE
C
      RETURN
C
  120 CONTINUE
C
      IF(NDOF2.EQ.0) GO TO 150
C
      DO 130 I=1,NDOF2
      WS=0.0D0
      DO 129 J=1,6
      WS=WS+DIQGM(I,J)*ETA(J)
  129 CONTINUE
      ADER(I)=DIR2(I)-WS
  130 CONTINUE
C
      I1=NDEP2
      I2=NDEP2+NDOF2
      DER(I1)=DEP(I2)
      DER(I2)=ADER(1)
      IF(NDOF2.EQ.1) GO TO 150
      I1=I1+1
      I2=I2+1
      DER(I1)=DEP(I2)
      DER(I2)=ADER(2)
      IF(NDOF2.EQ.2) GO TO 150
      I1=I1+1
      I2=I2+1
      DER(I1)=DEP(I2)
      DER(I2)=ADER(3)
C
  150 CONTINUE
C
C
C
      RETURN
C
      END
      SUBROUTINE SECOUT
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ACFILT/ACPARM(20),IACFLT(20)
C
      COMMON/ACTOUT/SOUT,VOUT,WOUT
C
      COMMON/CONSTS/PI,TWOPI,RADIAN
C
      COMMON/ISECBD/I2BDY
C
      COMMON/SBDOUT/ANG2(3),ANG2D(3),ANG2DD(3),B(3,3),B0B(3,3)
     1             ,OM2(3),SALP,CALP,SBET,CBET,H2B(3)
C
      DATA I5/',A5,'/
      DATA I8/',A8,'/
C
      IF(I2BDY.EQ.0) GO TO 10
      GAMSB=ANG2(1)/RADIAN
      ALPSB=ANG2(2)/RADIAN
      BETSB=ANG2(3)/RADIAN
      CALL SET('GAMSB   ',0,0,GAMSB,I5)
      CALL SET('ALPSB   ',0,0,ALPSB,I5)
      CALL SET('BETSB   ',0,0,BETSB,I5)
      OM1SB=OM2(1)/RADIAN
      OM2SB=OM2(2)/RADIAN
      OM3SB=OM2(3)/RADIAN
      CALL SET('OM1SB   ',0,0,OM1SB,I5)
      CALL SET('OM2SB   ',0,0,OM2SB,I5)
      CALL SET('OM3SB   ',0,0,OM3SB,I5)
C
   10 CONTINUE
C
      IF(IACFLT(1).EQ.0) RETURN
      CALL SET('SEN OUTP',0,0,SOUT,I8)
      CALL SET('FIL OUTP',0,0,VOUT,I8)
C
C
      RETURN
C
      END
      SUBROUTINE SET(HEAD,IELEM,MODE,VALUE,IMAT)
C
C        'SET' CONTROLS OUTPUT OF THE VARIABLE NAMES
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/PRCOM/STORE(10,30),ILINE,ICOL,ICNT,IHD
C
      DIMENSION HEADER(10),IW1(10),IW2(10),ICHAR(7)
      DIMENSION IFMT(44),ICC(2),ISP(7)
      DATA IFMT(1)/'(   '/,IFMT(3)/'1X  '/,IFMT(44)/')   '/
      DATA ICC/'1H1,','1H ,'/
      DATA ISP/'10X ',' 9X ',' 8X ',' 7X ',' 6X ',' 5X ',' 3X '/
      DATA I1/'I1, '/,IA/'A1, '/
      DATA ICHAR/',A1,',',A2,',',A3,',',A4,',',A5,',',A6,',',A8,'/
      DATA IBLK/'    '/
C
      ICOL=ICOL+1
      IF (ICOL .LE. 10)  GO TO 190
      ILINE=ILINE+1
      ICOL=1
  190 STORE(ICOL,ILINE)=VALUE
      IF (IHD .NE. 1)  RETURN
      IFMT(2)=ICC(2)
      IF (ILINE .EQ. 1)  IFMT(2)=ICC(1)
      HEADER(ICOL)=HEAD
      IF (ICOL .NE. 1)  GO TO 270
      ICNT=ICNT+1
      DO 240 I=1,10
      J=(I-1)*4+4
      IFMT(J)=IBLK
      IFMT(J+1)=IBLK
      IFMT(J+2)=IBLK
  240 IFMT(J+3)=IBLK
  270 IFMT((ICOL-1)*4+4)=IMAT
      DO 271 I=1,7
      IF (IMAT .EQ. ICHAR(I))  GO TO 272
  271 CONTINUE
  272 IFMT((ICOL-1)*4+7)=ISP(I)
      IF (IELEM .EQ. 0)  GO TO 275
      IFMT((ICOL-1)*4+5)=I1
      IW1(ICOL)=IELEM
  274 IF (MODE .EQ. 0)  GO TO 280
      IFMT((ICOL-1)*4+6)=I1
      IW2(ICOL)=MODE
      GO TO 300
  275 IFMT((ICOL-1)*4+5)=IA
      IW1(ICOL)=IBLK
      GO TO 274
  280 IFMT((ICOL-1)*4+6)=IA
      IW2(ICOL)=IBLK
  300 IF (ICOL .EQ. 10)  GO TO 310
      RETURN
      ENTRY SETEND
  310 WRITE (6,IFMT)  (HEADER(I),IW1(I),IW2(I),I=1,ICOL)
      RETURN
      END
      SUBROUTINE SETVAL(ITEST)
C
C        COMPUTES THE FM(3,3) ARRAY FROM THE ANGLES INPUT FOR
C        THE LIBRATION DAMPER (BETLD,GAMLD,PHILD) AND ALSO SETS UP
C        INDICES FOR POINTING LATER IN THE SIMULATOR.  CALCULATES
C        ANTENNA DEPLOYMENT AND THE 'A' ARRAY
C
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER*4 DDPLY
C
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10),TTST
C
      COMMON/DEPLOY/DDPLY,MDPLY
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/LIBDPR/ ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,
     .               ZMDO,ZMDBO,CNV,DECAY
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL6/ FM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
C
      IF(ITEST.EQ.2) GO TO 30
C
C
      SBET=DSIN(BETLD*RADIAN)
      CBET=DCOS(BETLD*RADIAN)
      SGAM=DSIN(GAMLD*RADIAN)
      CGAM=DCOS(GAMLD*RADIAN)
C
C
      DO 10 I=1,3
      DO 10 J=1,3
   10 FM1(I,J)=0.D0
C
C
      FM1(1,2)=-CBET*SGAM
      FM1(2,2)= CGAM
      FM1(3,2)= SBET*SGAM
C
      IA=9
      IF(IDAMP.EQ.1) IA=11
      IAB=IA + 1
      ISM=0
      IT=1
      II=1
C
      DO 20 I=1,IK
      IF(NK(I).EQ.0) GO TO 20
      ISM=ISM + NK(I)
      IF(IT.EQ.2) GO TO 20
      IT=2
      II=I
   20 CONTINUE
C
      IBB=IAB + 2*ISM
      IAPS=IAB + NK(II)
      IBPS=IBB + NK(II)
      RETURN
C
C
   30 TTST=TIME - TSTART
      TIMSQR=TTST*TTST
      DO 40 I=1,IK
      IF(MDPLY.EQ.0) ZL1(I)=0.0D0
      ZL2(I)=ZLA(I)/2.D0
      ZLK(I)=ZL0(I) + ZL1(I)*TTST + ZL2(I)*TIMSQR
      ZLKP(I)=ZL1(I) + 2.D0*ZL2(I)*TTST
   40 ZLKDP(I)=2.D0*ZL2(I)
      L1=0
C
C     RIGID BODY MOTION PARAMETERS
C
      AONE=DSQRT(DEPEND(1)**2+DEPEND(2)**2+DEPEND(3)**2)
      ATWO=DSQRT(DEPEND(4)**2+DEPEND(5)**2+DEPEND(6)**2)
      DO 50 I=1,2
      DO 50 J=1,3
      L1=L1+1
      IF(I.EQ.1) SA(I,J)=DEPEND(L1)/AONE
      IF(I.EQ.2) SA(I,J)=DEPEND(L1)/ATWO
   50 CONTINUE
      SA(3,1)=SA(1,2)*SA(2,3)-SA(1,3)*SA(2,2)
      SA(3,2)=SA(1,3)*SA(2,1)-SA(1,1)*SA(2,3)
      SA(3,3)=SA(1,1)*SA(2,2)-SA(1,2)*SA(2,1)
      ATHREE=DSQRT(SA(3,1)**2+SA(3,2)**2+SA(3,3)**2)
      SA(3,1)=SA(3,1)/ATHREE
      SA(3,2)=SA(3,2)/ATHREE
      SA(3,3)=SA(3,3)/ATHREE
      SA(2,1)=SA(1,3)*SA(3,2)-SA(1,2)*SA(3,3)
      SA(2,2)=SA(1,1)*SA(3,3)-SA(1,3)*SA(3,1)
      SA(2,3)=SA(1,2)*SA(3,1)-SA(1,1)*SA(3,2)
      ATWO=DSQRT(SA(2,1)**2+SA(2,2)**2+SA(2,3)**2)
      SA(2,1)=SA(2,1)/ATWO
      SA(2,2)=SA(2,2)/ATWO
      SA(2,3)=SA(2,3)/ATWO
      DEPEND(1)=SA(1,1)
      DEPEND(2)=SA(1,2)
      DEPEND(3)=SA(1,3)
      DEPEND(4)=SA(2,1)
      DEPEND(5)=SA(2,2)
      DEPEND(6)=SA(2,3)
C
      DO 60 I=1,3
      DO 60 J=1,3
   60 SAT(I,J)=SA(J,I)
C
      DO 65 I=1,3
   65 OMEG(I)=DEPEND(I+6)
C
C     COMPUTE THE DERIVATIVES OF THE DIRECTION COSINES
      DERIV(1)=DEPEND(2)*OMEG(3)-DEPEND(3)*OMEG(2)
      DERIV(2)=DEPEND(3)*OMEG(1)-DEPEND(1)*OMEG(3)
      DERIV(3)=DEPEND(1)*OMEG(2)-DEPEND(2)*OMEG(1)
      DERIV(4)=DEPEND(5)*OMEG(3)-DEPEND(6)*OMEG(2)
      DERIV(5)=DEPEND(6)*OMEG(1)-DEPEND(4)*OMEG(3)
      DERIV(6)=DEPEND(4)*OMEG(2)-DEPEND(5)*OMEG(1)
C
      SPHI=DSIN(PHILD)
      CPHI=DCOS(PHILD)
C
      IF(IDAMP.EQ.0) GO TO 70
      PHI=DEPEND(10)
      PHID=DEPEND(11)
      SPHI=DSIN(PHI)
      CPHI=DCOS(PHI)
C
   70 FM1(1,1)= CBET*CGAM*CPHI - SBET*SPHI
      FM1(2,1)= SGAM*CPHI
      FM1(3,1)=-CBET*SPHI - SBET*CGAM*CPHI
C
      FM1(1,3)= SBET*CPHI + CBET*CGAM*SPHI
      FM1(2,3)= SGAM*SPHI
      FM1(3,3)= CBET*CPHI - SBET*CGAM*SPHI
C
C
C
      RETURN
      END
      SUBROUTINE SHADEK(DIZ,PERSUN,PERSND,INDS,K,ISATD)
C
C           'SHADEK' COMPUTES SHADOWING OF ELEMENTS AND SWITCHES INDICES
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL6/ FM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
      COMMON/SATLSH/ TAUK(10),OCULTK(10),RADSH
C
      DIMENSION DIZ(3),OMK(3),ISATD(10)
C
       INDS=0
      TEST=DIZ(1)
      IF(TEST.LT.0.0D0) GO TO 6
      DTRAN=DSQRT(DIZ(2)**2+DIZ(3)**2)
      IF(DTRAN.LE.0.001D0) GO TO 5
      SHADL=RADSH*DIZ(1)/DTRAN
      PERSUN=1.0D0-SHADL/ZLK(K)
      IF(PERSUN.GT.0.0D0) GO TO 10
    5 CONTINUE
      PERSUN=0.0D0
      GO TO 10
    6 CONTINUE
      PERSUN=1.0D0
   10 CONTINUE
      IF(PERSUN.EQ.1.0D0.OR.PERSUN.EQ.0.0D0) GO TO 30
C
      DO 11 I=1,3
      OMK(I)=FCM(1,I)*OMEG(1)+FCM(2,I)*OMEG(2)+FCM(3,I)*OMEG(3)
      IF(IDAMP.EQ.0.OR.K.GT.K1) GO TO 11
      OMK(I)=OMK(I)+FM(2,I)*PHID
   11 CONTINUE
      DIKDT=OMK(3)*DIZ(2)-OMK(2)*DIZ(3)
C
      INDS=ISATD (K)
      SHADLD=RADSH*DIKDT/DTRAN**3
      PERSND=-SHADLD/ZLK(K)
      MIND=0
      TEST=PERSND*TAUK(K)
      TEST=DABS(TEST)
      IF(TEST.GT.OCULTK(K)) MIND=1
      IF(PERSND.GT.0.0D0) GO TO 20
C     ENTERING SHADOW
      IF(ISATD(K).NE.1.AND.MIND.EQ.1) INDS=1
      GO TO 40
   20 CONTINUE
      IF(ISATD(K).NE.2.AND.MIND.EQ.1) INDS=2
      GO TO 40
   30 CONTINUE
      PERSND=0.0D0
   40 CONTINUE
      RETURN
      END
      SUBROUTINE SHADEP(SOLILL)
C
C           'SHADEP' CALCULATES SWITCHING FOR THERMAL LAG DURING
C            PLANET SHADOWING
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/ISHADE/ IPLANS,ISATSH,IWRTTF
C
      COMMON/ITDLAY/ ITIMIN,ISSWCH,IPDLAY,JENTRY
C
      COMMON/PLANSH/ OCCRIT,TAUPL
C
      COMMON/RPOOL1/ RHOK(10),T   ,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
C
      IF(ITIM.EQ.2) GO TO 10
      TLAST=T
      TSAVE=T
      SISAVE=SOLILL
      SIMIN1=SOLILL
      ISSWCH=0
      IPDLAY=0
      ITIMIN=0
      JENTRY=1
      GO TO 150
C
C
   10 CONTINUE
      TEST=T-TSAVE
      IF(TEST.LE.0.0D0) GO TO 20
      TLAST=TSAVE
      TSAVE=T
      ITIMIN=1
      SIMIN1=SISAVE
      SISAVE=SOLILL
      ISSWCH=0
      GO TO 100
   20 CONTINUE
      TSAVE=T
      ITIMIN=0
      SISAVE=SOLILL
  100 CONTINUE
      IF(IPLANS.EQ.0) GO TO 150
      DELSI=SOLILL-SIMIN1
      DELT=T-TLAST
      TEST=DELSI*TAUPL/DELT
      TEST=DABS(TEST)
      IF(TEST.LT.OCCRIT) GO TO 150
      ISSWCH=1
      IF(DELSI.LT.0.0D0) ISSWCH=2
      IF(IPDLAY.EQ.ISSWCH) ISSWCH=0
  150 CONTINUE
      RETURN
      END
      SUBROUTINE SHADES(K,N,DIZ,FTAK,FTBK)
C
C           'SHADES' CALCULATES THERMAL LAG OF ELEMENT THERMAL FORCES
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/ISHADE/ IPLANS,ISATSH,IWRTTF
C
      COMMON/ITDLAY/ ITIMIN,ISSWCH,IPDLAY,JENTRY
C
      COMMON/SATLSH/ TAUK(10),OCULTK(10),RADSH
C
      COMMON/RPOOL1/ RHOK(10),T   ,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      DIMENSION DIZ(3),DIK(3),FTAKD(10,3),FTBKD(10,3),ISATD(10)
      DIMENSION TREF(10)
C
C
      IF(JENTRY.EQ.2) GO TO 10
C
      DO 5 I=1,10
      DO 4 J=1,3
      FTAKD(I,J) = 0.0D0
      FTBKD(I,J) = 0.0D0
    4 CONTINUE
      TREF(I)=T
      ISATD(I)=0
    5 CONTINUE
      JENTRY=2
C
   10 CONTINUE
C
C
      DO 11 I=1,3
      DIK(I)=DIZ(I)
   11 CONTINUE
C
      MTEST=1
      IF(ISATSH.EQ.0) GO TO 135
      IF(N.EQ.1) CALL SHADEK(DIK,PERSUN,PERSND,INDS,K,ISATD)
      IF(INDS.EQ.0.OR.ITIMIN.EQ.0) GO TO 100
      ITEST=ISATD(K)
       IF (ITEST .EQ. INDS) GO TO 100
      AREF=PERSUN*FTAK
      BREF=PERSUN*FTBK
       IF (ITEST .EQ. 0)GO TO 30
      WS1=-(T-TREF(K))/TAUK(K)
      IF((WS1+10.0D0).GT.0.0D0) GO TO 25
      WS2=0.0D0
      GO TO 26
   25 CONTINUE
      WS2=DEXP(WS1)
   26 CONTINUE
      AREF=FTAKD(K,N)*WS2+(1.0D0-WS2)*AREF
      BREF=FTBKD(K,N)*WS2+(1.0D0-WS2)*BREF
   30 CONTINUE
      FTAKD(K,N)=AREF
      FTBKD(K,N)=BREF
      TREF(K)=T
      IF(N.EQ.NK(K)) ISATD(K)=INDS
  100 CONTINUE
      AREF=PERSUN*FTAK
      BREF=PERSUN*FTBK
  124 CONTINUE
      ITEST=ISATD(K)
      IF(ITEST.EQ.0) GO TO 130
      WS1=-(T-TREF(K))/TAUK(K)
      IF((WS1+10.0D0).GT.0.0D0) GO TO 125
      WS2=0.0D0
      ISATD(K)=0
      GO TO 126
  125 CONTINUE
      WS2=DEXP(WS1)
  126 CONTINUE
      SFTAK=FTAKD(K,N)*WS2+(1.0D0-WS2)*AREF
      SFTBK=FTBKD(K,N)*WS2+(1.0D0-WS2)*BREF
      GO TO (140,200) ,MTEST
  130 CONTINUE
      SFTAK=AREF
      SFTBK=BREF
      GO TO (140,200) ,MTEST
  135 CONTINUE
      SFTAK=FTAK
      SFTBK=FTBK
  140 CONTINUE
      IF(IPLANS.EQ.0) GO TO 200
      IF(ISSWCH.EQ.0.OR.ITIMIN.EQ.0) GO TO 150
      IPDLAY=ISSWCH
      FTAKD(K,N)=SFTAK
      FTBKD(K,N)=SFTBK
      TREF(K)=T
      IF(N.EQ.NK(K)) ISATD(K)=ISSWCH
  150 CONTINUE
      IF(IPDLAY.EQ.0) GO TO 200
      MTEST=2
      AREF=SFTAK
      BREF=SFTBK
      GO TO 124
  200 CONTINUE
      FTAK=SFTAK
      FTBK=SFTBK
      RETURN
      END
      SUBROUTINE SINPUT(DEPEND)
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/LIBDPR/ ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,
     .               ZMDO,ZMDBO,CNV,DECAY
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL6/ FM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
      COMMON/XIN1  / PSI1,THET1,PHI1,ETTAE,ZETTA,ITEST1
C
C
C
      DIMENSION DEPEND(150),OMRB(3)
C
      PHI1=PHI1*RADIAN
      PSI1=PSI1*RADIAN
      THET1=THET1*RADIAN
C
      SPHI1=DSIN(PHI1)
      CPHI1=DCOS(PHI1)
      SPSI1=DSIN(PSI1)
      CPSI1=DCOS(PSI1)
      STHET1=DSIN(THET1)
      CTHET1=DCOS(THET1)
C
      ANG1=CPHI1*CPSI1
      ANG2=SPHI1*SPSI1
      ANG3=CPHI1*SPSI1
      ANG4=SPHI1*CPSI1
C
      SA(1,1)= ANG1 - ANG2*CTHET1
      SA(2,1)= ANG3 + ANG4*CTHET1
      SA(3,1)= SPHI1*STHET1
C
      SA(1,2)=-ANG4 - ANG3*CTHET1
      SA(2,2)=-ANG2 + ANG1*CTHET1
      SA(3,2)= CPHI1*STHET1
C
      SA(1,3)= SPSI1*STHET1
      SA(2,3)=-CPSI1*STHET1
      SA(3,3)= CTHET1
C
      DO 10 I=1,3
      OMEG(I)=OMEG(I)*RADIAN
      OMRB(I)=OMEG(I)
      DO 10 J=1,3
   10 SAT(I,J)=SA(J,I)
C
      L=0
      DO 20 I=1,2
      DO 20 J=1,3
      L=L + 1
   20 DEPEND(L)=SA(I,J)
C
      DO 30 I=1,3
      L=I + 6
   30 DEPEND(L)=OMRB(I)
C
      PHI1=PHI1/RADIAN
      PSI1=PSI1/RADIAN
      THET1=THET1/RADIAN
C
      IF(IDAMP.EQ.0) RETURN
      PHI=PHILD*RADIAN
      PHID=DPHILD*RADIAN
      DEPEND(10)=PHI
      DEPEND(11)=PHID
C
      RETURN
      END
      SUBROUTINE SNSMAG(ISKEL,DEP,SMAGB,SMAGM)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/IPOOL1/IGRAV,IDAMP,IK,K1,ITIM,IDUM1(34)
C
      COMMON/RPOOL1/RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),DUM01(86)
C
      COMMON/RPOOL5/CKMAT(3,3,10),FM2(3,3)
C
      COMMON/SNSWRK/NSELB,NSELT,IASEL,IBSEL,ICSEL,LOC
C
      COMMON/TMSINR/TIPINR(3,10),RSQ(3,10),XIPL(6),BETL(6)
C
C
      DIMENSION DEP(150),SMAGB(3),SMAGM(3)
      DIMENSION SMAT(3,3),FCM(3,3),DM1(3,3),DM2(3,3)
C
C
      IFLAG=NSELB+NSELT
      IF(IFLAG.NE.0) GO TO 10
      DO 5 I=1,3
      SMAGM(I)=SMAGB(I)
    5 CONTINUE
C
      RETURN
C
   10 CONTINUE
C
      ZL=ZLK(ISKEL)
      U1P=1.0D0
      U2P=0.0D0
      U3P=0.0D0
      F=0.5D0
      W22=0.0D0
      W33=0.0D0
C
      IF(NSELB.EQ.0) GO TO 35
      IA=IASEL-1
      IB=IBSEL-1
      DO 20 I=1,NSELB
      I1=IA+I
      I2=IB+I
      I3=LOC+I
      WS=XIPL(I3)/ZL
      U2P=U2P+DEP(I1)*WS
      U3P=U3P+DEP(I2)*WS
   20 CONTINUE
      W22=U2P*U2P
      W33=U3P*U3P
      U1P=1.0D0-W22-W33
      IF(U1P.LT.0.0D0) U1P=0.0D0
      U1P=DSQRT(U1P)
      F=1.0D0/(1.0D0+U1P)
C
   35 CONTINUE
C
      TWI=0.0D0
      ST=0.0D0
      CT=1.0D0
C
      IF(NSELT.EQ.0) GO TO 45
C
      IC=ICSEL-1
      DO 40 I=1,NSELT
      I1=IC+I
      I2=LOC+I
      TWI=TWI+DEP(I1)*BETL(I2)
   40 CONTINUE
      ST=DSIN(TWI)
      CT=DCOS(TWI)
C
   45 CONTINUE
C
      SMAT(1,1)=U1P
      SMAT(1,2)=U2P
      SMAT(1,3)=U3P
      SMAT(2,1)=-U3P*ST-U2P*CT
      SMAT(3,1)=U2P*ST-U3P*CT
      WS1=U2P*U3P*F
      WS2=1.0D0-W22*F
      WS3=1.0D0-W33*F
      SMAT(2,2)=-WS1*ST+WS2*CT
      SMAT(3,2)=-WS2*ST-WS1*CT
      SMAT(2,3)=WS3*ST-WS1*CT
      SMAT(3,3)=WS1*ST+WS3*CT
C
      IF(ISKEL.GT.K1) GO TO 46
      CALL MPYMAT(FM1,CKMAT(1,1,ISKEL),DM1,1,1,FCM,DM1)
      GO TO 47
C
   46 CONTINUE
C
      CALL MPYMAT(FM2,CKMAT(1,1,ISKEL),DM1,1,1,FCM,DM1)
C
   47 CONTINUE
C
      CALL MPYMAT(FCM,SMAT,FCM,2,2,DM1,DM2)
      CALL MATV(1,DM2,SMAGB,SMAGM)
C
C
      RETURN
C
C
      END
      SUBROUTINE SOLAR(K,NKN,XLK,DIY,SUMFB,SUMMBP,SUMDBP,FPAN,FPBN,
     .           FSDTKA,FSDTKB,NT,SSUMFB)
       IMPLICIT REAL*8(A-H,O-Z)
C
C     SOLAR PRESSURE LOADINGS
C     COMPUTES SOLAR PRESSURE FORCES AND SOLAR TEMPERATURE FORCES
C     ON ELEMENTS AND SOLAR PRESSURE MOMENT ON ENTIRE SATELLITE FOR MM=1
C     COMPUTES AERO FORCES AND AERO TEMPERATURE FORCES ON ELEMENTS
C     AND AERO MOMENT ON ENTIRE SATELLITE FOR MM=2
C     COMPUTES DAMPING FORCES FOR ELEMENTS
C     COMPUTES INTERNAL GENERALISED FORCES FOR ELEMENTS
C     SUBROUTINES REQUIRED
C          DSQRT,SHADES
C
C
      COMMON/CCMBNZ/ CMRK(10),Z01(4),Z02(4),Z03(4),Z04(4),Z11(12),
     .               Z12(12),Z13(12),Z14(12),Z15(12),Z16(12),Z21(36),
     .               Z22(36),Z23(36),Z24(36),Z25(36),Z26(36),Z27(36),
     .               Z28(36),Z31(108),Z32(108),Z33(108),Z34(108),
     .               Z35(108),Z41(324),Z42(324),Z43(324),ZK21(18),
     .               ZK22(18),ZK23(18),ZK31(54),ZK32(54),ZK33(54),
     .               ZK34(54),ZK35(54),ZK36(54),ZK41(162),ZK42(162),
     .               ZK43(162),ZK44(162),ZK45(162),ZK46(162),ZK47(162),
     .               ZK48(162),ZS01(2),ZS02(2),ZS11(6),ZS12(6),ZS13(6),
     .               ZS21(18),ZS22(18),ZS23(18),ZS24(18),ZS31(54),
     .               ZS32(54),ZS41(162),ZT21(108),ZT22(108),STAO(18),
     .               STA1(18),STA2(18),STBO(18),STB1(18),STB2(18),
     .               Z2S01(2),Z2S12(6),Z2S23(18)
C
      COMMON/CENVRN/ GGMOM(3),SPMOM(3),ADMOM(3),HUBSPM(3),HUBADM(3)
C
      COMMON/COMSOL/ ZZ01(10),ZZ12(3,10),ZZ23(9,10),SZS01(10),SZS02(10),
     1               SZS11(3,10),SZS12(3,10),SZS13(3,10),SZS21(9,10),
     1               SZS22(9,10),SZS23(9,10),SZS24(9,10),SZS31(27,10),
     1               SZS32(27,10),SZS41(81,10)
C
      COMMON/CSOLAR/ SAO(10),SKA(9),SKB(9),SKOA(10,3),SKOB(10,3),
     .               STMK(10),SKAA(10,9),SKBB(10,9)
C
      COMMON/EISUBK/ EI(10)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/ISHADE/ IPLANS,ISATSH,IWRTTF
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON/SOLOUT/ FTAKIN(10,3),FTAKOT(10,3),FTBKIN(10,3),FTBKOT(10,3)
C
      COMMON/SPRESX/ SPRES(10,3)
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
C
      DIMENSION FCMT(3,3),DIY(3),DIZ(3),D(3,6),U(6),S(200),X2U(6),X3U(6)
     .         ,X1U(6),STAK1(3),STAK2(3),X2AU(6,3),X3BU(6,3),STBK1(3),
     .          STBK2(3),SPAK(9),SPBK(9),X1AL(3),X2AL(3),X3BL(3),X1BL(3)
     .         ,X1AU(6,3),X1BU(6,3),FSDTKA(3),FSDTKB(3),FK(3),FTMK(3),
     .          FPAN(3),FPBN(3),ZMZ(3),FTZK(3),FTYK(3),ZMY(3),SUMMBP(3),
     .          SUMFB(3),FITZ(3),DMAT1(10,3,6),DMAT(10,3,6),
     .          SDIY(3),SSUMFB(3)
        LTAP5=6
      DO 500 I=1,9
      SKA(I)=SKAA(K,I)
  500 SKB(I)=SKBB(K,I)
       SPRES(K,1)=0.D0
       SPRES(K,2)=0.D0
       SPRES(K,3)=0.D0
       RHO = RHOK(K)
        XLK2= XLK * XLK
       XLK4 = XLK2 * XLK2
       NKN2 = NKN * NKN
       IF(NKN)10000,10000,10001
10001  DO 170 I=1,NKN
       FSDTKA(I) = 0.0D0
       FSDTKB(I) = 0.0D0
       FPAN(I) = 0.0D0
  170  FPBN(I) = 0.0D0
10000    SK = SAO(K)
         WS1= SK * XLK
         WS2= SK / XLK
         WS3= WS2/XLK
       WS4 = 1.0D0/(RHO *XLK2)
       MM = 1
  160   CONTINUE
      IF(MM.EQ.2) CALL COMBNS(K,XLK,X1L,X2L,X3L,PO,1)
         C1 = PO/(RHO *XLK)
       C2 = PO/(RHO * XLK) *STMK(K)
       SP1 = PO * STMK(K)
       DO 9 I= 1,3
        SUM = 0.0D0
       DO 10 J=1,3
   10   SUM = SUM + CFMT(I,J) * DIY(J)
    9   DIZ(I) = SUM
        DZ1 = DIZ(1)
        DZ2 = DIZ(2)
        DZ3 = DIZ(3)
       DZ123= DZ1 * DZ2 * DZ3
       DZ11 = DZ1 * DZ1
       DZ22 = DZ2 * DZ2
       DZ33 = DZ3 * DZ3
        DEN = DZ22 + DZ33
        SQR = DSQRT(DEN)
        GO TO (102,103),MM
  103   IF(SQR)250,105,250
  105  GO TO (106,107),ITIM
  107   DO 108 I=1,3
       DO 108 J=1,6
  108  D(I,J) = DMAT1(K,I,J)
       GO TO 109
  106  DO 110 I=1,3
       DO 110 J=1,6
  110  D(I,J) = 0.0D0
       GO TO 109
  102  IF(SQR)250,251,250
  251   GO TO (252,401),ITIM
  401  DO 402 I=1,3
       DO 402 J=1,6
  402  D(I,J) = DMAT(K,I,J)
        GO TO 255
  252   DO 254 I=1,3
       DO 254 J=1,6
  254  D(I,J) = 0.0D0
       GO TO 255
  250  D(1,1) = 0.0D0
       D(1,2)= -DZ2 * SQR
        DEN1 = DZ11/DEN
        DEN2 = DZ22/DEN
        DEN3 = DZ33/DEN
       D(1,3)= -DZ3 * SQR
       D(1,4)= DZ1 * SQR * (1.0D0 + DEN2)
       D(1,5)= DZ1 * SQR * (1.0D0 + DEN3)
       D(1,6)= 2.0D0* SQR* DZ123/DEN
       D(2,1)= DZ2 * SQR
       D(2,2)=-DZ1 * SQR * (1.0D0 + DEN2)
       D(2,3)=-DZ123*SQR/DEN
       D(2,4)=-0.5D0 * DZ2/SQR * (2.0D0 -5.0D0* DZ11 + DEN2)
       D(2,5)=-0.5D0 * DZ2/SQR * (DEN3 - DZ11)
       D(2,6)= - DZ3/SQR * (1.0D0 -2.0D0* DZ11 + DEN2)
       D(3,1)=  DZ3  * SQR
       D(3,2)= -DZ123* SQR/DEN
       D(3,3) = -DZ1* SQR *(1.0D0 + DEN3)
       D(3,4) = -0.5D0 * DZ3/SQR *(DEN2 - DZ11)
       D(3,5) = -0.5D0 * DZ3/SQR *(2.0D0- 5.0D0* DZ11 + DEN3)
   11  D(3,6) = -DZ2/SQR * (1.0D0 -2.0D0 *DZ11+ DEN3)
       GO TO (255,109),MM
  109   DO 111 I=1,3
       DO 111 J=1,6
  111  DMAT1(K,I,J) = D(I,J)
       GO TO 112
  255  CONTINUE
       DO 400 I=1,3
       DO 400 J=1,6
  400  DMAT(K,I,J) = D(I,J)
  112  GO TO (20002,20003),IOUT
20003  CONTINUE
      WRITE (LTAP5,9000) DZ1,DZ2,DZ3,SQR
 9000 FORMAT(1H0,'DZ1=',E18.8,2X,'DZ2=',E18.8,2X,'DZ3=',E18.8,2X,'SQR=',
     1E18.8)
      WRITE (LTAP5,9001) ((D(I,J),J=1,6),I=1,3)
 9001 FORMAT(1H0,'D=',6E20.8)
20002  CONTINUE
       DO 100 IL=1,200
  100   S(IL) = 0.0D0
         I1 = IAB + NT
         I2 = IBB + NT
       I3 = IAPS + NT
       I4 = IBPS + NT
      X1L=0.D0
      X2L=0.D0
      X3L=0.D0
        DO 101 IL =1,6
         U(IL) = 0.0D0
      X1U(IL)=0.D0
       X2U(IL) = 0.0D0
  101  X3U(IL) = 0.0D0
       U(1) = WS1 * SZS01(K)
         NN = 1
      LLL=LLK(K)-1
       IF(NKN)200,300,200
  200   DO 2 N=1,NKN
         N1 = N-1
         AN = DEPEND(I1+ N1)
         BN = DEPEND(I2+ N1)
       DO 42 I=1,3
         STBK1(I) = 0.0D0
         STBK2(I) = 0.0D0
        STAK1(I) = 0.0D0
   42   STAK2(I) = 0.0D0
       GO TO (118,119),MM
  118   FDKA = DAN(N,K) * DEPEND(I3+N1)*WS4
       FDKB = DBN(N,K) * DEPEND(I4+N1)*WS4
       U(2) =U(2)+ AN * SZS11(NN,K)
       U(3) =U(3)+ BN * SZS11(NN,K)
        X2AU(1,N) = WS1 * SZS12(NN,K)
        X3BU(1,N) = X2AU(1,N)
       S(50) = 0.0D0
       S(51) = 0.0D0
       DO 40 I=1,9
         SPAK(I) = 0.0D0
   40    SPBK(I) = 0.0D0
  119    DO 3 IP=1,NKN
      NP=(N-1)*3 + IP
      NPK=LLL*9+NP
      S21=SZS21(NP,K)
      IP1=IP-1
      AP=DEPEND(I1+IP1)
      BP=DEPEND(I2+IP1)
      RAP=AP - SKOA(K,IP)
      RBP=BP - SKOB(K,IP)
       GO TO (120,121),MM
  120  AB = AN * BP
         AA = AN * AP
         BB = BN * BP
C     ADD TO N AND IP LOOP
      SPAK(1)=SPAK(1)+RAP*ZK21(NPK)
      SPAK(2)=SPAK(2)+RBP*ZK22(NPK)
      SPBK(1)=SPBK(1)+RAP*ZK22(NPK)
      SPBK(2)=SPBK(2)+RBP*ZK23(NPK)
        S(50) = S(50) + AP * ZZ23(NP,K)
        S(51) = S(51) + BP * ZZ23(NP,K)
       U(4) =U(4)+ AA * S21
       U(5) =U(5)+ BB * S21
       U(6) =U(6)+ AB * S21
       S23 = SZS23(NP,K)
       S(1)= S(1) + AP * S23
       S22 = SZS22(NP,K)
       S(2)= S(2) + AP * S22
       S(3)= S(3) + BP * S22
       S(4)= S(4) + BP * S23
      DO 4 IQ =1,NKN
      NQ=(N-1)*9 + (IP-1)*3 + IQ
      NQK=LLL*27+NQ
        IQ1 = IQ -1
        AQ = DEPEND(I1 + IQ1)
        BQ = DEPEND(I2 + IQ1)
       APQ = AP * AQ
       AB  = AP * BQ
       BPQ = BP * BQ
      RAQ=AQ - SKOA(K,IQ)
      RBQ=BQ - SKOB(K,IQ)
      RAPQ=RAP*RAQ
      RAB=RAP*RBQ
      RBPQ=RBP*RBQ
C     ADD TO N IP AND IQ LOOP
      SPAK(3)=SPAK(3)+(RAPQ*ZK31(NQK))/XLK
      SPAK(4)=SPAK(4)+(RAB *ZK32(NQK))/XLK
      SPAK(5)=SPAK(5)+(RBPQ*ZK33(NQK))/XLK
      SPBK(3)=SPBK(3)+(RAPQ*ZK34(NQK))/XLK
      SPBK(4)=SPBK(4)+(RAB *ZK35(NQK))/XLK
      SPBK(5)=SPBK(5)+(RBPQ*ZK36(NQK))/XLK
       S31 = SZS31(NQ,K)
       S32 = SZS32(NQ,K)
       S(7)= S(7) + AQ * S31
       S(8)= S(8) + BQ * S31
       S(9)= S(9) + AQ * S32
       S(10)= S(10)+ BQ* S32
      DO 5 IR =1,NKN
      NR=(N-1)*27 + (IP-1)*9 + (IQ-1)*3 + IR
      NRK=LLL*81+NR
         IR1 = IR -1
         AR = DEPEND(I1 + IR1)
         BR = DEPEND(I2 + IR1)
      RAR=AR - SKOA(K,IR)
      RBR=BR - SKOB(K,IR)
        S41 = SZS41(NR,K)
        S(5)= S(5) + AR* AQ * S41
        S(6)= S(6) + BR* BQ * S41
       S(11)=S(11) + AQ* BR * S41
C     ADD TO N IP IQ IR LOOP
      SPAK(6)=SPAK(6)+(RAPQ*RAR*ZK41(NRK))/XLK2
      SPAK(7)=SPAK(7)+(RAPQ*RBR*ZK42(NRK))/XLK2
      SPAK(8)=SPAK(8)+(RAB *RBR*ZK43(NRK))/XLK2
      SPAK(9)=SPAK(9)+(RBPQ*RBR*ZK44(NRK))/XLK2
      SPBK(6)=SPBK(6)+(RAPQ*RAR*ZK45(NRK))/XLK2
      SPBK(7)=SPBK(7)+(RAPQ*RBR*ZK46(NRK))/XLK2
      SPBK(8)=SPBK(8)+(RAB *RBR*ZK47(NRK))/XLK2
      SPBK(9)=SPBK(9)+(RBPQ*RBR*ZK48(NRK))/XLK2
    5 CONTINUE
    4 CONTINUE
       S(12) = S(12) + S(7) * AP
       S(13) = S(13) + S(8) * BP
       S(14) = S(14) + S(8) * AP
       S(15) = S(15) + S(7) * BP
       S(16) = S(16) + S(5) * AP
       S(17) = S(17) + S(6) * AP
       S(18) = S(18) + S(11)* AP
       S(19) = S(19) + S(9) * AP
       S(20) = S(20) + S(10)* BP
       S(21) = S(21) + S(10)* AP
       S(22) = S(22) + S(5) * BP
       S(23) = S(23) + S(6) * BP
       S(24) = S(24) + S(11)* BP
  121   CONTINUE
C     ADD TO N AND IP LOOP FOR THERMAL FORCES
      NPA=LLL*54+NP
      NPB=NPA+27
      STAK1(1)=STAK1(1)+(AP*ZT21(NPA))/XLK
      STAK2(1)=STAK2(1)+(BP*ZT21(NPB))/XLK
      STBK1(1)=STBK1(1)+(AP*ZT22(NPA))/XLK
      STBK2(1)=STBK2(1)+(BP*ZT22(NPB))/XLK
      NPA=NPA+9
      NPB=NPB+9
      STAK1(2)=STAK1(2)+(AP*ZT21(NPA))/XLK
      STAK2(2)=STAK2(2)+(BP*ZT21(NPB))/XLK
      STBK1(2)=STBK1(2)+(AP*ZT22(NPA))/XLK
      STBK2(2)=STBK2(2)+(BP*ZT22(NPB))/XLK
      NPA=NPA+9
      NPB=NPB+9
      STAK1(3)=STAK1(3)+(AP*ZT21(NPA))/XLK
      STAK2(3)=STAK2(3)+(BP*ZT21(NPB))/XLK
      STBK1(3)=STBK1(3)+(AP*ZT22(NPA))/XLK
      STBK2(3)=STBK2(3)+(BP*ZT22(NPB))/XLK
    3 CONTINUE
       GO TO (122,123),MM
  122  WS = -S(50)/XLK
       X1AL(N) = WS
       S(52) = S(52) + AN * WS
       WS = ZZ12(NN,K)
        X2AL(N) = WS
        S(55) = S(55) + BN * WS
       X3BL(N) = WS
       S(54) = S(54) + AN * WS
       WS = -S(51)/XLK
        X1BL(N) = WS
       S(53) = S(53) + BN * WS
       X1AU(1,N) = SK * S(1)
       X1AU(2,N) = WS2* S(12)
       X1AU(3,N) = WS2* S(14)
       X1AU(4,N) = WS3* S(16)
       X1AU(5,N) = WS3* S(17)
       X1AU(6,N) = WS3* S(18)
       X2AU(2,N) = SK * S(2)
       X2AU(3,N) = SK * S(3)
       X2AU(4,N) = WS2* S(19)
       X2AU(5,N) = WS2* S(20)
       X2AU(6,N) = WS2* S(21)
       X1BU(1,N) = SK * S(4)
       X1BU(2,N) = WS2* S(15)
       X1BU(3,N) = WS2* S(13)
       X1BU(4,N) = WS3* S(22)
       X1BU(5,N) = WS3* S(23)
       X1BU(6,N) = WS3* S(24)
       X3BU(2,N) = SK * S(2)
       X3BU(3,N) = SK * S(3)
       X3BU(4,N) = WS2* S(19)
       X3BU(5,N) = WS2* S(20)
       X3BU(6,N) = WS2* S(21)
       SUM1 = 0.0D0
       SUM2 = 0.0D0
       DO 41 I=1,9
        SUM1= SUM1 + SKA(I) * SPAK(I)
   41   SUM2= SUM2 + SKB(I) * SPBK(I)
       FSKA = (SUM1/XLK4)/RHO
       FSKB = (SUM2 /XLK4)/RHO
  123   NN = NN +1
        SUM1= 0.0D0
        SUM2= 0.0D0
         II = N
C     CHANGE THERMAL FORCE COMPUTATION
      JJJJJJ=LLL*9
       DO 43 I=1,3
C     THIS GOES IN DO 43 LOOP
      JJ=JJJJJJ+II
      SUM1=SUM1+DIZ(I)*(STAO(JJ)+STA1(JJ)*STAK1(I)+STA2(JJ)*STAK2(I))
      SUM2=SUM2+DIZ(I)*(STBO(JJ)+STB1(JJ)*STBK1(I)+STB2(JJ)*STBK2(I))
         II  = II +3
   43  CONTINUE
      FTAK= DTO*EI(K)*SUM1/(RHO*XLK2)
      FTBK= DTO*EI(K)*SUM2/(RHO*XLK2)
       GO TO (150,151), MM
  150  IF(IPLANS.EQ. 0.AND.ISATSH .EQ.0)GO TO 151
       FTAKIN (K,N)=FTAK
       FTBKIN (K,N)=FTBK
       CALL SHADES (K, N, DIZ, FTAK, FTBK)
       FTAKOT(K,N)=FTAK
       FTBKOT (K,N) =FTBK
  151  CONTINUE
      GO TO (20005,20006),IOUT
20006  CONTINUE
      WRITE (LTAP5,9006) FTAK,FSKA,FDKA,FTBK,FSKB,FDKB
 9006 FORMAT(1H0,'9006',6E20.8)
20005  CONTINUE
       FSDTKA(N) = FTAK + FSKA + FDKA + FSDTKA(N)
       FSDTKB(N) = FTBK + FSKB + FDKB + FSDTKB(N)
    2 CONTINUE
       FDKA = 0.0D0
       FDKB = 0.0D0
       FSKA = 0.0D0
       FSKB = 0.0D0
       GO TO (124,125),MM
  124   CONTINUE
       U(2) = SK * U(2)
       U(3) = SK * U(3)
       U(4) = WS2 * U(4)
       U(5) = WS2 * U(5)
       U(6) = WS2 * U(6)
       NN =1
      DO 6 N = 1,NKN
        N1 = N-1
        AN = DEPEND(I1 + N1)
        BN = DEPEND(I2 + N1)
        IC = 31
       DO 7 JC =1,6
        S(IC) = S(IC) + AN* X1AU(JC,N)+ BN * X1BU(JC,N)
       X2U(JC)= X2U(JC) + AN * X2AU(JC,N)
       X3U(JC) = X3U(JC) + BN * X3BU(JC,N)
    7   IC = IC +1
       S13 = SZS13(NN,K)
       S(37) = S(37)+ AN  *S13
       S(38) = S(38)+ BN    *S13
       DO 8 IP=1,NKN
      NP=(N-1)*3 + IP
        S24 = SZS24(NP,K)
       IP1 = IP-1
       AP= DEPEND(I1+ IP1)* S24
       BP= DEPEND(I2+ IP1)* S24
       S(39) = S(39)+ AP* AN
       S(40) = S(40)+ BP* BN
       S(41) = S(41)+ BP* AN
    8 CONTINUE
    6   NN = NN +1
  125   DO 21 I=1,NKN
       FAN = C2 *(DZ1 * X1AL(I) + DZ2*X2AL(I))
       FBN = C2 *(DZ1*X1BL(I) + DZ3*X3BL(I))
        FNA = 0.0D0
        FNB = 0.0D0
       DO 22 J=1,6
       FNA = FNA - D(1,J) *X1AU(J,I) + D(2,J) * X2AU(J,I)
   22   FNB = FNB - D(1,J) *X1BU(J,I) + D(3,J) * X3BU(J,I)
       FPAN(I) = FPAN(I) + FAN + C1 * FNA
       FPBN(I) = FPBN(I) + FBN + C1 * FNB
   21  CONTINUE
  300 CONTINUE
       X1L = XLK * ZZ01(K) + 0.5D0 * (S(52) + S(53))
        X2L = S(54)
       X3L = S(55)
       X1U(1) = WS1* XLK * SZS02(K) -0.5D0 * S(31)
       X1U(2) = WS1* S(37)-0.5D0 *      S(32)
       X1U(3) = WS1* S(38)-0.5D0 *      S(33)
       X1U(4) = SK * S(39)-0.5D0 *      S(34)
       X1U(5) = SK * S(40)-0.5D0 *      S(35)
       X1U(6) = SK * S(41)-0.5D0 *      S(36)
      DO 12 I=1,3
        FTMK(I) = SP1 * DIZ(I)
        SUM = 0.0D0
       DO 13 J=1,6
   13   SUM = SUM + D(I,J)* U(J)
       SUM = SUM * PO
        FK(I) = SUM
      FTZK (I) =  SUM  + FTMK (I)
   12 SPRES  (K, I) =  FTZK(I)  +SPRES(K,I)
       C1 = PO
       C2 = PO * STMK(K)
       ZMZ(1) = C2 *(DZ3 * X2L - DZ2 * X3L)
       ZMZ(2) = C2 *(DZ1 * X3L - DZ3 * X1L)
       ZMZ(3) = C2 *(DZ2 * X1L - DZ1 * X2L)
       DO 23 I=1,6
       ZMZ(1) = ZMZ(1) +(D(3,I)     *X2U(I) - D(2,I)*X3U(I)) * C1
       ZMZ(2) = ZMZ(2) +(D(1,I) *X3U(I) - D(3,I) * X1U(I)  ) * C1
       ZMZ(3) = ZMZ(3) +(D(2,I) *X1U(I) - D(1,I) * X2U(I)  ) * C1
   23  CONTINUE
       DO 24 I=1,3
       SUM = 0.0D0
       SUM1 = 0.0D0
       SUM2 = 0.0D0
       DO 25 J=1,3
       ZFCM = FCM(I,J)
       SUM = SUM + ZFCM*FTZK(J)
       SUM2 = SUM2 + CMAT(I,J) * FTZK(J)
   25   SUM1 = SUM1 + ZFCM * ZMZ(J)
       GO TO (140,141),MM
  141  SSUMFB(I) = SSUMFB(I) + SUM
       GO TO 142
  140   SUMFB(I) = SUMFB(I) + SUM
  142  FITZ(I) = SUM2
       FTYK(I) = SUM
   24   ZMY(I) = SUM1
      SUMMBP(1) = SUMMBP(1)  + ZMY(1) - FTYK(2)*YIZK(3)+FTYK(3)*YIZK(2)
      SUMMBP(2) = SUMMBP(2) + ZMY(2)+FTYK(1)*YIZK(3) - FTYK(3)*YIZK(1)
      SUMMBP(3) = SUMMBP(3) +ZMY(3) -FTYK(1) *YIZK(2) +FTYK(2)*YIZK(1)
       GO TO (640,641),MM
  641 CONTINUE
      ADMOM(1)  = ADMOM(1)   + ZMY(1) - FTYK(2)*YIZK(3)+FTYK(3)*YIZK(2)
      ADMOM(2)  = ADMOM(2)  + ZMY(2)+FTYK(1)*YIZK(3) - FTYK(3)*YIZK(1)
      ADMOM(3)  = ADMOM(3)  +ZMY(3) -FTYK(1) *YIZK(2) +FTYK(2)*YIZK(1)
  640 CONTINUE
      SPMOM(1)  = SPMOM(1)   + ZMY(1) - FTYK(2)*YIZK(3)+FTYK(3)*YIZK(2)
      SPMOM(2)  = SPMOM(2)  + ZMY(2)+FTYK(1)*YIZK(3) - FTYK(3)*YIZK(1)
      SPMOM(3)  = SPMOM(3)  +ZMY(3) -FTYK(1) *YIZK(2) +FTYK(2)*YIZK(1)
       IF(K-K1)26,26,27
   26   SUM = ZBZK(3,K) *FITZ(1) - ZBZK(1,K) *FITZ(3)
       DO 28 I=1,3
       SUM = SUM + CMAT(2,I) * ZMZ(I)
   28  SUMDBP = SUMDBP + SUM
   27   CONTINUE
       GO TO (130,131),MM
  130   MM = 2
       SPO = PO
       PO = P1
       SDTO = DTO
       DTO = DT1
       DO 132 I=1,3
       SDIY(I) = DIY(I)
       DIY(I) = DIY1(I)
  132  CONTINUE
       GO TO 160
  131    PO = SPO
       DTO = SDTO
       DO 134 I=1,3
       DIY(I) = SDIY(I)
  134  CONTINUE
      CALL COMBNS(K,XLK,X1L,X2L,X3L,PO,2)
C
      RETURN
      END
      SUBROUTINE SOUT(SA,OMEG,TIME,IPLOT,IPLTPE,PHI)
C
C
C     SUBROUTINE SOUT DETERMINES EULER ANGLES AND RATES WRT
C     INERTIAL FRAME FOR SPINNING SATELLITES .
C     IT CALLS ARANGE TO EXTRACT ELEMENT DATA ; DMOMNT TO CALCULATE
C     ELEMENT BENDING MOMENTS AND TENSIONS ; AND WRTPLT TO WRITE
C     TEMPORARY DATA SET FOR PLOTS .
C     MODIFICATION AS OF SEPT. 1977.
C
C
        IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/CANTNA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/DMMNT1/ZKBM(6),EMAK(10),EMBK(10),DUMM1(6),
     *    ITORK,IBENDM,ITENSE,ITNS1
C
      COMMON/HAMOUT/HAMILT,IHAMLT
C
      COMMON/HOUTPT/IHCALC,IHREF,IHFLAG
C
      COMMON/HVCOUT/HBODY(3),HINERT(3),HMAG
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/NUTANG/ANUT
C
      COMMON/OUTTWO/ SOLILL,EPSERR
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      COMMON/SUNANG/ DSL2
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/XIN1/ PSI1,THET1,PHI1,ETTA,ZETTA,ITEST
C
C
      DIMENSION BS(3,3),BT(3,3),         OM(3),OMEG(3),SA(3,3)
C
      DATA THEOLD,PSIOLD,PHIOLD/ 3*0.D0/
C
      JTEST=1
      ITEST=1
      RADIUS=0.D0
      DO 4 I=1,3
    4 RADIUS=RADIUS + XSAT(I)*XSAT(I)
      RADIUS=DSQRT(RADIUS)
C
      DO 7 I=1,3
    7 BS(3,I)=XSAT(I)/RADIUS
C
      YZ=XSAT(2)*XSATDT(3) - XSAT(3)*XSATDT(2)
      ZX=XSAT(3)*XSATDT(1) - XSAT(1)*XSATDT(3)
      XY=XSAT(1)*XSATDT(2) - XSAT(2)*XSATDT(1)
C
      RXVMAG=DSQRT(YZ*YZ + ZX*ZX + XY*XY)
C
      BS(2,1)=YZ/RXVMAG
      BS(2,2)=ZX/RXVMAG
      BS(2,3)=XY/RXVMAG
C
      BS(1,1)=BS(2,2)*BS(3,3)-BS(2,3)*BS(3,2)
      BS(1,2)=BS(2,3)*BS(3,1)-BS(2,1)*BS(3,3)
      BS(1,3)=BS(2,1)*BS(3,2)-BS(2,2)*BS(3,1)
C
      DO 9 I=1,3
      DO 9 L=1,3
    9 BT(I,L)=BS(L,I)
      SDLV2=BT(1,2)*SD(1)+BT(2,2)*SD(2)+BT(3,2)*SD(3)
      DELSLV=DARCOS(-1.0D0*SDLV2)
      DSL2=DELSLV/RADIAN
C
      IF(SA(3,1).EQ.0.D0.AND.SA(3,2).EQ.0.D0) GO TO 10
C
      W=SA(3,3)
      THET1=DARCOS(W)
      IF(DABS(THET1/RADIAN).LT.1.D0) GO TO 60
      IF(THET1.EQ.0.D0) GO TO 10
      SN=DSIN(THET1)
      TEST1=SA(3,2)/SN
      W=SA(3,1)/SN
      PHI1=DARSIN(W)
      IF(TEST1.LT.0.D0) PHI1=-DARSIN(W) + PI
      TEST2=-SA(2,3)/SN
      W=SA(1,3)/SN
      PSI1=DARSIN(W)
      IF(TEST2.LT.0.D0) PSI1=-DARSIN(W) + PI
      THET1=THET1/RADIAN
      PHI1=PHI1/RADIAN
      PSI1=PSI1/RADIAN
      THEOLD=THET1
      PHIOLD=PHI1
      PSIOLD=PSI1
C
      GO TO 70
   10 IF(SA(3,3)-1.D0) 20,40,20
   20 IF(SA(3,3)+1.D0) 60,30,60
   30 THET1=180.D0
      THEOLD=THET1
      GO TO 60
   40 THET1=0.D0
      THEOLD=THET1
   60 ITEST=0
   70 X=ETTA*RADIAN
      Y=ZETTA*RADIAN
      W=SA(1,3)*DSIN(X)*DCOS(Y) + SA(2,3)*DSIN(X)*DSIN(Y)
     .                          + SA(3,3)*DCOS(X)
      EPSERR=DARCOS(W)/RADIAN
      THET1=THEOLD
      PSI1=PSIOLD
      PHI1=PHIOLD
      DO 80 I=1,3
   80 OM(I)=OMEG(I)/RADIAN
      DUM=0.0D0
      PHILD=0.0D0
      IF(IDAMP.NE.0) PHILD=PHI/RADIAN
      ANUT=0.0D0
      IF(IHCALC.NE.0) ANUT=DARCOS(HBODY(3)/HMAG)/RADIAN
C
C     CALL ARANGE
C
      IF(ITENSE.NE.0.OR.IBENDM.NE.0) CALL DMOMNT
C
      IF(IHAMLT.NE.0) CALL ENERGY(1,JTEST)
C
      IF(IPLOT.NE.0) CALL WRTPLT(TIME,PSI1,THET1,PHI1,OM,PHILD
     1                          ,ANUT,EPSERR,DUM,1)
C
      RETURN
      END
      FUNCTION SPRING(ZK1D,ZK2D,PHI,PHIS,RADIAN)
C
C     'SPRING' IS A FUNCTION THAT EVALUATES THE STRAIN ENERGY OF THE
C     LIBRATION DAMPER SPRING.
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      PHIR=PHI*RADIAN
      PHISR=PHIS*RADIAN
C
      IF(PHIR.LT.PHISR) GO TO 10
      SPRING=ZK1D*PHISR*PHISR/2 + ZK1D*PHISR*(PHIR - PHISR)
     .                          +(ZK2D/2)*(PHIR - PHISR)**2
      RETURN
C
   10 SPRING=ZK1D*PHIR*PHIR/2
      RETURN
      END
      SUBROUTINE STDPND(KTEST)
C
C        'STDPND' STORES INITIAL CONDITIONS FOR STACKING CASES
C
C         WRITTEN BY E.A.LAWLOR OF AVCO SYSTEM DIVISION
C         MODIFIED BY K. YONG OF COMPUTER SCIENCES CORP.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER*4 ACNTRL
C
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/RATTDE/ DTMXA,PXI,PXO,EIT,REFTIM,TMX1,TMX2,CMX,ISW
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/XIN1/ PSI1,THET1,PHI1,ETTA,ZETTA,ITEST1
C
      COMMON/XIN2  / ALFAE,BETAE,GAMAE,OMBC(3),ITEST2
C
C
      COMMON/GRNTST/ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY(3),
     *       GACC(3),GLOCAT(3),IGRUND,IALTUD
C
      DIMENSION SOMBC(3),SOMEG(3)
      DIMENSION SOMGY(3)
C
C
      IF (KTEST.EQ.2) GO TO 40
C
      IF(NPULSE.LT.0) NPULSE=0
      DSAVE=DELTAT
      FASAVE=FACTOR
      FRSAVE=FREQ
      DESAVE=DELMIT
C
C
      SALFAE=ALFAE
      SBETAE=BETAE
      SGAMAE=GAMAE
      SPSI1=PSI1
      STHET1=THET1
      SPHI1=PHI1
      SALFAG=ALFAEG
      SDELTG=DELTAG
      SPHASG=PHASEG
C
      DO 20 I=1,3
      SOMEG(I)=OMEG(I)
      SOMGY(I)=OMGY(I)
   20 SOMBC(I)=OMBC(I)
C
C
C
      RETURN
C
C
   40 DELTAT=DSAVE
      FACTOR=FASAVE
      FREQ=FRSAVE
      DELMIT=DESAVE
      TMX1=0.D0
      TMX2=0.D0
      NPULSE=-4
C
C
C
      ALFAE=SALFAE
      BETAE=SBETAE
      GAMAE=SGAMAE
      PSI1=SPSI1
      THET1=STHET1
      PHI1=SPHI1
      ALFAEG=SALFAG
      DELTAG=SDELTG
      PHASEG=SPHASG
C
C
      DO 70 I=1,3
      OMBC(I)=SOMBC(I)
      OMGY(I)=SOMGY(I)
   70 OMEG(I)=SOMEG(I)/RADIAN
C
      RETURN
      END
      SUBROUTINE STRAIN(ZLK,SE,K,KX,M)
C
C     'STRAIN' EVALUATES THE STRAIN ENERGY DUE TO BENDING FOR
C      EACH ANTENNA ELEMENT.
C
      IMPLICIT REAL * 8 (A-H,O-Z)
      INTEGER * 4 P,Q,R
C
      COMMON/CCMBNZ/ CMRK(10),Z01(4),Z02(4),Z03(4),Z04(4),Z11(12),
     .               Z12(12),Z13(12),Z14(12),Z15(12),Z16(12),Z21(36),
     .               Z22(36),Z23(36),Z24(36),Z25(36),Z26(36),Z27(36),
     .               Z28(36),Z31(108),Z32(108),Z33(108),Z34(108),
     .               Z35(108),Z41(324),Z42(324),Z43(324),ZK21(18),
     .               ZK22(18),ZK23(18),ZK31(54),ZK32(54),ZK33(54),
     .               ZK34(54),ZK35(54),ZK36(54),ZK41(162),ZK42(162),
     .               ZK43(162),ZK44(162),ZK45(162),ZK46(162),ZK47(162),
     .               ZK48(162),ZS01(2),ZS02(2),ZS11(6),ZS12(6),ZS13(6),
     .               ZS21(18),ZS22(18),ZS23(18),ZS24(18),ZS31(54),
     .               ZS32(54),ZS41(162),ZT21(108),ZT22(108),STAO(18),
     .               STA1(18),STA2(18),STBO(18),STB1(18),STB2(18),
     .               Z2S01(2),Z2S12(6),Z2S23(18)
C
      COMMON/CSOLAR/ SAO(10),SKA(9),SKB(9),SKOA(10,3),SKOB(10,3),
     .               STMK(10),SKAA(10,9),SKBB(10,9)
C
      COMMON/DEBUG3/ISWTCH
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      DIMENSION  ZLK(10),SE(10),SE2(3),SE3(4),SE4(5)
C
C
      I2=0
      I3=0
      I4=0
      IF(LLK(K).EQ.1) GO TO 2
      I2=9
      I3=27
      I4=81
    2 CONTINUE
      SE21N=0.0D0
      SE22N=0.0D0
      SE23N=0.0D0
C
      SE31N=0.0D0
      SE32N=0.0D0
      SE33N=0.0D0
      SE34N=0.0D0
C
      SE41N=0.0D0
      SE42N=0.0D0
      SE43N=0.0D0
      SE44N=0.0D0
      SE45N=0.0D0
C
      DO 40 N=1,M
C
      SE21P=0.0D0
      SE22P=0.0D0
      SE23P=0.0D0
C
      SE31P=0.0D0
      SE32P=0.0D0
      SE33P=0.0D0
      SE34P=0.0D0
C
      SE41P=0.0D0
      SE42P=0.0D0
      SE43P=0.0D0
      SE44P=0.0D0
      SE45P=0.0D0
C
      DO 30 P=1,M
C
      SE31Q=0.0D0
      SE32Q=0.0D0
      SE33Q=0.0D0
      SE34Q=0.0D0
C
      SE41Q=0.0D0
      SE42Q=0.0D0
      SE43Q=0.0D0
      SE44Q=0.0D0
      SE45Q=0.0D0
C
      DO 20 Q=1,M
C
      SE41R=0.0D0
      SE42R=0.0D0
      SE43R=0.0D0
      SE44R=0.0D0
      SE45R=0.0D0
C
      DO 10 R=1,M
C
      A1=FUNA(K,KX,R) - OFFSTA(K,KX,R)
      B1=FUNB(K,KX,R) - OFFSTB(K,KX,R)
C
      IR=I4+27*(N-1)+9*(P-1)+3*(Q-1)+R
      SE41R=SE41R+A1*ZK41(IR)
      SE42R=SE42R+B1*ZK42(IR)
      SE43R=SE43R+B1*ZK43(IR)
      SE44R=SE44R+B1*ZK44(IR)
      SE45R=SE45R+B1*ZK48(IR)
      IF(ISWTCH.NE.0) GO TO 10
      WRITE(6,10011) K,N,P,Q,R
      WRITE(6,10000) R,A1,B1
      WRITE(6,10001) ZK41(IR),ZK42(IR),ZK43(IR),ZK44(IR),ZK48(IR)
      WRITE(6,10002) SE41R,SE42R,SE43R,SE44R,SE45R
   10 CONTINUE
C
      A1=FUNA(K,KX,Q) - OFFSTA(K,KX,Q)
      B1=FUNB(K,KX,Q) - OFFSTB(K,KX,Q)
      IQ=I3+9*(N-1)+3*(P-1)+Q
C
      SE31Q=SE31Q+A1*ZK31(IQ)
      SE32Q=SE32Q+B1*ZK32(IQ)
      SE33Q=SE33Q+B1*ZK33(IQ)
      SE34Q=SE34Q+B1*ZK36(IQ)
C
      SE41Q=SE41Q + A1*SE41R
      SE42Q=SE42Q + A1*SE42R
      SE43Q=SE43Q + B1*SE43R
      SE44Q=SE44Q + B1*SE44R
      SE45Q=SE45Q + B1*SE45R
      IF(ISWTCH.NE.0) GO TO 20
      WRITE(6,10011) K,N,P,Q,R
      WRITE(6,10000) Q,A1,B1
      WRITE(6,10003) ZK31(IQ),ZK32(IQ),ZK33(IQ),ZK36(IQ)
      WRITE(6,10004) SE31Q,SE32Q,SE33Q,SE34Q
      WRITE(6,10002) SE41Q,SE42Q,SE43Q,SE44Q,SE45Q
   20 CONTINUE
C
      A1=FUNA(K,KX,P) - OFFSTA(K,KX,P)
      B1=FUNB(K,KX,P) - OFFSTB(K,KX,P)
      IP=I2+3*(N-1)+P
C
      SE21P=SE21P+A1*ZK21(IP)
      SE22P=SE22P+B1*ZK22(IP)
      SE23P=SE23P+B1*ZK23(IP)
C
      SE31P=SE31P + A1*SE31Q
      SE32P=SE32P + A1*SE32Q
      SE33P=SE33P + B1*SE33Q
      SE34P=SE34P + B1*SE34Q
C
      SE41P=SE41P + A1*SE41Q
      SE42P=SE42P + A1*SE42Q
      SE43P=SE43P + A1*SE43Q
      SE44P=SE44P + B1*SE44Q
      SE45P=SE45P + B1*SE45Q
      IF(ISWTCH.NE.0) GO TO 30
      WRITE(6,10011) K,N,P,Q,R
      WRITE(6,10000) P,A1,B1
      WRITE(6,10005) ZK21(IP),ZK22(IP),ZK23(IP)
      WRITE(6,10006) SE21P,SE22P,SE23P
      WRITE(6,10004) SE31P,SE32P,SE33P,SE34P
      WRITE(6,10002) SE41P,SE42P,SE43P,SE44P,SE45P
   30 CONTINUE
C
      A1=FUNA(K,KX,N) - OFFSTA(K,KX,N)
      B1=FUNB(K,KX,N) - OFFSTB(K,KX,N)
C
      SE21N=SE21N + A1*SE21P
      SE22N=SE22N + A1*SE22P
      SE23N=SE23N + B1*SE23P
C
      SE31N=SE31N + A1*SE31P
      SE32N=SE32N + A1*SE32P
      SE33N=SE33N + A1*SE33P
      SE34N=SE34N + B1*SE34P
C
      SE41N=SE41N + A1*SE41P
      SE42N=SE42N + A1*SE42P
      SE43N=SE43N + A1*SE43P
      SE44N=SE44N + A1*SE44P
      SE45N=SE45N + B1*SE45P
      IF(ISWTCH.NE.0) GO TO 40
      WRITE(6,10011) K,N,P,Q,R
      WRITE(6,10000) N,A1,B1
      WRITE(6,10006) SE21N,SE22N,SE23N
      WRITE(6,10004) SE31N,SE32N,SE33N,SE34N
      WRITE(6,10002) SE41N,SE42N,SE43N,SE44N,SE45N
   40 CONTINUE
C
      ZLK3=ZLK(K)**3
      ZLK4=ZLK(K)*ZLK3
      ZLK5=ZLK(K)*ZLK4
C
      SE2(1)=(SKAA(K,1)/ZLK3)*SE21N
      SE2(2)=(SKAA(K,2)/ZLK3)*SE22N
      SE2(3)=(SKBB(K,2)/ZLK3)*SE23N
C
      SE3(1)=(SKAA(K,3)/ZLK4)*SE31N
      SE3(2)=(SKAA(K,4)/ZLK4)*SE32N
      SE3(3)=(SKAA(K,5)/ZLK4)*SE33N
      SE3(4)=(SKBB(K,5)/ZLK4)*SE34N
C
      SE4(1)=(SKAA(K,6)/ZLK5)*SE41N
      SE4(2)=(SKAA(K,7)/ZLK5)*SE42N
      SE4(3)=(SKAA(K,8)/ZLK5)*SE43N
      SE4(4)=(SKAA(K,9)/ZLK5)*SE44N
      SE4(5)=(SKBB(K,9)/ZLK5)*SE45N
C
      SE(K)=SE2(1)/2 + SE2(2) + SE2(3)/2
     .     +SE3(1)/3 + SE3(2)/2 + SE3(3) + SE3(4)/3
     .     +SE4(1)/4 + SE4(2)/3 + SE4(3)/2 + SE4(4) + SE4(5)/4
C
      IF(ISWTCH.NE.0) RETURN
      WRITE(6,10007) ZLK(K),ZLK3,ZLK4,ZLK5
      WRITE(6,10008) (SE2(I),I=1,3)
      WRITE(6,10009) (SE3(I),I=1,4)
      WRITE(6,10010) (SE4(I),I=1,5)
      RETURN
C
C
10000 FORMAT('0',5X,'INDEX ',I2,' A1 ',F9.2,' B1 ',F9.2)
C
10001 FORMAT('0',2X,'ZK41 ',G20.13,' ZK42 ',G20.13,' ZK43 ',G20.13/3X,
     .              'ZK44 ',G20.13,' ZK48 ',G20.13)
C
10002 FORMAT('0',2X,'SE41 ',G20.13,' SE42 ',G20.13,' SE43 ',G20.13/3X,
     .              'SE44 ',G20.13,' SE45 ',G20.13)
C
10003 FORMAT('0',2X,'ZK31 ',G20.13,' ZK32 ',G20.13,' ZK33 ',G20.13/3X,
     .              'ZK36 ',G20.13)
C
10004 FORMAT('0',2X,'SE31 ',G20.13,' SE32 ',G20.13,' SE33 ',G20.13/3X,
     .              'SE34 ',G20.13)
C
10005 FORMAT('0',2X,'ZK21 ',G20.13,' ZK22 ',G20.13,' ZK23 ',G20.13)
C
10006 FORMAT('0',2X,'SE21 ',G20.13,' SE22 ',G20.13,' SE23 ',G20.13)
C
10007 FORMAT('0',2X,'ZLK(K) ',G20.13,' ZLK3 ',G20.13,' ZLK4 ',G20.13/3X,
     .              'ZLK5 ',G20.13)
C
10008 FORMAT('0',2X,'SE2(I),I=1,3 ',3(G20.13,2X))
C
10009 FORMAT('0',2X,'SE3(I),I=1,4 ',4(G20.13,2X))
C
10010 FORMAT('0',2X,'SE(I),I=1,5 ',5(G20.13,2X))
C
10011 FORMAT('0',2X,'K N P Q R'/2X,5I2)
C
      END
      FUNCTION STRN(SE,IK)
C
C     'STRN' IS A FUNCTION WHICH SUMS THE STRAIN ENERGY FROM EACH
C     ANTENNA ELEMENT.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION SE(10)
      STRN=0.0D0
      DO 10 K=1,IK
   10 STRN=STRN + SE(K)
      RETURN
      END
      SUBROUTINE STVRBL(LTEST,DEP,SUBX,T)
C
C        STORES INITIAL CONDITIONS FOR STACKING CASES.
C        STVRBL IS CALLED FROM MAIN WITH LTEST = 1 IF SDPLY = 0 AT
C        START  OF RUN.  SDPLY IS SET 0 AT ENTRY MAIN
C        STVRBL IS CALLED FROM MAIN WITH LTEST = 2 IF TSTOP IS
C        PASSED AND IF MLAST NOT EQUAL TO 0 OR MDPLY = 0
C
CC       THIS ROUTINE IS INITIALLY WRITTEN BY E.A.LAWLOR OF
C        AVCO SYSTEM DIVISION, AND MODIFIED BY K. YONG OF COMPUTER
C        SCIENCES CORP. FOR ADDITIONAL CAPABILITIES
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ANTENA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3),ZBZ(3,10),
     .               NELMTS,NDAMPR,MODES(10)
C
      COMMON/CCNVRT/ BDYMI(3,3),DPRMI(3,3),EMODLS(10),RTUBE(10),
     .               HTUBE(10),THERMC(10),TIPMS(10),C(10)
C
      COMMON/CFNALP/ SCO,CIZO(3,3),CIYO(3,3),DONA(3,10),DONB(3,10)
     .              ,CDAMP(3,10)
C
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10)
C
      COMMON/CSOLAR/ SAO(10),SKA(9),SKB(9),SKOA(10,3),SKOB(10,3),
     .               STMK(10),SKAA(10,9),SKBB(10,9)
C
C
      COMMON/GRNTST/ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY(3),
     *              GACC(3),GLOCAT(3),IGRUND,IALTUD,IGASBR
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/IPOOL1/ IGRAV,IADB ,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/LIBDPR/ ZK1D,ZK2D,PHIS,PHILD,DPHILD,BETLD,GAMLD,
     .               ZMDO,ZMDBO,CNV,DECAY
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RTDIST/ TDIS(10)
C
      COMMON/SATLSH/ TAUK(10),OCULTK(10),RADSH
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      COMMON/XKPLER/AS,E,F,EI,BW,W,BWDOT,WDOT
C
      DIMENSION STAUK(10),SOCULT(10)
      DIMENSION RHO(10),SAOK(10),ZLOK(10),ZL1K(10),ZLAK(10),EMDLS(10),
     .          SHTUBE(10),SRTUBE(10),STIPMS(10),STHRMC(10),SSTMK(10),
     .          ILK(10),ILLK(10),SCDAMP(3,10),SAVEC(10),IMODES(10),
     .          SZBZ(3,10),DEP(150),SUBX(3),XSAVE(3),DXSAV(3)
     .         ,SKOA1(10,3),SKOB1(10,3),TDIST(10)
C
      DIMENSION SGACC(3),SGLOCT(3)
C
C
C
      IF(LTEST.EQ.2) GO TO 20
C
      SAVET=T
      PHI=PHILD
      PHID=DPHILD
      SAGAM=GAMLD
      SDGAM=DGAMLD
      SAPHI=PHI
      SAPHID=PHID
      DO 10 I=1,10
      STAUK(I)=TAUK(I)
      SOCULT(I)=OCULTK(I)
      RHO(I)=RHOK(I)
      SAOK(I)=SAO(I)
      ZLOK(I)=ZL0(I)
      ZL1K(I)=ZL1(I)
      ZLAK(I)=ZLA(I)
      TDIST(I)=TDIS(I)
      EMDLS(I)=EMODLS(I)
      SHTUBE(I)=HTUBE(I)
      SRTUBE(I)=RTUBE(I)
      STIPMS(I)=TIPMS(I)
      STHRMC(I)=THERMC(I)
      SSTMK(I)=STMK(I)
      ILK(I)=LK(I)
      ILLK(I)=LLK(I)
      SAVEC(I)=C(I)
      IMODES(I)=MODES(I)
C
      DO 10 J=1,3
      SKOA1(I,J)=SKOA(I,J)
      SKOB1(I,J)=SKOB(I,J)
      SZBZ(J,I)=ZBZ(J,I)
   10 SCDAMP(J,I)=CDAMP(J,I)
C
      SAS=AS
      SE=E
      SEI=EI
      SBW=BW
      SW=W
      SF=F
      SBWDOT=BWDOT
      SWDOT=WDOT
      SALFAG=ALFAEG
      SDELTG=DELTAG
      DO 15 I=1,3
      SGACC(I)=GACC(I)
      SGLOCT(I)=GLOCAT(I)
      XSAVE(I)=XSAT(I)
   15 DXSAV(I)=XSATDT(I)
C
C
      CALL RELOC(DEP)
      CALL CONVRT
      CALL CKINPT(SUBX)
      IF(IGRUND.EQ.1) GO TO 323
      IF(INOPT.EQ.1) CALL SINPUT(DEP)
      IF(INOPT.EQ.2) CALL GINPUT(DEP)
      GO TO 324
 323  CONTINUE
      CALL GNDIPT(DEP)
 324  CONTINUE
      CALL STDPND(1)
C
C
      RETURN
C
C
   20 CALL STDPND(2)
C
C
      DO 30 I=1,10
      TAUK(I)=STAUK(I)
      OCULTK(I)=SOCULT(I)
      RHOK(I)=RHO(I)
      SAO(I)=SAOK(I)
      ZL0(I)=ZLOK(I)
      ZL1(I)=ZL1K(I)
      ZLA(I)=ZLAK(I)
      EMODLS(I)=EMDLS(I)
      HTUBE(I)=SHTUBE(I)
      RTUBE(I)=SRTUBE(I)
      TIPMS(I)=STIPMS(I)
      TDIS(I)=TDIST(I)
      THERMC(I)=STHRMC(I)
      STMK(I)=SSTMK(I)
      LK(I)=ILK(I)
      LLK(I)=ILLK(I)
      C(I)=SAVEC(I)
      MODES(I)=IMODES(I)
C
      DO 30 J=1,3
      SKOA(I,J)=SKOA1(I,J)
      SKOB(I,J)=SKOB1(I,J)
      ZBZ(J,I)=SZBZ(J,I)
   30 CDAMP(J,I)=SCDAMP(J,I)
C
      T=SAVET
      PHILD=SAPHI
      DPHILD=SAPHID
      ALFAEG=SALFAG
      DELTAG=SDELTG
C
C
      AS=SAS
      E=SE
      EI=SEI
      BW=SBW
      W=SW
      F=SF
      BWDOT=SBWDOT
      WDOT=SWDOT
      DO 40 I=1,3
      GACC(I)=SGACC(I)
      GLOCAT(I)=SGLOCT(I)
      XSAT(I)=XSAVE(I)
   40 XSATDT(I)=DXSAV(I)
C
      RETURN
      END
      SUBROUTINE SUBCON(ILP,K,SUM,IT,XIDD,XID,XXDD,YIZK,XXD,
     .           YID,CCON,ADCON)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
C                  'SUBCON' CALCULATES THE INERTIA TERMS WHICH DEPEND
C                  ONLY ON THE STATE VECTOR FOR THE TRANSLATIONAL AND
C                  ROTATIONAL EQUATIONS OF MOTION FOR THE SYSTEM.
C**** ILP=1 - THIS SUBROUTINE IS CALLED FROM WITHIN THE K LOOP IN FNDALP
C          TO SUM OVER K
C*****ILP=2 - CALLED AFTER THE K LOOP TO FIND CON AND ADCON FOR EQ.1 AND
C          USING THE SUMS FOUND WHEN ILP=1
C*****XID,XIDD,YID,XXD,XXDD ARE COMPUTED IN FNDALP
C     SUBROUTINES REQUIRED
C           MPYMAT
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL4/ CIYZ(3,3),FCMT(3,3),ZBCD(3)
C
      COMMON/RPOOL6/ FM(3,3),CIY(3,3),CIZ(3,3),SAT(3,3),SZ1,SZ2,SZ3
C
C
      DIMENSION JJ(3),KK(3),XIDD(3),XID(3),XXDD(3,3),SUM(40),XIYDD(3),
     .          ZID(3),YID(3),XIDY(3),XXYDD(3),YIZK(3),XXD(3,3),
     .          DUM1(3,3),YYD(3,3),YIDB(3),SXXD(3,3),CCON(7,3),
     .          ADCON(7,3),ZZD(3,3)
      DIMENSION YZD(3)
       LTAP5 = 6
       OM11= OMEG(1) * OMEG(1)
       OM22= OMEG(2) * OMEG(2)
       OM33= OMEG(3) * OMEG(3)
       O13 = OMEG(1) * OMEG(3)
       O23 = OMEG(2) * OMEG(3)
       O12 = OMEG(1) * OMEG(2)
C***** I,J,K ARE CYCLIC IN SEVERAL EQUATIONS SO J AND K ARE SET UP
C          TO BE USED IN I LOOPS
        JJ(1)= 2
        JJ(2)= 3
        JJ(3)= 1
        KK(1)= 3
        KK(2)= 1
        KK(3)= 2
       ZB1 = ZBZK(1,K)
       ZB2 = ZBZK(2,K)
       ZB3 = ZBZK(3,K)
       XLK = ZLK(K)
      ZLD=ZLKP(K)
       GO TO (500,600),ILP
C*****ILP=1 - ADD TO SUMS FOR EACH K
  500  SSUM= 0.0D0
C
C  AN ERROR IS DETECTED ON THE TORQUE COMPUTATION DURING
C   DEPLOYMENT PROCESS, THE ERROR IS DUE TO THE OFFSET
C   OF THE BOOM POSITION, MOD. IS INCLUDED BY K.Y. MAY 12, 1975
C
       CON = RHOK(K) * XLK
      CONR=RHOK(K)*ZLD
      YZD(1)=ZB1*ZB1*CONR
      YZD(2)=ZB2*ZB2*CONR
      YZD(3)=ZB3*ZB3*CONR
        XDD1 = XIDD(1)
        XDD2 = XIDD(2)
        XDD3 = XIDD(3)
         XI1 = XID(1)
         XI2 = XID(2)
         XI3 = XID(3)
       FAC1 = XXDD(2,3) - XXDD(3,2)
       FAC2 = XXDD(3,1) - XXDD(1,3)
       FAC3 = XXDD(1,2) - XXDD(2,1)
       DO 7 I=1,3
         F1 = FCM(I,1)
         F2 = FCM(I,2)
        F3 = FCM(I,3)
       TERM1= F1 * XDD1 + F2 * XDD2 + F3 * XDD3
       SUM(I)= SUM(I) + CON * TERM1
       XIYDD(I) = TERM1
        ZID(I) = CMAT(I,1)* XI1+ CMAT(I,2)*XI2 +CMAT(I,3) * XI3
       TERM2 = F1 * XI1 + F2 * XI2 + F3 * XI3
       YID(I)= YID(I) + CON * TERM2
       XIDY(I)= TERM2
       XXYDD(I)= F1 * FAC1 + F2 * FAC2 + F3 * FAC3
    7 CONTINUE
      CALL MPYMAT(FCM,XXD,FCM,2,2,DUM1,YYD)
       DO 8 I=1,3
        I3 = I+3
      JX=JJ(I)
        KX = KK(I)
        SUM(I3)= SUM(I3) + CON*(YIZK(JX)* XIYDD(KX)- YIZK(KX)* XIYDD(JX)
     1           + XXYDD(I))
        I6 = I+6
        I9 = I+9
       I12 = I+12
      SUM(I6)=SUM(I6) + CON*(2.0D0*YIZK(JX)*XIDY(JX) + 2.0D0*YIZK(KX)*
     1 XIDY(KX) + YYD(JX,JX) + YYD(KX,KX))+(YZD(JX) + YZD(KX))/2.0D0
C      SUM(I6)= SUM(I6) + CON*(YIZK(JX)* XIDY(JX) + YIZK(KX)*XIDY(KX)
C    1          + YYD(JX,JX) + YYD(KX,KX))
       SUM(I9)= SUM(I9) + CON*(YIZK(JX)* XIDY(I) + YYD(JX,I))
       SUM(I12)= SUM(I12)+CON*(YIZK(KX)* XIDY(I) + YYD(KX,I))
    8 CONTINUE
      IF(K-K1)9,42,1
C*****STORE SUMS WHICH ARE ONLY SUMMED FOR K UP TO K1
   42  IT =2
       DO 43 I=1,3
   43   YIDB(I) = YID(I)
        DO 44 I=7,15
       I2 = I + 9
   44   SUM(I2) = SUM(I)
    9 IF(IDAMP.EQ.0) GO TO 1
C*****IDAMP IN
       SUM(25) = SUM(25)+(ZB3      *(CMAT(1,1)* XDD1 + CMAT(1,2)* XDD2
     .          + CMAT(1,3) *XDD3)- ZB1      * (CMAT(3,1)* XDD1 +CMAT(3,
     .          2)* XDD2 + CMAT(3,3)* XDD3)+ CMAT(2,1)* FAC1 + CMAT(2,2)
     .          * FAC2 + CMAT(2,3)* FAC3)  * CON
       DO  32 I=1,3
       DO  32 J=1,3
   32   SXXD(I,J) = XXD(I,J)
      CALL MPYMAT(CMAT,SXXD,CMAT,2,2,DUM1,ZZD)
       SUM(26) = SUM(26) + ZB1     * CON* ZID(2)
       SUM(27) = SUM(27) + CON*(ZB1    *ZID(1) + ZB3     * ZID(3))
       SUM(28) = SUM(28) + CON* ZB3    *ZID(2)
       SUM(29) = SUM(29) + CON* ZZD(1,2)
       SUM(30) = SUM(30) + CON*(ZZD(1,1) + ZZD(3,3))
       SUM(31) = SUM(31) + CON* ZZD(3,2)
    1 CONTINUE
      IF(IOUT.EQ.1) RETURN
      WRITE(6,10000) IDAMP
      WRITE(6,10001)
      WRITE(6,20000) (I,XIYDD(I),ZID(I),YID(I),XIDY(I),XXYDD(I),
     1  YZD(I), I=1,3)
      WRITE(6,10002)
      WRITE(6,20001) (SUM(I),I=1,40)
      RETURN
C     ****************************************
C*****ILP=2 - FIND CON AND ADCON VALUES FOR EQ. 1 AND 2 USING ABOVE SUMS
C*****ZERO OUT CON AND ADCON
  600   DO 601 I=1,7
       DO 601 J=1,3
       CCON(I,J) = 0.0D0
  601   ADCON(I,J) = 0.0D0
       DO 610 I=1,3
       IF(K1.EQ.0) YIDB(I)=0.0D0
  610  CONTINUE
       DO 50 I =1,3
         I3 = I+3
C*****FIND CON FOR FIRST 3 ROWS OF EQ.1 (PGS. CM7-CM8)
       CCON(I,1) = SUM(I)
        JX = JJ(I)
        KX = KK(I)
        OI = OMEG(I)
       OJX = OMEG(JX)
       OKX = OMEG(KX)
       CCON(I,2) = 2.0D0*(OJX * YID(KX)- OKX * YID(JX))
        CCON(I,3) = -(OJX*OJX + OKX * OKX) *YBCM(I) + OI * OJX*YBCM(JX)
     1     + OI * OKX * YBCM(KX)
C*****FIND CON FOR LAST 3 ROWS OF EQ. 1 (PGS. R18,R19,R22)
       CCON(I3,1)= SUM(I3)
        I6 = I+6
        I9 = I+9
       I12 = I+12
       CCON(I3,2) = 2.0D0*(OI * SUM(I6) - OJX * SUM(I9) -OKX * SUM(I12))
       CCON(I3,3) = OJX * OKX *(CIY(JX,JX) -CIY(KX,KX)) + OI* OKX *
     1            CIY(I,JX) + (OKX * OKX - OJX* OJX) * CIY(JX,KX) -
     1            OI * OJX * CIY(I,KX)
      IF(IDAMP.EQ.0) GO TO 50
C*****IDAMP IN
C*****FIND ADCON FOR FIRST 3 ROWS OF EQ. 1 (PGS.CM7 AND CM8)
      ADCON(I,2)=2.0D0*PHID*(FM1(JX,2)*YIDB(KX)-FM1(KX,2)*YIDB(JX))
       ADCON(I,3) = PHID *((2.0D0* OJX + FM1(JX,2) *PHID)* (FM1(KX,1)
     1              * ZBCD(1)-FM1(JX,3)* ZBCD(3)) -(2.0D0* OKX +FM1(KX,2
     1              ) * PHID) * (FM1(JX,1) * ZBCD(1) -FM1(JX,3)*ZBCD(3))
     1)
   50 CONTINUE
      IF(IDAMP.EQ.0) GO TO 52
C*****IDAMP IN
       SW1 = FM1(1,2) * PHID
       SW2 = FM1(2,2) * PHID
       SW3 = FM1(3,2) * PHID
       WS1 =  2.0D0* OMEG(1) + SW1
       WS2 =  2.0D0* OMEG(2) + SW2
       WS3 =  2.0D0* OMEG(3) + SW3
       PHID2 = 2.0D0 * PHID
C*****FIND ADCON FOR LAST 3 ROWS OF EQ. 1 (PGS. R20,R21,R23)
      ADCON(4,2)= PHID2*(FM1(2,1)* SUM(16)-FM1(2,2)* SUM(19)-FM1(2,3)*
     1           SUM(22))
      ADCON(5,2)= PHID2*(-FM1(2,1)*SUM(23)+FM1(2,2)* SUM(17)-FM1(2,3)*
     1            SUM(20))
       ADCON(6,2) = PHID2*(-FM1(2,1)*SUM(21) - FM1(2,2)*SUM(24)
     1     +FM1(2,3) * SUM(18))
       ADCON(4,3) = WS1 *SW3 * CIYZ(2,1) + WS2*SW3 *CIYZ(2,2)
     1           -(WS1*SW1+ WS2*SW2)* CIYZ(2,3)- WS1* SW2*CIYZ(3,1) +
     1            (WS1*SW1+ WS3*SW3)* CIYZ(3,2)- WS3* SW2*CIYZ(3,3)
       ADCON(5,3) = -WS1*SW3 * CIYZ(1,1) - WS2*SW3 *CIYZ(1,2)
     1            +(WS1*SW1+WS2*SW2)* CIYZ(1,3)- (WS2*SW2+WS3*SW3)*
     1           CIYZ(3,1)+ WS2*SW1* CIYZ(3,2)+ WS3 * SW1 * CIYZ(3,3)
       ADCON(6,3) = WS1 *SW2 * CIYZ(1,1) -(WS1* SW1+WS3* SW3)*CIYZ(1,2)
     1             + WS3*SW2 * CIYZ(1,3) +(WS2* SW2+WS3* SW3)*CIYZ(2,1)
     1            - WS2* SW1 * CIYZ(2,2) - WS3* SW1 * CIYZ(2,3)
C*****FIND CON AND ADCON FOR EQ. 2 (PGS. D3-D6)
       CCON(7,1) = SUM(25)
       WS1 = 0.0D0
       WS2 = 0.0D0
       WS3 = 0.0D0
       DO 54 I=1,3
       OI = OMEG(I)
       WS1 = WS1 + FM1(I,1) * OI
       WS2 = WS2 + FM1(I,2) * OI
   54  WS3 = WS3 + FM1(I,3) * OI
      CCON(7,2) =2.0D0*(-WS1 *(SUM(26)+ SUM(29)) +(WS2+ PHID)*(SUM(27)+
     1           SUM(30)) - WS3 *(SUM(28) + SUM(31)))
      CCON(7,3) = FM1(1,2)*(O13* CIYZ(1,2)+ O23*CIYZ(2,2) -(OM11+ OM22)
     1         * CIYZ(3,2)- O12* CIYZ(1,3)+ (OM11+OM33)* CIYZ(2,3) -
     1         O23*CIYZ(3,3)) + FM1(2,2)*(-O13* CIYZ(1,1)-O23* CIYZ(2,1)
     1       +(OM11+ OM22)*CIYZ(3,1)-(OM22+ OM33)* CIYZ(1,3)+O12* CIYZ(2
     1       ,3)+ O13 * CIYZ(3,3)) + FM1(3,2)*(O12*CIYZ(1,1)-(OM11 +OM33
     1       )*CIYZ(2,1)+O23 * CIYZ(3,1) + (OM22+ OM33)* CIYZ(1,2) -
     1       O12 * CIYZ(2,2) - O13 * CIYZ(3,2))
   52 RETURN
C
C
10000 FORMAT('0',3X,'IOUT FROM SUBCON--IDAMP= ',I2)
C
10001 FORMAT('0',3X,'I',5X,'XIYDD',16X,'ZID',17X,'YID',17X,'XIDY',16X,
     .                     'XXYDD'      ,16X, 'YZD')
C
10002 FORMAT('0',2X,'SUM(I),I=1,40 ')
C
20000 FORMAT('0',2X,I2,6E20.8)
C
20001 FORMAT('0',8E16.8)
C
C
      END
      SUBROUTINE fortrd (lun,str82)
      INTEGER lun
      BYTE    str82(82)
      READ (lun,1000) (str82(i),i=3,82)
 1000 FORMAT (80A1)
      str82(1)=80
      str82(2)=0
      RETURN
      END

      SUBROUTINE fortwr (lun,str134)
      INTEGER lun
      BYTE    str134(134)
      WRITE (lun,1000) (str134(i),i=3,str134(1)+2)
 1000 FORMAT (132A1)
      RETURN
      END
      SUBROUTINE SUNDEP(ITEST,SB)
      IMPLICIT REAL*8(A-H,O-Z)
C
C     THIS SUBROUTINE SERVES TWO FUNCTIONS
C
C     ITEST=1  IS ACALL FROM FNDALP WITH SB EQUAL TO THE UNIT
C     SUN VECTOR IN THE BODY FRAME. THE SUBROUTINE DETERMINES
C     WHETHER THE COMPONENT SB(IC)  HAS GONE THROUGH ZERO IN THE
C     TIME BETWEEN THE LAST TIME AND THE PRESENT TIME. IF CONDITIONS
C     ARE MET, THE CROSSING IS COUNTED AND THE TIME OF CROSSING AND
C     SPIN RATE ARE STORED
C
C
C     ITEST=2  IS A CALL FROM MAIN AT PTINT TIME WITH SB INDIFFERENT.
C     IF THE NUMBER OF CROSSINGS IS ONE LESS THAN THE SPECIFIED
C     NUMBER OF CROSSINGS, THE NEW STOP TIME AND NEW PRINT FREQUENCY
C     ARE DETERMINED. THE INDEX JTEST IS SET SO THAT NO MORE
C     COMPUTATIONS ARR DONE BY THIS SUBROUTINE.
C
      COMMON/CODPLY/STANG,ANGTOL
C
      COMMON/CONSTS/PI,TWOPI,RADIAN
C
      COMMON/IODPLY/ISDPLY,IRAXIS,ISAXIS,NCROSS,NPRINT
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/PRCOM /STORE(10,30),ILINE,ICOL,ICNT,IHDD
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
      DIMENSION TCROSS(10),OMEGCR(10),TAU(9),SB(3),ZSUN(3),JJ(3),KK(3)
C
      IF(ITEST.EQ.2) GO TO 100
C     COMPUTATIONS AT INITIAL TIME ONLY
      IF(ITIM.EQ.2) GO TO 10
      JJ(1)=2
      JJ(2)=3
      JJ(3)=1
      KK(1)=3
      KK(2)=1
      KK(3)=2
      ICROSS=0
      JTEST=0
      IWR=1
      IR=IRAXIS
      IS=ISAXIS
      IF(IS.EQ.IR) IS=JJ(IR)
      IC=JJ(IR)
      IF(IC.EQ.IS) IC=KK(IR)
      IT=JJ(IR)
      SLAST=2.0D0
      TDEL=TIME+4.0D0*DELTAT
      WS1=SB(IS)
      WS2=SB(IC)
      WS3=WS1*WS1+WS2*WS2
      IF(WS3.GT.3.0D-4) GO TO 10
C     IF THE SUN VECTOR LIES WITHIN A DGGREE OF THE SPIN AXIS
C     THE COMPUTATIONS ARE NOT PERFORMED AND THE RUN WILL BE STOPPED.
      TSTOP=TDEL
      FREQ=TDEL-TIME
      JTEST=1
      WRITE(6,202)
      RETURN
   10 CONTINUE
      DO 12 M=1,3
   12 ZSUN(M)=SB(M)
      IF(JTEST.NE.0) RETURN
      IF(TIME.LE.TDEL) RETURN
      SNOW=SB(IC)
      TNOW=TIME
      OMNOW=OMEG(IR)
      IF(SLAST.EQ.2.0D0) GO TO 30
      IF(TIME.LE.TLAST) GO TO 30
      IF(OMNOW.LT.0.0D0) GO TO 20
      IF(IC.EQ.IT) GO TO 22
   14 CONTINUE
      IF(SLAST.GT.0.0D0) GO TO 30
      IF(SNOW.LE.0.0D0) GO TO 30
   15 CONTINUE
      WS1=SNOW-SLAST
      WS2=SLAST/WS1
      WS1=TNOW-TLAST
      WS3=DABS(WS2)
      WS2=WS1*WS3
      ICROSS=ICROSS+1
      I1=ICROSS
      IF(ICROSS.LE.10) GO TO 18
      I1=10
      DO 17 I=1,9
      J=I+1
      TCROSS(I)=TCROSS(J)
      OMEGCR(I)=OMEGCR(J)
   17 CONTINUE
   18 CONTINUE
      TCROSS(I1)=TLAST+WS2
      WS2=OMNOW-OMLAST
      OMEGCR(I1)=OMLAST+WS2*WS3
      GO TO 30
   20 CONTINUE
      IF(IC.EQ.IT) GO TO 14
   22 CONTINUE
      IF(SLAST.LT.0.0D0) GO TO 30
      IF(SNOW.LE.0.0D0) GO TO 15
   30 CONTINUE
      TLAST=TNOW
      SLAST=SNOW
      OMLAST=OMNOW
      RETURN
  100 CONTINUE
      IF(JTEST.NE.0) RETURN
      IF(NCROSS.LT.3) NCROSS=3
      I1=ICROSS+1
      IF(I1.LT.NCROSS) RETURN
      I1=ICROSS
      IF(I1.GT.10) I1=10
      I2=I1-1
      DO 101 I=1,I2
      TAU(I)=TCROSS(I+1)-TCROSS(I)
  101 CONTINUE
      IF(I2.EQ.1) GO TO 103
      I3=I2-1
      ER1=0.0D0
      DO 102 I=1,I3
      J=I+1
      WS1= TAU(J)-TAU(I)
      WS2=TAU(J)+TAU(I)
      WS3=DABS(WS1)
      ER=2.0D0*TWOPI*WS3/WS2
      IF(ER.GT.ER1) ER1=ER
  102 CONTINUE
      TE=(TWOPI+STANG*RADIAN)*ER1/TWOPI
      TOL=ANGTOL*RADIAN
      IF(TE.GT.TOL) IWR=2
      GO TO 110
  103 CONTINUE
      WS1=TWOPI/OMEGCR(I1)
      WS2=DABS(WS1)
      WS2=WS2+TAU(I2)
      ER1=2.0D0*TWOPI*WS1/WS2
      GO TO 102
  110 CONTINUE
      JTEST=1
      WS1=TIME-TCROSS(I1)
      WS2=TAU(I2)*STANG/360.0D0
      WS2=WS2+TAU(I2)-WS1
      WS1=NPRINT
      FREQ=WS2/WS1
      TSTOP=TIME+WS2
      IF(ICNT.GT.55) GO TO 120
      ICNT=ICNT+1
      WS1=DMOD(TSTOP,8.64D4)
      WS2=HMSOUT(WS1)
      WRITE(6,200) WS2,FREQ
      ICNT=ICNT+1
      IF(IWR.EQ.1) GO TO 120
      WRITE(6,201)
  120 CONTINUE
      I1=ICROSS-1
      WRITE(6,251) (TCROSS(J),J=I1,ICROSS)
      WRITE(6,252) (ZSUN(K),K=1,3)
      WRITE(6,253) (SD(L),L=1,3)
      RETURN
  200 FORMAT('0',3X,'STOPPING AT ',F10.3,' WITH PRINT FREQUENCY ',G15.5)
  201 FORMAT('0',3X,' THE TOLERANCE MAY BE EXCEEDED ')
  202 FORMAT('0',3X,' THE SUN LINE IS ALONG THE SPIN AXIS ')
  251 FORMAT('   TCROSS= ',1(1PE16.8))
  252 FORMAT('   SB(BODY)',3(1PE16.8))
  253 FORMAT('   SD(INERTIAL)',3(1PE16.8))
      END
      SUBROUTINE TCNVRT(YY,MM,DAORSC,TLAST,TIME,ITEST)
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 MM
C     SUBROUTINES REQUIRED: QTIME
C     IF ITEST=1 CONVERTS TIME FROM YEAR MONTH DAY AND DECIMAL PARTS TO
C           SECONDS FROM START OF THE YEAR, DAORSC=DAYS AND DEC.PARTS
C           OUTPUT IS TLAST WHICH IS SECONDS FROM START OF THE YEAR
C     IF ITEST=2 CONVERTS TIME IN SECONDS FROM START OF THE YEAR TO
C           YEAR MONTH DAY AND SECONDS,  DAORSC=SECONDS OF THE DAY
C           INPUT IS TIME WHICH IS SECONDS FROM START OF THE YEAR
C
      COMMON/IDATE1/ IY,IM,JWDAY
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      DIMENSION JULDAY(12)
      DATA JULDAY /0,31,59,90,120,151,181,212,243,273,304,334/
C
      IY=IDATE/10000
      IF (ITEST .GE. 2)  GO TO 10
C
C     ********  COMPUTE TIME TO COMPARE WITH TIME ON ORBIT TAPE   ******
      NM=(IDATE-IY*10000)/100
      NDAY=MOD(IDATE,100)-1
C     **************  TEST FOR LEAP YEAR  ******************************
      IF(MOD(IY,4).EQ.0.AND.NM.GT.2) NDAY=NDAY+1
      KDAY=JULDAY(NM)+NDAY
      TIME=TIME+DFLOAT(KDAY)*8.64D4
C
      IM=MM
      LDAY=DAORSC-1.0
      SECOND=QTIME(DAORSC)
      NY=YY-1900.D0
C     **************  TEST FOR LEAP YEAR  ******************************
      IF(MOD(NY,4).EQ.0.AND.IM.GT.2) LDAY=LDAY+1
      JDAY=JULDAY(IM)+LDAY
      TLAST=DFLOAT(JDAY)*8.64D4+SECOND
      RETURN
   10 DAORSC=DMOD(TIME,8.64D4)
      MDAY=0
      IM=1
      IF (TIME .LE. 8.64D4)  DAORSC=TIME
C     JWDAY IS THE NUMBER OF WHOLE ELAPSED DAYS SINCE START OF YEAR
C     IDAY IS THE CALENDAR DAY OF THE MONTH
C     MDAY IS THE CALENDAR DAY OF THE MONTH MINUS 1
      JWDAY=(TIME-DAORSC)/8.64D4
      JDAY=JWDAY
      IF(JDAY.LE.0) GO TO 60
      IF (MOD(IY,4).EQ.0.AND.JDAY.GE.366) GO TO 55
      IF (MOD(IY,4).NE.0.AND.JDAY.GE.365) GO TO 50
   20 IF (MOD(IY,4) .EQ. 0  .AND.  JDAY .EQ. 59)  GO TO 40
      IF (MOD(IY,4) .EQ. 0  .AND.  JDAY .GT. 59)  JDAY=JDAY-1
      DO 30 I=1,11
      IF (JDAY.GE.JULDAY(I).AND.JDAY.LT.JULDAY(I+1)) GO TO 35
   30 CONTINUE
      IF (JDAY.GE.334.AND.JDAY.LT.365) I=12
   35 IM=I
      MDAY=JDAY-JULDAY(IM)
      MM=IM
      GO TO 60
   40 IM=2
      MDAY=28
      GO TO 60
   50 IY=IY+1
      JDAY=JDAY-365
      GO TO 20
   55 IY=IY+1
      JDAY=JDAY-366
      GO TO 20
   60 IDAY=MDAY+1
      KDATE=IDAY+IM*100+IY*10000
      YY=KDATE
      RETURN
      END
      SUBROUTINE THRMRD
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      REAL*4 BUFF(450)
C
      COMMON/ADSTAT/DER(150),DEP(150)
C
      COMMON/CCNVRT/DUM01(48),THERMC(10),DUM02(20)
C
      COMMON/EXPAND/THRMPR(100),ITHRM(20)
C
      COMMON/IPOOL1/IGRAV,IDAMP,IK,K1,IDUM1(35)
C
      COMMON/RPOOL1/RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3)
     1             ,ZLKP(10),ZLKDP(10),DUM03(61),PHID,PHI
C
      COMMON/RPOOL2/PO,SD(3),DUM04(83)
C
      COMMON/RPOOL5/CKMAT(3,3,10),FM2(3,3)
C
      COMMON/VARBLS/DEPEND(150),DERIV(150)
C
      COMMON/XIN4  /UP(150),DN(150),BNDS(22)
C
C
      DIMENSION SPECH(10),EMISS(10),ABSORP(10),AABS(10),AEMS(10)
      DIMENSION THKIN(10),THKOUT(10),V1(3),V2(3),V3(3),V4(3),V5(3)
      DIMENSION TZERO(10),O1(3),O2(3),O3(3),O4(3),O5(3)
      DIMENSION TLREF(10)
      DIMENSION NKEXP(10)
C
      EQUIVALENCE (QSOL,THRMPR(1)),(SIGM,THRMPR(5)),(GRAV,THRMPR(4))
      EQUIVALENCE (NKEXP(1),ITHRM(11))
      EQUIVALENCE (IEXP,ITHRM(1)),(NTREF,ITHRM(2))
      EQUIVALENCE (TLREF(1),THRMPR(81))
      EQUIVALENCE (SPECH(1),THRMPR(11)),(EMISS(1),THRMPR(21)),
     1(ABSORP(1),THRMPR(31)),(AABS(1),THRMPR(41)),(AEMS(1),THRMPR(51)),
     2(THKIN(1),THRMPR(61)),(THKOUT(1),THRMPR(71))
      EQUIVALENCE (TZERO(1),THRMPR(91))
      DATA I8/',A8,'/
C
C
      CALL SETUP(8HTHRMPR  ,8,THRMPR,100)
      CALL SETUP(8HITHRM   ,4,ITHRM,20)
C
C   ****************************************************************
      ENTRY NUMTHR(NUMEQS)
C   ****************************************************************
C
      IF(IEXP.EQ.0) RETURN
      NTREF=NUMEQS
      NDEP=0
      DO 1 K=1,IK
      IF(NKEXP(K).EQ.0) GO TO 1
      NDEP=NDEP+1
    1 CONTINUE
C
      NUMEQS=NUMEQS+NDEP
C
      RETURN
C
C   ****************************************************************
      ENTRY THINIT
C   ****************************************************************
C
      IF(IEXP.EQ.0) RETURN
C
      IND=NTREF
C
      DO 3 K=1,IK
      IF(NKEXP(K).EQ.0) GO TO 3
      IND=IND+1
      UP(IND)=THRMPR(2)
      DN(IND)=THRMPR(3)
      DEP(IND)=TZERO(K)
C
      DEN=SPECH(K)*RHOK(K)*GRAV
      THKIN(K)=QSOL*ABSORP(K)*AABS(K)/DEN
      THKOUT(K)=EMISS(K)*AEMS(K)*SIGM/DEN
C
    3 CONTINUE
C
      RETURN
C
C   ****************************************************************
      ENTRY THERME
C   ****************************************************************
C
      IF(IEXP.EQ.0) RETURN
C
      IADD=0
C
      CALL MATV(2,SA,SD,V1)
C
      DO 100 K=1,IK
      IF(NKEXP(K).EQ.0) GO TO 100
      IADD=IADD+1
      IF(K.GT.K1) GO TO 5
      CALL MATV(2,FM1,V1,V2)
      CALL MATV(2,FM1,OMEG,O1)
      O1(2)=O1(2)+PHID
      GO TO 10
    5 CONTINUE
      CALL MATV(2,FM2,V1,V2)
      CALL MATV(2,FM2,OMEG,O1)
   10 CONTINUE
      CALL MATV(2,CKMAT(1,1,K),V2,V3)
      CALL MATV(2,CKMAT(1,1,K),O1,O2)
C
      TEMPK=DEPEND(NTREF+IADD)
      T2=TEMPK*TEMPK
      T4=T2*T2
      ASP=V3(2)*V3(2)+V3(3)*V3(3)
      ASP=DSQRT(ASP)
      DTEMP=ASP*THKIN(K)-THKOUT(K)*T4
      DERIV(NTREF+IADD)=DTEMP
      ASPD=0.0D0
      IF(ASP.GT.0.0D0) ASPD=V3(2)*(O2(1)*V3(3)-O2(3)*V3(1))/ASP
     1+V3(3)*(O2(2)*V3(1)-O2(1)*V3(2))/ASP
      DDTEMP=THKIN(K)*ASPD-THKOUT(K)*T2*TEMPK*DTEMP
      ZLKDP(K)=ZLKDP(K)+THERMC(K)*ZLK(K)*DDTEMP
C
C     ZLK AND ZLKP ARE CALCULATED AT EACH CALL TO SETVAL(2) IN DEREQ
C
      ZLK(K)=ZLK(K)*(1.0D0+THERMC(K)*(TEMPK-TLREF(K)))
      ZLKP(K)=ZLKP(K)+1.0D0*THERMC(K)*ZLK(K)*DTEMP
C
  100 CONTINUE
C
      RETURN
C
C
C   ****************************************************************
      ENTRY THPLOT(BUFF,INDEX)
C   ****************************************************************
C
      I1=INDEX-1
      INDEX=INDEX+10
C
      IF(IEXP.EQ.0) RETURN
C
      IADD=0
      DO 200 K=1,IK
      IF(NKEXP(K).EQ.0) GO TO 200
      IADD=IADD+1
      BUFF(I1+K)=DEPEND(NTREF+IADD)
  200 CONTINUE
C
      RETURN
C
C
C   ****************************************************************
      ENTRY THPRNT
C   ****************************************************************
C
      IF(IEXP.EQ.0) RETURN
C
      IADD=0
      DO 300 K=1,IK
      IF(NKEXP(K).EQ.0) GO TO 300
      IADD=IADD+1
      TEMP=DEPEND(NTREF+IADD)
      CALL SET('TEMP    ',K,0,TEMP,I8)
      CALL SET('ZLKP    ',K,0,ZLKP(K),I8)
      CALL SET('ZLKDP   ',K,0,ZLKDP(K),I8)
  300 CONTINUE
C
C
C
      RETURN
C
      END
      SUBROUTINE TIPVEC(      ZLL,ZLD,ZLDD,A,B,AD,BD,ADD,BDD,
     *XSH,XSHP,XSHPP,ZNP,XAI,XAID,XAIDD)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C   THIS SUBROUTINE IS TO COMPUTE THE BOOM TIP POSITION
C   VELOCITY AND ACCELERATION VECTORS IN THE BOOM ELEMENT
C   FRAME FOR THE USE OF SUBROUTINE ACCOMP
C
C   INPUT VARIABLES
C
C   ZLL,ZLD,ZLDD---- BOOM LENGTH, DEPLOYMENT RATE AND ACCELERATION
C   A,B------OUT AND IN-PLANE DEFLECTIONS, THE GENERALIZED COORDINATES
C   AD,BD---- OUT AND IN-PLANE VELOCITY
C   ADD,BDD,----OUT AND IN-PLANE ACCELERATIONS
C   XSH,XSHP,XSHPP----SHAPE FUNCTION OF THE ELEMENTAND ITS DERIVATIVES
C   ZNP------AXIAL DISPLACEMENT SHPAE FUNCTION
C
C   OUTPUT VARIABLES
C
C   XAI----POSITION VECTOR OF THE TIP IN ELEMENT FRAME
C   XAID----VELOCITY VECTOR OF TIP IN ELEMENT FRAME
C   XAIDD----ACCELERATION VECTOR OF TIP IN THE ELEMENT FRAME
C
      COMMON/DEBUG2/IOUT,JOUT,KLUGE
C
      DIMENSION A(3),B(3),AD(3),BD(3),ADD(3),BDD(3)
      DIMENSION XSH(3),XSHP(3),XSHPP(3),ZNP(3,3)
      DIMENSION XAI(3),XAID(3),XAIDD(3)
      DIMENSION DUM1(3),DUM2(3),DUM3(3),DUM4(3),DUM5(3),DUM6(3)
C
C   COMPUTE THE POSITION VECTOR
C
      DO 10 I=1,3
      DUM1(I)=0.0D0
      DUM2(I)=0.0D0
      DUM3(I)=0.0D0
      DUM4(I)=0.0D0
      DUM5(I)=0.0D0
      DUM6(I)=0.0D0
 10   CONTINUE
      DO 20 I=1,3
      DO 30 J=1,3
      DUM1(I)=DUM1(I)+ZNP(I,J)*A(J)
      DUM2(I)=DUM2(I)+ZNP(I,J)*B(J)
 30   CONTINUE
 20   CONTINUE
      DA=A(1)*DUM1(1)+A(2)*DUM1(2)+A(3)*DUM1(3)
      DB=B(1)*DUM2(1)+B(2)*DUM2(2)+B(3)*DUM2(3)
      U1=-(DA+DB)/(2.0D0*ZLL)
      U2=A(1)*XSH(1)+A(2)*XSH(2)+A(3)*XSH(3)
      U3=B(1)*XSH(1)+B(2)*XSH(2)+B(3)*XSH(3)
C
C   THE POSITION VECTOR
C
      XAI(1)=U1+ZLL
      XAI(2)=U2
      XAI(3)=U3
C
C   END OF POSITION VECTOR COMPUTATION
C
C   THE VELOCITY VECTOR COMPUTATION
C
      DO 40 I=1,3
      DO 50 J=1,3
      DUM3(I)=DUM3(I)+ZNP(I,J)*AD(J)
      DUM4(I)=DUM4(I)+ZNP(I,J)*BD(J)
 50   CONTINUE
 40   CONTINUE
      DA=AD(1)*DUM1(1)+AD(2)*DUM1(2)+AD(3)*DUM1(3)
      DB=BD(1)*DUM2(1)+BD(2)*DUM2(2)+BD(3)*DUM2(3)
      DC=A(1)*DUM3(1)+A(2)*DUM3(2)+A(3)*DUM3(3)
      DD=B(1)*DUM4(1)+B(2)*DUM4(2)+B(3)*DUM4(3)
      U1D=-(DA+DB+DC+DD)/(2.0D0*ZLL)
      U2D=AD(1)*XSH(1)+AD(2)*XSH(2)+AD(3)*XSH(3)
      U3D=BD(1)*XSH(1)+BD(2)*XSH(2)+BD(3)*XSH(3)
      U2P=A(1)*XSHP(1)+A(2)*XSHP(2)+A(3)*XSHP(3)
      U3P=B(1)*XSHP(1)+B(2)*XSHP(2)+B(3)*XSHP(3)
      U1P=1.0D0-0.5D0*(U2P*U2P+U3P*U3P)
C
C   VELOCITY VECTORS
C
      XAID(1)=U1D+ZLD*U1P
      XAID(2)=U2D+U2P*ZLD
      XAID(3)=U3D+ZLD*U3P
C
C   END THE VELOCITY VECTOR COMPUTATIONC
C
C   THE ACCELERATION VECTOR COMPUTATION
C
      DO 60 I=1,3
      DO 70 J=1,3
      DUM5(I)=DUM5(I)+ZNP(I,J)*ADD(J)
      DUM6(I)=DUM6(I)+ZNP(I,J)*BDD(J)
 70   CONTINUE
 60   CONTINUE
      DA=ADD(1)*DUM1(1)+ADD(2)*DUM1(2)+ADD(3)*DUM1(3)
      DB=BDD(1)*DUM2(1)+BDD(2)*DUM2(2)+BDD(3)*DUM2(3)
      DC=(AD(1)*DUM3(1)+AD(2)*DUM3(2)+AD(3)*DUM3(3))*2.0D0
      DD=(BD(1)*DUM4(1)+BD(2)*DUM4(2)+BD(3)*DUM4(3))*2.0D0
      DE=A(1)*DUM5(1)+A(2)*DUM5(2)+A(3)*DUM5(3)
      DF=B(1)*DUM6(1)+B(2)*DUM6(2)+B(3)*DUM6(3)
      U1DD=-(DA+DB+DC+DD+DE+DF)/(2.0D0*ZLL)
      U2DD=ADD(1)*XSH(1)+ADD(2)*XSH(2)+ADD(3)*XSH(3)
      U3DD=BDD(1)*XSH(1)+BDD(2)*XSH(2)+BDD(3)*XSH(3)
      U2PP=A(1)*XSHPP(1)+A(2)*XSHPP(2)+A(3)*XSHPP(3)
      U3PP=B(1)*XSHPP(1)+B(2)*XSHPP(2)+B(3)*XSHPP(3)
      U2PD=AD(1)*XSHP(1)+AD(2)*XSHP(2)+AD(3)*XSHP(3)
      U3PD=BD(1)*XSHP(1)+BD(2)*XSHP(2)+BD(3)*XSHP(3)
C
C   THE ACCELERATION VECTOR
C
      XAIDD(1)=U1DD+ZLDD*U1P-ZLD*ZLD*(U2PP+U3PP)
     *-2.0D0*(U2P*U2PD+U3P*U3PD)*ZLD
      XAIDD(2)=U2DD+ZLDD*U2P+ZLD*ZLD*U2PP+2.0D0*ZLD*U2PD
      XAIDD(3)=U3DD+ZLDD*U3P+ZLD*ZLD*U3PP+2.0D0*ZLD*U3PD
C
C   END OF ACCELERATION COMPUTATION
C
C   DEBUG MESSAGE IN TIPVEC
C
      IF(IOUT.EQ.1) GO TO 80
      WRITE(6,90)
 90   FORMAT('  DEBUG MESSAGE FROM SUBROUTINE TIPVEC')
      WRITE(6,100) ZLL,ZLD,ZLDD
 100  FORMAT('  ZLL, ZLD,ZLDD=',2X,3(F20.10,3X))
      WRITE(6,150) ADD(1),ADD(2),ADD(3)
 150  FORMAT(' ADD ARRAYD=',3(E20.10,3X))
      WRITE(6,160) BDD(1),BDD(2),BDD(3)
 160  FORMAT(' BDD ARRAYD=',3(E20.10,3X))
      WRITE(6,200) U1,U2,U3
 200  FORMAT(' U1, U2, U3 =',2X,3(E20.10,3X))
      WRITE(6,300) U1D,U2D,U3D
 300  FORMAT('  U1D, U2D, U3D=',2X,3(E20.10,3X))
      WRITE(6,400) U1P,U2P,U3P
 400  FORMAT(' U1P,U2P, U3P=',2X,3(E20.10,3X))
      WRITE(6,500) U1DD, U2DD, U3DD
 500  FORMAT(' U1DD, U2DD, U3DD=',2X,3(E20.10,3X))
      WRITE(6,600) U2PP,U3PP,U2PD,U3PD
 600  FORMAT(' U2PP,U3PP=',2(E20.10,2X),'U2PD,U3PD=',2(E20.10,2X))
      WRITE(6,700) XAI(1),XAI(2),XAI(3)
 700  FORMAT(' XAI VECTOR=',3(E20.10,2X))
      WRITE(6,800) XAID(1),XAID(2),XAID(3)
 800  FORMAT(' XAID VECTOR=',3(E20.10,2X))
      WRITE(6,900) XAIDD(1),XAIDD(2),XAIDD(3)
 900  FORMAT(' XAIDD VECTOR=',3(E20.10,2X))
C
 80   CONTINUE
C
      RETURN
      END
      SUBROUTINE TOTIMP(TVEC,TPAR,TMEAN,DELV)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/RPOOL3/ZMS,YIZM(3,2)
C
      DIMENSION TVEC(4),TPAR(4)
C
C
      T1=TVEC(1)
      T2=TVEC(2)
      T3=TVEC(3)
      T4=TVEC(4)
C
      A=TPAR(1)
      B=TPAR(2)
      C=TPAR(3)
      D=TPAR(4)
C
      T21=T2-T1
      T32=T3-T2
      T43=T4-T3
      ARG1=-B*T21
      ARG2=C*T32
      ARG3=-D*T43
      E1=DEXP(ARG1)
      E3=DEXP(ARG3)
      P1=A*(1.0D0-E1)
      CI1=0.0D0
      CM1=0.0D0
      IF(B.EQ.0.0D0) GO TO 1
      CI1=A*T21-P1/B
      CM1=A*T21*(T21/2.0D0+E1/B)-P1/(B*B)
    1 CONTINUE
      WS1=P1*T32
      WS2=ARG2*T32/2.0D0
      CI2=WS1+WS2
      CM2=WS1*(T21+T32/2.0D0)+WS2*(T21+2.0D0*T32/3.0D0)
      P2=P1+ARG2
      CI3=P2*T43/2.0D0
      CM3=CI3*(T21+T32+T43/3.0D0)
      IF(D.EQ.0.0D0) GO TO 2
      CI3=P2*(1.0D0+(1.0D0-E3)/ARG3)/D
      WS1=D*(T21+T32)+2.0D0
      WS2=D*(T21+T32+T43)+2.0D0
      WS3=D*D
      CM3=P2*(WS1+WS2*(1.0D0-E3)/ARG3)/WS3
    2 CONTINUE
      WS1=CI1+CI2+CI3
      WS2=CM1+CM2+CM3
      TMEAN=WS2/WS1
      DELV=0.3048D-3*WS1/ZMS
      RETURN
      END
      SUBROUTINE TOUT(SA,OMEG,TIME,IPLOT,IPLTPE)
C
C
C     SUBROUTINE TOUT COMPUTES THE EULER ANGLES AND RATES
C     WITH RESPECT TO THE LOCAL GEOGRAPHICAL FRAME FOR THE GROUND
C     TESTING SIMULATION OF FSD PROGRAM .
C     IT CALLS ARANGE TO EXTRACT ELEMENT DATA ; DMOMNT TO CALCULATE
C     ELEMENT BENDING MOMENTS AND TENSIONS ; AND WRTPLT TO WRITE
C     TEMPORARY DATA SET FOR PLOTS .
C     MODIFICATION AS OF SEPT. 1977.
C
C
        IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/CANTNA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/DMMNT1/ZKBM(6),EMAK(10),EMBK(10),DUMM1(6),
     *    ITORK,IBENDM,ITENSE,ITNS1
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/IMAIN1/IDATE,LSAVE,INOPT,IDIM(5)
C
      COMMON/OUTTWO/ SOLILL,EPSERR
C
      COMMON/XIN1/ PSI1,THET1,PHI1,ETTA,ZETTA,ITEST
C
      COMMON/GRNOUT/ALFAG,DELTG,PHASG,OMGN(3)
C
      COMMON/GRNTST/ALFAEG,DELTAG,PHASEG,ALTUDE,OMGY(3),
     *    GACC(3),GLOCAT(3),IGRUND,IALTUD,IGASBR
C
      DIMENSION H(3),OM(3),OMEG(3),SA(3,3)
C
      ITEST=1
C     COMPUTE THE EULER ANGLES FROM THE SA MATRIX
C
C
C
      IF(IGASBR.EQ.0) GO TO 200
      ALFAG=DATAN2(SA(1,3),SA(2,3))/RADIAN
      DELTG=DARCOS(SA(3,3))/RADIAN
      GO TO 220
 200  CONTINUE
      ALFAG=ALFAEG
      DELTG=DELTAG
 220  CONTINUE
C
      DO 70 I=1,3
 70   OMGN(I)=OMEG(I)/RADIAN
C
      X=ETTA*RADIAN
      Y=ZETTA*RADIAN
      W=SA(1,3)*DSIN(X)*DCOS(Y) + SA(2,3)*DSIN(X)*DSIN(Y)
     .                          + SA(3,3)*DCOS(X)
      EPSERR=DARCOS(W)/RADIAN
C
      DUM=0.0D0
      PHASG=0.0D0
C
C     CALL ARANGE
C
      IF(ITENSE.NE.0.OR.IBENDM.NE.0) CALL DMOMNT
C
      IF(IPLOT.NE.0) CALL WRTPLT(TIME,ALFAG,DELTG,PHASG,OMGN,DUM
     1                          ,DUM,EPSERR,DUM,3)
      INOPT=1
C
      RETURN
      END
      SUBROUTINE TRANS(A,B,C,R)
      IMPLICIT REAL*8 (A-H,O-Z)
C
C     SUBROUTINE TRANS IS TO SET UP THE TRANSFORMATION
C     MATRIX BETWEEN THE ARIES INERTIAL FRAME AND THE LOCAL
C     VERTICAL FRAME ,  IT CAN ALSO USED AS A 3-1-3 EULER TRANSFORMATION
C
      DIMENSION R(3,3)
      R(1,1)= DCOS(A)*DCOS(C) - DSIN(A)*DCOS(B)*DSIN(C)
      R(1,2)= -DCOS(A)*DSIN(C) - DSIN(A)*DCOS(B)*DCOS(C)
      R(1,3)= DSIN(A)*DSIN(B)
      R(2,1)= DSIN(A)*DCOS(C) + DCOS(A)*DCOS(B)*DSIN(C)
      R(2,2)= -DSIN(A)*DSIN(C) + DCOS(A)*DCOS(B)*DCOS(C)
      R(2,3) = -DCOS(A)*DSIN(B)
      R(3,1)= DSIN(B)*DSIN(C)
      R(3,2)= DSIN(B)*DCOS(C)
      R(3,3)= DCOS(B)
      RETURN
      END
      SUBROUTINE TRQORD
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ITRQOT/ IOUTPT(150)
C
      COMMON/TRQOUT/ OUTTRQ(150)
C
C
      REAL*4 BUFF(450)
C
C
      DATA I8/',A8,'/
C
C
      CALL SETUP(8HIOUTPT  ,4,IOUTPT,150)
C
      DO 5 I=1,150
      OUTTRQ(I)=0.0D0
    5 CONTINUE
C
C
      RETURN
C
C    ***************************************************************
      ENTRY TRQPLT(BUFF,INDX)
C    ***************************************************************
C
      INDEX=INDX-1
      INDX=INDX+3
C
      IF(IOUTPT(1).EQ.0) RETURN
C
      IND=IOUTPT(2)
      IND2=IOUTPT(3)
C
C
      DO 10 I=1,3
      I3=I+3
      BUFF(INDEX+I)=OUTTRQ(IND-1+I)
      BUFF(INDEX+I3)=OUTTRQ(IND2-1+I)
   10 CONTINUE
C
      RETURN
C
C    ***************************************************************
      ENTRY TRQPRN
C    ***************************************************************
C
      IF(IOUTPT(1).EQ.0) RETURN
C
      I1=IOUTPT(2)
      I2=I1+1
      I3=I2+1
C
      CALL SET('TORQUE 1',0,0,OUTTRQ(I1),I8)
      CALL SET('TORQUE 2',0,0,OUTTRQ(I2),I8)
      CALL SET('TORQUE 3',0,0,OUTTRQ(I3),I8)
C
      I1=IOUTPT(3)
      I2=I1+1
      I3=I2+1
C
      CALL SET('MT TRQ 1',0,0,OUTTRQ(I1),I8)
      CALL SET('MT TRQ 2',0,0,OUTTRQ(I2),I8)
      CALL SET('MT TRQ 3',0,0,OUTTRQ(I3),I8)
C
C
      RETURN
C
C
C
      END
      FUNCTION TTRUST(TPULSE,TIME,TVEC,TPAR)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      DIMENSION TVEC(4),TPAR(4)
C
C
      T1=TVEC(1)
      T2=TVEC(2)
      T3=TVEC(3)
      T4=TVEC(4)
C
      A=TPAR(1)
      B=TPAR(2)
      C=TPAR(3)
      D=TPAR(4)
C
      TEST=TIME-TPULSE
      T21=T2-T1
      T31=T3-T1
      T41=T4-T1
      ARG1=TEST
      IF(TEST.GT.T21) ARG1=T21
      ARG1=-B*ARG1
      TMAG=A*(1.0D0-DEXP(ARG1))
      ARG1=TEST-T21
      IF(ARG1.LT.0.0D0) GO TO 10
      IF(TEST.GT.T31) ARG1=T3-T2
      TMAG=TMAG+C*ARG1
      ARG1=TEST-T31
      IF(ARG1.LT.0.0D0) GO TO 10
      ARG1=-D*ARG1
      TMAG=TMAG*DEXP(ARG1)*(T41-TEST)/(T4-T3)
      IF(TEST.GT.T41) TMAG=0.0D0
   10 CONTINUE
      TTRUST=TMAG
      RETURN
      END
      FUNCTION TWOT(OM,S,ZMS,TBM2)
C
C     'TWOT' IS A FUNCTION WHICH SUMMARIZES THE TOTAL KINETIC ENERGY
C     OF THE SYSTEM.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 J1,J2,J3
C
      COMMON/RNRGY3/ J1(3,3),J2(3,3),J3(3,3),XICODT(3),W(3),ETA(3),
     .               ZETA(3)
C
      DIMENSION OM(3),S(3,3),OMT(3),ST(3,3),WT(3),OJ1(3),WJ2(3),WJ3(3)
C
C
      CALL MATRAN(OM,OMT,1,3)
      CALL MATRAN(S,ST,3,3)
      CALL MATRAN(W,WT,1,3)
C
      XSQR=0.0D0
      OMTE=0.0D0
      WTZ=0.0D0
C
      DO 10 I=1,3
      XSQR=XSQR + XICODT(I)**2
      OMTE=OMTE + OMT(I)*ETA(I)
   10 WTZ=WTZ + WT(I)*ZETA(I)
C
      XSQR=-ZMS*XSQR
      OMTE=2.D0*OMTE
      WTZ=2.D0*WTZ
C
      DO 20 I=1,3
      OJ1(I)=0.0D0
      WJ2(I)=0.0D0
      WJ3(I)=0.0D0
      DO 20 J=1,3
      OJ1(I)=OJ1(I) + OM(J)*J1(J,I)
      WJ2(I)=WJ2(I) + WT(J)*J2(J,I)
   20 WJ3(I)=WJ3(I) + WT(J)*J3(J,I)
C
      OJ1O=0.0D0
      WJ2W=0.0D0
      WJ3O=0.0D0
C
      DO 30 I=1,3
      OJ1O=OJ1O + OJ1(I)*OM(I)
      WJ2W=WJ2W + WJ2(I)*W(I)
   30 WJ3O=WJ3O + WJ3(I)*OM(I)
C
      TWOT=XSQR + OJ1O + WJ2W + TBM2 + 2.D0*WJ3O + OMTE + WTZ
      TWOT=TWOT/2.D0
C
      RETURN
      END
      FUNCTION TWOTBM(K)
C
C     'TWOTBM' IS A FUNCTION WHICH EVALUATES THE RELATIVE KINETIC ENERGY
C     OF AN ELEMENT IN THE ELEMENT FRAME.
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RXCAL / XI(3),XID(3),XX(3,3),XXD(3,3),XDXD(3,3)
C
C
      TWOTBM=0.0D0
      RHOKLK=RHOK(K)*ZLK(K)
      SUM=0.0D0
C
      DO 10 I=1,3
   10 SUM=SUM + XDXD(I,I)
C
      TWOTBM=RHOKLK*SUM
C
      RETURN
      END
      SUBROUTINE TWSTOT(DEP)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/INEWR / NKT(10),ICP,ICPS
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10)
C
     1              ,LK(10),LLK(10)
C
      COMMON/TWIOUT/ CWO(10,3),CWDO(10,3)
C
C
      DIMENSION DEP(150)
C
C
      I1=ICP-1
C
      DO 20 I=1,IK
      NTW=NKT(I)
      IF(NTW.EQ.0) GO TO 20
C
      DO 10 J=1,NTW
      IC=I1+J
      I2=IC+NTW
      CWO(I,J)=DEP(IC)/RADIAN
      CWDO(I,J)=DEP(I2)/RADIAN
   10 CONTINUE
C
      I1=I1+2*NTW
C
   20 CONTINUE
C
      RETURN
C
      END
      SUBROUTINE VDIC
C      VISCOUS DAMPER INITIAL CONDITIONS
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8 ISUBD,JARRAY,NSUBX
      COMMON /ADSTAT/DER(150),DEP(150)
      COMMON/CONSTS/ PI,TWOPI,RADIAN
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
      COMMON/RVISCS/ NSUBX(3),YARRAY(3),RADTBE,VISCTY,RADRNG,DENSTY,
     .               JARRAY(3),SSUBY,OMEGL,ISUBD
      J=NUMEQS - 4
C
      DO 40 I=1,3
      L=J+I
   40 DEP(L)=YARRAY(I)
C
      ASQR=RADTBE*RADTBE
      BCUBE=RADRNG**3
      ISUBD=2.D0*PI*PI/(12.D0**5*32.174D0)*DENSTY*ASQR*BCUBE
C
      TEMP=0.D0
      DO 45 I=1,3
   45 TEMP=TEMP + OMEG(I)*NSUBX(I)
C
      SSUBY=-ISUBD*(OMEGL*RADIAN + TEMP)
      DEP(NUMEQS)=SSUBY
      RETURN
      END
      SUBROUTINE VDMPRD
C
C      VISCOUS DAMPER INITIAL CONDITIONS
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      REAL*8 ISUBD,JARRAY,NSUBX,MSUBM,JAR(3),MPRIME(3,2)
C
      COMMON/ADSTAT/ DER(150),DEP(150)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,MUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/OUTAVD/ OMEGL(2),VSUBL(2),MSUBM(3,2)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEGDM(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RAVSCS/ NSUBX(3,2),YARRAY(3,2),RADTBE(2),VISCTY(2)
     .              ,RADRNG(2),DENSTY(2),JARRAY(3,2),SSUBY(2)
     .              ,OML1(2),ISUBD(2),VDMPUP(2),VDMPDN(2),NVDMPR
C
      COMMON/XIN4  / UP(150),DN(150),BNDSIP(22)
C
C
C
      DIMENSION HEDVD(5)
C
      DIMENSION ZML(7,7),OMEG(3),YDOT(3),OMEGDT(3),WB(3),TSUBO(2)
C
      DIMENSION DEPND(150),DERV(150),HVECTR(2),SYDOT(2)
C
C
      DATA HEDVD/'ADDITION','AL VISCO','US FLUID',' RING DA','MPERS   '/
C
C
      CALL SETUP(8HVDAXIS  ,8,NSUBX,3,2)
      CALL SETUP(8HVDYARY  ,8,YARRAY,3,2)
      CALL SETUP(8HVDJARY  ,8,JARRAY,3,2)
      CALL SETUP(8HVDRDTB  ,8,RADTBE,2)
      CALL SETUP(8HVDVCTY  ,8,VISCTY,2)
      CALL SETUP(8HVDRDRN  ,8,RADRNG,2)
      CALL SETUP(8HVDDNTY  ,8,DENSTY,2)
      CALL SETUP(8HVDOMGL  ,8,OML1 ,2)
      CALL SETUP(8HVDMPUP  ,8,VDMPUP,2)
      CALL SETUP(8HVDMPDN  ,8,VDMPDN,2)
      CALL SETUP(8HNVDMPR  ,4,NVDMPR)
C
C
      RETURN
C
C
C   *******************************************************************
      ENTRY NUMVDE(NUMEQS)
C   *******************************************************************
C
C
      IF(NVDMPR.EQ.0) RETURN
C
      IF(NVDMPR.GT.2) NVDMPR=2
C
      LDMPR = NUMEQS
C
      NUMEQS = NUMEQS + 4 * NVDMPR
C
C
      RETURN
C
C   ********************************************************************
      ENTRY ECHOVD
C   ********************************************************************
C
      IF(NVDMPR.EQ.0) RETURN
C
C
      CALL HVAL(HEDVD)
      CALL IVAL('NVDMPR  ',6,NVDMPR,0,0,0)
      CALL FVAL('VDVCTY  ',6,VISCTY,NVDMPR,0,1)
      CALL FVAL('VDRDTB  ',6,RADTBE,NVDMPR,0,1)
      CALL FVAL('VDRDRN  ',6,RADRNG,NVDMPR,0,1)
      CALL FVAL('VDDNTY  ',6,DENSTY,NVDMPR,0,1)
      CALL FVAL('VDOMGL  ',6,OMEGL ,NVDMPR,0,1)
      CALL FVAL('VDJARY  ',6,JARRAY,3,NVDMPR,1)
      CALL FVAL('VDYARY  ',6,YARRAY,3,NVDMPR,1)
C
C
      RETURN
C
C   ********************************************************************
      ENTRY VDINIT
C   ********************************************************************
C
      IF(NVDMPR.EQ.0) RETURN
C
      J = LDMPR
C
      DO 150 N=1,NVDMPR
C
C
      DO 140 I=1,3
      L=J+I+(N-1)*4
      UP(L)=VDMPUP(1)
      DN(L)=VDMPDN(1)
  140 DEP(L)=YARRAY(I,N)
C
      ASQR=RADTBE(N)*RADTBE(N)
      BCUBE=RADRNG(N)**3
      ISUBD(N)=2.D0*PI*PI*DENSTY(N)*ASQR*BCUBE/(12.D0**5*32.174D0)
C
      TEMP=0.D0
      DO 145 I=1,3
      TEMP=TEMP + OMEGDM(I)*NSUBX(I,N)
  145 CONTINUE
C
      SSUBY(N)=-ISUBD(N)*(OML1(N)*RADIAN + TEMP)
      IND=J+4*N
      DEP(IND) =  SSUBY(N)
      UP(IND) = VDMPUP(2)
      DN(IND) = VDMPDN(2)
C
  150 CONTINUE
C
C
      RETURN
C
C
C
C
C   ********************************************************************
      ENTRY VISCS2(ITEST,ZML,OMEG,OMEGDT,DEPND,DERV,MPRIME)
C   ********************************************************************
C
C             'VISCS2' CALCULATES THE MOMENTS ACTING ON THE SATELLITE
C             HUB DUE TO THE VISCOUS RING NUTATION DAMPER.
C
C
C
      IF(NVDMPR.EQ.0) RETURN
C
C
      IF(ITEST.EQ.2) GO TO 20
C
      J=LDMPR
C
      DO 5 I=1,3
    5 WB(I)=OMEG(I)
C
      DO 100 N=1,NVDMPR
C
      SYDOT(N)=0.0D0
      OMEGN=0.D0
      J=LDMPR
C
      DO 10 I=1,3
      OMEGN=OMEGN + OMEG(I)*NSUBX(I,N)
      IND=J+I+(N-1)*4
      YARRAY(I,N)= DEPND(IND)
   10 SYDOT(N)=SYDOT(N)+YARRAY(I,N)
C
      IND=J+4*N
      SSUBY(N)=DEPND(IND)
      ASQR=RADTBE(N)*RADTBE(N)
C
      HVECTR(N)=-SSUBY(N) - ISUBD(N)*OMEGN
      OMEGL(N)=0.0D0
      IF(ISUBD(N).NE.0.0D0) OMEGL(N)=HVECTR(N)/ISUBD(N)
      VSUBL(N)=OMEGL(N)*RADRNG(N)/12.0D0
      OMEGL(N)=OMEGL(N)/RADIAN
C
C
C
      MPRIME(1,N)=NSUBX(1,N)*SYDOT(N)-
     .      HVECTR(N)*(WB(2)*NSUBX(3,N)-WB(3)*NSUBX(2,N))
C
C
      MPRIME(2,N)=NSUBX(2,N)*SYDOT(N)-
     .      HVECTR(N)*(WB(3)*NSUBX(1,N)-WB(1)*NSUBX(3,N))
C
C
      MPRIME(3,N)=NSUBX(3,N)*SYDOT(N)-
     .      HVECTR(N)*(WB(1)*NSUBX(2,N)-WB(2)*NSUBX(1,N))
C
C
C
      TSUBO(N)=645.2D0*ASQR/VISCTY(N)
C
      ZML(4,4)=ZML(4,4) - NSUBX(1,N)*NSUBX(1,N)*ISUBD(N)
      ZML(4,5)=ZML(4,5) - NSUBX(1,N)*NSUBX(2,N)*ISUBD(N)
      ZML(4,6)=ZML(4,6) - NSUBX(1,N)*NSUBX(3,N)*ISUBD(N)
C
      ZML(5,4)=ZML(4,5)
      ZML(5,5)=ZML(5,5) - NSUBX(2,N)*NSUBX(2,N)*ISUBD(N)
      ZML(5,6)=ZML(5,6) - NSUBX(2,N)*NSUBX(3,N)*ISUBD(N)
C
      ZML(6,4)=ZML(4,6)
      ZML(6,5)=ZML(5,6)
      ZML(6,6)=ZML(6,6) - NSUBX(3,N)*NSUBX(3,N)*ISUBD(N)
C
C
      IF(IOUT.EQ.1) GO TO 100
      WRITE(6,6010) N,ITEST
      WRITE(6,6011) SYDOT(N),OMEGN,YARRAY(1,N),YARRAY(2,N),YARRAY(3,N),
     *              SSUBY(N),HVECTR(N),OMEGL(N),MPRIME(1,N),MPRIME(2,N),
     *              MPRIME(3,N)
C
 6010 FORMAT('0',10X,'OUTPUT FROM VISCS2 FOR DAMPER N = ',I3,' ITEST=
     *',I3)
 6011 FORMAT('0',1P11E12.4)
C
  100 CONTINUE
C
C
      RETURN
C
C
   20 CONTINUE
C
C
      DO 200 N=1,NVDMPR
C
C
      DO 30 I=1,3
      JAR(I)=-(JARRAY(I,N)**2/TSUBO(N))*YARRAY(I,N)
   30 CONTINUE
C
      CONS=4.D0*ISUBD(N)/TSUBO(N)
C
C
      TEMP=0.D0
      DO 40 J=1,3
      TEMP=TEMP + NSUBX(J,N)*OMEGDT(J)
   40 CONTINUE
C
C
      DO 50 I=1,3
      YDOT(I)=JAR(I) - CONS*TEMP
   50 CONTINUE
C
C
      OMGDTN=0.D0
      DO 60 I=1,3
      MSUBM(I,N)=0.0D0
   60 OMGDTN=OMGDTN + OMEGDT(I)*NSUBX(I,N)
C
      SUM=ISUBD(N)*OMGDTN + SYDOT(N)
C
C
      J=LDMPR
      DO 70 I=1,3
      II=J+I+(N-1)*4
      DERV(II)=YDOT(I)
   70 CONTINUE
      IND=J+4*N
      DERV(IND)=SYDOT(N)
C
      MSUBM(1,N)=NSUBX(1,N)*SUM -
     .      HVECTR(N)*(WB(2)*NSUBX(3,N)-WB(3)*NSUBX(2,N))
C
      MSUBM(2,N)=NSUBX(2,N)*SUM -
     .      HVECTR(N)*(WB(3)*NSUBX(1,N)-WB(1)*NSUBX(3,N))
C
      MSUBM(3,N)=NSUBX(3,N)*SUM -
     .      HVECTR(N)*(WB(1)*NSUBX(2,N)-WB(2)*NSUBX(1,N))
C
C
      IF(IOUT.EQ.1) GO TO 200
      WRITE(6,6010) N,ITEST
      WRITE(6,6011) CONS,TEMP,JAR(1),JAR(2),JAR(3),
     *              OMGDTN,SUM,MSUBM(1,N),MSUBM(2,N),
     *              MSUBM(3,N)
C
C
C
  200 CONTINUE
C
      RETURN
C
C
C   ********************************************************************
      ENTRY VDPRNT
C   ********************************************************************
C
      DATA I8/',A8,'/
C
      IF(NVDMPR.EQ.0) RETURN
C
      DO 310 N=1,NVDMPR
      CALL SET('OMEGL   ',N,0,OMEGL(N),I8)
      CALL SET('VSUBL   ',N,0,VSUBL(N),I8)
      DO 308 I=1,3
      CALL SET('MSUBM   ',I,N,MSUBM(I,N),I8)
  308 CONTINUE
  310 CONTINUE
C
C
      RETURN
C
      END
      FUNCTION VGG(B,OMC,IG,IP)
C
C     'VGG' IS A FUNCTION WHICH EVALUATES THE CENTRIFUGAL POTENTIAL
C     FOR THE GRAVITY GRADIENT BODY.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 IG(3,3),IP
C
      DIMENSION B(3,3),OMC(3),OC(3),OCIG(3)
C
C
      CALL MULTM(B,OMC,OC,3,1,3)
      DO 10 I=1,3
      OCIG(I)=0.0D0
      DO 10 J=1,3
   10 OCIG(I)=OCIG(I) + OC(J)*IG(J,I)
C
      OCSQR=0.0D0
      SUM=0.0D0
C
      DO 20 I=1,3
      OCSQR=OCSQR + OC(I)*OC(I)
   20 SUM=SUM + OCIG(I)*OC(I)
      VGG=(SUM - OCSQR*IP)/2
C
      RETURN
      END
      SUBROUTINE VISCUS(ITEST,ZML,OMEG,OMEGDT,SYDOT,YDOT,MPRIME)
C
        IMPLICIT REAL*8 (A-H,O-Z)
C
C             'VISCUS' CALCULATES THE MOMENTS ACTING ON THE SATELLITE
C             HUB DUE TO THE VISCOUS RING NUTATION DAMPER.
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/OUTONE/ OMEGL,VSUBL,MSUBM(3),CMX,SIMPX,SB(3)
C
      COMMON/RVISCS/ NSUBX(3),YARRAY(3),RADTBE,VISCTY,RADRNG,DENSTY,
     .               JARRAY(3),SSUBY,OML1,ISUBD
C
C
      REAL*8 NSUBX,JARRAY,MPRIME(3),ISUBD,JAR(3),MSUBM
C
      DIMENSION ZML(7,7),OMEG(3),YDOT(3),OMEGDT(3),WB(3)
C
C
      IF(ITEST.EQ.2) GO TO 20
C
      DO 5 I=1,3
    5 WB(I)=OMEG(I)
C
      SYDOT=0.D0
      OMEGN=0.D0
C
      DO 10 I=1,3
      OMEGN=OMEGN + OMEG(I)*NSUBX(I)
   10 SYDOT=SYDOT + YARRAY(I)
C
      ASQR=RADTBE*RADTBE
C
      HVECTR=-SSUBY - ISUBD*OMEGN
      OMEGL=HVECTR/ISUBD
      VSUBL=OMEGL*RADRNG/12.D0
      OMEGL=OMEGL/RADIAN
C
C
C
      MPRIME(1)=NSUBX(1)*SYDOT -
     .         HVECTR*(WB(2)*NSUBX(3) - WB(3)*NSUBX(2))
C
C
      MPRIME(2)=NSUBX(2)*SYDOT -
     .         HVECTR*(WB(3)*NSUBX(1) - WB(1)*NSUBX(3))
C
C
      MPRIME(3)=NSUBX(3)*SYDOT -
     .         HVECTR*(WB(1)*NSUBX(2) - WB(2)*NSUBX(1))
C
C
C
      TSUBO=645.2D0*ASQR/VISCTY
C
      ZML(4,4)=ZML(4,4) - NSUBX(1)*NSUBX(1)*ISUBD
      ZML(4,5)=ZML(4,5) - NSUBX(1)*NSUBX(2)*ISUBD
      ZML(4,6)=ZML(4,6) - NSUBX(1)*NSUBX(3)*ISUBD
C
      ZML(5,4)=ZML(4,5)
      ZML(5,5)=ZML(5,5) - NSUBX(2)*NSUBX(2)*ISUBD
      ZML(5,6)=ZML(5,6) - NSUBX(2)*NSUBX(3)*ISUBD
C
      ZML(6,4)=ZML(4,6)
      ZML(6,5)=ZML(5,6)
      ZML(6,6)=ZML(6,6) - NSUBX(3)*NSUBX(3)*ISUBD
C
C
      RETURN
C
C
   20 DO 30 I=1,3
   30 JAR(I)=-(JARRAY(I)**2/TSUBO)*YARRAY(I)
C
      CONS=4.D0*ISUBD/TSUBO
C
C
      TEMP=0.D0
      DO 40 J=1,3
   40 TEMP=TEMP + NSUBX(J)*OMEGDT(J)
C
      DO 50 I=1,3
   50 YDOT(I)=JAR(I) - CONS*TEMP
C
      OMGDTN=0.D0
      DO 60 I=1,3
      MSUBM(I)=0.D0
   60 OMGDTN=OMGDTN + OMEGDT(I)*NSUBX(I)
C
      SUM=ISUBD*OMGDTN + SYDOT
C
C
C
      MSUBM(1)=NSUBX(1)*SUM -
     .         HVECTR*(WB(2)*NSUBX(3) - WB(3)*NSUBX(2))
C
      MSUBM(2)=NSUBX(2)*SUM -
     .         HVECTR*(WB(3)*NSUBX(1) - WB(1)*NSUBX(3))
C
      MSUBM(3)=NSUBX(3)*SUM -
     .         HVECTR*(WB(1)*NSUBX(2) - WB(2)*NSUBX(1))
C
C
C
      RETURN
      END
      FUNCTION VRG1(IP,IG)
C     'VRG1' IS A FUNCTION WHICH EVALUATES THE RELATIVE GRAVITATIONAL
C     POTENTIAL FOR THE SATELLITE.
C
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 IP,IG(3,3),IPRMG,J2,J3,J4,J22
C
      COMMON/CNBODY/ J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/DEBUG3/ ISWTCH
C
      COMMON/VECTRS/ XSAT(3),XSATDT(3),AD(3)
C
      DIMENSION XS(3),XIG(3)
C
      RAD=0.0D0
      DO 10 I=1,3
   10 RAD=RAD + XSAT(I)*XSAT(I)
      X3RAD=XSAT(3)*XSAT(3)/RAD
      RAD=DSQRT(RAD)
C
      DO 20 I=1,3
   20 XS(I)=XSAT(I)/RAD
C
      XSIG=0.0D0
      DO 30 I=1,3
   30 XSIG=XSIG + XS(I)*IG(I,3)
C
      DO 40 I=1,3
      XIG(I)=0.0D0
      DO 40 J=1,3
   40 XIG(I)=XIG(I) + XS(J)*IG(J,I)
C
      IPRMG=0.0D0
      DO 50 I=1,3
   50 IPRMG=IPRMG + XIG(I)*XS(I)
C
      RADSQR=RAD*RAD
      RADCBE=RAD*RADSQR
      ASQR=AEARTH*AEARTH
C
      Z2O=ZJ20*ASQR/RADSQR
      ZM3=ZMU/RADCBE
C
      VRG1=ZM3/2.D0*IP*(1.D0 + 1.5D0*Z2O - 7.5D0*Z2O*X3RAD)
     .    -1.5D0*ZM3*IPRMG*(1.D0 + 2.5D0*Z2O - 17.5D0*Z2O*X3RAD)
     .    +1.5D0*ZM3*Z2O*IG(3,3) - 1.5D1*ZM3*Z2O*XS(3)*XSIG
C
      IF(ISWTCH.NE.0) RETURN
      WRITE(6,10000) X3RAD,RAD,IPRMG,RADSQR,RADCBE,ASQR,Z2O,ZM3,XSIG
      WRITE(6,10001)
      WRITE(6,10002) (XS(I),I=1,3)
       WRITE(6,10003)
      WRITE(6,10002) (XIG(I),I=1,3)
      RETURN
C
10000 FORMAT('0',3X,'X3RAD ',G20.13,2X,'RAD ',G20.13,2X,'IPRMG ',G20.13/
     .           3X,'RADSQR ',G20.13,2X,'RADCBE ',G20.13,2X,'ASQR ',
     .           G20.13,2X/3X,'Z2O ',G20.13,2X,'ZM3 ',G20.13,2X,'XSIG ',
     .           G20.13)
10001 FORMAT('0',3X,'XS')
10002 FORMAT('0',3X,3(G20.13,2X))
10003 FORMAT('0',3X,'XIG')
C
      END
      SUBROUTINE WHEELS(ITEST,RWHEEL)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/CONSTS/PI,TWOPI,RADIAN
C
      COMMON/OUTTHR/SMAGB(3),XMB(3),RWHEL(3)
C
      COMMON/PWHEEL/XMOMIN(3),DVMOM(3),VINIT(3),VMOM(3)
C
      COMMON/CWHEEL/VW(3),VSUR(3),VSDR(3)
C
      COMMON/HWHEEL/HWM(3)
C
      COMMON/CNOISE/VNS2(10),VNS1(10),VNSN(10),T1,T2
      COMMON/CSTAT /X(20),XDOT(20),CPARM(43)
      COMMON/ICSADM/LDUM,IRAND,NCHAN
      EQUIVALENCE(CPARM(1),TAUS),(CPARM(2),TAU1),(CPARM(3),TAU2)
      EQUIVALENCE(CPARM(4),TAUF),(CPARM(5),AKS),(CPARM(6),AKC)
      EQUIVALENCE(CPARM(7),AKA),(CPARM(8),AKF),(CPARM(9),AKB)
      EQUIVALENCE(CPARM(10),AKT),(CPARM(11),TAURAT),(CPARM(12),VOPLIM)
      EQUIVALENCE(CPARM(13),AKM1),(CPARM(14),TAUM1),(CPARM(15),VBIAS)
      EQUIVALENCE(CPARM(16),TCOUL),(CPARM(17),OMMIN)
      EQUIVALENCE(CPARM(18),ZETAS)
      EQUIVALENCE(CPARM(41),PBIAS),(CPARM(42),RBIAS)
      DIMENSION SSN(5),TCOR(5)
      EQUIVALENCE(CPARM(31),SSN(1)),(CPARM(36),TCOR(1))
      EQUIVALENCE(CPARM(19),AKM2),(CPARM(20),TAUM2),(CPARM(21),SIGND)
      EQUIVALENCE(CPARM(22),RLIM),(CPARM(23),TMOTUP),(CPARM(24),TMOTDN)
C
      COMMON/CFILTW/TSTART,DVWP(3),DVWM(3),TREF1,TREF2
C
C
      COMMON /ICNTRL/KNTRL(10)
      COMMON /JCNTRL/NCNTRL,MCNTRL,MAPCNT(20)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON /VARBLS/DEPEND(150),DERIV(150)
C
      DIMENSION RWHEEL(3),HM(3),WB(3)
C
      DIMENSION DV(3)
C
C
      IF(ITEST.EQ.2) GO TO 100
      IF(KNTRL(1) .NE. 0) GO TO 50
C
C     WHEEL SPEED GIVEN BY OPEN-LOOP INITIAL-RATE,CONSTANT ACCEL, LIMIT
      TST=TIME-TSTART
      DO 10 I=1,3
      VW(I)=VMOM(I)+DVMOM(I)*TST
      DV(I)=DVMOM(I)
      IF(VW(I).GT.VSUR(I)) VW(I)=VSUR(I)
      IF(VW(I).LT.VSDR(I)) VW(I)=VSDR(I)
      IF(VW(I).EQ.VSUR(I).AND.DV(I).GT.0.0D0) DV(I)=0.0D0
      IF(VW(I).EQ.VSDR(I).AND.DV(I).LT.0.0D0) DV(I)=0.0D0
   10 CONTINUE
      GO TO 190
C
C     ACTIVE CONTROL OF WHEEL SPEED   ( RCA DYNAMICS EXPLORER-B)
C
C     PICK UP STATE VARIABLES OF CONTROL SYSTEM
50     DO 55 I=1,NCNTRL
      J=MAPCNT(I)
55    X(J)=DEPEND(I+MCNTRL)
C
      OMREL=X(15)-OMEG(2)
C     GENERATE NOISE
      IF(NCHAN.NE.0) CALL EXPN(TIME,T2,T1,VNS2,VNS1,SSN,TCOR,VNSN)
C
C     SPACECRAFT ATTITUDE
      CALL DEBANG(YAW,ROLL,PITCH)
      PITCH=PITCH+PBIAS+VNSN(1)
      ROLL=ROLL+RBIAS+VNSN(2)
C
C     PITCH SENSOR
      EPITCH=PITCH
      X(17)=EPITCH
      IF(KNTRL(1) .EQ. 1) GO TO 75
C
C    4TH ORDER SENSOR MODEL
      XDOT(4)=(EPITCH-X(3)-2.0D0*ZETAS*X(4))/TAUS
      XDOT(3)=X(4)/TAUS
      XDOT(2)=(AKS*X(3)-X(1)-2.0D0*ZETAS*X(2))/TAUS
      XDOT(1)=X(2)/TAUS
      GO TO 76
C
C     2ND ORDER SENSOR MODEL
75    CONTINUE
      XDOT(2)=(EPITCH-X(2))/TAUS
      XDOT(1)=(AKS*X(2)-X(1))/TAUS
76    CONTINUE
C
C     TEST FOR NUTATION DAMPER
      IF(KNTRL(2) .EQ. 0) GO TO 80
C     CLIP ROLL SENSOR OUTPUT
      X6=X(6)
      WS=DABS(X6)
      IF(WS.GT.RLIM) X6=RLIM*X6/WS
C
C     NUTATION DAMPER--PHASE SHIFT CIRCUIT
      AKM=AKM1
      TAUM=TAUM1
      IF(KNTRL(2).EQ.1) GO TO 78
      AKM=AKM2
      TAUM=TAUM2
C
78    CONTINUE
C
      AKMT=AKM/TAUM
      XDOT(19)=-(AKMT*X6+X(19))/TAUM
      XDOT(20)=(AKMT*X6+X(19)-X(20))/TAUM
      VNUDAM=SIGND*X(20)
C
C     ROLL SENSOR
      EROLL=ROLL
      X(18)=EROLL
C     TEST SENSOR ORDER
      IF(KNTRL(1) .EQ. 1) GO TO 85
C
C     4TH ORDER MODEL
      XDOT(9)=(EROLL-X(8)-2.0D0*ZETAS*X(9))/TAUS
      XDOT(8)=X(9)/TAUS
      XDOT(7)=(AKS*X(8)-X(6)-2.0D0*ZETAS*X(7))/TAUS
      XDOT(6)=X(7)/TAUS
      GO TO 86
C
C     2ND ORDER MODEL
85    CONTINUE
      XDOT(7)=(EROLL-X(7))/TAUS
      XDOT(6)=(AKS*X(7)-X(6))/TAUS
86    CONTINUE
      GO TO 90
C
C     NO NUTATION DAMPER
80    VNUDAM=0.
C
C     PITCH COMPENSATION AMPLIFIER
90    SVIPCA=(X(1)+VNUDAM)*AKC
C     COMPUTE OUTPUT, ASSUMING NO SATURATION
      TAURAT=TAU1/TAU2
      VOPCA=X(11)+SVIPCA*TAURAT
      WWW1=DABS(VOPCA)
C     SATURATION
      IF(WWW1.GT.VOPLIM) VOPCA=VOPLIM*VOPCA/WWW1
      XDOT(11)=(SVIPCA-VOPCA)/TAU2
      X(16)=VOPCA
C
C     TACHOMETER
54    IF(KNTRL(3) .EQ. 0) GO TO 56
C        1ST ORDER TACHOMETER MODEL
      XDOT(13)=(AKF*OMREL-X(13))/TAUF
         GO TO 57
C
C          NO DYNAMICS IN TACHOMETER
56    X(13)=AKF*OMREL
C
C     SUMMING AND POWER AMP
57    VOPA=AKA*(VOPCA+VBIAS+VNSN(3)-X(13))
C
C     MOTOR TORQUE
      TMOTOR=AKT*(VOPA-AKB*OMREL)
      IF(TMOTOR.GT.TMOTUP) TMOTOR=TMOTUP
      IF(TMOTOR.LT.TMOTDN) TMOTOR=TMOTDN
      TMOTOR=TMOTOR-OMREL*TCOUL/(OMMIN+DABS(OMREL))
      X(14)=TMOTOR
C     WHEEL DYNAMICS
      XDOT(15)=TMOTOR/XMOMIN(2)
C
C     COLLECT CONTROL DERIVATIVES INTO STATE DERIVATIVE VECTOR
      DO 60 I=1,NCNTRL
      J=MAPCNT(I)
60    DERIV(I+MCNTRL)=XDOT(J)
C
C      WIRE THINGS FOR THE REST OF THE PROGRAM
      VW(1)=0.
      VW(2)=X(15)/RADIAN
      VW(3)=0.
      DV(1)=0.
      DV(2)=XDOT(15)/RADIAN
      DV(3)=0.
C
C
C     INTERACTION WITH VEHICLE
190   DO 30 I=1,3
      WB(I)=OMEG(I)
      HM(I)=VW(I)*XMOMIN(I)
30    HWM(I)=HM(I)*RADIAN
      RWHEEL(1)=(-XMOMIN(1)*DV(1)+HM(2)*WB(3)-HM(3)*WB(2))*RADIAN
      RWHEEL(2)=(-XMOMIN(2)*DV(2)+HM(3)*WB(1)-HM(1)*WB(3))*RADIAN
      RWHEEL(3)=(-XMOMIN(3)*DV(3)+HM(1)*WB(2)-HM(2)*WB(1))*RADIAN
      RWHEL(1)=RWHEEL(1)
      RWHEL(2)=RWHEEL(2)
      RWHEL(3)=RWHEEL(3)
      GO TO 150
C
C     UPDATE INITIAL VALUES FOR CONTINUING TRAJECTORY
100   DO 120 I=1,3
120   VMOM(I)=VW(I)
C
150   RETURN
      END
      SUBROUTINE WHREAD
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      COMMON/ADDMOM/ HAWH(3),HWL(3),HELGM(3)
C
      COMMON/ADSTAT/ DER(150),DEP(150)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSTVAL/ TSTART
C
      COMMON/DATOUT/ IDATA,MLAST
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/IMAIN1/ IDATE,LSAVE,IDUM1(6)
C
      COMMON/ROTORS/ AMWHPR(200),IAMWH(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     1 DUM01(83)
C
      COMMON/TRQOUT/ OUTTRQ(150)
C
      COMMON/VARBLS/ DEPEND(150),DERIV(150)
C
      COMMON/XIN4  / UP(150),DN(150),BNDS(22)
C
C
      DIMENSION HEDPC(5),ETA(7)
      DIMENSION HDPID(5),HDMOT(5)
      DIMENSION ANOISE(3),PNOISE(3),FNOISE(3)
      DIMENSION FREQNS(3),PHASNS(3)
      DIMENSION HDOT(3),RWHEEL(3),VWH(3),FOPT(3),OUTP(6)
      REAL*4 BUFF(450)
C
      DATA I8/',A8,'/
      DATA HEDPC/'AXIS MOM','ENTUM WH','EEL CONT','ROL SYST','EM      '/
      DATA HDPID/'WHEEL CO','NTROLLER',' PARAMET','ERS     ','        '/
      DATA HDMOT/'WHEEL  D','RIVE MOT','OR PARAM','ETERS   ','        '/
C
      EQUIVALENCE (IAMWH(1),IPCONT),(IAMWH(2),IROLL)
      EQUIVALENCE (IAMWH(3),IPITCH),(IAMWH(4),IYAW)
C
      EQUIVALENCE (AMWHPR(5),EXK)
      EQUIVALENCE (AMWHPR(11),RLQNT),(AMWHPR(21),PTQNT)
      EQUIVALENCE (AMWHPR(12),RLXIUP),(AMWHPR(22),PTXIUP)
      EQUIVALENCE (AMWHPR(13),RLXIDN),(AMWHPR(23),PTXIDN)
      EQUIVALENCE (AMWHPR(14),RLKP),(AMWHPR(24),PTKP)
      EQUIVALENCE (AMWHPR(15),RLKI),(AMWHPR(25),PTKI)
      EQUIVALENCE (AMWHPR(16),RLKD),(AMWHPR(26),PTKD)
      EQUIVALENCE (AMWHPR(17),ROLLG),(AMWHPR(27),PITCHG)
      EQUIVALENCE (AMWHPR(18),RBW),(AMWHPR(28),PBW)
      EQUIVALENCE (AMWHPR(41),RLKA),(AMWHPR(51),PTKA)
      EQUIVALENCE (AMWHPR(42),RLKT),(AMWHPR(52),PTKT)
      EQUIVALENCE (AMWHPR(43),RLKB),(AMWHPR(53),PTKB)
      EQUIVALENCE (AMWHPR(44),RLMTUP),(AMWHPR(54),PTMTUP)
      EQUIVALENCE (AMWHPR(45),RLMTDN),(AMWHPR(55),PTMTDN)
      EQUIVALENCE (AMWHPR(46),RLTCUL),(AMWHPR(56),PTTCUL)
      EQUIVALENCE (AMWHPR(47),RLDMIN),(AMWHPR(57),PTDMIN)
      EQUIVALENCE (AMWHPR(48),RLWMOI),(AMWHPR(58),PTWMOI)
      EQUIVALENCE (AMWHPR(31),YWQNT)
      EQUIVALENCE (AMWHPR(32),YWXIUP)
      EQUIVALENCE (AMWHPR(33),YWXIDN)
      EQUIVALENCE (AMWHPR(34),YWKP)
      EQUIVALENCE (AMWHPR(35),YWKI)
      EQUIVALENCE (AMWHPR(36),YWKD)
      EQUIVALENCE (AMWHPR(37),YAWG)
      EQUIVALENCE (AMWHPR(38),YBW)
      EQUIVALENCE (AMWHPR(61),YWKA)
      EQUIVALENCE (AMWHPR(62),YWKT)
      EQUIVALENCE (AMWHPR(63),YWKB)
      EQUIVALENCE (AMWHPR(64),YWMTUP)
      EQUIVALENCE (AMWHPR(65),YWMTDN)
      EQUIVALENCE (AMWHPR(66),YWTCUL)
      EQUIVALENCE (AMWHPR(67),YWDMIN)
      EQUIVALENCE (AMWHPR(68),YWWMOI)
      EQUIVALENCE (AMWHPR(80),ANOISE(1)),(AMWHPR(83),PNOISE(1))
      EQUIVALENCE (AMWHPR(86),FNOISE(1))
      EQUIVALENCE (AMWHPR(90),FREQNS(1)),(AMWHPR(93),PHASNS(1))
      EQUIVALENCE (HDOT(1),RLHD),(HWL(1),RLH)
      EQUIVALENCE (HDOT(2),PTHD),(HWL(2),PTH)
      EQUIVALENCE (HDOT(3),YWHD),(HWL(3),YWH)
C
C     CALLED FROM GMBDRD
C
      CALL SETUP(8HAMWHPR  ,8,AMWHPR,100)
      CALL SETUP(8HIAMWH   ,4,IAMWH,20)
C
      RETURN
C
C   ****************************************************************
      ENTRY NUMWHS(NUMEQS)
C   ****************************************************************
C
C     CALLED FROM NUMGPE
C
      IF(IPCONT.EQ.0) RETURN
      NROLL=NUMEQS+1
      IF(IROLL.NE.0) NUMEQS=NUMEQS+3
      NPITCH=NUMEQS+1
      IF(IPITCH.NE.0) NUMEQS=NUMEQS+3
      NYAW=NUMEQS+1
      IF(IYAW.NE.0) NUMEQS=NUMEQS+3
C
      RETURN
C
C   ****************************************************************
      ENTRY WHECHO
C   ****************************************************************
C
C     CALLED FROM ECHOGP
C
      IF(IPCONT.EQ.0) RETURN
C
      CALL HVAL(HEDPC)
C
      CALL HVAL(HDPID)
C
      IF(IROLL.NE.0) CALL FVAL('ROLL    ',4,AMWHPR(11),6,0,1)
      IF(IPITCH.NE.0) CALL FVAL('PITCH   ',4,AMWHPR(21),6,0,1)
      IF(IYAW.NE.0) CALL FVAL('YAW     ',4,AMWHPR(31),6,0,1)
C
      CALL HVAL(HDMOT)
C
      IF(IROLL.NE.0) CALL FVAL('ROLL    ',4,AMWHPR(41),7,0,1)
      IF(IPITCH.NE.0) CALL FVAL('PITCH   ',4,AMWHPR(51),7,0,1)
      IF(IYAW.NE.0) CALL FVAL('YAW     ',4,AMWHPR(61),7,0,1)
C
      RETURN
C
C   ****************************************************************
      ENTRY WHINIT
C   ****************************************************************
C
C     CALLED FROM MAIN FOR INITIAL CONDITIONS AND INTEGRATION BOUNDS
C     CALLED AFTER CALL TO SETVAL(1)
C
      IF(IPCONT.EQ.0) RETURN
C
      CALL DEBANG(YAW,ROLL,PITCH)
      IF(IROLL.EQ.0) GO TO 2
      I1=NROLL+1
      I2=I1+1
      UP(NROLL)=AMWHPR(101)
      UP(I1)=AMWHPR(101)
      DN(NROLL)=AMWHPR(102)
      DN(I1)=AMWHPR(102)
      DEP(NROLL)=ROLL
      DEP(I1)=0.0D0
      UP(I2)=AMWHPR(103)
      DN(I2)=AMWHPR(104)
      DEP(I2)=AMWHPR(111)
    2 CONTINUE
      IF(IPITCH.EQ.0) GO TO 4
      I1=NPITCH+1
      I2=I1+1
      UP(NPITCH)=AMWHPR(101)
      UP(I1)=AMWHPR(101)
      DN(NPITCH)=AMWHPR(102)
      DN(I1)=AMWHPR(102)
      DEP(NPITCH)=PITCH
      DEP(I1)=0.0D0
      UP(I2)=AMWHPR(103)
      DN(I2)=AMWHPR(104)
      DEP(I2)=AMWHPR(121)
    4 CONTINUE
      IF(IYAW.EQ.0) GO TO 6
      I1=NYAW+1
      I2=I1+1
      UP(NYAW)=AMWHPR(101)
      UP(I1)=AMWHPR(101)
      DN(NYAW)=AMWHPR(102)
      DN(I1)=AMWHPR(102)
      DEP(NYAW)=YAW
      DEP(I1)=0.0D0
      UP(I2)=AMWHPR(103)
      DN(I2)=AMWHPR(104)
      DEP(I2)=AMWHPR(131)
    6 CONTINUE
C
      RETURN
C
C   ****************************************************************
      ENTRY WHREAC(ETA)
C   ****************************************************************
C
C     CALLED FROM DEREQ TO LOAD DERIVATIVES FOR SENSOR
C
      IF(IPCONT.EQ.0) RETURN
      DO 10 I=1,3
      HDOT(I)=0.0D0
      HWL(I)=0.0D0
      VWH(I)=0.0D0
      FOPT(I)=0.0D0
   10 CONTINUE
      CALL DEBANG(YAW,ROLL,PITCH)
      IF(IROLL.EQ.0) GO TO 20
      DERIV(NROLL)=ROLLG*ROLL-RBW*DEPEND(NROLL)
      I1=NROLL+1
      I2=I1+1
      TEST=DEPEND(NROLL)
      FOPT(1)=TEST
      IF(DEPEND(NROLL).GE.0.0D0) GO TO 12
C
C     LESS THAN ZERO
C
      IF(DEPEND(I1).GE.0.0D0) GO TO 14
      ARG=(RLXIDN-DEPEND(I1))/RLXIDN
      ARG=EXK*ARG
      IF(ARG.GT.0.0D0) ARG=-ARG
      TEST=0.0D0
      IF(DEPEND(I1).LT.RLXIDN) GO TO 14
      TEST=DEPEND(NROLL)*(1.0D0-DEXP(ARG))
      GO TO 14
C
   12 CONTINUE
C
C     GREATER THAN ZERO
C
      IF(DEPEND(I1).LE.0.0D0) GO TO 14
      ARG=(RLXIUP-DEPEND(I1))/RLXIUP
      ARG=EXK*ARG
      IF(ARG.GT.0.0D0) ARG=-ARG
      TEST=0.0D0
      IF(DEPEND(I1).GT.RLXIUP) GO TO 14
      TEST=DEPEND(NROLL)*(1.0D0-DEXP(ARG))
C
   14 CONTINUE
      DERIV(I1)=TEST
      RLOUT=RLKP*DEPEND(NROLL)+RLKI*DEPEND(I1)+RLKD*DERIV(NROLL)
      VOPRL=RLKA*RLOUT
      RLMOTT=RLKT*(VOPRL-RLKB*DEPEND(I2))
      IF(RLMOTT.GT.RLMTUP) RLMOTT=RLMTUP
      IF(RLMOTT.LT.RLMTDN) RLMOTT=RLMTDN
      RLMOTT=RLMOTT-DEPEND(I2)*RLTCUL/(RLDMIN+DABS(DEPEND(I2)))
      DERIV(I2)=RLMOTT/RLWMOI
      OUTTRQ(17)=RLMOTT
      VWH(1)=DEPEND(I2)
      RLHD=RLMOTT
      RLH=RLWMOI*DEPEND(I2)
   20 CONTINUE
      IF(IPITCH.EQ.0) GO TO 30
      DERIV(NPITCH)=PITCHG*PITCH-PBW*DEPEND(NPITCH)
      I1=NPITCH+1
      I2=I1+1
      TEST=DEPEND(NPITCH)
      FOPT(2)=TEST
      IF(DEPEND(NPITCH).GE.0.0D0) GO TO 22
C
C     LESS THAN ZERO
C
      IF(DEPEND(I1).GE.0.0D0) GO TO 24
      ARG=(PTXIDN-DEPEND(I1))/PTXIDN
      ARG=EXK*ARG
      IF(ARG.GT.0.0D0) ARG=-ARG
      TEST=0.0D0
      IF(DEPEND(I1).LT.PTXIDN) GO TO 24
      TEST=DEPEND(NPITCH)*(1.0D0-DEXP(ARG))
      GO TO 24
C
   22 CONTINUE
C
C     GREATER THAN ZERO
C
      IF(DEPEND(I1).LE.0.0D0) GO TO 24
      ARG=(PTXIUP-DEPEND(I1))/PTXIUP
      ARG=EXK*ARG
      IF(ARG.GT.0.0D0) ARG=-ARG
      TEST=0.0D0
      IF(DEPEND(I1).GT.PTXIUP) GO TO 24
      TEST=DEPEND(NPITCH)*(1.0D0-DEXP(ARG))
C
   24 CONTINUE
      DERIV(I1)=TEST
      PTOUT=PTKP*DEPEND(NPITCH)+PTKI*DEPEND(I1)+PTKD*DERIV(NPITCH)
      VOPPT=PTKA*PTOUT
      PTMOTT=PTKT*(VOPPT-PTKB*DEPEND(I2))
      IF(PTMOTT.GT.PTMTUP) PTMOTT=PTMTUP
      IF(PTMOTT.LT.PTMTDN) PTMOTT=PTMTDN
      PTMOTT=PTMOTT-DEPEND(I2)*PTTCUL/(PTDMIN+DABS(DEPEND(I2)))
      DERIV(I2)=PTMOTT/PTWMOI
      OUTTRQ(18)=PTMOTT
      VWH(2)=DEPEND(I2)
      PTHD=PTMOTT
      PTH=PTWMOI*DEPEND(I2)
   30 CONTINUE
      IF(IYAW.EQ.0) GO TO 40
      DERIV(NYAW)=YAWG*YAW-YBW*DEPEND(NYAW)
      I1=NYAW+1
      I2=I1+1
      TEST=DEPEND(NYAW)
      FOPT(3)=TEST
      IF(DEPEND(NYAW).GE.0.0D0) GO TO 32
C
C     LESS THAN ZERO
C
      IF(DEPEND(I1).GE.0.0D0) GO TO 34
      ARG=(YWXIDN-DEPEND(I1))/YWXIDN
      ARG=EXK*ARG
      IF(ARG.GT.0.0D0) ARG=-ARG
      TEST=0.0D0
      IF(DEPEND(I1).LT.YWXIDN) GO TO 34
      TEST=DEPEND(NYAW)*(1.0D0-DEXP(ARG))
      GO TO 34
C
   32 CONTINUE
C
C     GREATER THAN ZERO
C
      IF(DEPEND(I1).LE.0.0D0) GO TO 34
      ARG=(YWXIUP-DEPEND(I1))/YWXIUP
      ARG=EXK*ARG
      IF(ARG.GT.0.0D0) ARG=-ARG
      TEST=0.0D0
      IF(DEPEND(I1).GT.YWXIUP) GO TO 34
      TEST=DEPEND(NYAW)*(1.0D0-DEXP(ARG))
C
   34 CONTINUE
      DERIV(I1)=TEST
      YWOUT=YWKP*DEPEND(NYAW)+YWKI*DEPEND(I1)+YWKD*DERIV(NYAW)
      VOPYW=YWKA*YWOUT
      YWMOTT=YWKT*(VOPYW-YWKB*DEPEND(I2))
      IF(YWMOTT.GT.YWMTUP) YWMOTT=YWMTUP
      IF(YWMOTT.LT.YWMTDN) YWMOTT=YWMTDN
      YWMOTT=YWMOTT-DEPEND(I2)*YWTCUL/(YWDMIN+DABS(DEPEND(I2)))
      DERIV(I2)=YWMOTT/YWWMOI
      OUTTRQ(19)=YWMOTT
      VWH(3)=DEPEND(I2)
      YWHD=YWMOTT
      YWH=YWWMOI*DEPEND(I2)
   40 CONTINUE
      RWHEEL(1)=-HDOT(1)+HWL(2)*OMEG(3)-HWL(3)*OMEG(2)
      RWHEEL(2)=-HDOT(2)+HWL(3)*OMEG(1)-HWL(1)*OMEG(3)
      RWHEEL(3)=-HDOT(3)+HWL(1)*OMEG(2)-HWL(2)*OMEG(1)
      OUTTRQ(7)=RWHEEL(1)
      OUTTRQ(8)=RWHEEL(2)
      OUTTRQ(9)=RWHEEL(3)
      ETA(4)=ETA(4)+RWHEEL(1)
      ETA(5)=ETA(5)+RWHEEL(2)
      ETA(6)=ETA(6)+RWHEEL(3)
C
      RETURN
C
C   ****************************************************************
      ENTRY WHPLOT(BUFF,INDEX)
C   ****************************************************************
C
C     CALLED FROM GPPLOT TO LOAD PLOT RECORD
C
      I1=INDEX-1
      INDEX=INDEX+6
      IF(IPCONT.EQ.0) RETURN
      DO 64 I=1,3
      I2=I+3
      OUTP(I)=FOPT(I)/RADIAN
      OUTP(I2)=VWH(I)/RADIAN
      BUFF(I1+I)=OUTP(I)
      BUFF(I1+I2)=OUTP(I2)
   64 CONTINUE
C
C
      RETURN
C
C   ****************************************************************
      ENTRY WHPRNT
C   ****************************************************************
C
C     CALLED FROM GPSOUT FOR PRINTED OUTPUT
C
      IF(IPCONT.EQ.0) RETURN
C
      CALL SET('FTR ROLL',0,0,OUTP(1),I8)
      CALL SET('FTR PTCH',0,0,OUTP(2),I8)
      CALL SET('FTR YAW ',0,0,OUTP(3),I8)
      CALL SET('1 AX MWS',0,0,OUTP(4),I8)
      CALL SET('2 AX MWS',0,0,OUTP(5),I8)
      CALL SET('3 AX MWS',0,0,OUTP(6),I8)
C
C
      RETURN
C
C
      END
      SUBROUTINE WRTPLT(TTT,AL,BE,GA,OM,PH,CC1,CC2,CC3,ITAR)
C
      IMPLICIT REAL*8(A-H,O-Z)
C
      INTEGER*4 ACNTRL
C
      COMMON/ACCHUB/YHUB(3,6),HUBACC(3,6),ACCRED(6),DUMMY1(72)
C
      COMMON/ACFILT/ACPARM(20),IACFLT(20)
C
      COMMON/ACTOUT/AVOUT(3)
C
      COMMON/CANTNA/ A(10,3),ADOT(10,3),B(10,3),BDOT(10,3),DIN(10,3),
     .               DINDOT(10,3),DOUT(10,3),DOUTDT(10,3)
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON /CSTAT/X(20),XDOT(20),CPARM(20)
C
      COMMON/CWHEEL/VWH(3),VDUMY(6)
C
      COMMON/DEBUG1/ IAFM(5)
C
      COMMON/DMMNT1/ ZKBM(6),EMAK(10),EMBK(10),ARTETA(3),CMTORK(3),
     .               ITORK,IBENDM,ITENSE,ITNS1
C
      COMMON/HAMOUT/HAMILT,IHAMLT
C
      COMMON/HOUTPT/IHCALC,IHREF,IHFLAG
C
      COMMON/HVCOUT/HBODY(3),HINERT(3),HMAG
C
      COMMON/IACC/IACOMP,IHUBAC,ITIPAC,IAFLAG
C
      COMMON /ICNTRL/KNTRL(10)
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      COMMON/INEWR / NKT(10),ICP,ICPS
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/ISECBD/I2BDY
C
      COMMON/ITW   /ITWIST,ITWST1
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/NUMACC/NY
C
      COMMON/OUTFOR/ SUMMTS(3)
C
      COMMON/OUTTHR/ SMAGB(3),XMB(3),RWHEEL(3)
C
      COMMON/PLTCOM/IPLMOD,IKMOD
C
      COMMON/RPOOL9/ RT1(7),RT2(10,9),ALP(7,7),GAM(10,9,7),DEL(10,9,9)
C
      COMMON/SBDOUT/ANG2(3),ANG2D(3),DUMSB(21),OM2(3)
C
      COMMON/SUNVTR/ SSSLLL(3)
C
      COMMON/TENSON/TSS1(10)
C
      COMMON/TWIOUT/ CWO(10,3),CWDO(10,3)
C
      COMMON/VARBLS/DEPEND(150),DERIV(150)
C
      REAL*4 BUFF(450)
C
      DIMENSION OM(3),H(3),SUNV(3)
C
C     ZERO OUT PLOT BUFFER
C
      DO 10 I=1,450
      BUFF(I)=0.0E0
   10 CONTINUE
C
C     LOAD CALL LIST VARIABLES
C
      BUFF(1)=AL
      BUFF(2)=BE
      BUFF(3)=GA
      BUFF(4)=OM(1)
      BUFF(5)=OM(2)
      BUFF(6)=OM(3)
      BUFF(7)=PH
      BUFF(8)=CC1
      BUFF(9)=CC2
      BUFF(10)=CC3
C
C     LOAD REGULAR ELEMENT DISPLACEMENTS AND VELOCITIES
C
      IND=11
      NEL=IK-K1
      IF(NEL.EQ.0) GO TO 25
      DO 20 I=1,NEL
      L=I+K1
      MB=NK(L)
      IF(MB.EQ.0) GO TO 15
      DO 12 J=1,MB
      BUFF(IND  )=BUFF(IND  )+A(I,J)
      BUFF(IND+1)=BUFF(IND+1)+ADOT(I,J)
      BUFF(IND+2)=BUFF(IND+2)+B(I,J)
      BUFF(IND+3)=BUFF(IND+3)+BDOT(I,J)
   12 CONTINUE
   15 CONTINUE
      MT=NKT(L)
      IF(MT.EQ.0) GO TO 18
      DO 16 J=1,MT
      BUFF(IND+4)=BUFF(IND+4)+CWO(L,J)
      BUFF(IND+5)=BUFF(IND+5)+CWDO(L,J)
   16 CONTINUE
   18 CONTINUE
      IND=IND+6
   20 CONTINUE
   25 CONTINUE
C
C     LOAD DAMPER ELEMENT DISPLACEMENTS AND VELOCITIES
C
      IND=71
      IF(K1.EQ.0) GO TO 40
      DO 35 I=1,K1
      MB=NK(I)
      IF(MB.EQ.0) GO TO 30
      DO 27 J=1,MB
      BUFF(IND  )=BUFF(IND  )+DOUT(I,J)
      BUFF(IND+1)=BUFF(IND+1)+DOUTDT(I,J)
      BUFF(IND+2)=BUFF(IND+2)+DIN(I,J)
      BUFF(IND+3)=BUFF(IND+3)+DINDOT(I,J)
   27 CONTINUE
   30 CONTINUE
      MT=NKT(I)
      IF(MT.EQ.0) GO TO 33
      DO 32 J=1,MT
      BUFF(IND+4)=BUFF(IND+4)+CWO(I,J)
      BUFF(IND+5)=BUFF(IND+5)+CWDO(I,J)
   32 CONTINUE
   33 CONTINUE
      IND=IND+6
   35 CONTINUE
   40 CONTINUE
      IND=131
C
C     MODAL DISPLACEMENTS FOR SPECIFIC ELEMENT
C
      IF(IPLMOD.EQ.0) GO TO 60
      IF(IKMOD.LE.K1) IND=140
      DO 55 I=1,IK
      IF(IKMOD.NE.I) GO TO 55
      MB=NK(I)
      IF(MB.EQ.0) GO TO 50
      IF((I-K1).GT.0) GO TO 45
      DO 42 J=1,MB
      BUFF(IND  )=DOUT(I,J)
      BUFF(IND+1)=DIN(I,J)
      IND=IND+2
   42 CONTINUE
      GO TO 50
   45 CONTINUE
      L=I-K1
      DO 47 J=1,MB
      BUFF(IND  )=A(L,J)
      BUFF(IND+1)=B(L,J)
      IND=IND+2
   47 CONTINUE
   50 CONTINUE
      IND=137
      IF(IKMOD.LE.K1) IND=146
      MT=NKT(I)
      IF(MT.EQ.0) GO TO 60
      DO 52 J=1,MT
      BUFF(IND)=CWO(I,J)
      IND=IND+1
   52 CONTINUE
      GO TO 60
   55 CONTINUE
   60 CONTINUE
C
C     FILL THE BUFFER SPACE FOR ACCLEROMETER READING PLOT
C
      IF(IACOMP.EQ.0.AND.IHUBAC.EQ.0) GO TO 500
      INDEX=148
      DO 510 I=1,NY
      BUFF(INDEX+I)=ACCRED(I)
 510  CONTINUE
 500  CONTINUE
C
C     FILL UP THE BUFFER ARRAY FOR PRINCIPAL MOMENT OF INERTIA,
C     ANGULAR MOMENTUM VECTOR IN INERTIAL SPACE
C
      INDEX=154
      DO 610 I=1,3
 610  BUFF(INDEX+I)=ALP(I+3,I+3)
      INDEX=INDEX+3
      IF(IHCALC.EQ.0) GO TO 600
      DO 650 I=1,3
 650  H(I)=HINERT(I)/HMAG
      HALPA=DATAN2(H(2),H(1))/RADIAN
      HDELT=DARSIN(H(3))/RADIAN
      BUFF(INDEX+1)=HALPA
      BUFF(INDEX+2)=HDELT
      BUFF(INDEX+3)=HMAG
 600  CONTINUE
C
C     FILL UP THE ARRAY FOR TENSION PLOT
C
      IF(ITENSE.EQ.0.AND.IBENDM.EQ.0) GO TO 740
      IF(ITENSE.EQ.0) GO TO 720
      INDEX=160
      DO 710 K=1,IK
 710  BUFF(INDEX+K)=TSS1(K)
 720  CONTINUE
      INDEX=170
      IF(IBENDM.EQ.0) GO TO 740
      DO 741 K=1,IK
      BUFF(INDEX+1)=EMAK(K)
      BUFF(INDEX+2)=EMBK(K)
      INDEX=INDEX+2
 741  CONTINUE
 740  CONTINUE
      IF(IAFM(1).EQ.0) GO TO 760
      INDEX=190
      DO 750 I=1,3
 750  SUNV(I)=-SSSLLL(I)
      SALPA=DATAN2(SUNV(2),SUNV(1))/RADIAN
      SDELT=DARSIN(SUNV(3))/RADIAN
      BUFF(INDEX+1)=SALPA
      BUFF(INDEX+2)=SDELT
  760  CONTINUE
      IF(IMGMTS.EQ.0) GO TO 770
      INDEX=192
      DO 780 I=1,3
 780  BUFF(INDEX+I)=SMAGB(I)
 770  CONTINUE
C
C     FILL UP THE ARRAY FOR HAMILTINIAN VALUES
C
      IF(IHAMLT.EQ.0) GO TO 800
      INDEX=195
      BUFF(INDEX+1)=HAMILT
 800  CONTINUE
C
C     ADD THE ARRAY FOR BENDING MOMENT MAGNITUDE
C
      IF(IBENDM.EQ.0) GO TO 950
      INDEX=196
      DO 870 K=1,IK
  870 BUFF(INDEX+K)=DSQRT(EMAK(K)*EMAK(K)+EMBK(K)*EMBK(K))
  950 CONTINUE
C
      IF(IWHEEL.EQ.0) GO TO 960
      INDEX=206
      DO 955 I=1,3
      BUFF(INDEX+I)=VWH(I)
  955 CONTINUE
  960 CONTINUE
C
      INDEX=209
      DO 962 I=1,3
      BUFF(INDEX+I)=SUMMTS(I)
  962 CONTINUE
C
      IF(IHCALC.EQ.0) GO TO 965
      INDEX=212
      DO 964 I=1,3
      BUFF(INDEX+I)=HBODY(I)
  964 CONTINUE
C
  965 CONTINUE
C
C      TEST FOR CONTROL SYSTEM SIMULATION
      IF(KNTRL(1) .EQ. 0) GO TO 970
      INDEX=215
      DO 968 I=1,20
968   BUFF(I+INDEX)=X(I)
C
  970 CONTINUE
C
C     SECONDARY BODY OUTPUT
C
      IF(I2BDY.EQ.0) GO TO 972
      INDEX=235
      DO 971 I=1,3
      I3=I+3
      I6=I+6
      BUFF(INDEX+I)=ANG2(I)/RADIAN
      BUFF(INDEX+I3)=ANG2D(I)/RADIAN
      BUFF(INDEX+I6)=OM2(I)/RADIAN
  971 CONTINUE
  972 CONTINUE
C
      IF(IACFLT(1).EQ.0) GO TO 974
C
      INDEX=244
      DO 973 I=1,3
      BUFF(INDEX+I)=AVOUT(I)
  973 CONTINUE
  974 CONTINUE
C
      INDEX=248
C
      CALL GPPLOT(BUFF,INDEX)
C
C     WRITE PLOT BUFFER
C
      WRITE(IPLTPE) ITAR,TTT,BUFF
C
C
      RETURN
      END
      SUBROUTINE XACM(CMXO)
C
        IMPLICIT REAL*8 (A-H,O-Z)
      REAL * 8 MSUBM,MPX
      INTEGER*4 ACNTRL
C
      NAMELIST/ ATDCNT / SB,SAVEY,SAVET,TIME,TSTART,TX1,TR,TZ,TMX1,TMX2,
     .                   DT,DTA,MPX
C
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/CSTVAL/ TSTART,ZL0(10),ZL1(10),ZL2(10),ZLA(10)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/MOMENT/ ACNTRL,IVISCS,IATTDE,IMGMTS,IWHEEL,NPULSE
C
      COMMON/OUTONE/ OMEGL,VSUBL,MSUBM(3),CMX1,SIMPX,SB
C
      COMMON/RATTDE/ DTMXA,PXI,PXO,EIT,REFTIM,TMX1,TMX2,CMX,ISW
C
      COMMON/RMAIN1/ DELTAT,FACTOR,FREQ,TSTOP,DELMIT,
     .               UPBND(150),DNBND(150)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL2/ PO,SD(3),DAN(3,10),DBN(3,10),CFMT(3,3),DIY1(3),
     .               SD1(3),DT1,P1,AERO,DTO1,YIZK(3),PO1
C
C
      DIMENSION SB(3)
C
C
C
C
C      TITLE
C
C        X BODY AXIS ATTITUDE CONTROL MOMENTS
C
C      PURPOSE
C
C        PROVIDE MEANS OF EXERTING ATTITUDE CONTROL MOMENTS ON X
C        BODY AXIS OF THE SPIN STABILIZED SATELLITE
C
C      INPUT ARGUEMENTS
C
C        DTXMA   TIME INCREMENT FROM TSTART WHEN THE TRANSVERSE ATTIT.
C                CONTROL SYSTEM IS ACTIVATED.
C        DTXMD   TIME INCREMENT FROM TSTART WHEN THE TRANSVERSE ATTIT.
C                CONTROL SYSTEM IS DEACTIVATED.     SECONDS
C
C        PXI     FRACTION OF SPIN PERIOD AFTER SUN LINE REFERENCE
C                POINT ESTABLISHED WHEN CONTROL TORQUE IS
C                APPLIED TO X BODY AXIS
C        PXO     FRACTION OF SPIN PERIOD AFTER SUN LINE REFERENCE
C                POINT ESTABLISHED WHEN CONTROL TORQUE IS REMOVED
C                FROM X BODY AXIS
C        EIT     TIME TOLERANCE FOR ACTIVATION AND DEACTIVATION OF
C                CONTROL MOMENTS, X AXIS     SECONDS
C        CMX     CONTROL MOMENT ALONG X BODY AXIS.
C                INPUT AS POSITIVE NUMBER MEANS MOMENT APPLIED ALONG
C                POSITIVE X BODY AXIS.   FT. LBS.
C
C      INPUT COMMON
C
C        TSTART  INITIAL PROBLEM TIME   SEC.
C        TIME    TIME OF PROBLEM REFERENCE TO TSTART  SEC.
C        SA      TRANSFORMATION MATRIX, BODY FRAME TO LOCAL
C                NON-ROTATING FRAME.
C        SD      UNIT VECTOR, SUN TO SATELLITE, EXPRESSED IN
C                LOCAL NON-ROTATING FRAME.
C     OMEG(3)    ANGULAR VELOCITY ABOUT THE Z BODY AXIS  RDNS/SEC.
C        DELTAT  TIME INCREMENT USED IN PROGRAM IN INTEGRATING
C                FROM POINT TO POINT
C
C      OUTPUT
C
C        SIMPX   A PARAMETER PROPORTIONAL TO TOTAL IMPULSE FOR CONTROL
C                MOMENTS APPLIED TO X BODY AXI@   FT. LB. SEC.
C        CMXO    OUTPUT CONTROL MOMENT ALONG X BODY AXIS
C        TR1     TIME AT REFERENCE POINT FOR EACH SPIN
C
C
C        INITIALIZE AT FIRST CALL ONLY
      IF(ISW.EQ.1) GO TO 30
      DT=0.0D0
      CMX1=0.0D0
      TMX1=0.0D0
      TMX2=0.0D0
      SAVET=0.0D0
      TX1=TIME + DTMXA
C
      DO 6 I=1,3
    6 SB(I)=0.D0
C
C
C        TEST FOR SYSTEM ACTIVATED PERIOD
   10 TR1=0.0D0
      TR=0.0D0
      TZ=0.0D0
      MPX=0
C
C        CALCULATE SUN SATELLITE VECTOR BODY COORDINATES
   30 DO 40 I=1,3
   40 SB(I)=0.0D0
      DO 50 I=1,3
      DO 50 J=1,3
   50 SB(I)=SD(J)*SA(J,I)+SB(I)
C
      CMXO=0.0D0
      IF(TIME-TX1) 110,51,51
   51 IF(TIME.GE.TMX1.AND.TIME.LE.TMX2) GO TO 105
C        DETECT CHANGE IN SIGN OF SB(2) AND LINEAR INTERPOLATE
      IF(ISW.EQ.0) GO TO 110
      TEMP=SAVEY*SB(2)
      IF(TEMP.GT.0.D0) GO TO 110
      IF(SB(1).GT.0.D0) GO TO 110
   56 TR=((-SAVEY*(TIME-SAVET))/(SB(2)-SAVEY))+SAVET
      ACNTRL=1
      IF(TMX1.NE.0.D0.AND.TMX2.NE.0.D0) GO TO 90
   85 TR1=TR
      TZ=TWOPI/DABS(OMEG(3))
      TMX1=TR+PXI*TZ
      TMX2=TR+PXO*TZ
   90 IF(TIME-TMX1-EIT) 110,100,100
  100 IF(TIME-TMX2+EIT) 105,105,110
C
C        ADD CONTROL MOMENT TO EXISTING MOMENTS
  105 CMXO=CMX
      CMX1=CMX
C
C
  110 REFTIM=TR1
C
      SAVEY=SB(2)
      SAVET=TIME
      ISW=1
      IF(IOUT.EQ.1) RETURN
      WRITE(6,ATDCNT)
      RETURN
      END
      SUBROUTINE XDXDCL(XDXD,ZLK,K,M)
C
C     'XDXDCL' CALCULATES THE SQUARES OF THE RELATIVE VELOCITIES OF
C     AN ELEMENT IN THE ELEMENT FRAME.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER*4 P,Q,R
C
      COMMON/COMALP/ SZ02(10),SZ03(10),SZ04(10),SZ12(3,10),SZ13(3,10),
     .               SZ14(3,10),SZ15(3,10),SZ16(3,10),SZ21(9,10),
     .               SZ22(9,10),SZ23(9,10),SZ25(9,10),
     .               SZ26(9,10),SZ27(9,10),SZ28(9,10),SZ31(27,10),
     .               SZ32(27,10),SZ33(27,10),SZ34(27,10),SZ35(27,10),
     .               SZ41(81,10),SZ42(81,10),SZ43(81,10)
C
      COMMON/DEBUG3/ISWTCH
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
C
      DIMENSION XDXD(3,3),ZLK(10)
C
C
      IF(ISWTCH.EQ.0) WRITE(6,20002) K,M
      SUM7=0.0D0
      SUM8=0.0D0
      SUM11=0.0D0
      SUM12=0.0D0
C
      DO 40 N=1,M
      SUM5=0.0D0
      SUM6=0.0D0
      SUM9=0.0D0
      SUM10=0.0D0
C
      DO 30 P=1,M
      SUM3=0.0D0
      SUM4=0.0D0
C
      DO 20 Q=1,M
      SUM1=0.0D0
      SUM2=0.0D0
C
      DO 10 R=1,M
      A1=FUNA(K,K1,R)
      B1=FUNB(K,K1,R)
      IR=27*(N-1)+9*(P-1)+3*(Q-1)+R
      SUM1=SUM1+B1*SZ41(IR,K)
   10 SUM2=SUM2+A1*SZ41(IR,K)
C
      AD1=ADFUN(K,K1,Q)
      BD1=BDFUN(K,K1,Q)
      SUM3=SUM3 + BD1*SUM1
   20 SUM4=SUM4 + AD1*SUM2
C
      A1=FUNA(K,K1,P)
      B1=FUNB(K,K1,P)
      AD1=ADFUN(K,K1,P)
      BD1=BDFUN(K,K1,P)
      IP=3*(N-1)+P
C
      SUM5=SUM5 + A1*(SUM3 + SUM4)
      SUM6=SUM6 + B1*(SUM3 + SUM4)
      SUM9=SUM9+AD1*SZ21(IP,K)
   30 SUM10=SUM10+BD1*SZ21(IP,K)
C
      AD1=ADFUN(K,K1,N)
      BD1=BDFUN(K,K1,N)
C
      SUM7=SUM7  + AD1*SUM5
      SUM8=SUM8  + BD1*SUM6
      SUM11=SUM11 + AD1*SUM9
   40 SUM12=SUM12 + BD1*SUM10
C
      XDXD(1,1)=(SUM7 + SUM8)/(ZLK(K)*ZLK(K))
      XDXD(2,2)=SUM11
      XDXD(3,3)=SUM12
C
      IF(ISWTCH.EQ.0) WRITE(6,10000) ((XDXD(I,J),J=1,3),I=1,3)
C
      RETURN
C
10000 FORMAT('0XDX(K,I,J)',//3G15.5)
20002 FORMAT('0',5X,'XDXDCL ',2I4)
20010 FORMAT('0',2X,'J2 = SUM OF ZZT1')
C
      END
      SUBROUTINE XFIND(ROD,VOD,ZMU,TST,TIME,XSAT,XSATDT)
C
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON/XKPLER/AS,E,F,EI,BW,W,BWDOT,WDOT
C
      COMMON/CFINDX/ AX2CHK,TCHECK,LCHECK
C
C                'XFIND' IS THE INTERNAL (KEPLERIAN) ORBIT GENERATOR.
C                XFIND DETERMINES THE SATELLITE POSITION AND
C                VELOCITY AT INPUT TIME.
C
C
C           INPUT
C                 ROD  SATELLITE POSITION AT START TIME
C                 VOD  SATELLITE VELOCITY AT START TIME
C
C           OUTPUT
C                 XSAT    SATELLITE POSITION AT SIMULATION TIME
C                 XSATDT  SATELLITE VELOCITY AT SIMULATION TIME
C
C           NO SUBROUTINES
C           NO TAPES
C
C
      DIMENSION R(3),VD(3),BR(3,3),BV(3,3),TM2(3),TM3(3),ROD(3),VOD(3),
     .          XSAT(3),XSATDT(3)
      DIMENSION RA(3,3),RST(3,3),RSULT(3,3),DUMY(3,3)
      DIMENSION RRR(3),VVV(3)
C
C
C
      T24=24.D0
      T72=720.D0
      T40=40320.D0
      T16=1.D0/6.D0
      T12=120.D0
      T50=5040.D0
      T36=362880.D0
C
      RODTVO=0.D0
      ROMD=0.D0
      VOSQD=0.D0
      DO 10 I=1,3
      VOSQD=VOSQD+VOD(I)**2
      ROMD=ROMD+ROD(I)**2
   10 RODTVO=RODTVO+ROD(I)*VOD(I)
C
      ROMD=DSQRT(ROMD)
C
      ALFAD=2.D0/ROMD-VOSQD/ZMU
      SQMU=DSQRT(ZMU)
      X=XPAST
   20 L=1
      TEST=TIME-TST
      IF(TEST.NE.0.D0) GO TO 30
      DN=0.D0
      X=0.D0
      DTDX=ROMD/SQMU
      X2CFN=0.D0
      X3SFN=0.D0
      GO TO 90
   30 X=X+(TEST-DPAST)/DTDX
      GO TO 50
   40 DTDX=RODTVO*(X-ALFAD*X3SFN)/ZMU
     .    + ((1.D0-ROMD*ALFAD)*X2CFN + ROMD)/SQMU
      X=X-(DN-TEST)/DTDX
   50 ALFX2=ALFAD*X**2
      DIFF=DABS(ALFX2)-AX2CHK
      IF(DIFF.GE.0.D0) GO TO 60
      XSQR=X**2
      XCUBE=XSQR*X
      ALFX22=ALFX2*ALFX2
      ALFX23=ALFX2*ALFX22
      X2CFN=(0.5D0 - ALFX2/T24 + ALFX22/T72 - ALFX23/T40)*XSQR
      X3SFN=(T16 - ALFX2/T12 + ALFX22/T50 - ALFX23/T36)*XCUBE
      GO TO 80
C  60 IF(SNGL(ALFAD).GE.0.) GO TO 70
 60   IF(ALFAD.GE.0.0D0) GO TO 70
      ARG=DSQRT(-ALFX2)
      EXPLS=DEXP(ARG)
      EXMIN=DEXP(-ARG)
      X2CFN=-(0.5D0*(EXPLS+EXMIN)-1.D0)/ALFAD
      ALFFF=DABS(ALFAD)
      X3SFN=(0.5D0*(EXPLS-EXMIN) - ARG)*((ALFFF)**(-1.5))
      GO TO 80
   70 ARG=DSQRT(ALFX2)
      X3SFN=(ARG-DSIN(ARG))*ALFAD**(-1.5D0)
      X2CFN=(1.D0-DCOS(ARG))/ALFAD
   80 DN=RODTVO*X2CFN/ZMU + ((1.D0-ROMD*ALFAD)*X3SFN + ROMD*X)/SQMU
      DIFF=DABS(TEST-DN)-TCHECK*TEST
      IF(DIFF.LE.0.0D0) GO TO 90
      L=L+1
      IF(L-LCHECK.LE.0) GO TO 40
      IEXIT=2
      RETURN
   90 DPAST=TEST
      XPAST=X
      RM=0.D0
      DO 100 I=1,3
      R(I)=(1.D0-X2CFN/ROMD)*ROD(I)+(TEST-X3SFN/SQMU)*VOD(I)
  100 RM=RM+R(I)**2
C
      RM=DSQRT(RM)
C
      DO 110 I=1,3
  110 VD(I)=SQMU*(ALFAD*X3SFN - X)*ROD(I)/(RM*ROMD)
     .     + (1.D0 - X2CFN/RM)*VOD(I)
C
      TDAY=TEST/86400.0D0
      BWST=BW+BWDOT*TDAY
      WST=W+WDOT*TDAY
      CALL TRANS(BW,EI,W,RA)
      CALL TRANS(BWST,EI,WST,RST)
      CALL MPYMAT(RST,RA,DUMY,1,2,RSULT,DUMY)
      CALL DMATVC(RSULT,R,RRR)
      CALL DMATVC(RSULT,VD,VVV)
      DO 120 I=1,3
      XSAT(I)=RRR(I)
  120 XSATDT(I)=VVV(I)
C
C   END OF MODIFICATION
C
C
C
      RETURN
      END
      SUBROUTINE XICAL(XI,ZLK,Z11,Z24,Z1,M,K)
C
C     'XICAL' CALCULATES THE CENTER OF MASS OF AN ELEMENT IN THE
C     ELEMENT FRAME.
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/DEBUG3/ISWTCH
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      DIMENSION XI(3),ZLK(10),Z11(3,10),Z24(9,10),Z1(10)
C
C
      IF(ISWTCH.EQ.0) WRITE(6,20002) K,M
      SUM3=0.0D0
      SUM4=0.0D0
      SUM5=0.0D0
      SUM6=0.0D0
C
      DO 20 I=1,M
      SUM1=0.0D0
      SUM2=0.0D0
C
      DO 10 J=1,M
      A1=FUNA(K,K1,J)
      B1=FUNB(K,K1,J)
      IJ=3*(I-1)+J
      SUM1=SUM1+B1*Z24(IJ,K)
   10 SUM2=SUM2+A1*Z24(IJ,K)
C
      A1=FUNA(K,K1,I)
      B1=FUNB(K,K1,I)
      SUM3=SUM3+SUM1*B1
      SUM4=SUM4+SUM2*A1
      SUM5=SUM5+A1*Z11(I,K)
      SUM6=SUM6+B1*Z11(I,K)
   20 CONTINUE
C
      XI(1)=ZLK(K)*Z1(K)  - ((SUM4 + SUM3)/(2.D0*ZLK(K)))
      XI(2)=SUM5
      XI(3)=SUM6
C
      IF(ISWTCH.EQ.0) WRITE(6,10000) (XI(J),J=1,3)
C
      RETURN
C
10000 FORMAT('0XI(K,J)',//3G15.5)
20002 FORMAT('0',5X,'XICAL  ',2I4)
C
      END
      SUBROUTINE XIDCAL(XID,ZLK,Z11,Z24,M,K)
C
C     'XIDCAL' CALCULATES THE VELOCITY OF THE CENTER OF MASS OF AN
C     ELEMENT IN THE ELEMENT FRAME.
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/DEBUG3/ISWTCH
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      DIMENSION XID(3),ZLK(10),Z11(3,10),Z24(9,10)
C
C
      IF(ISWTCH.EQ.0) WRITE(6,20002) K,M
      SUM3=0.0D0
      SUM4=0.0D0
      SUM5=0.0D0
      SUM6=0.0D0
C
      DO 20 I=1,M
      SUM1=0.0D0
      SUM2=0.0D0
C
      DO 10 J=1,M
      A1=FUNA(K,K1,J)
      B1=FUNB(K,K1,J)
      IJ=3*(I-1)+J
      SUM1=SUM1+B1*Z24(IJ,K)
   10 SUM2=SUM2+A1*Z24(IJ,K)
C
      AD1=ADFUN(K,K1,I)
      BD1=BDFUN(K,K1,I)
      SUM3=SUM3 + BD1*SUM1
      SUM4=SUM4 + AD1*SUM2
      SUM5=SUM5+AD1*Z11(I,K)
      SUM6=SUM6+BD1*Z11(I,K)
   20 CONTINUE
C
      XID(1)=(SUM3 + SUM4)/(-ZLK(K))
      XID(2)=SUM5
      XID(3)=SUM6
C
      IF(ISWTCH.EQ.0) WRITE(6,10000) (XID(J),J=1,3)
C
      RETURN
C
10000 FORMAT('0XID(K,J)',//3G15.5)
C
20002 FORMAT('0',5X,'XIDCAL ',2I4)
      END
      SUBROUTINE XIMMT(K,XI,XID)
C
C           'XIMMT' COMPUTES THE BASIC ELEMENT VECTORS FOR
C            TENSION COMPUTATIONS
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/COMALP/ SZ02(10),SZ03(10),SZ04(10),SZ12(3,10),SZ13(3,10),
     .               SZ14(3,10),SZ15(3,10),SZ16(3,10),SZ21(9,10),
     .               SZ22(9,10),SZ23(9,10),SZ25(9,10),
     .               SZ26(9,10),SZ27(9,10),SZ28(9,10),SZ31(27,10),
     .               SZ32(27,10),SZ33(27,10),SZ34(27,10),SZ35(27,10),
     .               SZ41(81,10),SZ42(81,10),SZ43(81,10)
C
      COMMON/DEBUG2/ IOUT,JOUT,KLUGE
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI
C
      COMMON/RPOOL8/ SZ01(10),SZ11(3,10),SZ24(9,10)
C
      DIMENSION XID(3),XI(3),SUMS(40)
C
C      SUMS (1) =  AN     -  SUMS      SUMS (21) =  AP * SZ24
C      SUMS (2) =  BN        SUMS           (22) =  ADOTP * SZ24
C      SUMS (3) =  AP        SUMS           (23) =  BP    * SZ24
C      SUMS (4) =  BP        SUMS           (24) =  BDOTP * SZ24
C      SUMS (5) =  ADOTN     SUMS           (25) =  AP    * SZ24
C      SUMS (6) =  BDOTN     SUMS           (26) =  BP    * SZ25
C      SUMS (7) =  ADDOTN    SUMS           (27) =  AP    * SZ25
C      SUMS (8) =  BDDOTN    SUMS           (28) =  BDOTN * SZ11
C      SUMS (9) =  AN - TEMP                (29) =  AP    * SZ26
C      SUMS(10) =  BN - TEMP                (30) =  BP    * SZ26
C      SUMS(11) =  AP - TEMP                (31)  = BN    * SZ12
C      SUMS(12) =  BP - TEMP                (32)  = AN    * SZ11
C      SUMS(13) =  ADOTN  - TEMP            (33)  = BN    * SZ11
C      SUMS(14) =  BDOTN  - TEMP
C      SUMS(15) =  ADDOTN - TEMP
C      SUMS(17) =  ADOTP  - TEMP
C      SUMS(18) =  BDOTP  - TEMP
C      SUMS(19) =  ADOTN * SZ11
C      SUMS(20) =  AN *   SZ12
C
      M=NK(K)
      DO 10 JK=1,40
      SUMS(JK)=0.0D0
   10 CONTINUE
C
C
C
C
C
       IF (M.EQ.0) GO TO 130
      DO   100   N  =  1,  M
      SUMS (9)  =  FUNA (K, K1,  N)
      SUMS (10) =  FUNB (K, K1,  N)
      SUMS (13) =  ADFUN(K, K1,  N)
      SUMS (14) =  BDFUN(K, K1,  N)
      SUMS (15) =  ADDFUN(K, K1,  N)
      SUMS (16) =  BDDFUN (K,  K1,  N)
      SUMS (19) =  SUMS (19) +   SUMS (13)* SZ11 (N, K)
      SUMS (20) =  SUMS (20) +   SUMS (9) * SZ12 (N, K)
      SUMS (28)  =  SUMS (28) +   SUMS (14) *  SZ11 (N,K)
      SUMS  (31) =  SUMS (31)  +  SUMS (10) * SZ12  (N,K)
       SUMS(25)=SUMS(25)+SUMS(9)*SZ11(N,K)
C
       SUMS(21)=0.D0
       SUMS(22)=0.D0
       SUMS(23)=0.D0
       SUMS(24)=0.D0
       SUMS(26)=0.D0
       SUMS(27)=0.D0
       SUMS (29) =0.D0
       SUMS (30)= 0.D0
C
      DO 75 IP=1,M
      NP=(N-1)*3+IP
C
      SUMS (11)  =  FUNA  (K,  K1,  IP)
      SUMS (12)  =  FUNB  (K,  K1,  IP)
      SUMS (17)  =  ADFUN (K,  K1,  IP)
      SUMS (18)  =  BDFUN (K,  K1,  IP)
      SUMS (21)  =  SUMS (21)   +   SUMS  (11) * SZ24 (NP,K)
      SUMS (22)  =  SUMS (22)   +   SUMS  (17) * SZ24 (NP,K)
      SUMS (23)  =  SUMS (23)   +   SUMS  (12) * SZ24 (NP,K)
      SUMS (24)  =  SUMS (24)   +   SUMS  (18) * SZ24 (NP,K)
      SUMS (26)  =   SUMS  (26)   +  SUMS  (12) * SZ25 (NP,K)
      SUMS (27)  =   SUMS  (27)   +  SUMS  (11) * SZ25 (NP,K)
      SUMS (29)  =   SUMS  (29)   +  SUMS  (11) * SZ26 (NP,K)
      SUMS  (30) =   SUMS   (30)  +  SUMS  (12) *  SZ26 (NP,K)
   75 CONTINUE
       SUMS (1) =SUMS (1) + SUMS (15)*SUMS(21)
       SUMS (2) =SUMS (2) + SUMS (13) *SUMS(22)
       SUMS(3) =SUMS(3) +SUMS (16)*SUMS(23)
       SUMS (4) =SUMS (4) +SUMS(14)*SUMS(24)
       SUMS (5) =SUMS(5) +SUMS(9)*SUMS(27)
       SUMS(6) =SUMS(6) +SUMS(10)*SUMS(26)
       SUMS (7) =SUMS(7) +SUMS (13)*SUMS (27)
       SUMS (8) =SUMS(8) + SUMS(14)*SUMS(26)
       SUMS (32) =SUMS (32) +SUMS (9)*SUMS(29)
       SUMS(33) =SUMS(33) +SUMS(10)*SUMS(30)
       SUMS(34)=SUMS(34)+SUMS(23)*SUMS(10)
       SUMS(35)=SUMS(35)+SUMS(21)*SUMS(9)
       SUMS(36)=SUMS(36)+SUMS(9)*SZ11(N,K)
       SUMS(37)=SUMS(37)+SUMS(10)*SZ11(N,K)
  100 CONTINUE
  130  CONTINUE
      TX=ZLKP(K)/ZLK(K)
C
      XID (1) = (- 1.0D0/ZLK  (K)) * (SUMS (1) + SUMS (2 ) + SUMS (3)
     . + SUMS (4 ))
C
      XID(1)=XID(1)+ZLKDP(K)*(1.0D0-(1.0D0/(2.0D0*ZLK(K)**2))*
     .(SUMS(5)+SUMS(6)))-(2.0D0*ZLKP(K)/ZLK(K)**2)*(SUMS(7)+SUMS(8))
C
      XID (1)  =  XID (1) - 0.5D0 * (ZLKP (K)/ ZLK(K))**2 *
     . (SUMS(32) + SUMS (33))
C
      XID (2)  =  SUMS (19) + TX *  SUMS (20)
C
      XID (3)  =  SUMS (28) + TX *  SUMS (31)
C
       IF (IOUT .NE. 1)PRINT 120, XID
  120 FORMAT (' XIDD(1)= ', G20.12,' XID(2)=',G20.12,' XID(3)=',
     .  G20.12)
C
      XI  (1)  =  ZLK (K) * SZ01 (K) - ((SUMS(34)+ SUMS (35))
     .              /(2.0D0 * ZLK (K)))
C
      XI  (2)  =  SUMS (36)
C
      XI  (3)  =  SUMS (37)
       IF (IOUT .NE.1)PRINT 110,XI
  110  FORMAT(' XI DATA ',3G20.12)
      RETURN
      END
      SUBROUTINE XXCAL(XX,ZLK,K,M)
C
C     'XXCAL' CALCULATES THE MOMENT OF INERTIA OF AN ELEMENT IN
C     THE ELEMENT FRAME.
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C
      COMMON/COMALP/ SZ02(10),SZ03(10),SZ04(10),SZ12(3,10),SZ13(3,10),
     .               SZ14(3,10),SZ15(3,10),SZ16(3,10),SZ21(9,10),
     .               SZ22(9,10),SZ23(9,10),SZ25(9,10),
     .               SZ26(9,10),SZ27(9,10),SZ28(9,10),SZ31(27,10),
     .               SZ32(27,10),SZ33(27,10),SZ34(27,10),SZ35(27,10),
     .               SZ41(81,10),SZ42(81,10),SZ43(81,10)
C
      COMMON/DEBUG3/ISWTCH
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      DIMENSION XX(3,3),ZLK(10)
C
      IF(ISWTCH.EQ.0) WRITE(6,20002) K,M
      SUM3=0.0D0
      SUM4=0.0D0
      SUM10=0.0D0
      SUM12=0.0D0
C
      DO 40 I=1,M
      SUM1=0.0D0
      SUM2=0.0D0
      SUM9=0.0D0
      SUM11=0.0D0
C
      DO 30 J=1,M
      SUM7=0.0D0
      SUM8=0.0D0
C
      DO 20 L=1,M
      SUM5=0.0D0
      SUM6=0.0D0
C
      DO 10 N=1,M
      A1=FUNA(K,K1,N)
      B1=FUNB(K,K1,N)
      IN=27*(I-1)+9*(J-1)+3*(L-1)+N
      SUM5=SUM5+A1*SZ41(IN,K)
      SUM6=SUM6+B1*SZ41(IN,K)
   10 CONTINUE
C
      A1=FUNA(K,K1,L)
      B1=FUNB(K,K1,L)
      SUM7=SUM7 + A1*SUM5
      SUM8=SUM8 + B1*SUM6
   20 CONTINUE
C
      A1=FUNA(K,K1,J)
      B1=FUNB(K,K1,J)
      IJ=3*(I-1)+J
      SUM1=SUM1+B1*SZ27(IJ,K)
      SUM2=SUM2+A1*SZ27(IJ,K)
      SUM9 =SUM9 + A1*(SUM7 + SUM8)
      SUM11=SUM11+ B1*(SUM7 + SUM8)
   30 CONTINUE
C
      A1=FUNA(K,K1,I)
      B1=FUNB(K,K1,I)
      SUM3 =SUM3  + B1*SUM1
      SUM4 =SUM4  + A1*SUM2
      SUM10=SUM10 + A1*SUM9
      SUM12=SUM12 + B1*SUM11
   40 CONTINUE
C
      XX(1,1)=ZLK(K)*ZLK(K)*SZ03(K)-SUM3-SUM4+
     .         ((SUM10 + SUM12)/(4.D0*ZLK(K)*ZLK(K)))
C
      SUM5=0.0D0
      SUM6=0.0D0
      SUM7=0.0D0
      SUM8=0.0D0
      SUM10=0.0D0
      SUM12=0.0D0
      SUM13=0.0D0
C
      DO 70 I=1,M
      SUM3=0.0D0
      SUM4=0.0D0
      SUM9=0.0D0
      SUM11=0.0D0
C
      DO 60 J=1,M
      SUM1=0.0D0
      SUM2=0.0D0
C
      DO 50 L=1,M
      A1=FUNA(K,K1,L)
      B1=FUNB(K,K1,L)
      IN=9*(I-1)+3*(J-1)+L
      SUM1=SUM1+A1*SZ31(IN,K)
      SUM2=SUM2+B1*SZ31(IN,K)
   50 CONTINUE
C
      A1=FUNA(K,K1,J)
      B1=FUNB(K,K1,J)
      IJ=3*(I-1)+J
      SUM3 =SUM3  + B1*SUM2
      SUM4 =SUM4  + A1*SUM1
      SUM9=SUM9+A1*SZ21(IJ,K)
      SUM11=SUM11+B1*SZ21(IJ,K)
   60 CONTINUE
C
      A1=FUNA(K,K1,I)
      B1=FUNB(K,K1,I)
      SUM5 =SUM5  + A1*(SUM3 + SUM4)
      SUM6=SUM6+A1*SZ14(I,K)
      SUM7 =SUM7  + B1*(SUM3 + SUM4)
      SUM8=SUM8+B1*SZ14(I,K)
      SUM10=SUM10 + A1*SUM9
      SUM12=SUM12 + A1*SUM11
      SUM13=SUM13 + B1*SUM11
   70 CONTINUE
C
      XX(1,2)=ZLK(K)*SUM6 - SUM5/(2.D0*ZLK(K))
      XX(2,1)=XX(1,2)
      XX(1,3)=ZLK(K)*SUM8 - SUM7/(2.D0*ZLK(K))
      XX(3,1)=XX(1,3)
      XX(2,2)=SUM10
      XX(2,3)=SUM12
      XX(3,2)=SUM12
      XX(3,3)=SUM13
C
      IF(ISWTCH.EQ.0) WRITE(6,10000) ((XX(I,J),I=1,3),J=1,3)
C
      RETURN
C
10000 FORMAT('0XX(K,I,J)',//3G15.5)
20002 FORMAT('0',5X,'XXCAL  ',2I4)
C
      END
      SUBROUTINE XXDCAL(XXD,ZLK,K,M)
C
C     'XXDCAL' CALCULATES THE MOMENT OF THE RELATIVE LINEAR MOMENTUM
C     OF AN ELEMENT IN THE ELEMENT FRAME.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER*4 P,Q,R
C
      COMMON/COMALP/ SZ02(10),SZ03(10),SZ04(10),SZ12(3,10),SZ13(3,10),
     .               SZ14(3,10),SZ15(3,10),SZ16(3,10),SZ21(9,10),
     .               SZ22(9,10),SZ23(9,10),SZ25(9,10),
     .               SZ26(9,10),SZ27(9,10),SZ28(9,10),SZ31(27,10),
     .               SZ32(27,10),SZ33(27,10),SZ34(27,10),SZ35(27,10),
     .               SZ41(81,10),SZ42(81,10),SZ43(81,10)
C
      COMMON/DEBUG3/ISWTCH
C
      COMMON/IPOOL1/ IGRAV,IDAMP,IK,K1,ITIM,IAB,IAPS,IBB,IBPS,NK(10),
     .               LK(10),LLK(10)
C
      DIMENSION XXD(3,3),ZLK(10)
C
      IF(ISWTCH.EQ.0) WRITE(6,20002) K,M
C
      SUM17=0.0D0
      SUM18=0.0D0
      SUM19=0.0D0
      SUM20=0.0D0
      SUM21=0.0D0
      SUM22=0.0D0
      SUM23=0.0D0
      SUM24=0.0D0
      SUM25=0.0D0
      SUM26=0.0D0
      SUM27=0.0D0
      SUM28=0.0D0
      SUM29=0.0D0
      SUM30=0.0D0
C
      DO 40 N=1,M
      SUM7=0.0D0
      SUM8=0.0D0
      SUM9=0.0D0
      SUM10=0.0D0
      SUM11=0.0D0
      SUM12=0.0D0
      SUM13=0.0D0
      SUM14=0.0D0
      SUM15=0.0D0
      SUM16=0.0D0
C
      DO 30 P=1,M
      SUM3=0.0D0
      SUM4=0.0D0
      SUM5=0.0D0
      SUM6=0.0D0
C
      DO 20 Q=1,M
      SUM1=0.0D0
      SUM2=0.0D0
C
      DO 10 R=1,M
      A1=FUNA(K,K1,R)
      B1=FUNB(K,K1,R)
      IR=27*(N-1)+9*(P-1)+3*(Q-1)+R
      SUM1=SUM1+B1*SZ41(IR,K)
   10 SUM2=SUM2+A1*SZ41(IR,K)
C
      A1=FUNA(K,K1,Q)
      B1=FUNB(K,K1,Q)
      IQ=9*(N-1)+3*(P-1)+Q
C
      SUM3=SUM3 + B1*SUM1
      SUM4=SUM4 + A1*SUM2
      SUM5=SUM5+B1*SZ31(IQ,K)
   20 SUM6=SUM6+A1*SZ31(IQ,K)
C
      A1=FUNA(K,K1,P)
      B1=FUNB(K,K1,P)
      AD1=ADFUN(K,K1,P)
      BD1=BDFUN(K,K1,P)
      IP=3*(N-1)+P
C
      SUM7=SUM7+B1*SZ27(IP,K)
      SUM8=SUM8+A1*SZ27(IP,K)
      SUM9 =SUM9  + A1*(SUM3 + SUM4)
      SUM10=SUM10 + B1*(SUM3 + SUM4)
      SUM11=SUM11 + B1*SUM5
      SUM12=SUM12 + A1*SUM6
      SUM13=SUM13 + BD1*SUM5
      SUM14=SUM14 + AD1*SUM6
      SUM15=SUM15+AD1*SZ21(IP,K)
   30 SUM16=SUM16+BD1*SZ21(IP,K)
C
      A1  = FUNA(K,K1,N)
      B1  = FUNB(K,K1,N)
      AD1= ADFUN(K,K1,N)
      BD1= BDFUN(K,K1,N)
C
      SUM17=SUM17 + BD1*SUM7
      SUM18=SUM18 + AD1*SUM8
      SUM19=SUM19 + AD1*SUM9
      SUM20=SUM20 + BD1*SUM10
      SUM21=SUM21 + AD1*(SUM11 + SUM12)
      SUM22=SUM22+AD1*SZ14(N,K)
      SUM23=SUM23 + A1*(SUM13 + SUM14)
      SUM24=SUM24 + A1*SUM15
      SUM25=SUM25 + A1*SUM16
      SUM26=SUM26 + B1*(SUM13 + SUM14)
      SUM27=SUM27 + B1*SUM15
      SUM28=SUM28 + B1*SUM16
      SUM29=SUM29 + BD1*(SUM11 + SUM12)
   40 SUM30=SUM30+BD1*SZ14(N,K)
C
      XXD(1,1)=-(SUM18+SUM17) + ((SUM19+SUM20)/(2.D0*ZLK(K)*ZLK(K)))
      XXD(1,2)=ZLK(K)*SUM22 - SUM21/(2.D0*ZLK(K))
      XXD(1,3)=ZLK(K)*SUM30 - SUM29/(2.D0*ZLK(K))
      XXD(2,1)=-SUM23/ZLK(K)
      XXD(2,2)=SUM24
      XXD(2,3)=SUM25
      XXD(3,1)=-SUM26/ZLK(K)
      XXD(3,2)=SUM27
      XXD(3,3)=SUM28
C
      IF(ISWTCH.EQ.0) WRITE(6,10000) ((XXD(I,J),J=1,3),I=1,3)
C
      RETURN
C
10000 FORMAT('0XXD(K,J,I)',//3G15.5)
20002 FORMAT('0',5X,'XXDCAL ',2I4)
C
      END
      SUBROUTINE XYZPLH(X)
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8 J2,J3,J4,J22
C
C     SUBROUTINE TO CONVERT INERTIAL XYZ COORDINATES TO LATITUDE,
C     LONGITUDE AND HEIGHT
C
      COMMON/CNBODY/ J2,J3,J4,J22,ZJ20,ZMU,WWO,FLAT,AEARTH
C
      COMMON/CONSTS/ PI,TWOPI,RADIAN
C
      COMMON/ECNSTS/ THETA1,THETGO(12)
C
      COMMON/IDATE1/ IY,IM,JWDAY
C
      COMMON/RPOOL1/ RHOK(10),TIME,SA(3,3),FM1(3,3),ZLK(10),OMEG(3),
     .               ZLKP(10),ZLKDP(10),CMAT(3,3),GBAR(3,3),YBCM(3),
     .               ZBZK(3,10),FCM(3,3),DTO,PHID,PHI1
C
      COMMON/SUBPOS/ ALAT,ALONG,HGT
C
      DIMENSION X(3)
C
      CALL TCNVRT(YY,ZM,DAORSC,TLAST,TIME,2)
      DAY=JWDAY
      IY1=IY-67
      THGO=THETGO(IY1)*RADIAN
      THE1=THETA1*RADIAN
      THE2=THE1 + TWOPI
      THETAG=THGO+DAY*THE1+DAORSC*THE2/8.64D4
      SINTH=DSIN(THETAG)
      COSTH=DCOS(THETAG)
C                       CALCULATE EARTH FIXED COORDINATES
      XE=COSTH*X(1) + SINTH*X(2)
      YE=COSTH*X(2) - SINTH*X(1)
      ZE=X(3)
C     **** CALCULATE ECCENTRICITY OF CENTRAL BODY (USUALLY EARTH) ******
      FL=1.D0/FLAT
      ECC=2.D0*FL-FL**2
C     **** CALCULATE LATITUDE,LONGITUDE,AND HEIGHT ****
      REQ=DSQRT(XE*XE+YE*YE)
      ALONG=0.0D0
      IF(XE.NE.0.0D0.OR.YE.NE.0.0D0) ALONG=DATAN2(YE,XE)
      IF(ALONG.LT.0.0D0) ALONG=ALONG+TWOPI
   10 ESQ1=1.0D0-ECC
      ALAT=DATAN2(ZE,REQ)
      SINPHI=DSIN(ALAT)
      RSAT=DSQRT(ZE*ZE+REQ*REQ)
      DEN=DSQRT(ESQ1+SINPHI*SINPHI*ECC)
      HGT=RSAT-AEARTH*(1.0D0-FL)/DEN
      RETURN
      END
      SUBROUTINE YRMODA(TIME,IMN,IDY,IHOUR,IMINS,ISECS)
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON/IMAIN1/ IDATE,LSAVE,INOPT,IPLOT,NUMEQS,IPLTPE,IORB,ITAPE
C
      DIMENSION JULDAY(12)
      DATA JULDAY /0,31,59,90,120,151,181,212,243,273,304,334/
C
      IYR=IDATE/10000
      IDY=TIME/8.64D4+1.0D0
      ISECS=TIME-FLOAT(IDY-1)*8.64D4
      IHOUR=ISECS/3600
      IMINS=(ISECS-IHOUR*3600)/60
      ISECS=MOD(ISECS,60)
    1 ID=0
      IXDAY=0
      IF (MOD(IYR,4) .EQ. 0  .AND.  IDY .GE. 60)  ID=1
      IF (IDY .EQ. 60  .AND.  ID .EQ. 1)  IXDAY=1
      IDY=IDY-ID
      DO 2 J=1,12
      IF (IDY .LE. JULDAY(J))  GO TO 3
    2 IMN=J
      IF (IDY .LE. 365)  GO TO 3
      IYR=IYR+1
      IDY=IDY-365
      GO TO 1
    3 IDY=IDY-JULDAY(IMN)+IXDAY
      RETURN
      END
      SUBROUTINE ZEROMN(P,N)
      DIMENSION P(1)
      SA=P(1)
      DO 110 I=2,N
  110 SA=SA+P(I)
      SA=SA/FLOAT(N)
      DO 111 I=1,N
  111 P(I)=(P(I)-SA)
    1 FORMAT(/,20X,'SA IN ZEROMN =',E16.8)
      WRITE(6,1) SA
      RETURN
      END
      SUBROUTINE ZETACL(CKMAT,XID,XXD,ZBZK,XVEC)
C
C     'ZETACL' DETERMINES THE MOMENT OF RELATIVE LINEAR MOMENTUM OF AN
C     ELEMENT IN THE BODY FRAME.
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
      DIMENSION ZFZ(3),RODB(3),RFDB(3),CKMAT(3,3),XID(3),XXD(3,3),
     .          ZBZK(3),XVEC(3)
C
C
      CALL MULTM(CKMAT,XID,ZFZ,3,1,3)
      RODB(1)=ZBZK(2)*ZFZ(3) - ZBZK(3)*ZFZ(2)
      RODB(2)=ZBZK(3)*ZFZ(1) - ZBZK(1)*ZFZ(3)
      RODB(3)=ZBZK(1)*ZFZ(2) - ZBZK(2)*ZFZ(1)
C
      XVEC(1)=XXD(2,3) - XXD(3,2)
      XVEC(2)=XXD(3,1) - XXD(1,3)
      XVEC(3)=XXD(1,2) - XXD(2,1)
C
      CALL MULTM(CKMAT,XVEC,RFDB,3,1,3)
C
      CALL MSUM(RODB,RFDB,RSUM,3)
C
      RETURN
      END
      SUBROUTINE ZSPIN(TSTOP,FREQ,DELTAT,LSAVE,TSTART,JUMP)
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
C        'ZSPIN' DETERMINES THE INITIAL AND FINAL TIMES ASSOCIATED WITH
C        THE CONTROL AND REMOVAL OF CONTROL ABOUT THE Z-AXIS.
C
      COMMON/ZSPINR/ DTZMA,PZDT,CMZO,ISPIN3,JSPIN
C
      GO TO (10,20,30),JUMP
   10 JUMP=2
      TSAVET=TSTOP
      FSAVE=FREQ
      DSAVE=DELTAT
      TSTOP=TSTART + DTZMA
      IF(DTZMA.GE.FREQ) GO TO 15
      FREQ=DTZMA/4.D0
      DELTAT=FREQ/4.D1
      IF(FREQ.EQ.0) FREQ=FSAVE
      IF(FREQ.EQ.0) DELTAT=DSAVE
   15 TS=DMOD(TSTOP,8.64D4)
      HMS=HMSOUT(TS)
      WRITE(6,10000) HMS
      WRITE(6,10003) FREQ,DELTAT
C
C
      RETURN
C
C
   20 JUMP=3
      JSPIN=10
      LSAVE=1
      TSTOP=TSTOP + PZDT
      DELTAT=FREQ/4.D1
      IF(PZDT.GE.FSAVE) GO TO 25
      FREQ=PZDT/4.D0
      DELTAT=FREQ/4.D1
   25 TS=DMOD(TSTOP,8.64D4)
      HMS=HMSOUT(TS)
      WRITE(6,10001) HMS
      WRITE(6,10003) FREQ,DELTAT
C
C
      RETURN
C
C
   30 ISPIN3=0
      LSAVE=1
      JUMP=1
      TSTOP=TSAVET
      FREQ=FSAVE
      DELTAT=DSAVE
      TS=DMOD(TSTOP,8.64D4)
      HMS=HMSOUT(TS)
      WRITE(6,10002) HMS
      WRITE(6,10003) FREQ,DELTAT
C
C
      RETURN
C
10000 FORMAT('0',3X,'Z-SPIN AXIS MOMENT ACTIVATED'//' ',3X,
     .              'INTEGRATING TO THE LEADING EDGE OF PULSE AT ',
     .               F10.3)
C
10001 FORMAT('0',3X,'SPIN AXIS MOMENT'//'0',3X,'CONTINUING PROBLEM TO ',
     .              F10.3)
C
10002 FORMAT('0',3X,'SPIN AXIS PROBLEM OFF'//'0',3X,
     .             'CONTINUING PROBLEM TO ',F10.3)
C
10003 FORMAT('0',3X,'WITH A PRINT FREQUENCY OF ',G15.5/' ',3X,
     .              'AND A DELTA-TIME OF ',G15.5)
C
      END
